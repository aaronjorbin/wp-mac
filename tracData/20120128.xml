<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #10142 (Add metadata support for taxonomy terms) updated</title>
      
        <dc:creator>Chouby</dc:creator>

      <pubDate>Sat, 28 Jan 2012 21:29:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10142#comment:57</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10142#comment:57/1327786178867626</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16092 (add_permastruct() should allow more control over ...) closed</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Sat, 28 Jan 2012 21:01:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16092#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16092#comment:5/1327784460440152</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19779" title="Use new $args parameter for (WP_Rewrite::)add_permastruct(). Fixes ..."&gt;[19779]&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Use new $args parameter for (WP_Rewrite::)add_permastruct(). Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/16092" title="#16092: enhancement: add_permastruct() should allow more control over ... (closed: fixed)"&gt;#16092&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Use array_intersect_key() to keep WP_Rewrite::$extra_permastructs free of unnecessary/unknown keys + values.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [19779]: Use new $args parameter for (WP_Rewrite::)add_permastruct(). Fixes ...</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Sat, 28 Jan 2012 21:00:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19779</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19779/1327784459555776</guid>
      <description>&lt;p&gt;
Use new $args parameter for (WP_Rewrite::)add_permastruct(). Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/16092" title="#16092: enhancement: add_permastruct() should allow more control over ... (closed: fixed)"&gt;#16092&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Use array_intersect_key() to keep WP_Rewrite::$extra_permastructs free of unnecessary/unknown keys + values.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #19876 (generate_rewrite_rules() for posts/pages should set $paged and ...) closed</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Sat, 28 Jan 2012 20:40:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19876#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19876#comment:3/1327783256206046</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19778" title="Redirect bare category URLs for permalink structures starting with ..."&gt;[19778]&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Redirect bare category URLs for permalink structures starting with %category%. Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19876" title="#19876: defect (bug): generate_rewrite_rules() for posts/pages should set $paged and ... (closed: fixed)"&gt;#19876&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
When using a structure like /%category%/%postname%/ it might be thought that /uncategorized/&lt;br /&gt;
(missing the "/category/" base) results in the category archive. Previously this worked due to&lt;br /&gt;
$walk_dirs = true for the post permalink structure, but canonical didn't redirect it. Now&lt;br /&gt;
there is no rewrite rule to match =&amp;gt; 404. The fix is to use a canonical redirect.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [19778]: Redirect bare category URLs for permalink structures starting with ...</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Sat, 28 Jan 2012 20:40:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19778</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19778/1327783255416848</guid>
      <description>&lt;p&gt;
Redirect bare category URLs for permalink structures starting with %category%. Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19876" title="#19876: defect (bug): generate_rewrite_rules() for posts/pages should set $paged and ... (closed: fixed)"&gt;#19876&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
When using a structure like /%category%/%postname%/ it might be thought that /uncategorized/
(missing the "/category/" base) results in the category archive. Previously this worked due to
$walk_dirs = true for the post permalink structure, but canonical didn't redirect it. Now
there is no rewrite rule to match =&amp;gt; 404. The fix is to use a canonical redirect.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>update-filter-patch-4.patch attached to Ticket #17838</title>
      
        <dc:creator>usermrpapa</dc:creator>

      <pubDate>Sat, 28 Jan 2012 19:21:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17838/update-filter-patch-4.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17838/update-filter-patch-4.patch/1327778494961033</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #17838 (Allow plugins to change update count) updated</title>
      
        <dc:creator>usermrpapa</dc:creator>

      <pubDate>Sat, 28 Jan 2012 19:20:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17838#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17838#comment:9/1327778418471078</guid>
      <description>&lt;p&gt;
refreshed patch for wp 3.4... hoping to get it in this this version so plugins can affect the update counts...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19913 (multiple plugins getting "undefined function is_rtl()" under WP 3.3) updated</title>
      
        <dc:creator>convissor</dc:creator>

      <pubDate>Sat, 28 Jan 2012 18:25:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19913#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19913#comment:3/1327775154855908</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19913#comment:1" title="Comment 1"&gt;duck_&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So, wp_admin_css() was never safe to call this early (plugins_loaded),
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thank you for your excellent triage.  What is the right way to include style sheets in this location, please?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18493 (HTML emails) updated</title>
      
        <dc:creator>wojtek.szkutnik</dc:creator>

      <pubDate>Sat, 28 Jan 2012 18:24:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18493#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18493#comment:24/1327775076514994</guid>
      <description>&lt;p&gt;
I'm around most of the days 8(9)am-4pm UTC. During the next few days I'm in London so I won't be able to participate in any chats before Tuesday
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>markoheijnen</dc:creator>

      <pubDate>Sat, 28 Jan 2012 18:17:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:11/1327774673744749</guid>
      <description>&lt;p&gt;
For readability yet again whole the text
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Method now only can be used for new posts
&lt;/li&gt;&lt;li&gt;Terms now can be added with id or name. Name only works for non-hierarchical taxonomies to avoid confusion where there may be another child with the same name.
&lt;/li&gt;&lt;li&gt;When a term doesn't exists it will get added.
&lt;/li&gt;&lt;li&gt;There is now a hard check if the terms array have integers. Not sure why it is needed since xmlrpc already says the value is an integer
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>wp.newPost.3.patch attached to Ticket #18429</title>
      
        <dc:creator>markoheijnen</dc:creator>

      <pubDate>Sat, 28 Jan 2012 18:16:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/18429/wp.newPost.3.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/18429/wp.newPost.3.patch/1327774600118073</guid>
      <description>&lt;ul&gt;&lt;li&gt;Method now only can be used for new posts - Terms now can be added with id or name. Name only works for non-hierarchical taxonomies to avoid confusion where there may be another child with the same name. - When a term doesn't exists it will get added. - There is now a hard check if the terms array have integers. Not sure why it is needed since xmlrpc already says the value is an integer
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19915 (Add unit tests for AtomPub API) created</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 28 Jan 2012 16:25:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19915</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19915/1327767915291174</guid>
      <description>&lt;p&gt;
Apologies if this is a duplicate, I couldn't find any.
&lt;/p&gt;
&lt;p&gt;
The AtomPub API is hideously under-tested. Since it's a part of WordPress that doesn't get touched often, it's also one of the most crucial components that needs testing.
&lt;/p&gt;
&lt;p&gt;
I'm working on &lt;a class="ext-link" href="https://github.com/rmccue/Gorilla"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;a test runner called Gorilla&lt;/a&gt;, which is designed as a replacement for the APE (Atom Protocol Exerciser). This will have a port of all the APE unit tests to PHP, and I'm also going to start writing some new ones for all the new APIs that are being added in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/18430" title="#18430: task (blessed): Edit custom post types via XMLRPC (closed: fixed)"&gt;#18430&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/18431" title="#18431: task (blessed): Delete custom posts via XMLRPC (closed: fixed)"&gt;#18431&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/18432" title="#18432: task (blessed): Retrieve a post via XML-RPC (closed: fixed)"&gt;#18432&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/18433" title="#18433: task (blessed): Retrieve a list of posts  via XML-RPC (closed: fixed)"&gt;#18433&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
These are specifically designed to be able to be independent of Gorilla, so that it will be easy to bring into a normal PHPUnit test suite, and hopefully will be able to run as part of the normal WordPress unit test suite. (Although they'll still need some components of Gorilla to work)
&lt;/p&gt;
&lt;p&gt;
(This is filed under Unit Tests, but AtomPub might be a better component)
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #16713 (Wordpress removes title attribute from images) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 15:29:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16713#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16713#comment:4/1327764571040031</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Going to look into this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19913 (multiple plugins getting "undefined function is_rtl()" under WP 3.3) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 28 Jan 2012 15:21:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19913#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19913#comment:2/1327764108211523</guid>
      <description>&lt;p&gt;
FWIW, I've also seen a lot of similar topics for PopUp Domination plugin. The reason was exactly the same: &lt;code&gt;wp_admin_css( 'theme-editor' )&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This looks like a pure plugin issue to me. They need to be updated appropriately for WordPress 3.3.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19914 (wp-app.php assumes elements exist) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 28 Jan 2012 15:02:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19914#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19914#comment:4/1327762976453167</guid>
      <description>&lt;p&gt;
Oh, another good idea would be to do &lt;code&gt;error_reporting(0)&lt;/code&gt; to avoid outputting any errors at all, regardless of WP_DEBUG, as it's not a HTML endpoint.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19914 (wp-app.php assumes elements exist) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 14:44:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19914#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19914#comment:3/1327761868211607</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt;, &lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [19777]: Correct the datatype for the skip_frames argument in the phpDoc props ...</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 14:36:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19777</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19777/1327761376376082</guid>
      <description>&lt;p&gt;
Correct the datatype for the skip_frames argument in the phpDoc props Rarst.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #19913 (multiple plugins getting "undefined function is_rtl()" under WP 3.3) updated</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Sat, 28 Jan 2012 13:50:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19913#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19913#comment:1/1327758654249444</guid>
      <description>&lt;p&gt;
For this particular plugin (login-lock) this is caused by &lt;code&gt;wp_admin_css( 'login' );&lt;/code&gt;. Because the login.css styles no longer exist they aren't registered with WP_Styles. So, when wp_admin_css() tries to query() for 'login' nothing is found and the function doesn't return early and it falls through to the last three lines which print out "&amp;lt;link rel="stylesheet"..." and critically calls &lt;code&gt;is_rtl()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
So, wp_admin_css() was never safe to call this early (plugins_loaded), but the problem only emerged in 3.3 due to the merging of admin CSS files.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19914 (wp-app.php assumes elements exist) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 28 Jan 2012 13:41:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19914#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19914#comment:2/1327758065155566</guid>
      <description>&lt;p&gt;
Some extra ones from after creation:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Notice:  Undefined property: AtomEntry::$content in wp-app.php on line 427
Notice:  Undefined property: AtomEntry::$published in wp-app.php on line 429
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19914 (wp-app.php assumes elements exist) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 28 Jan 2012 13:35:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19914#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19914#comment:1/1327757759485628</guid>
      <description>&lt;p&gt;
(To be fair though, some of those are caused by my missing XMLNS, but the errors are still valid. wp-app.php shouldn't have PHP errors with invalid input)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19914 (wp-app.php assumes elements exist) created</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 28 Jan 2012 13:33:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19914</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19914/1327757631482290</guid>
      <description>&lt;p&gt;
First bug found by Gorilla, yay!
&lt;/p&gt;
&lt;p&gt;
So, submitting a very sparse entry gives errors.
&lt;/p&gt;
&lt;p&gt;
Submitted document:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;entry&amp;gt;
    &amp;lt;title&amp;gt;From a Gorilla!&amp;lt;/title&amp;gt;
    &amp;lt;id&amp;gt;tag:ryanmccue.info,2012:016540021841&amp;lt;/id&amp;gt;
    &amp;lt;summary type="text"&amp;gt;Summary from a &amp;amp;lt;strong&amp;amp;gt;&amp;amp;amp;lt;Gorilla&amp;amp;amp;gt;&amp;amp;lt;/strong&amp;amp;gt; at 2012-01-28T23:30:20+10:00&amp;lt;/summary&amp;gt;
&amp;lt;/entry&amp;gt;
&lt;/pre&gt;&lt;p&gt;
Gives the following errors:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Notice:  Trying to get property of non-object in wp-app.php on line 403
Warning:  Invalid argument supplied for foreach() in wp-app.php on line 403
Notice:  Trying to get property of non-object in wp-app.php on line 426
Notice:  Trying to get property of non-object in wp-app.php on line 427
Notice:  Trying to get property of non-object in wp-app.php on line 428
Notice:  Trying to get property of non-object in wp-app.php on line 429
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #19913 (multiple plugins getting "undefined function is_rtl()" under WP 3.3) created</title>
      
        <dc:creator>convissor</dc:creator>

      <pubDate>Sat, 28 Jan 2012 13:04:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19913</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19913/1327755875612404</guid>
      <description>&lt;p&gt;
It seems the order of file includes has changed under WP 3.3, leading to a situation where is_rtl() is not defined in time for use by plugin administrator functionality.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://wordpress.org/support/topic/33-fatal-error-with-login-lock?replies=4"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/33-fatal-error-with-login-lock?replies=4&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://www.google.com/search?q=wordpress+3.3+plugin+is_rtl&amp;amp;gbv=1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.google.com/search?q=wordpress+3.3+plugin+is_rtl&amp;amp;gbv=1&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:55:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:7/1327755307622765</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19852 (Don't load admin strings on the frontend) updated</title>
      
        <dc:creator>Chouby</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:49:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19852#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19852#comment:18/1327754994984495</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19831 (Multisite strings in standard translation) updated</title>
      
        <dc:creator>Chouby</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:49:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19831#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19831#comment:12/1327754985959972</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [19776]: Separated into 3 commits for good luck. See r19775. </title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:37:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19776</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19776/1327754228123974</guid>
      <description>&lt;p&gt;
Separated into 3 commits for good luck. See &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19775" title="Separating my commits so that my spelling mistakes are plain for ..."&gt;r19775&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19775]: Separating my commits so that my spelling mistakes are plain for ...</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:32:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19775</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19775/1327753975361315</guid>
      <description>&lt;p&gt;
Separating my commits so that my spelling mistakes are plain for everyone to see. Fix another mistake props duck_.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #19912 (Add Widget Groups and Locations) updated</title>
      
        <dc:creator>sabreuse</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:30:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19912#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19912#comment:3/1327753846238527</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19912 (Add Widget Groups and Locations) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:27:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19912#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19912#comment:2/1327753659031020</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19589 (Simplify the recording of backtraces) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:25:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19589#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19589#comment:7/1327753559524346</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19774" title="Fix my spelling mistakes and typos in the wp_debug_backtrace_summary() ..."&gt;[19774]&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Fix my spelling mistakes and typos in the wp_debug_backtrace_summary() phpDoc props duck_ see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19589" title="#19589: defect (bug): Simplify the recording of backtraces (closed: fixed)"&gt;#19589&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [19774]: Fix my spelling mistakes and typos in the wp_debug_backtrace_summary() ...</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:25:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19774</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19774/1327753558701638</guid>
      <description>&lt;p&gt;
Fix my spelling mistakes and typos in the wp_debug_backtrace_summary() phpDoc props duck_ see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19589" title="#19589: defect (bug): Simplify the recording of backtraces (closed: fixed)"&gt;#19589&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>markoheijnen</dc:creator>

      <pubDate>Sat, 28 Jan 2012 12:05:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:10/1327752355889303</guid>
      <description>&lt;p&gt;
I will look into the taxonomy code today. It's now on id's. I'm not sure if names will work when the taxonomy is hierarchical. Since you can have the same name when it isn't on the same level.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19589 (Simplify the recording of backtraces) closed</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 11:56:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19589#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19589#comment:6/1327751811724513</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19773" title="Refactor WPDB::get_caller() into wp_debug_backtrace_summary() and ..."&gt;[19773]&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Refactor WPDB::get_caller() into wp_debug_backtrace_summary() and improve the functionality to provide enhanced context and a standardised default pretty format. Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19589" title="#19589: defect (bug): Simplify the recording of backtraces (closed: fixed)"&gt;#19589&lt;/a&gt; &lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [19773]: Refactor WPDB::get_caller() into wp_debug_backtrace_summary() and ...</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 11:56:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19773</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19773/1327751810164037</guid>
      <description>&lt;p&gt;
Refactor WPDB::get_caller() into wp_debug_backtrace_summary() and improve the functionality to provide enhanced context and a standardised default pretty format. Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19589" title="#19589: defect (bug): Simplify the recording of backtraces (closed: fixed)"&gt;#19589&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #18493 (HTML emails) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 28 Jan 2012 10:57:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18493#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18493#comment:23/1327748277325863</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/18493#comment:22" title="Comment 22"&gt;westi&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ol&gt;&lt;li&gt;How much should be templates versus "magic" - i.e. Do we need to have HTML versions of every email body we send or can we just auto-tag the text using autop / a simple markup language.
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
This is actually harder than it seems, but it is possible. The easiest way is to use a HTML-to-Markdown converter, since Markdown is based on email formatting.
&lt;/p&gt;
&lt;p&gt;
In any case, if we want to even think about including full post content in text emails, we'll need this. Personally, the excerpt is enough for my needs, but I can see that being different for other people. It depends on what we'll want in core.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ol start="3"&gt;&lt;li&gt;Can the emails be made to be themable enough by just letting the header/footer be customisable
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
Given the state of CSS support in email clients, no. Unfortunately, you often need to be able to use inline styling (&lt;a class="ext-link" href="http://www.email-standards.org/clients/gmail/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Gmail does not support anything but inline styling&lt;/a&gt;, for example).
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Phase 1 - This may be starting too small but also should be something someone could pull together in a couple of hours as a proof-of-not-a-concept ;)
&lt;/p&gt;
&lt;p&gt;
Create an api function &lt;code&gt;wp_html_mail( $to, $subject, $message, $headers = '', $attachments = array() )&lt;/code&gt; which mirrors the API of &lt;code&gt;wp_mail()&lt;/code&gt; but takes the message and wraps in up into a nice HTML blanket.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
What would be the advantage of this over the current proposed solution? (That is, overloading &lt;code&gt;wp_mail&lt;/code&gt;'s body parameter)
&lt;/p&gt;
&lt;p&gt;
I think the filtering would have to be done pre-&lt;code&gt;wp_mail&lt;/code&gt;, wherever it's called, given the different formatting of all the different emails that are sent.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This api has filters which allow a theme to do simple child theming of the emails:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Replace the CSS that we output in the header of the email - I believe based on my understanding of the limits of HTML emails this will allow for
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
As I noted above, email client support isn't good enough to be able to do this, unfortunately. One possibility is a per-element filter, but that seems somewhat crazy to me. I think being able to replace the whole thing is going to be necessity.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Should we implement a simplified templating language?
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I think when we review these we will find that on balance an output buffering based template system is best because it gives theme developers the most familiar experience and gives them full control.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I have to agree. While output buffering is fairly ugly from our perspective, it's much nicer from a theming perspective. To me, a templating language is not WordPress-y enough, and I think it would likely be a bit confusing.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It would be great if we could all get together in IRC early next week to discuss - I'm around most week days 9am-5pm UTC.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm around most days from 3am-5pm UTC, and I can be on IRC for all of that time if I remember to open my client. :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18493 (HTML emails) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 10:37:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18493#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18493#comment:22/1327747072851456</guid>
      <description>&lt;p&gt;
I've been thinking about this a lot so sorry for not getting back to you sooner and for the length of this comment.
&lt;/p&gt;
&lt;p&gt;
So far I have seen a solution which I feel comfortable with in core so I thought it was probably best to set out some goals as I see them for the first version of HTML emails in core and then we can discuss how best to move forward.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
1 Update WordPress so that all the emails it sends have a HTML version.
2 Provide an API that makes it really easy for plugins to send HTML emails.
3 Provide an API that makes it really easy for themes to customise the styling of the emails to integrate with a site design.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think the key issue here is how can we make (2) and (3) as simple as possible and I think there are a few options/pieces to the puzzle:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
1 How much should be templates versus "magic" - i.e. Do we need to have HTML versions of every email body we send or can we just auto-tag the text using autop / a simple markup language.
2 Should we use php templates which print the output and output buffering or functions which return the HTML.
3 Can the emails be made to be themable enough by just letting the header/footer be customisable
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think that however deep we go into templating to make this truly extendable by plugins and overridable by themes we should start small and then build up as we find problems issues we need to address and discuss and address each one.
&lt;/p&gt;
&lt;p&gt;
As such I think the following phased approach would be a good way to address HTML emails for core:
&lt;/p&gt;
&lt;p&gt;
Phase 1 - This may be starting too small but also should be something someone could pull together in a couple of hours as a proof-of-not-a-concept ;)
&lt;/p&gt;
&lt;p&gt;
Create an api function &lt;code&gt;wp_html_mail( $to, $subject, $message, $headers = '', $attachments = array() )&lt;/code&gt; which mirrors the API of &lt;code&gt;wp_mail()&lt;/code&gt; but takes the message and wraps in up into a nice HTML blanket.
This api has filters which allow a theme to do simple child theming of the emails:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Replace the CSS that we output in the header of the email - I believe based on my understanding of the limits of HTML emails this will allow for
&lt;/li&gt;&lt;li&gt;Replace the logo used in the email to identify the site.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The header and footer html would not be customisable.
&lt;/p&gt;
&lt;p&gt;
Then we can review what each of the emails core generates looks like with this simple api and see if we are happy or need to move on to Phase 2
&lt;/p&gt;
&lt;p&gt;
Phase 2 - Make things more flexible, extensible.
&lt;/p&gt;
&lt;p&gt;
Slowly extend the api to support templates, investigating the following:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Can we make a solely function based template system where we have default functions in core and themes can replace them (either through a registration API or like pluggable functions)?
&lt;/li&gt;&lt;li&gt;Can we make an output buffering based solution not be ugly?
&lt;/li&gt;&lt;li&gt;Should we implement a simplified templating language?
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I think when we review these we will find that on balance an output buffering based template system is best because it gives theme developers the most familiar experience and gives them full control. However, I would still like to keep simplicity in mind and if we can come up with a lightly templated solution which doesn't give full control over the content area of the emails - so we can keep a common format and just makes it easier to change the general style/header/footer and for plugins to make use of this style/header/footer with there own custom bodies then we may have found the perfect middle ground ;)
&lt;/p&gt;
&lt;p&gt;
I know this sounds a lot like starting from scratch but I don't see it that way we have got a lot of excellent work already done dealing with the intricacies of getting HTML emails that look nice in email clients and the discussion now is more how we can adapt these to make them integrate into core in the best way.
&lt;/p&gt;
&lt;p&gt;
It would be great if we could all get together in IRC early next week to discuss - I'm around most week days 9am-5pm UTC.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jan 2012 09:32:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:9/1327743173524676</guid>
      <description>&lt;p&gt;
Some feedback on the patch:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It looks like maybe some post editing code slipped into wp.newPost - I think we should only need to support the supplying of &lt;code&gt;$post_data['ID']&lt;/code&gt; for wp.editPost.
&lt;/li&gt;&lt;li&gt;In the Taxonomy/Terms section of the code it is unclear whether you expect the client to pass in category/tag names or IDs - I think names are preferable and it would be clearer to name things like {{term_id}} as {{term_name}}
&lt;/li&gt;&lt;li&gt;Minor coding style variable naming issue - &lt;code&gt;$thisEnclosure&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Future:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We should consider if we should auto-create new tags/cats based on what the user has entered in the App UI so as to save on multiple requests - If I want to tag my post with the tag "Awesome" then I don't think we should reject that but instead create the tag as a result of the newPost call.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19910 (Appearance Improvements: Theme Customization Frame) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 28 Jan 2012 08:03:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19910#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19910#comment:2/1327737828162140</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 28 Jan 2012 08:03:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:6/1327737820340516</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19912 (Add Widget Groups and Locations) updated</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Sat, 28 Jan 2012 04:56:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19912#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19912#comment:1/1327726601330579</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/18466" title="#18466: feature request: Reorganizing Widget Areas (closed: wontfix)"&gt;#18466&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Sat, 28 Jan 2012 04:54:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:5/1327726488902616</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19912 (Add Widget Groups and Locations) created</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Sat, 28 Jan 2012 04:54:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19912</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19912/1327726453003084</guid>
      <description>&lt;p&gt;
Currently, if a widget cannot be properly matched to a sidebar when switching themes, it is moved to the "Inactive widgets" section (debated for quite a while here: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17979" title="#17979: task (blessed): Avoid losing widgets when switching themes (closed: fixed)"&gt;#17979&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
With the addition of the planned appearance improvements, it would be nice if we could let the user manipulate widgets as a group. Instead of trying to be too clever, we can let the user review where the widgets are positioned in their theme.
&lt;/p&gt;
&lt;p&gt;
Conceptually, this is very similar to how nav menu locations currently operate. Menu items are grouped in menus (created by the user), which can be assigned to menu locations (created by the theme). Likewise, widgets would be organized into groups (created by the user), and could be assigned to widget locations (created by the theme). Currently, "widget areas" are on double-duty — they act as both "widget groups" and "widget locations".
&lt;/p&gt;
&lt;p&gt;
I think the first step is to add the concept of "widget groups" into the current API and turn the existing "widget areas" into locations mapped to these groups.
&lt;/p&gt;
&lt;p&gt;
If we're looking to compartmentalize the patches, these initial changes could initially be added without modifying the widgets UI. Instead, we could temporarily link a widget group to a widget area behind the scenes. That said, the benefits could only be fully realized with a few tweaks to the widgets UI.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #17902 (Add a "Plugin Details" link to installed plugins.) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Sat, 28 Jan 2012 01:33:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17902#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17902#comment:14/1327714420897296</guid>
      <description>&lt;p&gt;
So, instead of &lt;code&gt;#plugin-information pre&lt;/code&gt;, we would use &lt;code&gt;.plugin-info pre&lt;/code&gt; etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17902 (Add a "Plugin Details" link to installed plugins.) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Sat, 28 Jan 2012 01:30:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17902#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17902#comment:13/1327714255362815</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/17902#comment:12" title="Comment 12"&gt;kurtpayne&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
scribu, I'd like to talk about this one a bit more interactively, but I haven't seen you on IRC.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'll try to be online more often, but it would probably be easier if we attempted to set a meeting point.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The markup between the readme display and the api display varies quite a bit.  The API has screenshots, download stats, rating stats, compatibility info, last updated, date added, download link, and author profile link.  These won't be contained in the readme / plugin header information.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, but the general layout should be the same, so the CSS shouldn't differ much.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I can't really change the element id that necessitates the CSS changes.  It cascades from the query string to wp-admin\plugin-install.php and is set as &lt;code&gt;$body_id&lt;/code&gt; where it's used in iframe_header to set the body id, then &lt;code&gt;$tab&lt;/code&gt; is used to control which hook gets called.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Like I said previously, forget about the id. We should change the CSS and markup so that we end up with re-usable classes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Sat, 28 Jan 2012 01:20:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:4/1327713609684322</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19910 (Appearance Improvements: Theme Customization Frame) updated</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Sat, 28 Jan 2012 01:17:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19910#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19910#comment:1/1327713472639396</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19393 (Image crop position) updated</title>
      
        <dc:creator>goto10</dc:creator>

      <pubDate>Sat, 28 Jan 2012 00:26:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19393#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19393#comment:14/1327710391020702</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>markoheijnen</dc:creator>

      <pubDate>Sat, 28 Jan 2012 00:20:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:8/1327710003101480</guid>
      <description>&lt;p&gt;
Should look at the end of the 2 week cycle to ticket &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17109" title="#17109: enhancement: Add post-success action hooks to edit/create/delete calls. (closed: fixed)"&gt;#17109&lt;/a&gt; to maybe add the needed code.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>markoheijnen</dc:creator>

      <pubDate>Sat, 28 Jan 2012 00:09:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:3/1327709357344077</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17188 (Remove blog_id column from wp_options) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:56:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17188#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17188#comment:2/1327708611591189</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>sabreuse</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:44:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:2/1327707899254600</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19908 (PHP warnings in media listing) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:44:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19908#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19908#comment:3/1327707858965991</guid>
      <description>&lt;p&gt;
Kinda related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17736" title="#17736: defect (bug): Undefined Index in image-edit.php (closed: fixed)"&gt;#17736&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18749 (Remove "the hackiest hack that ever did hack" from add_user()) closed</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:37:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18749#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18749#comment:8/1327707474042841</guid>
      <description>fixed: &lt;p&gt;
It's fine, but separate assignment is best general.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #19908 (PHP warnings in media listing) updated</title>
      
        <dc:creator>dimitrov.adrian</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:37:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19908#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19908#comment:2/1327707436915521</guid>
      <description>&lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This is only warnings that apear in above some of images (i can't track what exactly trigger the warning). So i can disable it while turn off php error reporting (and in productivity sites i do that).
I have default twentyeleven theme with no plugins, and few posts and attachments.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>menu-order.patch attached to Ticket #19911</title>
      
        <dc:creator>nikolay.yordanov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:29:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19911/menu-order.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19911/menu-order.patch/1327706979117882</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:28:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909#comment:1/1327706927339904</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19911 (Menu order not displayed properly for non-hierarchical post types in ...) created</title>
      
        <dc:creator>nikolay.yordanov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:28:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19911</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19911/1327706925436174</guid>
      <description>&lt;p&gt;
It is possible to register a non-hierarchical post type with support for page-attributes. This adds a menu order field in the post editor and the inline editor. While everything is working as expected in the post editor, when using the inline editor the menu order in the inline editor is always shown as 0. It is possible, however, to edit it and the changes are visible in the normal editor.
&lt;/p&gt;
&lt;p&gt;
The problem is that the correct menu order is displayed only when the post type is hierarchical. Moreover, the inline-edit-post script updates the menu order only for pages. The attached patch fixes this issue.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #19910 (Appearance Improvements: Theme Customization Frame) created</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:27:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19910</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19910/1327706851143554</guid>
      <description>&lt;p&gt;
&lt;em&gt;For context, see the appearance umbrella ticket: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19909" title="#19909: task (blessed): Appearance Improvements: An Overview (closed: fixed)"&gt;#19909&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Building a frame to house the customization UI and theme preview is the first step to improving the theme customization process. This will be the first iteration for my team (myself and ocean90). Once the frame is in place, we'll add components to the UI one by one (e.g. custom headers, backgrounds, etc).
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Add an iframe that can preview any theme (call this the target theme).
&lt;/li&gt;&lt;li&gt;Add a sidebar to house future UI.
&lt;ol class="loweralpha"&gt;&lt;li&gt;Temporarily activate the target theme when building the sidebar UI.
&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Add an API to communicate with the iframe.
&lt;ol class="loweralpha"&gt;&lt;li&gt;Pass data to the iframe.
&lt;/li&gt;&lt;li&gt;Refresh the iframe (likely via post).
&lt;/li&gt;&lt;li&gt;Refresh the iframe's CSS (via postMessage).
&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Add a temporary UI to demonstrate the API.
&lt;ol class="loweralpha"&gt;&lt;li&gt;Buttons that refresh and make trivial changes to the iframe.
&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Add a save action (that, by default, will do nothing).
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #19909 (Appearance Improvements: An Overview) created</title>
      
        <dc:creator>koopersmith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 23:22:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19909</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19909/1327706520914899</guid>
      <description>&lt;p&gt;
The main target for the 3.4 appearance improvements will create a UI that allows users to simultaneously customize and preview their theme. Our initial target will be the theme switching process (in an a la carte fashion), which will then hopefully expand to more uses in the WordPress admin.
&lt;/p&gt;
&lt;p&gt;
I'll update this ticket periodically with additional details. We'll have several teams working on different portions of the project simutaneously. See &lt;a class="ext-link" href="http://wpdevel.wordpress.com/version-3-4-project-teams-and-status/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this post&lt;/a&gt; for more details on the 3.4 teams.
&lt;/p&gt;
&lt;p&gt;
The customization UI will be built in several phases:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19910" title="#19910: task (blessed): Appearance Improvements: Theme Customization Frame (closed: fixed)"&gt;#19910&lt;/a&gt;: Build theme customization frame – &lt;em&gt;koopersmith and ocean90&lt;/em&gt;
&lt;ul&gt;&lt;li&gt;This consists of a UI that can communicate with and refresh a preview of any theme.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Add additional components to the frame (likely in this order)
&lt;ul&gt;&lt;li&gt;Custom background.
&lt;/li&gt;&lt;li&gt;Custom header.
&lt;/li&gt;&lt;li&gt;Menu locations.
&lt;/li&gt;&lt;li&gt;Widget locations.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Create configure/activate workflow within the frame
&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;
&lt;p&gt;
&lt;strong&gt;Other Appearance Improvements&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Custom headers – &lt;em&gt;aaroncampbell and sabreuse&lt;/em&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17242" title="#17242: task (blessed): Themes: Allow flexible sizes for custom header uploads (closed: fixed)"&gt;#17242&lt;/a&gt;: Flexible heights for custom headers.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19840" title="#19840: task (blessed): Select custom header or background images from media library (closed: fixed)"&gt;#19840&lt;/a&gt;: Use images from your media library.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Improved theme browser – &lt;em&gt;DH-Shredder and helenyhou&lt;/em&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19815" title="#19815: task (blessed): Theme install and search screens should infinitely scroll (closed: fixed)"&gt;#19815&lt;/a&gt;: Infinite scroll when browsing themes.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19816" title="#19816: enhancement: Theme details should be able to include multiple screenshots (closed: duplicate)"&gt;#19816&lt;/a&gt;: Support multiple screenshots per theme.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19912" title="#19912: feature request: Add Widget Groups and Locations (closed: maybelater)"&gt;#19912&lt;/a&gt;: Widget locations API.
&lt;/li&gt;&lt;li&gt;General menu UI improvements.
&lt;/li&gt;&lt;li&gt;General widget UI improvements.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14024 (Insufficient permissions error after activating plugins) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 22:23:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14024#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14024#comment:20/1327703004217252</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14024#comment:18" title="Comment 18"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19599" title="#19599: task (blessed): Localizations should not need to worry about the default secret key (closed: fixed)"&gt;#19599&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19771" title="Provide a DB fallback for keys in wp_salt(). Fall back when any secret ..."&gt;[19771]&lt;/a&gt;. This will no longer break in localized builds.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Confirmed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Is a &lt;code&gt;_doing_it_wrong()&lt;/code&gt; worth it at this point?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It would be consistent with the messages added in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/11526" title="#11526: defect (bug): JavaScript l10n inconsistency (closed: fixed)"&gt;#11526&lt;/a&gt;. However, if there are no more issues with calling &lt;code&gt;wp_get_current_user()&lt;/code&gt; too early, maybe it's not really necessary.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19852 (Don't load admin strings on the frontend) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 27 Jan 2012 22:19:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19852#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19852#comment:17/1327702797351405</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19772" title="Load the new admin and network admin mo files, if present. see #19852"&gt;[19772]&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Load the new admin and network admin mo files, if present. see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19852" title="#19852: task (blessed): Don't load admin strings on the frontend (closed: fixed)"&gt;#19852&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [19772]: Load the new admin and network admin mo files, if present. see #19852</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 27 Jan 2012 22:19:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19772</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19772/1327702796479986</guid>
      <description>&lt;p&gt;
Load the new admin and network admin mo files, if present. see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19852" title="#19852: task (blessed): Don't load admin strings on the frontend (closed: fixed)"&gt;#19852&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Fri, 27 Jan 2012 21:31:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:15/1327699867083866</guid>
      <description>&lt;p&gt;
I just ran these queries on eMusic's production database cluster. Our wp_comments table (InnoDB) has only 300,000 rows -
&lt;/p&gt;
&lt;p&gt;
original query: 161ms
5 queries: 98.2ms
&lt;/p&gt;
&lt;p&gt;
I think most large-scale MySQL users are defaulting to InnoDB, if for no reason other than row-level locking. Facebook swears by InnoDB and their MySQL perf team is focusing a lot on InnoDB row cache and InnoDB buffer pool for Timeline (which is stored in MySQL).
&lt;/p&gt;
&lt;p&gt;
This is a nice improvement, but there are way more dangerous queries in core related to full-table scans of LONGTEXT columns. Our wp_usermeta table has 11,000,000 rows and gets pounded by them - but that's off-topic...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19852.3.diff attached to Ticket #19852</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 27 Jan 2012 21:23:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19852/19852.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19852/19852.3.diff/1327699421819799</guid>
      <description>&lt;p&gt;
Now with less bugs
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>19852.2.diff attached to Ticket #19852</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 27 Jan 2012 21:19:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19852/19852.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19852/19852.2.diff/1327699174711809</guid>
      <description>&lt;p&gt;
ms- back compat. Load admin-network- instead of network-admin-
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14024 (Insufficient permissions error after activating plugins) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:56:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14024#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14024#comment:19/1327697813138962</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Changing component as this is no longer an i18n issue, but a "best practice" issue. With &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19599" title="#19599: task (blessed): Localizations should not need to worry about the default secret key (closed: fixed)"&gt;#19599&lt;/a&gt; fixed, I am not sure if anything else can break if you calculate the current user prior to init.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14024 (Insufficient permissions error after activating plugins) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:54:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14024#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14024#comment:18/1327697677977317</guid>
      <description>&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19599" title="#19599: task (blessed): Localizations should not need to worry about the default secret key (closed: fixed)"&gt;#19599&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19771" title="Provide a DB fallback for keys in wp_salt(). Fall back when any secret ..."&gt;[19771]&lt;/a&gt;. This will no longer break in localized builds. Is a &lt;code&gt;_doing_it_wrong()&lt;/code&gt; worth it at this point?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19497 (The 'My Sites' menu is redundant for users with just one site) updated</title>
      
        <dc:creator>ciantic</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:53:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19497#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19497#comment:7/1327697586836526</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19908 (PHP warnings in media listing) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:47:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19908#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19908#comment:1/1327697223334252</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi, can we have some steps to reproduce? These notices indicate that image_get_intermediate_size() is being called with incorrect arguments. If you are passing $size as an array, it needs to be &lt;code&gt;array( $width, $height )&lt;/code&gt;, where $width and $height are integers.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19908 (PHP warnings in media listing) created</title>
      
        <dc:creator>dimitrov.adrian</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:42:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19908</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19908/1327696967977606</guid>
      <description>&lt;p&gt;
Notice: Uninitialized string offset: 0 in /var/www/wptest/wp-includes/media.php on line 537
Notice: Uninitialized string offset: 0 in /var/www/wptest/wp-includes/media.php on line 537
Notice: Uninitialized string offset: 0 in /var/www/wptest/wp-includes/media.php on line 543
Notice: Uninitialized string offset: 0 in /var/www/wptest/wp-includes/media.php on line 543
Notice: Uninitialized string offset: 0 in /var/www/wptest/wp-includes/media.php on line 550
Notice: Uninitialized string offset: 0 in /var/www/wptest/wp-includes/media.php on line 550
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #17242 (Themes: Allow flexible sizes for custom header uploads) updated</title>
      
        <dc:creator>sabreuse</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:30:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17242#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17242#comment:36/1327696242135545</guid>
      <description>&lt;p&gt;
17242.4.diff is a first pass with a helper function.
&lt;/p&gt;
&lt;p&gt;
ISSUES:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;As of now, it's only testing for either of an old-school non-flex header with a fixed height, or a resized header -- it won't check in the case that a theme supports flex headers but one hasn't been set yet.
&lt;/li&gt;&lt;li&gt;Next pass, I'll move the check out of the function so we don't run it on non-flex themes.
&lt;/li&gt;&lt;li&gt;We also talked a bit in IRC about grabbing the attachment ID so we don't have to query the db every time.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>17242.4.diff attached to Ticket #17242</title>
      
        <dc:creator>sabreuse</dc:creator>

      <pubDate>Fri, 27 Jan 2012 20:26:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17242/17242.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17242/17242.4.diff/1327695981557896</guid>
      <description>&lt;p&gt;
First pass at using a helper function
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19599 (Localizations should not need to worry about the default secret key) closed</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 18:52:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19599#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19599#comment:7/1327690341267517</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19771" title="Provide a DB fallback for keys in wp_salt(). Fall back when any secret ..."&gt;[19771]&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Provide a DB fallback for keys in wp_salt(). Fall back when any secret is used more than once. Change how we detect a localized 'put your unique phrase here' -- eliminate $wp_default_secret_key and introduce $wp_secret_key_default to be added during the localized build process, not by translators. fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19599" title="#19599: task (blessed): Localizations should not need to worry about the default secret key (closed: fixed)"&gt;#19599&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [19771]: Provide a DB fallback for keys in wp_salt(). Fall back when any secret ...</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 18:52:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19771</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19771/1327690340397180</guid>
      <description>&lt;p&gt;
Provide a DB fallback for keys in wp_salt(). Fall back when any secret is used more than once. Change how we detect a localized 'put your unique phrase here' -- eliminate $wp_default_secret_key and introduce $wp_secret_key_default to be added during the localized build process, not by translators. fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19599" title="#19599: task (blessed): Localizations should not need to worry about the default secret key (closed: fixed)"&gt;#19599&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 27 Jan 2012 18:40:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:14/1327689622149940</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19901#comment:4" title="Comment 4"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Is this with myisam or innodb?  innodb will count the rows and possibly be slower.
For the last query that doesn't have a WHERE.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Tested on standard MyISAM, which is what we should be optimizing for. Can you test on one of the big wpcom InnoDB comment tables and post numbers? Be sure to query with &lt;code&gt;SELECT SQL_NO_CACHE ...&lt;/code&gt; to disable qcache.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
With 2,488,928 rows and the comments table on SSDs, the old query ran in 1.2449 seconds. With the new way, the last query alone takes 1.9485 seconds.  Given that someone with this many rows will probably be using innodb instead of myisam to avoid table locking difficulties, the new queries make things worse.  Further, MySQL 5.6 defaults to innodb. Of course, no one uses that yet. :-)
&lt;/p&gt;
&lt;p&gt;
That's not to say the patch shouldn't go in. Just keep it in mind.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16892 (make_clickable segfault) updated</title>
      
        <dc:creator>duck_</dc:creator>

      <pubDate>Fri, 27 Jan 2012 18:12:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16892#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16892#comment:24/1327687947435348</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Looks good.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19599.2.diff attached to Ticket #19599</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 17:58:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19599/19599.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19599/19599.2.diff/1327687119056999</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19599 (Localizations should not need to worry about the default secret key) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 17:58:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19599#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19599#comment:6/1327687109565724</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/19599/19599.2.diff" title="Attachment '19599.2.diff' in Ticket #19599"&gt;19599.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/19599/19599.2.diff" title="Download"&gt;​&lt;/a&gt; rewrites wp_salt().
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;DB fallback is provided for the eight main keys and salts, and also SECRET_KEY, since it is used for custom schemes.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;If any two keys or salts match in value, the fallback is triggered.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;If any key or salt matches 'put your unique phrase here', the fallback is triggered.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Now, local builds. We want to eliminate the need for $locale.php files, so we want to avoid $wp_default_secret_key. Additionally, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14024" title="#14024: defect (bug): Insufficient permissions error after activating plugins (closed: fixed)"&gt;#14024&lt;/a&gt; has caused translators to instead override default-constants.php. This is even less desirable.
&lt;/p&gt;
&lt;p&gt;
Point 2 ensures that a localized 'put your unique phrase here' only works if the value is used exactly once — say, if the other 7 are properly unique. However, it could also be that the only one defined is SECRET_KEY (perhaps the install started with 2.5), and either way, we should try to mitigate this.
&lt;/p&gt;
&lt;p&gt;
So, Point 4: For 3.4 localized builds, we will append $wp_secret_key_default to version.php, the same way we append $wp_local_package to version.php. We will use this variable to ensure that for all fresh local installs of 3.4 or higher will end up covered.
&lt;/p&gt;
&lt;p&gt;
For installs prior to 3.4, we cannot use the existing $wp_default_secret_key, as otherwise we will re-introduce &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14024" title="#14024: defect (bug): Insufficient permissions error after activating plugins (closed: fixed)"&gt;#14024&lt;/a&gt;. again, point 2 is strong enough to mitigate any issues.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19906 (Quicktags docs recommend code causing JS error: Uncaught ...) updated</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 27 Jan 2012 17:35:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19906#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19906#comment:3/1327685731816072</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
clarification in the inline docs because right now it encourages something that throws a javascript error which causes all kinds of havoc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You could interpret it this way, but if you do, this basically is valid for all documentation in WP. You would actually have to add a similar warning to the docs of many other JS objects or even PHP functions that are in core. IMHO, that's "over-documenting".
(And as you mentioned the wiki: This would probably be the more appropriate place for this hint/warning.)
&lt;/p&gt;
&lt;p&gt;
So, to correct way simply is to load your JS only on pages where you know that the prerequisites (here for quicktags) are fulfilled: For core, this would be post.php and post-new.php (for post types that have support for the editor), and on your own plugin's screens, this would be all screens where you actually load a wp_editor() yourself.
&lt;/p&gt;
&lt;p&gt;
Now, as your intention seems to be to add a button to *all* wp_editors() that there are (which I'm not sure is good thing to do), a typeof undefined check would indeed be in order, and I fully support and encourage it. I just doubt that it has to be recommended in the docs, as most plugins won't need it, if they load their scripts in the proper way, and only for certain wp_editor() instances.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19907 (Updating an unpublished draft post in quick-edit mode sets the post's ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 17:33:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19907#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19907#comment:2/1327685615727966</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Has been this way since Quick Edit was introduced in 2.7 (&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/8144" title="#8144: defect (bug): Implement new design of Quick/Bulk Edit (closed: fixed)"&gt;#8144&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
The problem is that &lt;code&gt;edit_date&lt;/code&gt; is true by default:&lt;br /&gt;
&lt;a class="ext-link" href="http://core.trac.wordpress.org/browser/tags/3.3.1/wp-admin/js/inline-edit-post.dev.js#L238"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://core.trac.wordpress.org/browser/tags/3.3.1/wp-admin/js/inline-edit-post.dev.js#L238&lt;/a&gt; &lt;br /&gt;
And the condition for &lt;code&gt;$clear_date&lt;/code&gt; in &lt;code&gt;wp_update_post()&lt;/code&gt; is not satisfied:&lt;br /&gt;
&lt;a class="ext-link" href="http://core.trac.wordpress.org/browser/tags/3.3.1/wp-includes/post.php#L2693"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://core.trac.wordpress.org/browser/tags/3.3.1/wp-includes/post.php#L2693&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/19907/19907.patch" title="Attachment '19907.patch' in Ticket #19907"&gt;19907.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/19907/19907.patch" title="Download"&gt;​&lt;/a&gt; brings the similar check and comment into &lt;code&gt;edit_post()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/19907/19907.2.patch" title="Attachment '19907.2.patch' in Ticket #19907"&gt;19907.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/19907/19907.2.patch" title="Download"&gt;​&lt;/a&gt; sets &lt;code&gt;edit_date&lt;/code&gt; to false (doesn't touch &lt;code&gt;post_date_gmt&lt;/code&gt;).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19907.2.patch attached to Ticket #19907</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 17:30:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19907/19907.2.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19907/19907.2.patch/1327685438273791</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>19907.patch attached to Ticket #19907</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 17:09:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19907/19907.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19907/19907.patch/1327684156873992</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19906 (Quicktags docs recommend code causing JS error: Uncaught ...) reopened</title>
      
        <dc:creator>jeremyclarke</dc:creator>

      <pubDate>Fri, 27 Jan 2012 16:42:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19906#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19906#comment:2/1327682558288288</guid>
      <description>&lt;p&gt;
Hi Tobias, thanks for replying, but I don't think we should close this ticket. Whether your solution works or not, I think there is still a need for clarification in the inline docs because right now it encourages something that throws a javascript error which causes all kinds of havoc.
&lt;/p&gt;
&lt;p&gt;
We should decide on the clearest solution and refer to it in the docs and on the wiki.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
the solution is much easier: You'll just need to enqueue the "quicktags" script before you add your footer print action. There's no need to enqueue a script that *depends*, you just enqueue "quicktags" directly.
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_enqueue_script( 'quicktags' );
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
This solution involves using two hooked functions instead of just one right? That's how I got it working but not really how you made it sound. Two hooked functions on the same hook seems unnecessarily complicated to me, though I can see how it is simpler for people who don't know JS at all and just want to use standard WP-PHP. Notably though, this method doesn't seem to work if you use the &lt;code&gt;admin_print_footer_scripts&lt;/code&gt; instead of &lt;code&gt;wp_footer&lt;/code&gt;, so if this is the official solution we need to be clear in the docs that you must use &lt;code&gt;wp_footer&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The script would only be loaded on all pages if you don't use the correct hooks. Script enqueuing should only be done when you know that you are on your plugin's admin screen, e.g. in "load-{$plugin_hook}".
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The quicktags are intended for anything with &lt;code&gt;wp_editor()&lt;/code&gt;, not for a specific plugin screen, so we can't assume that people will know what screen they want to add it to. In theory we could tell people all the different screens/conditionals that would imply the presence of an editor, but with the increasing proliferation of &lt;code&gt;wp_editor()&lt;/code&gt; the buttons might be needed just about anywhere. If we go the route of telling people to enqueue quicktags we will pretty much have to tell them to enqueue it everywhere just in case, which is a waste IMHO.
&lt;/p&gt;
&lt;p&gt;
It seems like a good solution would be to just define the buttons all the time as long as it doesn't break anything when there's no editor, they don't take up much space after all. Checking if &lt;code&gt;QTags&lt;/code&gt; is defined is a simple way to neutralize the javascript without having to worry about every possible scenario where it would be needed.
&lt;/p&gt;
&lt;p&gt;
Is there some way to know if &lt;code&gt;wp_editor()&lt;/code&gt; was called during the current pageload? If we could know that with PHP then that would be the ideal solution, as it would truly be just one line of code in the &lt;code&gt;admin_print_footer_scripts&lt;/code&gt; action to determine whether to output the button definitions or not. Alternately a footer hook that only fires if the editor was used during the current page, though that seems more convoluted than necessary.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #14134 (Menus item are limited to 16 item and will not save more than that) updated</title>
      
        <dc:creator>phbrowne</dc:creator>

      <pubDate>Fri, 27 Jan 2012 16:06:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14134#comment:61</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14134#comment:61/1327680386494692</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Upgraded to 3.3.1 and still having timeout issues.  I have WP Multisite with about 33 subfolder sites installed.  We started having the problem shortly after install in September 2011 on WP 3.2.1.  Each site has a menu structure.  Most sites have about 10 menu items, but some have more (one site has approx 30).  Shortly after install, on the large menu site, they could no longer edit their menu, so I created 5 separate menus and stacked them in the sidebar using widgets.  Fast forward a couple of months and we can't edit any menu item.  Everything times out after exactly 3 minutes.  Error message is as follows:
&lt;/p&gt;
&lt;pre class="wiki"&gt;[Wed Jan 25 18:26:54 2012] [error] [client 66.249.67.239] Request exceeded the limit of 10 internal redirects due to probable configuration error. Use 'LimitInternalRecursion' to increase the limit if necessary. Use 'LogLevel debug' to get a backtrace.
&lt;/pre&gt;&lt;p&gt;
The only thing that varies is the client IP address - there seems to be 3-4 different ones that pop over over the course of 60+ pages of error logs.
&lt;/p&gt;
&lt;p&gt;
Now, we are also getting timeouts when we try to create a post.  The post will timeout (after 3 minutes) and it appears to fail.  But when you go back and view the list of posts, it's there.
&lt;/p&gt;
&lt;p&gt;
Hosted on GoDaddy (please don't throw rocks...)
&lt;/p&gt;
&lt;p&gt;
Here is copy of .htaccess pretty vanilla WP MS install version
&lt;/p&gt;
&lt;pre class="wiki"&gt;# BEGIN WordPress
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
# uploaded files
RewriteRule ^([_0-9a-zA-Z-]+/)?files/(.+) wp-includes/ms-files.php?file=$2 [L]
# add a trailing slash to /wp-admin
RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]
RewriteCond %{REQUEST_FILENAME} -f [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]
RewriteRule  ^[_0-9a-zA-Z-]+/(wp-(content|admin|includes).*) $1 [L]
RewriteRule  ^[_0-9a-zA-Z-]+/(.*\.php)$ $1 [L]
RewriteRule . index.php [L]
# END WordPress
&lt;/pre&gt;&lt;pre class="wiki"&gt;
&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;
And here is a copy of PHP.ini which I modified to add time and memory per different online posts about solving this problem.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="wiki"&gt;register_globals = off
allow_url_fopen = off
expose_php = Off
max_execution_time = 600
max_input_time = 600
memory = 20MB
memory_limit = 256M
variables_order = "EGPCS"
extension_dir = ./
upload_tmp_dir = /tmp
precision = 12
SMTP = relay-hosting.secureserver.net
url_rewriter.tags = "a=href,area=href,frame=src,input=src,form=,fieldset="
; Only uncomment zend optimizer lines if your application requires Zend Optimizer support
;[Zend]
;zend_optimizer.optimization_level=15
;zend_extension_manager.optimizer=/usr/local/Zend/lib/Optimizer-3.3.3
;zend_extension_manager.optimizer_ts=/usr/local/Zend/lib/Optimizer_TS-3.3.3
;zend_extension=/usr/local/Zend/lib/Optimizer-3.3.3/ZendExtensionManager.so
;zend_extension_ts=/usr/local/Zend/lib/Optimizer_TS-3.3.3/ZendExtensionManager_TS.so
; -- Be very careful to not to disable a function which might be needed!
; -- Uncomment the following lines to increase the security of your PHP site.
;disable_functions = "highlight_file,ini_alter,ini_restore,openlog,passthru,
;		      phpinfo, exec, system, dl, fsockopen, set_time_limit,
;                     popen, proc_open, proc_nice,shell_exec,show_source,symlink"
&lt;/pre&gt;&lt;p&gt;
I don't consider my site anything that exotic - and even the one long menu isn't completely outrageous.  Where is WP with a fix on this?  Any thoughts?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19907 (Updating an unpublished draft post in quick-edit mode sets the post's ...) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 15:11:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19907#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19907#comment:1/1327677063771198</guid>
      <description>&lt;i&gt;Severity&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19907 (Updating an unpublished draft post in quick-edit mode sets the post's ...) created</title>
      
        <dc:creator>uxtremist</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:51:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19907</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19907/1327675892357703</guid>
      <description>&lt;p&gt;
&lt;strong&gt;Problem:&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you update an unpublished draft post in quick-edit mode, the post's &lt;em&gt;publish date&lt;/em&gt; is saved. &lt;br /&gt;
&lt;/li&gt;&lt;li&gt;Then, later on, when you actually publish the post, its publish date is incorrect.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Suggested fix:&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If the post is a draft, do not automatically set the post's publish date in quick-edit mode.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Steps to reproduce:&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
(1) Go to WP-Admin -&amp;gt; Posts.
&lt;/p&gt;
&lt;p&gt;
(2) Create and save a new post. Make sure you click "Save Draft" — not "Publish".
&lt;/p&gt;
&lt;p&gt;
(3) Note that the post is marked as "Publish immediately"; that is, it has no publish date.
&lt;/p&gt;
&lt;p&gt;
(4) Go back to WP-Admin -&amp;gt; Posts.
&lt;/p&gt;
&lt;p&gt;
(5) Hover your pointer over the post you just created. Click "Quick Edit".
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
— Note that in the panel that appears, the "Date" field is automatically set to [the current date and time].
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
(6) Click "Update" in quick-edit mode.
&lt;/p&gt;
&lt;p&gt;
(7) Hover your pointer over the post you just updated. Click "Edit".
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
— Note that in the Edit Post page that appears, the post is now marked as "Publish on: [the date and time from step (5)]"
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset [19770]: POT, generated from r19767</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:48:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19770</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19770/1327675699769064</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19767" title="POT, generated from r19762"&gt;r19767&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19769]: POT, generated from r19767</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:48:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19769</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19769/1327675697578391</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19767" title="POT, generated from r19762"&gt;r19767&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19768]: POT, generated from r19767</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:48:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19768</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19768/1327675696004856</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19767" title="POT, generated from r19762"&gt;r19767&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19767]: POT, generated from r19762</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:29:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19767</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19767/1327674545045672</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19762" title="Make 0 the default status for admin-ajax.php. props TobiasBg. fixes #15327."&gt;r19762&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19766]: POT, generated from r19762</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:29:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19766</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19766/1327674540420504</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19762" title="Make 0 the default status for admin-ajax.php. props TobiasBg. fixes #15327."&gt;r19762&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19765]: POT, generated from r19762</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:28:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19765</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19765/1327674538372190</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19762" title="Make 0 the default status for admin-ajax.php. props TobiasBg. fixes #15327."&gt;r19762&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19764]: POT, generated from r19762</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:28:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19764</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19764/1327674536352050</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19762" title="Make 0 the default status for admin-ajax.php. props TobiasBg. fixes #15327."&gt;r19762&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [19763]: POT, generated from r19762</title>
      
        <dc:creator>potbot</dc:creator>

      <pubDate>Fri, 27 Jan 2012 14:28:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/19763</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/19763/1327674534566171</guid>
      <description>&lt;p&gt;
POT, generated from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/19762" title="Make 0 the default status for admin-ajax.php. props TobiasBg. fixes #15327."&gt;r19762&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Fri, 27 Jan 2012 13:19:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:13/1327670340061771</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17275" title="#17275: enhancement: UI: Missing comments count in admin screen (closed: fixed)"&gt;#17275&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14222 (Improve dashboard recent comments widget performance by not fetching ...) updated</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Fri, 27 Jan 2012 13:15:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14222#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14222#comment:21/1327670122396895</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17275" title="#17275: enhancement: UI: Missing comments count in admin screen (closed: fixed)"&gt;#17275&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16892 (make_clickable segfault) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Fri, 27 Jan 2012 11:01:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16892#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16892#comment:23/1327662103458860</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@duck_ could you take a look at this and see if it is suitable for 3.4 inclusion.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19906 (Quicktags docs recommend code causing JS error: Uncaught ...) closed</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 27 Jan 2012 10:36:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19906#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19906#comment:1/1327660572620228</guid>
      <description>invalid: &lt;p&gt;
Hi Jeremy,
&lt;/p&gt;
&lt;p&gt;
the solution is much easier: You'll just need to enqueue the "quicktags" script before you add your footer print action. There's no need to enqueue a script that *depends*, you just enqueue "quicktags" directly.
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_enqueue_script( 'quicktags' );
&lt;/pre&gt;&lt;p&gt;
This works because "output_my_js" is hooked with a priority of 100, so this will be done after all the footer scripts (including "quicktags" then) will have been included.
&lt;/p&gt;
&lt;p&gt;
And about this:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The issue is avoided if you use the other option, enqueuing a script dependent on 'quicktags', but that is a lot more work and forces all pages in the admin to load the quicktags script unnecessarily.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The script would only be loaded on all pages if you don't use the correct hooks. Script enqueuing should only be done when you know that you are on your plugin's admin screen, e.g. in "load-{$plugin_hook}".
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 27 Jan 2012 10:27:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:12/1327660075883349</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14222" title="#14222: defect (bug): Improve dashboard recent comments widget performance by not fetching ... (closed: fixed)"&gt;#14222&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>markoheijnen</dc:creator>

      <pubDate>Fri, 27 Jan 2012 09:20:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:7/1327656009939324</guid>
      <description>&lt;p&gt;
I know mw_newPost looked a lot at your patch. With the patch I wrote I tried to make the code as simple as I found needed. To have a discussing about what needs to be checked on the client side and what on the XML-RPC side.
&lt;/p&gt;
&lt;p&gt;
The reason I removed checks on page templates and hierarchical post is because I think the client should check for it.
&lt;/p&gt;
&lt;p&gt;
I did discussed with westi about checking of post_parent. Reason that is removed is because post_parent doesn't have to be of the same post_type. Something that happens with media item. From that point I also removed checking if a post is hierarchical.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 09:10:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:11/1327655418571097</guid>
      <description>&lt;p&gt;
We can also speed up comment queries in "count" mode (i.e. the mode where it just returns the count) if we determine that the query type is one that is handled by &lt;code&gt;wp_count_comments()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Example, within &lt;code&gt;WP_Comment_Query::query()&lt;/code&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;		if ( $count ) {
			if ( $clauses['join']   == '' &amp;amp;&amp;amp;
			     $clauses['where']  == "( comment_approved = '0' OR comment_approved = '1' )" &amp;amp;&amp;amp;
			     $clauses['limits'] == '' ) {
				// We can return a much faster result for this specific case (default view)
				return wp_count_comments()-&amp;gt;approved + wp_count_comments()-&amp;gt;moderated;
			}
			return $wpdb-&amp;gt;get_var( $query );
		}
&lt;/pre&gt;&lt;p&gt;
That query can also take a few seconds with a large number of queries.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19858 (Close comments on attached images) updated</title>
      
        <dc:creator>solarissmoke</dc:creator>

      <pubDate>Fri, 27 Jan 2012 09:07:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19858#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19858#comment:4/1327655249994665</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/8177" title="#8177: defect (bug): Comments disabled in post but not in media gallery (closed: wontfix)"&gt;#8177&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/9839" title="#9839: defect (bug): Enable/Disable comments on a per item bases. (closed: duplicate)"&gt;#9839&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Fri, 27 Jan 2012 06:08:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:99</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:99/1327644508251346</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>nprasath002</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:36:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:6/1327631789636222</guid>
      <description>&lt;p&gt;
We need to check all the parameters in and return proper error messages to the client.
For example a post type may/may not support hierarchical post.
We need to check within the function itself.
wp_insert_post does not handle this
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18429 (Create custom post types via XMLRPC) updated</title>
      
        <dc:creator>nprasath002</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:24:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18429#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18429#comment:5/1327631092715177</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/18429#comment:4" title="Comment 4"&gt;markoheijnen&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
In XMRPC we are adopting the same behaviour as in the WordPress backend.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Should we have a default post_status or do we really need to return an error
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
In the back end they do have a default post status for posts. So yes!!
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Should we generate an error if page templates aren't supported
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
I think yes. The client must know whether the request is valid
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Should we generate an error on invalid comment status or ping status
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Again  yes
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Not sure about the implementation of post_more. Shouldn't the client handle this instead of the xml-rpc?
&lt;/li&gt;&lt;li&gt;Shouldn't the checks after wp_insert_post not be before it. Sounds like it can give weird situation
&lt;/li&gt;&lt;li&gt;Do we need the "handle enclosures" code in the end of the function. Shouldn't this be a separate function?
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
This method is largely influenced by mw_newPost() for consistency and backward capability. So i adopted the same behaviour
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:24:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:10/1327631060927544</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Took a swing at it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19901.diff attached to Ticket #19901</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:23:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19901/19901.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19901/19901.diff/1327630994568317</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19903 (wp_count_comments() and get_comments_count() both do SQL queries) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:18:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19903#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19903#comment:7/1327630695364304</guid>
      <description>&lt;p&gt;
Or, as a fourth option, do what is proposed in the ticket description — keep both functions and have wp_count_comments() wrap and cache get_comments_count() (and have that function's SQL changed in &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/19901" title="#19901: enhancement: Speeding up Dashboard and Comment moderation SQL load (accepted)"&gt;#19901&lt;/a&gt;).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19903 (wp_count_comments() and get_comments_count() both do SQL queries) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:16:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19903#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19903#comment:6/1327630589672583</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19903#comment:5" title="Comment 5"&gt;markjaquith&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Maybe. Unless people are using it to get "hot" data from the database. The cached counts might sometimes be wrong.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If getting hot data from the database is a valid use case, then we shouldn't deprecate it, even if the function isn't used by core. Otherwise, we should either ensure that the cache is invalidated, modify any cached data directly when wp_update_comment_count() is called, or decide that the non-persistence of the counts cache group is enough to ensure that the data is warm enough.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19903 (wp_count_comments() and get_comments_count() both do SQL queries) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 02:11:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19903#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19903#comment:5/1327630286951663</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Fixing the description to note that wp_count_comments() returns an object.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Could the deprecated version become a wrapper for wp_count_comments()? We'd simply need to rename the returned array keys.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Maybe. Unless people are using it to get "hot" data from the database. The cached counts might sometimes be wrong.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19903 (wp_count_comments() and get_comments_count() both do SQL queries) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:52:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19903#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19903#comment:4/1327629142414937</guid>
      <description>&lt;p&gt;
Could the deprecated version become a wrapper for wp_count_comments()? We'd simply need to rename the returned array keys.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19903 (wp_count_comments() and get_comments_count() both do SQL queries) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:50:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19903#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19903#comment:3/1327629043990909</guid>
      <description>&lt;p&gt;
Patch deprecates &lt;code&gt;get_comment_count()&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19903.diff attached to Ticket #19903</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:49:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19903/19903.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19903/19903.diff/1327628952941280</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19901 (Speeding up Dashboard and Comment moderation SQL load) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:37:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19901#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19901#comment:9/1327628275484160</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19901#comment:3" title="Comment 3"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Plugins can set comment_status to anything. I think we'd need to introduce comment status registration, like we do with post status.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Could do. But until then, it's not a big deal if the "approved" number contains any custom ones. We really don't support custom comment_approved statuses... I think I tried doing it once and there were multiple places where it broke. So I don't think that concern should hold us back on improving count performance.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19901#comment:4" title="Comment 4"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Is this with myisam or innodb?  innodb will count the rows and possibly be slower.
For the last query that doesn't have a WHERE.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Tested on standard MyISAM, which is what we should be optimizing for. Can you test on one of the big wpcom InnoDB comment tables and post numbers? Be sure to query with &lt;code&gt;SELECT SQL_NO_CACHE ...&lt;/code&gt; to disable qcache.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19901#comment:6" title="Comment 6"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Also, a hack I've seen done for sites with millions of comments and high comment volume is to just not do the count queries.  Comment counts become rather meaningless for such sites.  Maybe worth a throttle or don't care switch. Maybe not.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We already have one:
&lt;/p&gt;
&lt;pre class="wiki"&gt;	$stats = apply_filters('wp_count_comments', array(), $post_id);
	if ( !empty($stats) )
		return $stats;
&lt;/pre&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19901#comment:7" title="Comment 7"&gt;coffee2code&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Any performance difference in doing an &lt;code&gt;IN()&lt;/code&gt; as opposed to separate queries?
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;SELECT COUNT( comment_ID ) FROM wp_comments WHERE comment_approved IN ( 'trash', 'spam', '0', 'post-trash' );&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Could then throw a filter on the comment statuses prior to inclusion in the &lt;code&gt;IN()&lt;/code&gt; so non-public comments can be omitted.  Which somewhat ties in with...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That only gives you the total. We need the count for each comment_approved status.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19903 (wp_count_comments() and get_comments_count() both do SQL queries) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:28:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19903#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19903#comment:2/1327627703815176</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Wouldn't it make better sense to simply get rid of get_comment_count and make wp_count_comments count in the optimised way
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, probably would. I think I was just thinking we needed both because I'd assumed that core needed the non-cached one, which isn't the case... it doesn't use it at all.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19762-quicktags-docblock.diff attached to Ticket #19906</title>
      
        <dc:creator>jeremyclarke</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:06:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19906/19762-quicktags-docblock.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19906/19762-quicktags-docblock.diff/1327626371460958</guid>
      <description>&lt;p&gt;
update qt.addButton() dockblock in quicktags.dev.js
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19906 (Quicktags docs recommend code causing JS error: Uncaught ...) created</title>
      
        <dc:creator>jeremyclarke</dc:creator>

      <pubDate>Fri, 27 Jan 2012 01:05:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19906</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19906/1327626344286669</guid>
      <description>&lt;p&gt;
Right now the docs for qt.addbutton in quicktags.dev.js have the following text:
&lt;/p&gt;
&lt;pre class="wiki"&gt;	 * If you are echoing JS directly from PHP,
	 * use add_action( 'admin_print_footer_scripts', 'output_my_js', 100 ) or add_action( 'wp_footer', 'output_my_js', 100 )
&lt;/pre&gt;&lt;p&gt;
This works, but if you add the QTags.addButton() calls on those hooks then they will cause JS errors on any screen without an editor:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;Uncaught ReferenceError: QTags is not defined&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
The issue is avoided if you use the other option, enqueuing a script dependent on 'quicktags', but that is a lot more work and forces all pages in the admin to load the quicktags script unnecessarily.
&lt;/p&gt;
&lt;p&gt;
Maybe there is some way to magically make calling QTags.addbutton() safe no matter what, but I think at minimum we need to add a note to the PHPdoc about checking QTags before using it, as that solves the problem pretty simply:
&lt;/p&gt;
&lt;pre class="wiki"&gt; if ( typeof QTags != 'undefined' ) {
	QTags.addButton( 'gv_translation', 'translation', '&amp;lt;div class="translation"&amp;gt;', '&amp;lt;/div&amp;gt;' );
}
&lt;/pre&gt;&lt;p&gt;
So the phodoc could say :
&lt;/p&gt;
&lt;pre class="wiki"&gt;	 * If you are echoing JS directly from PHP use
	 *	add_action( 'admin_print_footer_scripts', 'output_my_js', 100 )
	 * or
	 *	add_action( 'wp_footer', 'output_my_js', 100 )
	 *
	 * If echoing the addButton calls directly instead of enqueing with the 'quicktags' dependency
	 * make sure to check that the QTags object is defined first, otherwise your code will throw errors
	 * when no editor is present:
	 *	if ( typeof QTags != 'undefined' ) { QTags.addButton(...) }
	 *
&lt;/pre&gt;&lt;p&gt;
The attached patch just adds that to the docs. If a committer has a preferred wording then just use that instead, obviously the patch didn't take me long :)
&lt;/p&gt;
&lt;p&gt;
BTW: I created a Codex article with the docblock after not finding a reference to the new API anywhere other than in the JS file itself. Nacin's posts mentioned that they had changed but not what was new ;)
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://codex.wordpress.org/Quicktags_API"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://codex.wordpress.org/Quicktags_API&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Clearly it needs work, I didn't want to put too much time into it at first because I didn't understand the system yet (as I'm learning now, by finding JS errors).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #19904 (Trim Leading and Trailing White Space in a Post Title) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 27 Jan 2012 00:55:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19904#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19904#comment:3/1327625701733653</guid>
      <description>&lt;p&gt;
We already do this on display, so one of the few places you would indeed see this is ordering.
&lt;/p&gt;
&lt;p&gt;
This would handle it: &lt;code&gt;add_filter( 'trim', 'title_save_pre' );&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19904 (Trim Leading and Trailing White Space in a Post Title) updated</title>
      
        <dc:creator>jane</dc:creator>

      <pubDate>Fri, 27 Jan 2012 00:35:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19904#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19904#comment:2/1327624522296284</guid>
      <description>&lt;p&gt;
Yes, please.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>