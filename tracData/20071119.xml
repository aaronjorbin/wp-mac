<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 22:27:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:3/1195511273000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The phpass library looks like a reasonable basis for password hashing.
&lt;/p&gt;
&lt;p&gt;
That PHP encryption algorithm looks like something from the 19th century, and is almost certainly broken. Ignore it.
&lt;/p&gt;
&lt;p&gt;
Is there really nothing better than MD5 to use? For hashing SHA-1 is better and some proper symmetric block ciphers would also be useful.
&lt;/p&gt;
&lt;p&gt;
The scheme I was thinking of is something along the lines of storing salt,H(crypted salted password) in the database and in the cookie storing E(user id,crypted salted password,start time) and its HMAC; where H is the hash and E, HMAC are encryption and authentication under site-specific keys.
&lt;/p&gt;
&lt;p&gt;
This means that given the contents of the database, the attacker cannot create a valid cookie as you can't go from H(crypted salted password) to crypted salted password. Also, since the crypted salted password is encrypted it is infeasible to brute force the password given only a cookie. Setting a start time means that cookies can be expired and this timestamp can't be modified due to the HMAC.
&lt;/p&gt;
&lt;p&gt;
This is just an initial idea and more refinement and analysis are needed, but that's a rough outline.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5368 (It's not possible to replace the RSS parser (MagpieRSS) via a plugin) created</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:54:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5368</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5368/1195509257000000</guid>
      <description>&lt;p&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/5845" title="function_exists() wrapper around fetch_rss() to allow for plugin ..."&gt;r5845&lt;/a&gt; doesn't do as intended.
&lt;/p&gt;
&lt;p&gt;
The file &lt;code&gt;wp-includes/rss.php&lt;/code&gt; is loaded before plugins are loaded, therefore a plugin isn't able to replace the &lt;code&gt;fetch_rss()&lt;/code&gt; function (which was the intention of &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/5845" title="function_exists() wrapper around fetch_rss() to allow for plugin ..."&gt;r5845&lt;/a&gt;) as it's already been declared in &lt;code&gt;wp-includes/rss.php&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Not sure what to do about this one aside from moving &lt;code&gt;fetch_rss()&lt;/code&gt; into &lt;code&gt;wp-includes/pluggable.php&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>5365.2.diff attached to Ticket #5365</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:42:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5365/5365.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5365/5365.2.diff/1195508551000000</guid>
      <description>&lt;p&gt;
Complete patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>5365.diff attached to Ticket #5365</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:30:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5365/5365.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5365/5365.diff/1195507823000000</guid>
      <description>&lt;p&gt;
Check if REQUEST_METHOD is POST
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:28:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:2/1195507690000000</guid>
      <description>&lt;p&gt;
This vulnerability been assigned the CVE candidate ID &lt;a class="ext-link" href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6013"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;CVE-2007-6013&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5365 (Still getting cookie error messages) updated</title>
      
        <dc:creator>WCityMike</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:18:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5365#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5365#comment:1/1195507094000000</guid>
      <description>&lt;p&gt;
Please note that in thread marked &lt;a class="ext-link" href="http://wordpress.org/support/topic/144079"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/144079&lt;/a&gt;, reporting user has WordPress install in main folder; WordPress address (URL) is same as Blog address (URL).
&lt;/p&gt;
&lt;p&gt;
Also user xknown seems to have offered a patch that successfully stops the error ...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:13:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:1/1195506787000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Would phpass &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/1" title="New repository initialized by cvs2svn."&gt;[1]&lt;/a&gt; for salting and hashing passwords plus a two-way salted encryption (such as &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/2" title="*** empty log message ***
"&gt;[2]&lt;/a&gt;) on cookies be good enough?  Are there more contemporary libraries to consider that are portable enough for WP's needs?
&lt;/p&gt;
&lt;p&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/1" title="New repository initialized by cvs2svn."&gt;[1]&lt;/a&gt; &lt;a class="ext-link" href="http://www.openwall.com/phpass/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.openwall.com/phpass/&lt;/a&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/2" title="*** empty log message ***
"&gt;[2]&lt;/a&gt; &lt;a class="ext-link" href="http://www.tonymarston.net/php-mysql/encryption.html#2004-08-27"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.tonymarston.net/php-mysql/encryption.html#2004-08-27&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5364 (Cron not updated correctly when deleting a future post) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Mon, 19 Nov 2007 20:29:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5364#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5364#comment:2/1195504176000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4627 (Link manager exploit?) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 19:23:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4627#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4627#comment:23/1195500228000000</guid>
      <description>&lt;p&gt;
An attacker used the vulnerability described in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5367" title="#5367: defect (bug): Wordpress cookie authentication vulnerability (closed: fixed)"&gt;#5367&lt;/a&gt; to post spam links on my blog. Could that be it?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) created</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 19:06:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367/1195499210000000</guid>
      <description>&lt;h1 id="WordpressCookieAuthenticationVulnerability"&gt;Wordpress Cookie Authentication Vulnerability&lt;/h1&gt;
&lt;p&gt;
Original release date: 2007-11-19&lt;br /&gt;
Last revised: 2007-11-19&lt;br /&gt;
Latest version: &lt;a class="ext-link" href="http://www.cl.cam.ac.uk/users/sjm217/advisories/wordpress-cookie-auth.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.cl.cam.ac.uk/users/sjm217/advisories/wordpress-cookie-auth.txt&lt;/a&gt; &lt;br /&gt;
CVE ID: &amp;lt;pending&amp;gt;&lt;br /&gt;
Source: Steven J. Murdoch &lt;a class="ext-link" href="http://www.cl.cam.ac.uk/users/sjm217/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.cl.cam.ac.uk/users/sjm217/&lt;/a&gt; &lt;br /&gt;
&lt;/p&gt;
&lt;h2 id="SystemsAffected:"&gt;Systems Affected:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
Wordpress 1.5 -- 2.3.1 (including current version, as of 2007-11-19)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="Overview:"&gt;Overview:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
With read-only access to the Wordpress database, it is possible to
generate a valid login cookie for any account, without resorting to a
brute force attack. This allows a limited SQL injection vulnerability
to be escalated into administrator access.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
This vulnerability is known to be actively exploited, hence the
expedited public release.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="I.Description"&gt;I. Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
For authentication, the Wordpress user database stores the MD5 hash
of login passwords. A client is permitted access if they can present a
password whose hash matches the stored one.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="wiki"&gt; $ mysql -u wordpress -p wordpress
   Enter password: ********
   mysql&amp;gt; SELECT ID, user_login, user_pass FROM wp_users;
   +----+-------------+----------------------------------+
   | ID | user_login  | user_pass                        |
   +----+-------------+----------------------------------+
   |  1 | admin       | 4cee2c84f6de6d89a4db4f2894d14e38 |
   ...
&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;
Of course, entering your password after each action that requires
authorization would be exceptionally tedious. So, after logging in,
Wordpress presents the client with two cookies:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
wordpressuser_6092254072ca971c70b3ff302411aa5f=admin
wordpresspass_6092254072ca971c70b3ff302411aa5f=813cadd8658c4776afbe5de8f304a684
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
The cookie names contains the MD5 hash (6092...1a5f) of the blog URL.
The value of wordpressuser_... is the login name, and the value of
wordpresspass is the double-MD5 hash of the user password.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
Wordpress will permit access to a given user account if the
wordpressuserpass_... cookie matches the hash of the specified user's
wp_users.user_pass database entry.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
In other words, the database contains MD5(password) and the cookie
contains MD5(MD5(password)). It is thus trivial to convert a database
entry into an authentication cookie.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
At this point the vulnerability should be clear. If an attacker can
gain read access to the wp_user table, for example due to a publicly
visible backup or SQL injection vulnerability, a valid cookie can be
generated for any account.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
This applies even if the user's password is sufficiently complex to
resist brute force and rainbow table attacks. While it should be
computationally infeasible to go backwards from MD5(password) to
password, the attacker needs only to go forwards.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
The exploitation steps are therefore:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
1) Find the hash of the blog URL: Either just look at the URL, or
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
create an account to get a user cookie
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
2) Read the user_pass entry from wp_users table: Look for
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
backups, perform SQL injection, etc...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
3) Set the following cookies:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
wordpressuser_&amp;lt;MD5(url)&amp;gt;=admin
wordpresspass_&amp;lt;MD5(url)&amp;gt;=MD5(user_pass)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
4) You have admin access to the blog
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id="II.Impact"&gt;II. Impact&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
A remote attacker, with read access to the password database can gain
administrator rights. This may be used in conjunction with an SQL
injection attack, or after locating a database backup.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
An attacker who has alternatively compromised the database of one
Wordpress blog can also gain access to any other whose users have the
same password on both.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="III.Solution"&gt;III. Solution&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
No vendor patch is available.
No timeline for a vendor patch has been announced.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="Workarounds:"&gt;Workarounds:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Protect the Wordpress database, and do not allow backups to be
released.
&lt;/li&gt;&lt;li&gt;Keep your Wordpress installation up to date. This should reduce the
risk that your database will be compromised.
&lt;/li&gt;&lt;li&gt;Do not share passwords across different sites.
&lt;/li&gt;&lt;li&gt;If you suspect a database to be compromised, change all passwords
to different ones. It is not adequate to change the passwords to
the same ones, since Wordpress does not "salt" [1] the password
database.
&lt;/li&gt;&lt;li&gt;Remove write permissions on the Wordpress files for the system
account that the webserver runs as. This will disable the theme
editor, but make it more difficult to escalate Wordpress
administrator access into the capability to execute arbitrary code
&lt;/li&gt;&lt;li&gt;Configure the webserver to not execute files in any directory
writable by the webserver system account (e.g. the upload
directory).
&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Potentialfixes:"&gt;Potential fixes:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;
The problem occurs because it is easy to go from the password hash
in the database to a cookie (i.e the application of MD5 is the wrong
way around). The simplest fix is to store MD5(MD5(password)) in the
database, and make the cookie MD5(password). This still makes it
infeasible to retrieve the password from a cookie, but means that it
is also infeasible to generate a valid cookie from the database
entry.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
However, there are other vulnerabilities in the Wordpress cookie and
password handling, which should be resolved too:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;Passwords are unsalted [2], leaving them open to brute force, rainbow
table and other attacks [3].
&lt;/li&gt;&lt;li&gt;It is impossible to revoke a cookie without changing the user's
password.
&lt;/li&gt;&lt;li&gt;Cookies do not contain an expiry time, so are always valid (until
the user's password changes)
&lt;/li&gt;&lt;li&gt;There ought to be an option to limit cookies to a particular
IP address or range.
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="References:"&gt;References:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
[1] &lt;a class="ext-link" href="http://en.wikipedia.org/wiki/Salt_(cryptography"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://en.wikipedia.org/wiki/Salt_(cryptography&lt;/a&gt;) &lt;br /&gt;
[2] &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/2394"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/2394&lt;/a&gt; &lt;br /&gt;
[3] &lt;a class="ext-link" href="http://www.lightbluetouchpaper.org/2007/11/16/google-as-a-password-cracker/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.lightbluetouchpaper.org/2007/11/16/google-as-a-password-cracker/&lt;/a&gt; &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="Timeline:"&gt;Timeline:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
2007-10-29: security@… notified; no response &lt;br /&gt;
2007-11-02: security@… notified; Confirmation of active exploitation requested by Wordpress &lt;br /&gt;
2007-11-02: Confirmation sent; no response &lt;br /&gt;
2007-11-19: Advisory released to full-disclosure and BugTraq &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5366 (XMLRPC interface misinterprets mt_allow_comments value) created</title>
      
        <dc:creator>redsweater</dc:creator>

      <pubDate>Mon, 19 Nov 2007 18:17:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5366</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5366/1195496232000000</guid>
      <description>&lt;p&gt;
WordPress's XMLRPC interface makes an understandable mistake when interpreting the mt_allow_comments field.
&lt;/p&gt;
&lt;p&gt;
The field as described and used by MovableType and others is actually a ternary value with integer values meaning:
&lt;/p&gt;
&lt;p&gt;
0 - None - No comments allowed
1 - Open - Comments can be read and write
2 - Closed - Comments can be read but not written
&lt;/p&gt;
&lt;p&gt;
WordPress doesn't have a notion of "read-only comments" but it needs to do something accurate when the "2" (closed) value is passed to the XMLRPC interface.
&lt;/p&gt;
&lt;p&gt;
Right now what it does is fail to recognize 2 as a valid input, and defaults to the system default comment status.
&lt;/p&gt;
&lt;p&gt;
I believe it should map "2" -&amp;gt; "closed" so that the expected behavior of halting further comments is obtained by the user. The typical scenario now is that the blog defaults to "open" comments, so when a user of a client application specifies "closed" for the comment status, the server defaults it back to "open" ... exactly the opposite of the user's desire.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5365 (Still getting cookie error messages) created</title>
      
        <dc:creator>MichaelH</dc:creator>

      <pubDate>Mon, 19 Nov 2007 16:20:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5365</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5365/1195489239000000</guid>
      <description>&lt;p&gt;
Still getting cookie error messages, even after upgrade to 2.3.1.  WordPress is in sub-folder so the WordPress address (URL) is different than Blog address (URL).
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
ERROR: WordPress requires Cookies but your browser does not support them or they are blocked.
&lt;/p&gt;
&lt;p&gt;
ERROR: The username field is empty.
&lt;/p&gt;
&lt;p&gt;
ERROR: The password field is empty.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Also get this after logging out:
&lt;/p&gt;
&lt;p&gt;
ERROR: The username field is empty.
&lt;/p&gt;
&lt;p&gt;
ERROR: The password field is empty.
&lt;/p&gt;
&lt;p&gt;
Successfully logged you out.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Apache version        1.3.37 (Unix)
PHP version        4.4.7
MySQL version        4.1.22-standard
&lt;/p&gt;
&lt;p&gt;
Also see &lt;a class="ext-link" href="http://wordpress.org/support/topic/144079"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/144079&lt;/a&gt; for a related report.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3820 (Squid in accelerator mode; Permalink "mod_rewrite" problem.) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Mon, 19 Nov 2007 15:54:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3820#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3820#comment:11/1195487648000000</guid>
      <description>&lt;p&gt;
See also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/3686" title="#3686: defect (bug): index page gives 404 when using non-default permalinks (closed: duplicate)"&gt;#3686&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3686 (index page gives 404 when using non-default permalinks) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Mon, 19 Nov 2007 15:53:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3686#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3686#comment:16/1195487588000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3686 (index page gives 404 when using non-default permalinks) closed</title>
      
        <dc:creator>jamesw</dc:creator>

      <pubDate>Mon, 19 Nov 2007 15:44:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3686#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3686#comment:15/1195487062000000</guid>
      <description>duplicate: &lt;p&gt;
Looking into this, it appears this problem is due to Squid, much like &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/3820"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/3820&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Perhaps someone of suita ble authority could merge the tickets?
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [6341]: Do two sets of filters on posts query.  First set is used by regular ...</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 18 Nov 2007 19:36:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/6341</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/6341/1195414590448926</guid>
      <description>&lt;p&gt;
Do two sets of filters on posts query.  First set is used by regular plugins, second by caching plugins.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5276 (Allow wp-config.php to be used without including wp-settings.php) updated</title>
      
        <dc:creator>DD32</dc:creator>

      <pubDate>Sun, 18 Nov 2007 10:05:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5276#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5276#comment:15/1195380351000000</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
But the cases you mention are then merely a matter of replacing calls ...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
True, Which was why i was asking which was the intended behaviour to be included.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>