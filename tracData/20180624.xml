<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #44448 (French Smart Quotes don't close properly most of the times) updated</title>
      
        <dc:creator>Trollivier</dc:creator>

      <pubDate>Sun, 24 Jun 2018 21:47:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44448#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44448#comment:3/1529876875379817</guid>
      <description>&lt;p&gt;
Thanks for your feedback.
&lt;/p&gt;
&lt;p&gt;
Honestly I'm no developer so I more or less know what I'm doing. I have the French version of WordPress.
&lt;/p&gt;
&lt;p&gt;
I always use the double quotes while writing "in quotes"
&lt;/p&gt;
&lt;p&gt;
And I end up with this French quotes once the article is published. This isn't caused by a plugin, that's for sure. Any French version of WordPress I used always did this.
&lt;/p&gt;
&lt;p&gt;
All I want is for smart quotes to act like they should.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>missing-files.png attached to Ticket #40439</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 19:55:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40439/missing-files.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40439/missing-files.png/1529870106870212</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>40439.patch attached to Ticket #40439</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 19:53:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40439/40439.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40439/40439.patch/1529870008574896</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40439 (Save progress of intermediate image creation after upload) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 19:41:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40439#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40439#comment:10/1529869292761964</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
In 40439.patch:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Abstract/expose creating of an image sub-size in class-wp-image-editor-imagick.php and class-wp-image-editor-gd.php. Note that I didn't change the signature of Class_WP_Image_Editor as "something" may be extending it.
&lt;/li&gt;&lt;li&gt;Refactor &lt;code&gt;wp_generate_attachment_metadata()&lt;/code&gt; a bit, move the creation of image sub-sizes to a new function: &lt;code&gt;_wp_create_image_subsizes()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Add couple more helper functions for creating and checking of image sub-sizes.
&lt;/li&gt;&lt;li&gt;Add &lt;code&gt;wp_update_image_attachment_sizes()&lt;/code&gt; that tries to create all missing sub-sized of an image.
&lt;/li&gt;&lt;li&gt;Add &lt;code&gt;wp_check_image_attachment_sizes()&lt;/code&gt; that is used to check whether all sub-sizes were created successfully.
&lt;/li&gt;&lt;li&gt;Use the above function in the Media Library list-table to check for missing image sizes and add a button if any are found, so the user can create them.
&lt;/li&gt;&lt;li&gt;Add AJAX for the above.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
This started as a "quick test" to see exactly how difficult it may be to add that functionality (I know, it's Sunday, but...) :)
&lt;/p&gt;
&lt;p&gt;
TODO: needs UI/UX review and perhaps some design for how to add the messages and the button to the Media Library grid view (and the media modal?). Also probably needs some cleanup, and of course: testing!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44448 (French Smart Quotes don't close properly most of the times) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sun, 24 Jun 2018 19:19:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44448#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44448#comment:2/1529867940974598</guid>
      <description>&lt;p&gt;
The CSS of a page has a lot to do with how the quotes are shown.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="ext-link" href="https://github.com/Automattic/_s/issues/1192"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/Automattic/_s/issues/1192&lt;/a&gt;
where I was advocating removing the styles for this from the base theme framework, because it overrides what the browser is doing by default (which handles more cases).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44448 (French Smart Quotes don't close properly most of the times) updated</title>
      
        <dc:creator>audrasjb</dc:creator>

      <pubDate>Sun, 24 Jun 2018 18:57:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44448#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44448#comment:1/1529866667122580</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi and welcome to WordPress Trac @Trollivier !
&lt;/p&gt;
&lt;p&gt;
As far as I know, there is no automatic replacement for localized quote characters in WordPress Core.
&lt;/p&gt;
&lt;p&gt;
Are you sure you didn't installed a WP plugin (or a browser plugin/add-on) to manage quote replacement?
&lt;/p&gt;
&lt;p&gt;
Cheers,
Jb
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43524 (Add another default image size) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 18:57:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43524#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43524#comment:7/1529866653049047</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43524#comment:6" title="Comment 6"&gt;joyously&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Could the 2x stuff be made optional?
Most of the sites I work with do not need this
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You mean you never use "large" image size on a retina screen? What about your site's visitors, do any of them have larger high-density screens? :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 18:55:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441#comment:6/1529866502501438</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/44441#comment:5" title="Comment 5"&gt;joyously&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
No, I don't think I misunderstood. I'm saying that the user should be able to choose the sizes manually.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Two things:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;All current sizes will still be created and be available for the user to choose. This ticket is about reducing pointless options (clutter) on the Settings =&amp;gt; Media screen.
&lt;/li&gt;&lt;li&gt;When using &lt;code&gt;srcset&lt;/code&gt; the image size that is selected by the user does not matter. Example: if the user selects "large" size, the browser may download the "medium" size instead if the width of the displayed image is small. The image &lt;code&gt;src&lt;/code&gt; attribute is not used by the browser. The &lt;code&gt;srcset&lt;/code&gt; is used instead.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
I have never understood why the sizes need to be generated on upload (and mostly never used) when they could easily be served as needed, like in the Dynamic Image Sizes plugin.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Unfortunately this is not as easily done as it appears. Depends on the hosting account. I believe there are few (old) tickets for that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44448 (French Smart Quotes don't close properly most of the times) created</title>
      
        <dc:creator>Trollivier</dc:creator>

      <pubDate>Sun, 24 Jun 2018 18:42:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44448</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44448/1529865732834826</guid>
      <description>&lt;p&gt;
Half the time, when I use quotes, they are replaced by French smart quotes. The opening quote is always ok, but the closing ones are wrong half the time. It is excessively infuriating as I don't know how not to use Smart Quotes.
&lt;/p&gt;
&lt;p&gt;
See example below :
&lt;/p&gt;
&lt;p&gt;
--- remplacer « femmes » par « parents«. ---
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Bildschirmfoto 2018-06-24 um 18.44.36.png attached to Ticket #44447</title>
      
        <dc:creator>Benjamin_Zekavica</dc:creator>

      <pubDate>Sun, 24 Jun 2018 16:47:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44447/Bildschirmfoto%202018-06-24%20um%2018.44.36.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44447/Bildschirmfoto%202018-06-24%20um%2018.44.36.png/1529858840931454</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #44447 (Failed to load resource: net::ERR_FILE_NOT_FOUND) created</title>
      
        <dc:creator>Benjamin_Zekavica</dc:creator>

      <pubDate>Sun, 24 Jun 2018 16:47:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44447</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44447/1529858823774889</guid>
      <description>&lt;p&gt;
On much WordPress Installtions I get a error message in Browser Console Log:
Failed to load resource: net::ERR_FILE_NOT_FOUND
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://s2.imagebanana.com/file/180624/Sr5WLwhj.png"&gt;&lt;img src="https://s2.imagebanana.com/file/180624/Sr5WLwhj.png" alt="https://s2.imagebanana.com/file/180624/Sr5WLwhj.png" crossorigin="anonymous" title="https://s2.imagebanana.com/file/180624/Sr5WLwhj.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>36824.10.diff attached to Ticket #36824</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sun, 24 Jun 2018 16:29:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36824/36824.10.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36824/36824.10.diff/1529857775060802</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36824 (do_all_pings function queries all posts) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sun, 24 Jun 2018 16:22:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36824#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36824#comment:41/1529857324588138</guid>
      <description>&lt;p&gt;
The patch in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36824/36824.10.diff" title="Attachment '36824.10.diff' in Ticket #36824"&gt;36824.10.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36824/36824.10.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adds unit tests for &lt;code&gt;do_enclose()&lt;/code&gt; to help with the ticket. First pass.
&lt;/li&gt;&lt;li&gt;Adds &lt;code&gt;@return&lt;/code&gt; for &lt;code&gt;do_enclose()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Adjusts the &lt;code&gt;! empty( get_to_ping( $post_id ) )&lt;/code&gt; from &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36824/36824.9.diff" title="Attachment '36824.9.diff' in Ticket #36824"&gt;36824.9.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36824/36824.9.diff" title="Download"&gt;​&lt;/a&gt; to avoid &lt;code&gt;Fatal error: Can't use function return value in write context&lt;/code&gt; for PHP &amp;lt; 5.5.
&lt;/li&gt;&lt;li&gt;Removes the seemingly unused global &lt;code&gt;$wpdb&lt;/code&gt; in &lt;code&gt;do_all_pings()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Removes doc block for &lt;code&gt;$wpdb&lt;/code&gt; in &lt;code&gt;do_all_pings()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Added end-of-line dots for inline comments in &lt;code&gt;do_all_pings()&lt;/code&gt;.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44446 (PHP Warning in error log) closed</title>
      
        <dc:creator>dingo_bastard</dc:creator>

      <pubDate>Sun, 24 Jun 2018 15:46:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44446#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44446#comment:1/1529855163839515</guid>
      <description>invalid: &lt;p&gt;
Hi @Hemant Ahir! Does this also happen when you switch the theme to any of the twenty* themes and if you turn off the plugins you have on the site?
&lt;/p&gt;
&lt;p&gt;
This sounds more like a theme/plugin issue than core issue to me. It's better suited for forums, so I'd recommend that you ask there: &lt;a class="ext-link" href="https://wordpress.org/support/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #44446 (PHP Warning in error log) created</title>
      
        <dc:creator>Hemant Ahir</dc:creator>

      <pubDate>Sun, 24 Jun 2018 15:06:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44446</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44446/1529852772221513</guid>
      <description>&lt;p&gt;
Hi
we are getting this error from today in error log. we have latest version of WordPress and i haven't used this function anywhere in my theme.
&lt;/p&gt;
&lt;p&gt;
[24-Jun-2018 05:18:26 UTC] PHP Warning:  mktime() expects parameter 6 to be integer, string given in /home/tsumi/public_html/wp/wp-includes/date.php on line 319
&lt;/p&gt;
&lt;p&gt;
Can you please double check.
&lt;/p&gt;
&lt;p&gt;
Thanks
Ahir
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43524 (Add another default image size) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sun, 24 Jun 2018 14:07:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43524#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43524#comment:6/1529849222963258</guid>
      <description>&lt;p&gt;
Could the 2x stuff be made optional?
Most of the sites I work with do not need this, and it seems like such a waste of disk space (out of the client's quota), along with not needing to worry about that extra processing causing timeouts, etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>44445-remove-all.patch attached to Ticket #44445</title>
      
        <dc:creator>ayeshrajans</dc:creator>

      <pubDate>Sun, 24 Jun 2018 14:04:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44445/44445-remove-all.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44445/44445-remove-all.patch/1529849082023737</guid>
      <description>&lt;p&gt;
Completely removes the dead &lt;code&gt;__destruct&lt;/code&gt; and &lt;code&gt;register_shutdown_function&lt;/code&gt; call.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #44445 (wp_cache_init() and WP_Object_Cache constructor has a memory leak) updated</title>
      
        <dc:creator>ayeshrajans</dc:creator>

      <pubDate>Sun, 24 Jun 2018 14:03:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44445#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44445#comment:1/1529849013613037</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The destructor simply returns true and doesn't clean up anything that could've prevented the said memory leak. Even the oldest state of cache.php file I could find (&lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/blob/b43712e0f79a9f5bea52217e06155e2f471c490c/src/wp-includes/cache.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/wordpress-develop/blob/b43712e0f79a9f5bea52217e06155e2f471c490c/src/wp-includes/cache.php&lt;/a&gt;, oldest checkout available 5 years ago) has the exact same code. I'm pretty sure this is dead code, which we should probably remove from the root.
&lt;/p&gt;
&lt;p&gt;
With the &lt;code&gt;__destruct&lt;/code&gt; and shut down function registration removed, the test suite still passes: &lt;a class="ext-link" href="https://travis-ci.org/Ayesh/wordpress-develop/builds/396071330"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://travis-ci.org/Ayesh/wordpress-develop/builds/396071330&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I will attach the patch for reference.
&lt;/p&gt;
&lt;p&gt;
With the patch applied, PHP 7.1 test suite completed the execution and memory usage statistics from PHPUnit are identical when compared to a Travis results before the patch (&lt;a class="ext-link" href="https://travis-ci.org/Ayesh/wordpress-develop/jobs/396068504"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://travis-ci.org/Ayesh/wordpress-develop/jobs/396068504&lt;/a&gt;)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sun, 24 Jun 2018 13:57:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441#comment:5/1529848626450102</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Uh, sorry, seems I didn't explain it well and you misunderstood :)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, I don't think I misunderstood. I'm saying that the user should be able to choose the sizes manually. My theme (and perhaps others) defines the content_width by what the user has already chosen for Large width, since that is what all the images already are sized to. The user knows what his site will need, and what size his images will likely be. WordPress does not.
&lt;/p&gt;
&lt;p&gt;
See this recent forum post: &lt;a class="ext-link" href="https://wordpress.org/support/topic/resized-images-much-bigger-than-original-ones/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/resized-images-much-bigger-than-original-ones/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I have never understood why the sizes need to be generated on upload (and mostly never used) when they could easily be served as needed, like in the Dynamic Image Sizes plugin.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36824 (do_all_pings function queries all posts) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 24 Jun 2018 13:25:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36824#comment:40</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36824#comment:40/1529846737757709</guid>
      <description>&lt;p&gt;
I gave using postmeta a shot, by setting the flag if there are any URLs to ping when published.
&lt;/p&gt;
&lt;p&gt;
Does this address that issue?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36824.9.diff attached to Ticket #36824</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 24 Jun 2018 13:23:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36824/36824.9.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36824/36824.9.diff/1529846617947250</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36824 (do_all_pings function queries all posts) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 24 Jun 2018 12:49:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36824#comment:39</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36824#comment:39/1529844550373819</guid>
      <description>&lt;p&gt;
@boonebgorges _pingme is only for pingbacks, and _encloseme does the same thing for enclosures. It adds a property that, if set, triggers that operation for that particular post.
&lt;/p&gt;
&lt;p&gt;
Trackbacks use a different system, where there is a field in the post called to_ping that must not be empty, and that is a list of the URLs to send trackbacks to. The issue being that trackbacks don't have to have an established link to the post they are sending to, and pingbacks do.
&lt;/p&gt;
&lt;p&gt;
Right now, regarding support for trackbacks, I have ticket &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/39960" title="#39960: defect (bug): Separate Supported Status for Trackbacks and Pingbacks (new)"&gt;#39960&lt;/a&gt; which tries to separate trackback and pingback support, which needs debate as that would be a breaking change. But, the way WordPress is set up at this exact moment, the trackback UI will not be enabled on a post unless the trackbacks support function is there. Trackbacks, unlike pingbacks, are manually initiated. So, if anyone was expecting them, it wouldn't be delivering unless they did something else I can't predict.
&lt;/p&gt;
&lt;p&gt;
As for the issue with the _pingme and the publish_post...I never noticed that till now. That would seem to be a bug as any post type can declare pingback and trackback support and it should work to send them. Maybe it does make sense to fix that at some point.
&lt;/p&gt;
&lt;p&gt;
to_ping is set in _wp_translate_postdata .
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44427 (Introduce lazy-loading API for media and other elements) updated</title>
      
        <dc:creator>jonoaldersonwp</dc:creator>

      <pubDate>Sun, 24 Jun 2018 09:22:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44427#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44427#comment:2/1529832178253264</guid>
      <description>&lt;p&gt;
This feels like a great win for performance, standards, carbon, etc. The SEO and performance nerd in me loves this.
&lt;/p&gt;
&lt;p&gt;
Is there any reason why we can't/shouldn't implement this, verbatim, as per the &lt;a class="ext-link" href="https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Google documentation&lt;/a&gt; (using the &lt;code&gt;event handlers&lt;/code&gt; method, until such time as the &lt;code&gt;intersection observer&lt;/code&gt; method is universally supported)?
&lt;/p&gt;
&lt;p&gt;
Given how minimal the JS size and processing overhead is, and given that we'll want lazy-loading to be default &lt;em&gt;on&lt;/em&gt; (at least, in future/ongoing theme dev etc), I've no objections to the JS being autoloaded on all front-end requests (unless it's specifically disabled/de-enqueued).
&lt;/p&gt;
&lt;p&gt;
I do think that there may be some nuance in implementation; some scenarios:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Inline images, inserted in content; where we'll be adding a bunch of &lt;code&gt;data-&lt;/code&gt; params to the code. We'll need any existing or new filtering/validation to anticipate and manage this (or, to transform the code via a filter on &lt;code&gt;the_content&lt;/code&gt;, if we're concerned about code bloat or confusion in the content editor).
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
1a) Gutenberg blocks.
&lt;/p&gt;
&lt;p&gt;
1b) images in non-webpage context / where js isn't available, like REST or RSS.
&lt;/p&gt;
&lt;ol start="2"&gt;&lt;li&gt;Theme/template images which use &lt;code&gt;wp_get_attachment_image()&lt;/code&gt; or similar to output image HTML. We'll need to hook into these with an additional parameter (we &lt;em&gt;shouldn't&lt;/em&gt; make this a universal default/assumption, as many themes use 'hero images' in header areas where lazy-loading may produce an unwanted delay).
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;Theme/template images which use &lt;code&gt;wp_get_attachment_image_srcset()&lt;/code&gt; or similar to construct the output of the &lt;code&gt;img&lt;/code&gt;/&lt;code&gt;picture&lt;/code&gt; etc tag. This poses a challenge.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
The first and the second feel achievable; some settings, an extra parameter in the case of &lt;strong&gt;2&lt;/strong&gt;, and everything else can happen under the hood.
&lt;/p&gt;
&lt;p&gt;
The third feels like the messiest for easy adoption; we're relying on a significant change to coding approaches, which @mor10 rightly wants to avoid. Thoughts appreciated!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40439 (Save progress of intermediate image creation after upload) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 08:47:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40439#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40439#comment:9/1529830064700227</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This seems simple enough to implement: instead of generating all image sizes and saving them first, then updating the image_meta in the db, we should be updating the meta after each size is created. That way if a size creation fails for some reason, we will be able to re-run that loop and create any missing sizes (and add the meta for them).
&lt;/p&gt;
&lt;p&gt;
It's true, this will write to the db a few times more, but that is negligible overhead compared to timeouts of 30 seconds :)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The main downside is that &lt;code&gt;file_exists()&lt;/code&gt; lookup times can add up
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
True, but still negligible (compared with 30 sec. running). Also, not sure we should do &lt;code&gt;file_exists()&lt;/code&gt; for each newly created sub-size. If the file was saved successfully, it does exist at that point :)
&lt;/p&gt;
&lt;p&gt;
Thinking we should try this now. After this is implemented we can think of a good UI/UX to expose the ability to regenerate image sizes when some are missing, see &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/43525" title="#43525: enhancement: Add a method to generate the image subsizes with multiple requests (new)"&gt;#43525&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43524 (Add another default image size) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 08:35:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43524#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43524#comment:5/1529829333887049</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43524#comment:4" title="Comment 4"&gt;birgire&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
We can increase that :)
&lt;/p&gt;
&lt;p&gt;
Also been thinking if we would need 2x &lt;code&gt;medium_large&lt;/code&gt; size. That'd be 1536px (can round it up to 1600px?). This will be used for the 2x (retina) images in post_content, as the main column in pretty much all themes is not wider than 768px (800px).
&lt;/p&gt;
&lt;p&gt;
Adding these two new sizes will significantly improve the selection of image sizes, so the browsers will be able to pick a better match from the &lt;code&gt;srcset&lt;/code&gt; attribute when displaying images on the front-end. However it will also bump up the processing time/resource usage on the server when creating the image sub-sizes after uploading an image.
&lt;/p&gt;
&lt;p&gt;
This may cause more timeout errors on some shared hosting accounts. Ideally we should have a way of regenerating missing image sizes after an image is uploaded. That depends on &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/40439" title="#40439: enhancement: Save progress of intermediate image creation after upload (new)"&gt;#40439&lt;/a&gt; and &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/43525" title="#43525: enhancement: Add a method to generate the image subsizes with multiple requests (new)"&gt;#43525&lt;/a&gt; being done.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43437 (Add way for registered users to request deletion or anonymization of ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 08:09:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43437#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43437#comment:21/1529827747746084</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
To clear things up a bit: this ticket is about adding two buttons to the user profile screen:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Delete my account.
&lt;/li&gt;&lt;li&gt;Export my data.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
These buttons will trigger the confirmation email directly without an admin needing to do it (we will use the registered user's email for that). As the buttons won't be on the front-end, don't think we will need to care much about misuse, perhaps only reject duplicate requests.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 07:49:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441#comment:4/1529826580595297</guid>
      <description>&lt;p&gt;
Thinking more about this, we will probably also need to list what sizes are currently being created and a "Reset to default" button on the Settings =&amp;gt; Media screen.
&lt;/p&gt;
&lt;p&gt;
Plugins and themes can change the options, and even after deactivating a plugin or switching to another theme the changes remain. The users should be able to reset that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 07:18:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441#comment:3/1529824735524378</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 24 Jun 2018 07:12:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441#comment:2/1529824346002496</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/44441#comment:1" title="Comment 1"&gt;joyously&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Since they have been there awhile now, they are used for many other things. So removing them now...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Uh, sorry, seems I didn't explain it well and you misunderstood :)
&lt;/p&gt;
&lt;p&gt;
I'm not proposing to remove the image sizes. They are needed to be able to create proper srcset. In fact I think we would need to add another, larger size.
&lt;/p&gt;
&lt;p&gt;
What I'm proposing is to remove the settings for the &lt;code&gt;medium&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; sizes from the "Settings =&amp;gt; Media" screen as changing them "by hand" doesn't make sense any more. In fact there is already another default size: &lt;code&gt;medium_large&lt;/code&gt;, 768px width, that is not shown there :)
&lt;/p&gt;
&lt;p&gt;
Wondering if themes and plugins should still be able to change these sizes (for now), although that doesn't make much sense either.
&lt;/p&gt;
&lt;p&gt;
This will improve the creation of the &lt;code&gt;srcset&lt;/code&gt; attribute as we will have a number of reliable, uniform sizes created for each image, so the browser will have more alternatives when picking which image file to download on the front-end.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>44445-restrict-call.patch attached to Ticket #44445</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 24 Jun 2018 05:06:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44445/44445-restrict-call.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44445/44445-restrict-call.patch/1529816760939661</guid>
      <description>&lt;p&gt;
This patch restricts the call to register_shutdown_function() to be called only once.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>44445-remove-call.patch attached to Ticket #44445</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 24 Jun 2018 05:02:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44445/44445-remove-call.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44445/44445-remove-call.patch/1529816528459094</guid>
      <description>&lt;p&gt;
This patch removes the call to register_shutdown_function().
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #44445 (wp_cache_init() and WP_Object_Cache constructor has a memory leak) created</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 24 Jun 2018 05:00:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44445</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44445/1529816447124113</guid>
      <description>&lt;p&gt;
When calling &lt;code&gt;wp_cache_init()&lt;/code&gt; repeated in unit testing the WP_Object_Cache::&lt;span class="underline"&gt;contruct() repeatedly registers '&lt;/span&gt;destruct' as a shutdown function, and each time it does it leaks memory.
&lt;/p&gt;
&lt;p&gt;
There is a @todo comment above the &lt;code&gt;register_shutdown_hook()&lt;/code&gt; that says the following so I would assume that this is no longer needed and we could just delete the line with the register_shutdown_hook()?
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;This should be moved to the PHP4 style constructor, PHP5 already calls &lt;span class="underline"&gt;destruct()&lt;/span&gt;&lt;/em&gt;&lt;span class="underline"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I will upload a patch to delete the list, and a different patch to only call &lt;code&gt;register_shutdown_hook()&lt;/code&gt; once, depending on what is appropriate.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #44444 (CURIEs are not evaluated for link headers) created</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sun, 24 Jun 2018 03:17:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44444</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44444/1529810250554752</guid>
      <description>&lt;p&gt;
A registered CURIE is not used when adding a link via &lt;code&gt;WP_REST_Response::link_header()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The most straightforward to fix this would be to do it in the &lt;code&gt;WP_REST_Response&lt;/code&gt; object, but that would be modifying the original response object which we don't do in the existing CURIE handler.
&lt;/p&gt;
&lt;p&gt;
Alternately, we'd modify the headers before they are sent in &lt;code&gt;WP_REST_Server::serve_request()&lt;/code&gt; and do the string replace on the complete &lt;code&gt;Link&lt;/code&gt; header string.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #44443 (Confusing Documentation in WP_Term_Query::__construct()) updated</title>
      
        <dc:creator>jeremyescott</dc:creator>

      <pubDate>Sun, 24 Jun 2018 02:15:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44443#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44443#comment:2/1529806529810959</guid>
      <description>&lt;p&gt;
I'm so sorry! What a terrible title. I read and re-read the post content and didn't write a proper title.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44443 (Confusing Documentation in WP_Term_Query::__construct()) updated</title>
      
        <dc:creator>jeremyescott</dc:creator>

      <pubDate>Sun, 24 Jun 2018 02:07:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44443#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44443#comment:1/1529806021396102</guid>
      <description>&lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44443 (Confusing Documentation in WP_Term_Query::__construct()) created</title>
      
        <dc:creator>jeremyescott</dc:creator>

      <pubDate>Sun, 24 Jun 2018 02:06:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44443</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44443/1529805975848561</guid>
      <description>&lt;p&gt;
So I'm working on a pesky issue around a get_terms() call that, of course, uses WP_Term_Query::&lt;span class="underline"&gt;construct() and, while I fixed the issue (it was my fault) I spent some time in docs and in fact I got quite confused by an aspect of documentation, which I fully believe is an error.
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
from wp-includes/class-wp-term-query.php: 99
&lt;/p&gt;
&lt;pre class="wiki"&gt;/* [...]
 *     @type string       $orderby                Field(s) to order terms by. Accepts term fields ('name',
 *                                                'slug', 'term_group', 'term_id', 'id', 'description', 'parent'),
 *                                                'count' for term taxonomy count, 'include' to match the
 *                                                'order' of the $include param, 'slug__in' to match the
 *                                                'order' of the $slug param, 'meta_value', 'meta_value_num',
 *                                                the value of `$meta_key`, the array keys of `$meta_query`, or
 *                                                'none' to omit the ORDER BY clause. Defaults to 'name'.
 * [...]
 */
&lt;/pre&gt;&lt;p&gt;
My problem is with this bit:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
'count' for term taxonomy count,
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
A term doesn't have taxonomy, right? A taxonomy has terms, but not terms taxonomy. I personally believe this should read (because it matches behavior):
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
'count' for number of posts in term count
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Or something like that.
&lt;/p&gt;
&lt;p&gt;
Is this correct? I don't think I'm crazy, but I'd love a second opinion. If I get some agreement, I'll either happily write a patch or let this one be a "good-first-patch" for a newbie!
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33123 (Filter on theme mod default value) updated</title>
      
        <dc:creator>greenshady</dc:creator>

      <pubDate>Sat, 23 Jun 2018 19:15:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33123#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33123#comment:3/1529781325513830</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33123#comment:2" title="Comment 2"&gt;joyously&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The example given is not the only way to filter default values, and it wouldn't even work correctly, because the &lt;code&gt;theme_mod_{$name}&lt;/code&gt; filter is applied to both the db value and the default value.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Like I said, it is a janky way to do it.  However, it absolutely does work.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Another way to filter default values is for the theme to provide a single function that supplies defaults, and to filter the result so that child themes can modify or add defaults. Then the result of that function is passed in to the &lt;code&gt;get_theme_mod()&lt;/code&gt; call. So, the default is filtered before the call, not during. This way there is one filter for one function, that modifies an array, instead of one filter function for each theme mod.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Of course, that puts the onus on theme authors to build a custom system rather than having a shared system in WP that everyone can use.  It's better for the review team, theme authors, and DIY users to have a standard.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There is some merit to having a filter for the default value inside the &lt;code&gt;get_theme_mod&lt;/code&gt; function, in order to mirror the way individual options have the &lt;code&gt;default_option_{$option}&lt;/code&gt; filter, but changing the filters in there could cause side effects in existing themes. The way the patch is filtering the default twice probably won't get the same result.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If you have some use cases where there might be side effects, present those cases.
&lt;/p&gt;
&lt;p&gt;
Not sure what you mean by filtering the default twice in the patch.  There's only a single filter in the patch I put forward.
&lt;/p&gt;
&lt;p&gt;
The patch works as intended (or it did when I first submitted it).  I thoroughly tested it with existing themes.  I've been running my own custom &lt;code&gt;get_theme_mod()&lt;/code&gt; function for years that does the exact same thing the proposed patch does.  I think it'd be cool if other theme authors had the same feature that I have.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44442 (Sécurité trop restrictive pour travailler côté serveur; Javascript?) closed</title>
      
        <dc:creator>vinzhan4449</dc:creator>

      <pubDate>Sat, 23 Jun 2018 19:07:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44442#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44442#comment:2/1529780835276141</guid>
      <description>maybelater</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #44442 (Sécurité trop restrictive pour travailler côté serveur; Javascript?) updated</title>
      
        <dc:creator>vinzhan4449</dc:creator>

      <pubDate>Sat, 23 Jun 2018 19:05:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44442#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44442#comment:1/1529780739153414</guid>
      <description>&lt;p&gt;
Après les cookies remis a zéro et cessais de plusieurs navigateurs, il y 2 solutions: Problème sur l'environnement Windows ou sur le site WordPress.
-1- FlushDNS pour remettre a zéro les DNS du système Windows
-2- Il existe du code Javascript qui perturbe la connexion
&lt;/p&gt;
&lt;p&gt;
-2- Existe-t-il une fonctionnalité (sécurité) qui ote l'aspect administrator du côté travail fait sur le serveur lui même et qui perturbe la connexion en cas d'erreur?
Le .htaccess ne permet pas cela car il est succint et reste assez souple pour que je travaille côté serveur...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Méthode_Edge.JPG attached to Ticket #44442</title>
      
        <dc:creator>vinzhan4449</dc:creator>

      <pubDate>Sat, 23 Jun 2018 18:56:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44442/M%C3%A9thode_Edge.JPG</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44442/M%C3%A9thode_Edge.JPG/1529780205763834</guid>
      <description>&lt;p&gt;
Capture Error Solutions Adopted Method in Windows
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>ERR_CONNECTION_REFUSED.JPG attached to Ticket #44442</title>
      
        <dc:creator>vinzhan4449</dc:creator>

      <pubDate>Sat, 23 Jun 2018 18:54:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44442/ERR_CONNECTION_REFUSED.JPG</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44442/ERR_CONNECTION_REFUSED.JPG/1529780063650460</guid>
      <description>&lt;p&gt;
Capture du navigateur
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #44442 (Sécurité trop restrictive pour travailler côté serveur; Javascript?) created</title>
      
        <dc:creator>vinzhan4449</dc:creator>

      <pubDate>Sat, 23 Jun 2018 18:53:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44442</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44442/1529780005426855</guid>
      <description>&lt;p&gt;
Côté serveur j'ai installé ce code:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$monfichier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'compteur.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r+'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$pages_vues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$monfichier&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// On lit la première ligne (nombre de pages vues)
&lt;/span&gt;&lt;span class="nv"&gt;$pages_vues&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// On augmente de 1 ce nombre de pages vues
&lt;/span&gt;&lt;span class="nb"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$monfichier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// On remet le curseur au début du fichier
&lt;/span&gt;&lt;span class="nb"&gt;fputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$monfichier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$pages_vues&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// On écrit le nouveau nombre de pages vues
&lt;/span&gt;
&lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$monfichier&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
sur l'index.ph... de mon site WordPress
J'ai fait un flushDNS de mon environnement Windows et réinitialisé les cookies mais rien ny fait la sécurité qui est présente en Javascript m'empeche d'accèder à mon site quel que soit le navigateur.
CECI est Bien un RAPPORT de BUG car cela se passait côté serveur, et donc sans injection de fichier SQL ou php par des variables globales, mais par une manipulation COTE SERVEUR QUI NE DEVRAIT PAS ME BLACKLISTE...
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>38280.15.diff attached to Ticket #38280</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 23 Jun 2018 17:22:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38280/38280.15.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38280/38280.15.diff/1529774563533544</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38280 (Make term count for a specific object type available) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 23 Jun 2018 17:22:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38280#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38280#comment:22/1529774552402237</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/38280/38280.15.diff" title="Attachment '38280.15.diff' in Ticket #38280"&gt;38280.15.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/38280/38280.15.diff" title="Download"&gt;​&lt;/a&gt; is a rethink.
&lt;/p&gt;
&lt;p&gt;
In the case of post types, term-object counts will be regenerated whenever &lt;code&gt;wp_update_term_count_now()&lt;/code&gt; is run. This, in turn, is triggered by &lt;code&gt;wp_set_object_terms()&lt;/code&gt;, etc. In other words, the data should always exist for terms that are touched after the 5.0 release - that is, those that are created/updated/attached to posts/removed from posts after 5.0. The time when we need to worry about "backfilling" the data is for terms that have *not* been touched since 5.0.
&lt;/p&gt;
&lt;p&gt;
In the case of non-post-types (or post types that have their own custom &lt;code&gt;update_count_callback&lt;/code&gt;), there is nothing that core can do when the count is requested, except to fail gracefully.
&lt;/p&gt;
&lt;p&gt;
To accommodate both scenarios with a single approach, I introduced a new action 'wp_no_object_term_count_found'. Core will hook into it for post types, and will run &lt;code&gt;wp_update_term_count_now()&lt;/code&gt;. (This covers "legacy" terms.) For non-post-types or post types with custom &lt;code&gt;update_count_callback&lt;/code&gt;, plugins can hook to it and populate the object-term counts, and/or use the main filter I've added at the end of the function.
&lt;/p&gt;
&lt;p&gt;
How does this general approach feel to others?
&lt;/p&gt;
&lt;p&gt;
Moving forward, can we think about new names for the function/functionality? &lt;code&gt;term_count_for_object_type()&lt;/code&gt; sounds backward - the thing being counted is "objects of a given (object/post) type that have a given term", not "terms that belong to a given (object/post) type". How about &lt;code&gt;wp_get_term_object_count()&lt;/code&gt;? I can't think of anything more melodious :)
&lt;/p&gt;
&lt;p&gt;
I also have questions about the "if" conditions where I put the comment &lt;code&gt;are these right?&lt;/code&gt;. I know that these are meant to be shortcuts, but I worry that they have the potential to produce corrupted data. For example, the &lt;code&gt;1 &amp;gt;= count( $taxonomy_object-&amp;gt;object_type )&lt;/code&gt; call assumes that plugins have properly registered their taxonomies with object types - but do we enforce this elsewhere? What if the &lt;code&gt;$taxonomy_object-&amp;gt;object_type&lt;/code&gt; is not the same as &lt;code&gt;$object_type&lt;/code&gt;? It seems better to return no data in these cases than to return something potentially incorrect. Can anyone help to think through the possibilities here?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36824 (do_all_pings function queries all posts) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 23 Jun 2018 16:25:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36824#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36824#comment:38/1529771124831185</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36824/36824.8.diff" title="Attachment '36824.8.diff' in Ticket #36824"&gt;36824.8.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36824/36824.8.diff" title="Download"&gt;​&lt;/a&gt; fixes a &lt;code&gt;meta_key&lt;/code&gt;/&lt;code&gt;meta_value&lt;/code&gt; mismatch with &lt;code&gt;_encloseme&lt;/code&gt;, and does some cleanup for PHPCS.
&lt;/p&gt;
&lt;p&gt;
The "Do trackbacks" section needs more work. &lt;code&gt;get_posts()&lt;/code&gt; and &lt;code&gt;WP_Query&lt;/code&gt; do not support a &lt;code&gt;to_ping&lt;/code&gt; parameter. Above, there was some discussion about either adding it to &lt;code&gt;WP_Query&lt;/code&gt;, or moving it to postmeta, but it looks like the current patch does neither of these things. The problem that originally prompted this ticket was that specific query, so we should be sure to address it one way or another.
&lt;/p&gt;
&lt;p&gt;
Regarding the change to &lt;code&gt;get_post_types_by_supports( 'trackbacks' )&lt;/code&gt;, it feels like this might cause compatibility problems for plugins that may not be declaring support properly, but are still expecting trackbacks to be sent. Can someone walk through that scenario? It could be that it's only a concern if the plugin is manually setting &lt;code&gt;_pingme&lt;/code&gt;, which happens in core only for the 'post' post type; see &lt;code&gt;wp_transition_post_status()&lt;/code&gt; -&amp;gt; &lt;code&gt;'publish_post'&lt;/code&gt; -&amp;gt; &lt;code&gt;_publish_post_hook()&lt;/code&gt;. But it would be helpful to understand how likely it is that this'll be a breaking change for someone.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36824.8.diff attached to Ticket #36824</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 23 Jun 2018 16:17:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36824/36824.8.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36824/36824.8.diff/1529770634947943</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Tickets #42691,​44428 batch updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 23 Jun 2018 15:59:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=42691%2C44428</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=42691%2C44428/1529769556452321</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/42691" title="#42691: defect (bug): WP_Term_Query get_terms generates invalid sql queries (closed: fixed)"&gt;#42691&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Thanks, @sllimrovert !
&lt;/p&gt;
&lt;p&gt;
Unless there's a clamoring for an earlier fix, it's likely that this will wait until 5.0. If it looks like that release will be delayed significantly, I'll see about advocating for a backport.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 23 Jun 2018 14:45:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441#comment:1/1529765111080006</guid>
      <description>&lt;p&gt;
Since they have been there awhile now, they are used for many other things. So removing them now would impact more than just the narrow scope you have mentioned.
I just submitted a theme that uses the existing images sizes in a list for the user to choose which one he wants for a theme option. I'm sure I'm not the only one. There are probably a lot of themes and plugins that use these image sizes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44441 (Remove the settings for "medium" and "large" image sizes from Settings ...) created</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 13:07:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44441</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44441/1529759240900195</guid>
      <description>&lt;p&gt;
We've been using &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; img tag attributes for quite a while now. When we added them, they were somewhat "new", but now they are "mainstream" :)
(In the browsers this works by disregarding the &lt;code&gt;src&lt;/code&gt; attribute and instead using only the &lt;code&gt;srcset&lt;/code&gt; attribute.)
&lt;/p&gt;
&lt;p&gt;
This generally means that when creating a post the user is no longer constrained in having to choose a specific image size (that has to exist). The users can add pretty much any size images, only constrained by the theme's &lt;code&gt;content_width&lt;/code&gt;, and the browser will choose the proper image file to download for the specific browser/device for each visitor to the site.
&lt;/p&gt;
&lt;p&gt;
In that terms the ability to change the &lt;code&gt;medium&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; sizes "by hand" is no longer needed. They are used to support the &lt;code&gt;srcset&lt;/code&gt; but they should not be used as restrain when creating a post and inserting an image. Having the &lt;code&gt;max width&lt;/code&gt; and &lt;code&gt;max height&lt;/code&gt; settings for them on the Settings =&amp;gt; Media screen doesn't make sense.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #44373 (Add a privacy setting to disable comment cookie consent) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 12:44:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44373#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44373#comment:3/1529757891978134</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
In 44373.patch: add a checkbox to the Settings -&amp;gt; Discussion screen for disabling/enabling of showing the commenter cookies opt-in checkbox in the comment form.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>44373.patch attached to Ticket #44373</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 12:42:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44373/44373.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44373/44373.patch/1529757773006006</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #44373 (Add a privacy setting to disable comment cookie consent) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 12:40:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44373#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44373#comment:2/1529757655818874</guid>
      <description>&lt;p&gt;
Actually at the moment there doesn't seem to be a requirement to have cookies consent for non-tracking cookies. In that terms I agree that showing the "comment cookies opt-in checkbox" in the comments form should be optional.
&lt;/p&gt;
&lt;p&gt;
This is also somewhat related to &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/43857" title="#43857: defect (bug): Show the comment / awaiting moderation message even without opt-in (assigned)"&gt;#43857&lt;/a&gt;. Commenter cookies are sometimes used to give feedback to the commenter, usually showing the comment only to the commenter when it is still awaiting moderation. After &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/43857" title="#43857: defect (bug): Show the comment / awaiting moderation message even without opt-in (assigned)"&gt;#43857&lt;/a&gt; gets is, they will not be needed for that any more.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22552 (Image Upload Many Bugs on iPad) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 23 Jun 2018 11:55:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22552#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22552#comment:26/1529754914424191</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by afercia. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1529754913000053"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44431 (Post editor toolbar: inconsistent and bugged sticky behaviour, and; ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 09:12:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44431#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44431#comment:1/1529745157001982</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@startsat60 thanks for the bug report.
&lt;/p&gt;
&lt;p&gt;
What browser are you using? Testing this in Firefox, Chrome and Edge on Win 10, all seems to work properly. It's true that this code is getting old. The "stickiness" there is implemented mostly with JS. At the time there was no other way, but now the browsers support most of it from CSS.
&lt;/p&gt;
&lt;p&gt;
Not sure why the toolbar position "breaks" on scrolling. But the headings/paragraph drop-down should always hide on scroll. Perhaps this fails in your browser, or is affected by a script added by plugin? Could you try another browser to confirm?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44434 (oEmbed start pulling in iframes from any websites) closed</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 08:56:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44434#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44434#comment:6/1529744170109002</guid>
      <description>worksforme: &lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/44434#comment:5" title="Comment 5"&gt;drivdigital&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Also, this shouldn't be happing by default – it should be detecting it has oEmbed and asking &lt;strong&gt;'should this link show a preview'&lt;/strong&gt;, not just overwriting and embedding.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You mean it should show a popup every time a user tries to embed something? How annoying would that be? :)
&lt;/p&gt;
&lt;p&gt;
This shortcut has been around for a while (~5 years perhaps). If you paste embeddable URL at the beginning of a new line, the editor will try to embed it and show a preview. This is by far the most common user case.
&lt;/p&gt;
&lt;p&gt;
If you want to add a link, do it the "proper way". Instead of pasting the URL, open the link modal (click on the link button, then on the cogwheel for the advanced options), then paste the URL in both "URL" and "Link Text" fields and click "Add Link".
&lt;/p&gt;
&lt;p&gt;
Closing as worksforme, feel free to reopen with specific user case(s) we may be missing in the "insert a link" behaviour.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #44439 (TinyMCE font and size select drop downs do not populate with default ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 23 Jun 2018 08:33:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44439#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44439#comment:1/1529742791731995</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi @petersykim, thanks for the bug report.
&lt;/p&gt;
&lt;p&gt;
It sounds like this is coming from upstream. Can you reproduce it in the TinyMCE "fiddle": &lt;a class="ext-link" href="http://fiddle.tinymce.com/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://fiddle.tinymce.com/&lt;/a&gt;. If not, could you try defining the font family and size differently in the external stylesheet, perhaps make the selectors simpler.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>44429-generic-cli-no-scheme.diff attached to Ticket #44429</title>
      
        <dc:creator>afragen</dc:creator>

      <pubDate>Sat, 23 Jun 2018 00:26:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/44429/44429-generic-cli-no-scheme.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/44429/44429-generic-cli-no-scheme.diff/1529713583954840</guid>
      <description>&lt;p&gt;
uses php_sapi_name() and no check for HTTP scheme
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #44440 (Case sensitive/insensitive bug) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sat, 23 Jun 2018 00:08:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44440#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44440#comment:4/1529712510456987</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/44440#comment:3" title="Comment 3"&gt;dingdang&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In Windows also prefix setting in wp-config.php is lowered case, while in Linux it s mixed ("pReFiX_").
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Are you saying that &lt;code&gt;wp-config.php&lt;/code&gt; on windows contains:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$table_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'prefix_'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
and on linix it contains:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$table_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pReFiX_'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
If so, then I'm lost.  If you've got &lt;code&gt;$table_prefix = 'prefix_'&lt;/code&gt; on windows and you populated the database on windows, how did you get the row in &lt;code&gt;$wpdb-&amp;gt;options&lt;/code&gt; to have &lt;code&gt;option_name === 'pReFiX_user_roles'&lt;/code&gt;?
&lt;/p&gt;
&lt;p&gt;
Also, if that is what you're doing, &lt;strong&gt;why&lt;/strong&gt; are you doing that?  It's kind of like having &lt;code&gt;wp-config.php&lt;/code&gt; on windows contain
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'DB_CHARSET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
and on linix having it contain:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'DB_CHARSET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ascii'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
and then wondering why when you "migrate from windows to linux" you get data corruption.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>