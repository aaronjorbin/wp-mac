<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 21:37:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:12/1195940242000000</guid>
      <description>&lt;p&gt;
If the consensus is that globals are an acceptable way to handle these types of problems, then fair enough - the patch is unnecessary.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 20:35:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:11/1195936539000000</guid>
      <description>&lt;p&gt;
Use cases include:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WP_INSTALLING and WP_IMPORTING.  These prevent some code from being unit tested because they can't be changed.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;$wp_smiliessearch and other low priority globals
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Patches like &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/5377"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/5377&lt;/a&gt; and &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/5232"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/5232&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5385 (Page Passwords Not Working) created</title>
      
        <dc:creator>sarmadhassan</dc:creator>

      <pubDate>Sat, 24 Nov 2007 19:03:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5385</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5385/1195931010000000</guid>
      <description>&lt;p&gt;
The page password is not working in wordpress. When i type in the correct password, the page just refreshes but dont went on to show the page content. Kindly help us in this regard.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Sat, 24 Nov 2007 10:25:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:7/1195899931000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>rob1n</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:43:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:10/1195893815000000</guid>
      <description>&lt;p&gt;
I'm with Matt. This seems a bit useless, and there's not really much of an issue with how WP currently does things.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:25:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:9/1195892755000000</guid>
      <description>&lt;p&gt;
Well, as an registry, it would generally get rid of the whole globals hell. So you take all of the globals and use this API instead. In that context, you would use this everywhere.
&lt;/p&gt;
&lt;p&gt;
However, my theory, is that you can return a reference to the value contained in the array and it will update based on changes made later. If this were to be the case, then it would completely replace globals and not require a huge update of the core code.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) closed</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:25:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:6/1195892738000000</guid>
      <description>duplicate: &lt;p&gt;
When appropriate and there is a clear and present danger to our users, we publicize things quite a bit. Thanks for your feedback on this particular issue. Marking as "duplicate" just so it doesn't clog up our issue tracker.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:16:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:8/1195892212000000</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I can only imagine one or two places where we could possibly use this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 07:21:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:7/1195888876000000</guid>
      <description>&lt;p&gt;
For the unsetting, just add another method to WP_Registry class, and use the same setup as wp_flag_get() and wp_flag_set().
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 07:18:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:6/1195888707000000</guid>
      <description>&lt;pre class="wiki"&gt;class WP_Registry
{
    var $_data = array();
    function set($name, $value) {
        $this-&amp;gt;_data[$name] = $value;
    }
    function get($name) {
        if( isset($this-&amp;gt;_data[$name]) )
            return $this-&amp;gt;_data[$name];
        return null;
    }
}
function &amp;amp;_wp_flag() {
    static $objRegistry;
    if($objRegistry == null)
        $objRegistry = new WP_Registry();
    return $objRegistry;
}
function wp_flag_set($name, $value=true) {
    $registry = _wp_flag();
    $registry-&amp;gt;set($name, $value);
}
function wp_flag_get($name) {
    $registry = _wp_flag();
    return $registry-&amp;gt;get($name);
}
function &amp;amp;wp_registry() {
    return _wp_flag();
}
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 06:52:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:5/1195887159000000</guid>
      <description>&lt;p&gt;
Understood, which was why the ticket wasn't closed in the first place. However, the ticket makes references to other bugs that needed to be made available.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 06:50:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:5/1195887048000000</guid>
      <description>&lt;p&gt;
Dude. I'm sorry. I'm not saying your idea is bad, I actually do like it a lot. I just don't agree with code that uses '@' to suppress errors and warnings. Which all in fact you are doing is covering up a possible bug.
&lt;/p&gt;
&lt;p&gt;
What does &lt;code&gt;@$_flags[$name]&lt;/code&gt; return when it doesn't exist? I would really like to know. The most logical answer is 'NULL', but how can you be sure? It might return an empty string, or '0'. You also suppress the notice or warning that &lt;code&gt;$_flags[$name]&lt;/code&gt; does not exist.
&lt;/p&gt;
&lt;p&gt;
Sure, I get that. However for most PHP versions, using '@' takes a performance hit. It isn't until PHP 5.1+ that the performance hit is fixed. Now, the question you must answer is how many people are using the latest version that fixes that performance hit and how much of an performance hit will be dealt to those that don't have that version?
&lt;/p&gt;
&lt;p&gt;
Don't take this personally, just explain these issues to me and clarify from what I think I know and educate me on what '@' is better than defensively programming.
&lt;/p&gt;
&lt;p&gt;
If something may not exist, then I was always taught to test to make sure that it does exist, explicitly. Using isset() does not introduce bugs, it removes them by explicitly testing what might have been failure in other instances. Less code does not mean always mean less bugs, sometimes you need more code to make sure that bugs won't show up.
&lt;/p&gt;
&lt;p&gt;
Thanks for the updated patch, but as you are creating an Registry Pattern, I think a class would provide a better solution instead.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>JeremyVisser</dc:creator>

      <pubDate>Sat, 24 Nov 2007 06:17:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:4/1195885046000000</guid>
      <description>&lt;p&gt;
Regarding the 3 comments above, this ticket was about improving the way WP informs the community about security issues, not about the latest security issue in particular.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-flag-api-r6342-isset.patch attached to Ticket #5384</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 04:40:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342-isset.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342-isset.patch/1195879239000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 04:40:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:4/1195879205000000</guid>
      <description>&lt;p&gt;
One line of code but with more complexity.  At the moment it's fine, but at some point someone will change it.  The more complex it is the higher the chances a bug will be introduced.
&lt;/p&gt;
&lt;p&gt;
You want to argue the toss over a single line?  One alternative patch coming up.  Take your pick, one expression vs a ternary operator, one function call and two expressions.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>rob1n</dc:creator>

      <pubDate>Sat, 24 Nov 2007 04:21:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:3/1195878112000000</guid>
      <description>&lt;p&gt;
More code? You mean that one line santosj had?
&lt;/p&gt;
&lt;p&gt;
I hardly think more bugs could be introduced. That is a ridiculous argument, but I may not know the whole story.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 03:03:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:2/1195873433000000</guid>
      <description>&lt;p&gt;
isset() uses more code to do the same thing.  More code means more bugs.  If there's a benefit to using isset, fair enough.  If not I don't see the point in making it look more complicated than it is.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Sat, 24 Nov 2007 01:04:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:1/1195866298000000</guid>
      <description>&lt;p&gt;
I'm not sure what the fascination is with using &lt;code&gt;@$var['key']&lt;/code&gt;, may I suggest calling isset and returning it else returning null? If you don't want to create a branch.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;return (isset($_flags[$name]) ? $_flags[$name] : null;&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-flag-api-r6342.patch attached to Ticket #5384</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 00:59:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342.patch/1195865950000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) created</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 00:58:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384/1195865925000000</guid>
      <description>&lt;p&gt;
There's a common pattern in wp code that looks like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;turn_something_on();
if (something_is_on())
  do_something();
turn_something_off();
&lt;/pre&gt;&lt;p&gt;
Currently there are two messy options for storing the toggle value when it needs to be shared between functions: either use a global, or write some get/set functions that store a static variable.
&lt;/p&gt;
&lt;p&gt;
The enclosed patch provides a simple reusable api for this and similar patterns.  Simple example:
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_flag_set('myflag');
if ( wp_flag_get('myflag') )
  do_something();
wp_flag_unset('myflag');
&lt;/pre&gt;&lt;p&gt;
It's not limited to booleans, you can store and fetch a value of any type:
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_flag_set('myflag', 'myvalue');
if ( wp_flag_get('myflag') == 'myvalue' )
  do_something();
wp_flag_unset('myflag');
&lt;/pre&gt;&lt;p&gt;
Flag values are not persistent and not shared across concurrent requests.  They are stored in a static array so as not to pollute the global namespace.
&lt;/p&gt;
&lt;p&gt;
Unit tests are in &lt;a class="ext-link" href="http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_functions.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_functions.php&lt;/a&gt;, in the TestFlagFunctions class.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [94]: add TestFlagFunctions</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 00:48:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/94/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/94/tests/1195865325506489</guid>
      <description>&lt;p&gt;
add TestFlagFunctions
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:57:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:3/1195858671000000</guid>
      <description>&lt;p&gt;
Solutions already exist or can exist with a plugin. However, such a plugin has not yet been referenced on WP-Hackers. Travis has stated that he developed a system for his web site that uses sessions to correct this problem.
&lt;/p&gt;
&lt;p&gt;
However, since the solution calls for either using PHP Sessions, PHPass, and/or salting passwords, I don't think it is trival and could cause problems. I can't think of an solution that doesn't involve resetting everyone's password once the change is implemented.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:52:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:2/1195858348000000</guid>
      <description>&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2394" title="#2394: defect (bug): Passwords are stored in an insecure un-salted form (closed: fixed)"&gt;#2394&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5367" title="#5367: defect (bug): Wordpress cookie authentication vulnerability (closed: fixed)"&gt;#5367&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>rob1n</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:42:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:1/1195857762000000</guid>
      <description>&lt;p&gt;
Of course it's possible to get the hash and run it against a rainbow pattern (or create a session cookie) -- if you have read-only access.
&lt;/p&gt;
&lt;p&gt;
I suppose a solution would be to stop storing the hash in the cookie, and authenticate a bit differently.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) created</title>
      
        <dc:creator>chuckpeters</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:28:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383/1195856908000000</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="http://lwn.net/Articles/259204/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://lwn.net/Articles/259204/&lt;/a&gt; shows wordpress has a security issue and I can't seem to find anything useful about when this might be fixed or if it is being worked on.
&lt;/p&gt;
&lt;p&gt;
You need to do a better job of notifying us of security issues.  Things like a section on the website... &lt;a class="ext-link" href="http://wordpress.org/security"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/security&lt;/a&gt; is 404 now.
&lt;/p&gt;
&lt;p&gt;
Send out notification on the announcement list of open issues like the one mentioned above and suggest "Workarounds" if the issue isn't fixed.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5218 (SAVEQUERIES: log calling function name) updated</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Fri, 23 Nov 2007 21:36:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5218#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5218#comment:8/1195853775000000</guid>
      <description>&lt;p&gt;
I like this!
&lt;/p&gt;
&lt;p&gt;
We should warn people about using it in production though, debug_backtrace can be SLOW.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5382 ("MySQL server has gone away" error when trying to post anonymous comment) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Fri, 23 Nov 2007 20:27:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5382#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5382#comment:1/1195849623000000</guid>
      <description>&lt;p&gt;
This does not appear to be an WordPress issue, but I'm not going to close it. FastCGI is not part of WordPress. This issue affects other web applications and does not have a trival fix.
&lt;/p&gt;
&lt;p&gt;
You can use caching and see about setting the amount of database connections higher or seeing what load the database has.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5382 ("MySQL server has gone away" error when trying to post anonymous comment) created</title>
      
        <dc:creator>meonkeys</dc:creator>

      <pubDate>Fri, 23 Nov 2007 20:23:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5382</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5382/1195849397000000</guid>
      <description>&lt;h1 id="Description"&gt;Description&lt;/h1&gt;
&lt;p&gt;
Can't post comments anonymously.
&lt;/p&gt;
&lt;h1 id="Stepstoreproduce"&gt;Steps to reproduce&lt;/h1&gt;
&lt;ol&gt;&lt;li&gt;Install WordPress 2.3.1, MySQL 5.0.x, and enable FastCGI
&lt;/li&gt;&lt;li&gt;Try to post an anonymous comment
&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="Expectedresult"&gt;Expected result&lt;/h1&gt;
&lt;ol&gt;&lt;li&gt;Comment is placed in queue for moderation (if this is enabled)
&lt;/li&gt;&lt;li&gt;User is redirected and can see their comment posted
&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="Actualresult"&gt;Actual result&lt;/h1&gt;
&lt;p&gt;
error message appears in browser window:
&lt;/p&gt;
&lt;pre class="wiki"&gt;WordPress database error: [MySQL server has gone away]
SELECT * FROM wp_comments WHERE comment_ID = '11690' LIMIT 1
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-comments-post.php on line 67
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-comments-post.php on line 68
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-comments-post.php on line 69
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-includes/pluggable.php on line 392
&lt;/pre&gt;&lt;p&gt;
(modified slightly: ellipses replace private path information on server)
&lt;/p&gt;
&lt;h1 id="Reproducability"&gt;Reproducability&lt;/h1&gt;
&lt;p&gt;
Always.
&lt;/p&gt;
&lt;h1 id="Workaround"&gt;Workaround&lt;/h1&gt;
&lt;p&gt;
Disabling FastCGI appears to fix the issue.
&lt;/p&gt;
&lt;h1 id="Additionalinformation"&gt;Additional information&lt;/h1&gt;
&lt;p&gt;
This bug was originally reproduced using a Bluehost-hosted blog at &lt;a class="ext-link" href="http://adammonsen.com"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://adammonsen.com&lt;/a&gt;. It is unclear if this is issue is specific to Bluehost.
&lt;/p&gt;
&lt;h2 id="softwareversionsusedinthisrepro"&gt;software versions used in this repro&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;WordPress 2.3.1
&lt;/li&gt;&lt;li&gt;MySQL 5.0.37
&lt;/li&gt;&lt;li&gt;FastCGI (mod_fastcgi) 2.4.2
&lt;/li&gt;&lt;li&gt;Apache 1.3.39
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Relatedpostsinsupportforum"&gt;Related posts in support forum&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="http://wordpress.org/support/topic/124416"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/124416&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://wordpress.org/support/topic/133745"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/133745&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://wordpress.org/support/topic/140982"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/140982&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [93]: new export dataset</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 19:40:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/93/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/93/tests/1195846814285630</guid>
      <description>&lt;p&gt;
new export dataset
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5380 (Upload tab in linline uploader disappears under certain circumstances) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Fri, 23 Nov 2007 19:36:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5380#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5380#comment:2/1195846615000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5381 (type mismatch between is_term and get_term_by) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 23 Nov 2007 17:24:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5381#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5381#comment:1/1195838682000000</guid>
      <description>&lt;p&gt;
Overloading was a mistake, but here we are.  Part of the problem is that we changed sanitize_term() to return immediately for the raw context.  It should probably do int casts for the IDs before returning.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5255 (Simplify role/capability for easier cap =&gt; user lookups) updated</title>
      
        <dc:creator>imwebgefunden</dc:creator>

      <pubDate>Fri, 23 Nov 2007 14:14:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5255#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5255#comment:12/1195827265000000</guid>
      <description>&lt;p&gt;
I'm the maintainer of WordPRess' Role Manager Plugin.
The first time I came to the Role Manager I don't like the function to remove/set a single capability on users profile page. But in the meantime I used this way very often and today I like it. It's gives the administrator more flexibility to try single permission tests.
&lt;/p&gt;
&lt;p&gt;
In the last months of development for the Role Manager I'm missing the following things:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The maximum length and allowed signs for roles and capabilities should be described. For a couple of days I released a new version 2.2.0. The new release set the max. length for roles and caps to 30 signs and only letters, digits and spaces are allowed for input. For caps all spaces are stored as a "_". But other plugins - such the very popular 'NextGen-Gallery-Plugin' don't do this translation and stores spaces as spaces. If you do so - you can have different capabilities one with a single space and one with a double space in the name, eg
&lt;pre class="wiki"&gt;cap 1
&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
and
&lt;/p&gt;
&lt;pre class="wiki"&gt;cap  1
&lt;/pre&gt;&lt;p&gt;
Caps and Roles first should be trim'ed and then double spaces should be replaced by single spaces. And single spaces are stored as "_". We can go an other way - but what we need is a description for all plugin authors.
&lt;/p&gt;
&lt;ol start="2"&gt;&lt;li&gt;We need a list, eg in the otions-table, with all capabilities - not only the assigned to one or more roles. I wrote a plugin to hide the dashboard. It's based on a capability "hide_dashboard". If a user has this capability the dashboard is hidden. Most plugins add all their capabilities on activation to the administrator-role. But if you have a "negative" capability such as "hide_dashborad" you "can't" add this to the administrator-role on this way. Maybe, a way can be, to only register a capability. In the next step the administrator can assign this capability to one or more roles or single user as an exra cap.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Fri, 23 Nov 2007 13:13:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:19/1195823606000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've attached a patch that achieves the same using phpass instead - it not that different to how I was salting passwords. I've gone for the portable, MD5 based hash it provides, leaving the option to switch to other hash functions when they are more widely available.
&lt;/p&gt;
&lt;p&gt;
I've tested the patch with old style passwords, a new installation, and a new user and all appears to work as intended. Testing on Windows may be in order - phpass appears to attempt a different source of random data in that case.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>class-phpass.php attached to Ticket #2394</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Fri, 23 Nov 2007 13:07:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/2394/class-phpass.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/2394/class-phpass.php/1195823228000000</guid>
      <description>&lt;p&gt;
phpass file for wp-includes
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>2394-phpass.patch attached to Ticket #2394</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Fri, 23 Nov 2007 13:06:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/2394/2394-phpass.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/2394/2394-phpass.patch/1195823194000000</guid>
      <description>&lt;p&gt;
Implentation of salted passwords through the use of phpass
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5381 (type mismatch between is_term and get_term_by) created</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 10:26:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5381</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5381/1195813588000000</guid>
      <description>&lt;p&gt;
get_term_by() and similar functions return a row that includes the term_id as a numeric string.  is_term() requires that a term_id be passed in as an int; a numeric string will fail.
&lt;/p&gt;
&lt;p&gt;
I don't know what the solution is but this seems like a likely cause of bugs.  Code that looks like it ought to work fails:
&lt;/p&gt;
&lt;pre class="wiki"&gt;	$term_id = get_term_by('name', $term, $taxonomy);
	if ( is_term($term_id) ) ... // fails because is_term returns false
&lt;/pre&gt;&lt;p&gt;
test_is_term_type() in &lt;a class="ext-link" href="http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_taxonomy.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_taxonomy.php&lt;/a&gt; reproduces the problem.
&lt;/p&gt;
&lt;p&gt;
There are other related type inconsistencies in taxonomy.php also - for example, is_term() returns a 0, NULL, term ID, WP_Error object or row object depending on the context and circumstances, which makes handling the return result difficult.  Mostly due I think to the functions being overloaded to magically handle both term ids and names.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [92]: more tax api tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 10:24:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/92/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/92/tests/1195813470213841</guid>
      <description>&lt;p&gt;
more tax api tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #4779 (Proposal for HTTP POST and REQUEST API) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Fri, 23 Nov 2007 07:40:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4779#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4779#comment:7/1195803613000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Totally sweet! It works! That just blows my mind.
&lt;/p&gt;
&lt;p&gt;
Unit Test covers most of the functions, does not cover &lt;code&gt;wp_remote_get_body()&lt;/code&gt; or &lt;code&gt;wp_remote_get_headers()&lt;/code&gt;. The Unit Tests informally cover the &lt;code&gt;WP_HTTP_Fsockopen&lt;/code&gt; class, the functions cover the &lt;code&gt;test()&lt;/code&gt; and the &lt;code&gt;wp_remote_get_object()&lt;/code&gt; covers the &lt;code&gt;request()&lt;/code&gt; method. Which does prove that the class does work. However, to complete the unit tests, the &lt;code&gt;WP_HTTP_Base&lt;/code&gt; class methods need to be covered, as well as the rest of the transport classes.
&lt;/p&gt;
&lt;p&gt;
The next patch, if this is still considered okay, will include complete unit tests and replace Snoopy and transition areas that use fsockopen to use these functions. It will also include splitting the five classes down to one or two (cURL might be useful to be packaged also).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset in tests [91]: import test: update to asdftestblog1-2007-11-23.xml</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 07:00:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/91/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/91/tests/1195801236302545</guid>
      <description>&lt;p&gt;
import test: update to asdftestblog1-2007-11-23.xml
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5378 (Replace existing wp-includes/rss.php) updated</title>
      
        <dc:creator>chmac</dc:creator>

      <pubDate>Fri, 23 Nov 2007 00:53:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5378#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5378#comment:2/1195779226000000</guid>
      <description>&lt;p&gt;
The file includes a summary of changes I believe. I noticed that it handles categories much better, and also creates a date_timestamp field (saves a bunch of hassle calculating dates). Those were the only two features I specifically needed, so I haven't looked at what else it does in detail.
&lt;/p&gt;
&lt;p&gt;
var_dump(fetch_rss($url)) provides an awful lot more with this file. Beyond "more" I didn't really pay attention to specifically what it does.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>