<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #37943 (Invalid link to the "Run importer" action while installing importer ...) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 04 Sep 2016 23:41:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37943#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37943#comment:2/1473032467140151</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@joelcj91 Welcome to Trac, thanks for a great Trac ticket, all the keywords, component, focuses, versions are perfect, detailed reproducible steps and and patch, boom, thanks :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>TJNowell</dc:creator>

      <pubDate>Sun, 04 Sep 2016 23:30:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:173</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:173/1473031832803190</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Not true. From @schlessera's own comments on his proposal we are discussing:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That makes no sense, that's not how Composer works, perhaps you've misunderstood use of composer for inclusion of composers entire codebase, something that is not being suggested. The language could be misleading for somebody without knowledge of how Composer is used.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Composer champions an approach that places all autoloadable classes into a /vendor/ directory and then maps to the file based on class names.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
These are the PSR standards, we don't use those, and we don't need to, this ticket discusses classmaps, and the classmap autoloader is what's under discussion. You do not need to put classes in the vendor folder to autoload them, and you do not need to follow PSR conventions.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Then within each of /plugins and /mu-plugins there can be a potentially unlimited number of locations to look for classes to autoload.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is the core autoloader, mu-plugins and plugins are not core, plugin developers can and do handle loading of files themselves, this is a separate topic.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
And having core use its own classmap autoloader does not preclude anyone from using Composer's autoloader for PSR0/4 libraries.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We're not using PSR0/4, neither is it necessary to use such PSR0/4
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Why include (some of) these 10 files when you really only need two trivial files? One containing a trivially simple autoloader and another file containing a trivially simple classmap?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Some plugin authors may wish to use PSR0/4, and it would prevent compatibility problems if a plugin required a library that used such standards. While core doesn't use it, we shouldn't prevent it, or cause issues elsewhere. Or we could generate our own custom autoloader. For example &lt;a class="ext-link" href="https://github.com/rmccue/Requests/blob/master/composer.json"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;rmccue/requests&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In addition core could load core's classmap and then run hooks to allow plugins and themes to contribute their own classmaps.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree, the main ClassLoader object has methods for adding classmaps and other information about where to load things, it should be passed through a filter, if only for debugging purposes
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 23:06:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:172</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:172/1473030385951933</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:171" title="Comment 171"&gt;TJNowell&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Nobody is suggesting we bundle Composer with WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not true.  From @schlessera's own comments on his proposal we are discussing:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
For the approach I recommended above, Composer would only be used at development time for as long as WP stays at PHP 5.2. After that, you can just as well include Composer with WordPress, it does not need to be installed globally. So, if you want to bake in an autoloader into WordPress Core, why not just use the one that the rest of the PHP world uses?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Composer generated autoloaders are widespread, well known
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The fact that something is in widespread use is not a reason to use it &lt;strong&gt;when it is not fit for purpose&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Composer champions an approach that places &lt;strong&gt;all&lt;/strong&gt; autoloadable classes into a &lt;code&gt;/vendor/&lt;/code&gt; directory and then maps to the file based on class names.  WordPress places autoloadable files in at least 5 different general locations and mapping from classname to those locations would require torturous naming conventions, or it would require the Composer autoloader to look into tens if not hundreds of directories:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;wp-includes&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;wp-admin&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;wp-content/plugins/&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;wp-content/mu-plugins&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;wp-content/themes/&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Sure, we could collapse &lt;code&gt;wp-admin&lt;/code&gt; into &lt;code&gt;wp-includes by moving all the admin classes into &lt;/code&gt;wp-includes`, but does that really make sense?
&lt;/p&gt;
&lt;p&gt;
Then within each of &lt;code&gt;/plugins&lt;/code&gt; and &lt;code&gt;/mu-plugins&lt;/code&gt; there can be a potentially unlimited number of locations to look for classes to autoload.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;The fact you cannot map classes in WordPress plugins and themes simply by their classnames is the main reasons why Composer is not a good fit as an autoloader for WordPress. And no one on this ticket has acknowledged and addressed this concern.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
I have been working with this exact problem in WPLib for several years, so I have some strong insight into the problem. I know that had I not gone through this painful effort I would not have recognized the issues with Composer either and would have thought using it to be a great idea.  Matter of fact, I previously did think Composer was a great idea for WordPress.
&lt;/p&gt;
&lt;p&gt;
Autoloader requirements for add-ins turns out to be different than an autoloader for site builders unless WordPress changes the location of plugins and themes to be inside a &lt;code&gt;/vendor/&lt;/code&gt; directory. And even then it would still have an impedance mismatch.
&lt;/p&gt;
&lt;p&gt;
Really &lt;strong&gt;the only approach that works across all of WordPress is a classmap&lt;/strong&gt;, and there is no reason to include a complex Composer autoloader just to get a classmap autoloader.  And having core use its own classmap autoloader does not preclude anyone from using Composer's autoloader for PSR0/4 libraries.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Composer generated autoloaders are ... reliable, well tested,
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
A classmap autoloader is so trivial that it makes this concern moot.
&lt;/p&gt;
&lt;p&gt;
I could provide a working example to illustrate but this discussion is coming at a really bad time for me because I have other hard deadlines over the next 10 days that keep me from devoting the time to it.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This gets you these 10 files:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Why include &lt;em&gt;(some of)&lt;/em&gt; these 10 files when you really only need two &lt;strong&gt;trivial&lt;/strong&gt; files?  One containing a trivially simple autoloader and another file containing a trivially simple classmap?
&lt;/p&gt;
&lt;p&gt;
In addition core could load core's classmap and then run hooks to allow plugins and themes to contribute their own classmaps.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Composer can also be passed a generator that controls what is generated when an autoloader is created. The above list is merely the default.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes Composer is flexible, by why go to so much effort to make it contort in ways &lt;a class="ext-link" href="https://github.com/composer/composer/issues/3852#issuecomment-172925273"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the Composer team choose not to support&lt;/a&gt;? &lt;em&gt;(Go back and read &lt;a class="ext-link" href="https://github.com/composer/composer/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20wordpress%20"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;some of their GitHub discussions&lt;/a&gt;.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
BTW, I do really like the OP's original proposal of having pluggable autoloaders to make it easy to use PSR0 and PSR4 when &lt;strong&gt;&lt;em&gt;site builders&lt;/em&gt;&lt;/strong&gt; want to use libraries that were designed with  PSR0/4 in mind.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'd also advise against including the autoloader in wp-config.php, wp-config.php is for setting constants and configuring, including the autoloader there will necessitate modifying every config file that exists already, as well as handling those scenarios when the file is up one directory, etc
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed there.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 22:24:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:81</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:81/1473027856303305</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:80" title="Comment 80"&gt;F J Kaiser&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It seems you missed the point with the previous notes and comments about the &lt;em&gt;global state&lt;/em&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Evidently. Please elaborate on the points I missed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Does the first &lt;code&gt;WP_Registry&lt;/code&gt; suffer from accessing globals? Yes.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I did not call out accessing globals as an issue.  Global state does not have to be held in globals to be problematic.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If you believe there is a need to discuss the community layer (for e.g. barrier for entry level devs), IDE support or yes-nos for using patterns in general further, I believe that Slack is a better route to address this.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Since Slack is not segmented by ticket, I have no idea what a valid entry point would be where all those interested in the topic would have any reasonable chance of being involved in the discussion. This ticket is about introducing what I would consider harmful idioms and so it seems the right place to discuss it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37943 (Invalid link to the "Run importer" action while installing importer ...) updated</title>
      
        <dc:creator>joelcj91</dc:creator>

      <pubDate>Sun, 04 Sep 2016 22:12:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37943#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37943#comment:1/1473027120276855</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>37943.patch attached to Ticket #37943</title>
      
        <dc:creator>joelcj91</dc:creator>

      <pubDate>Sun, 04 Sep 2016 22:11:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37943/37943.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37943/37943.patch/1473027079929312</guid>
      <description>&lt;p&gt;
Patch to fix this by replacing the link in installImporterSuccess function in updates.js
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Run-Importer.png attached to Ticket #37943</title>
      
        <dc:creator>joelcj91</dc:creator>

      <pubDate>Sun, 04 Sep 2016 22:07:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37943/Run-Importer.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37943/Run-Importer.png/1473026822359068</guid>
      <description>&lt;p&gt;
Run Importer screen with invalid link
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37943 (Invalid link to the "Run importer" action while installing importer ...) created</title>
      
        <dc:creator>joelcj91</dc:creator>

      <pubDate>Sun, 04 Sep 2016 22:04:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37943</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37943/1473026668087057</guid>
      <description>&lt;p&gt;
In a WordPress multisite installation, when you try to import an XML file, from a sub-site, you will be provided with an invalid link to the "&lt;strong&gt;Run importer&lt;/strong&gt;" page after the installation of the "WordPress Importer" plugin. This bug will not be there if it is not a multisite website or if the "WordPress Importer" plugin is already installed.
&lt;/p&gt;
&lt;p&gt;
Steps to reproduce:
&lt;/p&gt;
&lt;p&gt;
1) Create a Multisite website.
2) Go to one of your sub-sites.
3) Make sure that the "WordPress Importer" plugin is &lt;strong&gt;not installed&lt;/strong&gt; already (&lt;a class="ext-link" href="https://wordpress.org/plugins/wordpress-importer/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/plugins/wordpress-importer/&lt;/a&gt;).
4) Go to Import section in Tools menu.
5) Click on "Install Now" under WordPress import section.
6) Now the WordPress Importer plugin will be installed though ajax request.
7) After successful installation, "Install Now" link will be replaced with "Run importer" link and also, you will be provided with a message at the top - "Importer installed successfully. Run importer".
8) Expected result is a proper, working link to the importer page., inside the current sub-site. But you can see, since the Multisite plugins are managed from network dashboard, the link returned through the ajax response is invalid, as "/network" is appended in the plugin's link.
9)
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
a) Expected link : mysubsite1/wp-admin/plugins.php?action=activate&amp;amp;plugin=wordpress-importer%2Fwordpress-importer.php&amp;amp;from=import&amp;amp;_wpnonce=123nonce
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
b) Current link : mysubsite1/wp-admin/&lt;strong&gt;network&lt;/strong&gt;/plugins.php?action=activate&amp;amp;plugin=wordpress-importer%2Fwordpress-importer.php&amp;amp;from=import&amp;amp;_wpnonce=123nonce
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
10) This results a 404 error when we click on &lt;strong&gt;Run mporter&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
Please see the screenshot.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 04 Sep 2016 21:58:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:19/1473026302796250</guid>
      <description>&lt;p&gt;
@karmatosed yeah looks like you're not getting the CSS (and/or maybe JS) changes in the patch - it shouldn't look anything like that :) It should be similar to all of the screenshots I posted.
&lt;/p&gt;
&lt;p&gt;
You could try a hard refresh in your browser, and make sure you're seeing a modified version of &lt;code&gt;customize-controls.css&lt;/code&gt; and &lt;code&gt;customize-controls.js&lt;/code&gt; in the browser inspector after applying the patch. You could also search for &lt;code&gt;#customize-theme-section-navigation&lt;/code&gt; in both files - if that's not there then it's still the old version. And also make sure &lt;code&gt;SCRIPT_DEBUG&lt;/code&gt; is on, etc.
&lt;/p&gt;
&lt;p&gt;
There's also a possibility that something's wrong with the patch - can anyone else test to confirm?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #29158,​33228,​27705 batch updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 04 Sep 2016 21:50:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=29158%2C33228%2C27705</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=29158%2C33228%2C27705/1473025822499495</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38520" title="Accessibility: Improve the Customizer and Theme Installer initial ..."&gt;38520&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Accessibility: Improve the Customizer and Theme Installer initial focus.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The Customizer and Theme Installer open in full overlays that need to receive &lt;br /&gt;
focus. Also, keyboard navigation should be constrained within the overlays. Using&lt;br /&gt;
CSS &lt;code&gt;visibility&lt;/code&gt; to hide all the content except the overlays, makes them the only&lt;br /&gt;
available and focusable content and allows browsers to handle focus natively.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29158" title="#29158: task (blessed): Customizer UI Design lacks contrast for visual hierarchy and does not ... (closed: fixed)"&gt;#29158&lt;/a&gt;.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33228" title="#33228: enhancement: Customizer initial focus (closed: fixed)"&gt;#33228&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27705" title="#27705: defect (bug): Keyboard navigation should be constrained to the theme installer overlay (closed: fixed)"&gt;#27705&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>batchmodify</category>
    </item><item>
      <title>Changeset [38520]: Accessibility: Improve the Customizer and Theme Installer initial ...</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 04 Sep 2016 21:50:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38520</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38520/1473025822009724</guid>
      <description>&lt;p&gt;
Accessibility: Improve the Customizer and Theme Installer initial focus.
&lt;/p&gt;
&lt;p&gt;
The Customizer and Theme Installer open in full overlays that need to receive
focus. Also, keyboard navigation should be constrained within the overlays. Using
CSS &lt;code&gt;visibility&lt;/code&gt; to hide all the content except the overlays, makes them the only
available and focusable content and allows browsers to handle focus natively.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29158" title="#29158: task (blessed): Customizer UI Design lacks contrast for visual hierarchy and does not ... (closed: fixed)"&gt;#29158&lt;/a&gt;.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33228" title="#33228: enhancement: Customizer initial focus (closed: fixed)"&gt;#33228&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27705" title="#27705: defect (bug): Keyboard navigation should be constrained to the theme installer overlay (closed: fixed)"&gt;#27705&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #27705 (Keyboard navigation should be constrained to the theme installer overlay) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 04 Sep 2016 21:39:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27705#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27705#comment:9/1473025151986467</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Going to fix this in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33228" title="#33228: enhancement: Customizer initial focus (closed: fixed)"&gt;#33228&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>EusebiuOprinoiu</dc:creator>

      <pubDate>Sun, 04 Sep 2016 21:31:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:60</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:60/1473024683670569</guid>
      <description>&lt;p&gt;
I gave it some more thought and I think @mor10 has a point about not removing buttons. Even though I find some of them useless, there is no harm in keeping them on the second row.
&lt;/p&gt;
&lt;p&gt;
However, I still believe allowing users to hardcode colors is a mistake. They might force a color that looks good with their current theme at the time they write their content, but as soon as they do a theme change, everything will be most likely a mess. ( That's why the Text Color button is the only one I removed )
&lt;/p&gt;
&lt;p&gt;
I also believe the H1 Heading should be disabled by default, as mentioned before.
&lt;/p&gt;
&lt;p&gt;
That being said, this is my proposal:
&lt;a href="https://core.trac.wordpress.org/attachment/ticket/27159/wp-test-tinymce-toolbars.3.php"&gt;https://core.trac.wordpress.org/attachment/ticket/27159/wp-test-tinymce-toolbars.3.php&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://i.imgur.com/FoEgn4s.png"&gt;&lt;img src="http://i.imgur.com/FoEgn4s.png" alt="http://i.imgur.com/FoEgn4s.png" crossorigin="anonymous" title="http://i.imgur.com/FoEgn4s.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-test-tinymce-toolbars.3.php attached to Ticket #27159</title>
      
        <dc:creator>EusebiuOprinoiu</dc:creator>

      <pubDate>Sun, 04 Sep 2016 21:27:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27159/wp-test-tinymce-toolbars.3.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27159/wp-test-tinymce-toolbars.3.php/1473024436092214</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>Elhisai</dc:creator>

      <pubDate>Sun, 04 Sep 2016 20:23:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:59</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:59/1473020630106717</guid>
      <description>&lt;p&gt;
+1 for keeping align buttons together, they're three different variations on the same parameter,
&lt;/p&gt;
&lt;p&gt;
about strike-trough, I know some (most?) users doesn't use it the way html standards say they should, but it doesn't mean they don't have a valid use case so maybe the solution is to translate it in html with a class and not a semantic tag and keep it on the second line
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36934 (Use of get_the_excerpt($post) is broken if post has no excerpt and you ...) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 04 Sep 2016 20:23:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36934#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36934#comment:26/1473020603002520</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36934/36934.diff" title="Attachment '36934.diff' in Ticket #36934"&gt;36934.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36934/36934.diff" title="Download"&gt;​&lt;/a&gt; is an improved version of &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36934/36934a.diff" title="Attachment '36934a.diff' in Ticket #36934"&gt;36934a.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36934/36934a.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Main changes:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adds an &lt;code&gt;$args&lt;/code&gt; parameter to &lt;code&gt;get_the_content()&lt;/code&gt; to make it more future proof.
&lt;/li&gt;&lt;li&gt;Gets rid of the &lt;code&gt;$pages&lt;/code&gt; and &lt;code&gt;$multipage&lt;/code&gt; globals by moving logic to &lt;code&gt;WP_Post&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Adds a test provided by @iandunn in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37519" title="#37519: defect (bug): Excerpts not retrieved outside loop when raw excerpt is empty (closed: duplicate)"&gt;#37519&lt;/a&gt;.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>36934.diff attached to Ticket #36934</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 04 Sep 2016 20:20:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36934/36934.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36934/36934.diff/1473020452235949</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36809 (Remove target="_blank" checkbox in Advanced Link Modal) updated</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Sun, 04 Sep 2016 20:10:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36809#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36809#comment:13/1473019838206039</guid>
      <description>&lt;p&gt;
@Presskopp - Just submit your patch in this ticket. No need for a second one.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #36809,​37941 batch updated</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Sun, 04 Sep 2016 20:07:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=36809%2C37941</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=36809%2C37941/1473019677521507</guid>
      <description>duplicate: &lt;p&gt;
This doesn't need to be a separate ticket at this time.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36809" title="#36809: enhancement: Remove target=&amp;#34;_blank&amp;#34; checkbox in Advanced Link Modal (closed: maybelater)"&gt;#36809&lt;/a&gt; is just going to transmute from fix A to fix B :) Happens all the time.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>class-wp-filesystem-ssh2.php.patch attached to Ticket #37942</title>
      
        <dc:creator>billthor55</dc:creator>

      <pubDate>Sun, 04 Sep 2016 17:20:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37942/class-wp-filesystem-ssh2.php.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37942/class-wp-filesystem-ssh2.php.patch/1473009614377061</guid>
      <description>&lt;p&gt;
Patch file to use ssh2-sftp-stat for critical methods.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37942 (ssh2 update failing) created</title>
      
        <dc:creator>billthor55</dc:creator>

      <pubDate>Sun, 04 Sep 2016 17:19:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37942</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37942/1473009551325732</guid>
      <description>&lt;p&gt;
ssh2 update reports it is unable to find the wp-content directory.  After a fair bit of testing, I have determined that the ssh2-sftp:// file paths are not reliable for many methods.
&lt;/p&gt;
&lt;p&gt;
I've patched my copy of class-wp-filesystem-ssh2.py to use the ssh2-sftp-stat method to for a number of methods including: exists, is_dir, is_file, getchmod...
&lt;/p&gt;
&lt;p&gt;
In testing this appears to be more reliable.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>TJNowell</dc:creator>

      <pubDate>Sun, 04 Sep 2016 16:35:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:171</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:171/1473006954312163</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
And then there is the idea of bundling Composer with WordPress. What would
be benefit of that? For people who use composer already, or for end-users
who download and install plugins and themes from WP.org?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Nobody is suggesting we bundle Composer with WordPress, Composer is a CLI tool, and to bundle it with Core would be very unusual. That's not how Composer is meant to be installed or used.
&lt;/p&gt;
&lt;p&gt;
What we're talking about is an autoloader, which is generated as output by the Composer tool, not Composer itself. It was mentioned because Composer generated autoloaders are widespread, well known, reliable, well tested, and have had the attention of some of the biggest companies and most experienced PHP developers alive. It's also in use in a great number of WordPress agencies, plugins, and themes, so there is existing familiarity with how it works, it's not a foreign unknown.
&lt;/p&gt;
&lt;p&gt;
This gets you these 10 files:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;vendor/autoload.php&lt;/strong&gt; - the bootstrapper
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/ClassLoader.php&lt;/strong&gt; - implements a PSR-0, PSR-4 and classmap class loader
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/LICENSE&lt;/strong&gt; - license
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/autoload_classmap.php&lt;/strong&gt; - an array of class names and the files they can be found in
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/autoload_files.php&lt;/strong&gt; - an array of files that will always be loaded immediatley
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/autoload_namespaces.php&lt;/strong&gt; - an array of folder to namespace mappings
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/autoload_psr4.php&lt;/strong&gt; - an array mapping folders to PSR4 namespaces
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/autoload_real.php&lt;/strong&gt; - an autogenerated class with a build specific hash in the name to create the autoloader and fill it with the above files
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/autoload_static.php&lt;/strong&gt; - a map of all classes/namespaces, and their files, an amalgam of the other autoload_*.php array files
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;vendor/composer/installed.json&lt;/strong&gt; - a json file of what is being autoloaded
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Composer can also be passed a generator that controls what is generated when an autoloader is created. The above list is merely the default.
&lt;/p&gt;
&lt;p&gt;
I'm also unsure why we're renaming the vendor folder to wp-vendor, it's strange and non-standard.
&lt;/p&gt;
&lt;p&gt;
I'd also advise against including the autoloader in wp-config.php, wp-config.php is for setting constants and configuring, including the autoloader there will necessitate modifying every config file that exists already, as well as handling those scenarios when the file is up one directory, etc
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37940 (WordPress email subject update) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 04 Sep 2016 16:29:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37940#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37940#comment:2/1473006587909538</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-i18n by ramiy. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-i18n/p1473006585000002"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37938 (Split Source Parsing Functions from Press This So Can Be Used Globally) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 04 Sep 2016 14:55:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37938#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37938#comment:2/1473000938145696</guid>
      <description>&lt;p&gt;
@swissspidy If you remember, I chimed in re link previews during the oEmbed discussions, so I completely agree there too.
&lt;/p&gt;
&lt;p&gt;
This should be relatively easy to separate. The code is pretty much written and stable. WP_Press_This will just call another class and focus on the Press This legacy merge and other related things.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>EusebiuOprinoiu</dc:creator>

      <pubDate>Sun, 04 Sep 2016 14:23:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:58</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:58/1472998985674035</guid>
      <description>&lt;p&gt;
I don't think it's a good idea to separate the alignment buttons. People use them all the time and separating them will only bring confusion and frustration. (Related buttons should be grouped together)
&lt;/p&gt;
&lt;p&gt;
I also don't like the idea of displaying the headings out of order. Either hide de H1 heading and allow developers to bring it back using a filter or leave it as it is.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34157 (Style the increment and decrement buttons for number inputs) updated</title>
      
        <dc:creator>xavortm</dc:creator>

      <pubDate>Sun, 04 Sep 2016 13:16:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34157#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34157#comment:4/1472994977708464</guid>
      <description>&lt;p&gt;
I am 95% sure this won't be the solution here, but I went and make a very small view of how these buttons can be changed using jQuery (which is why I am not a big fan of this solution)
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://codepen.io/xavortm/pen/JRoYLr"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://codepen.io/xavortm/pen/JRoYLr&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Other than that, my opinion is that this field should stay the way it is currently. Arrows are not visible by default and are visible on hover.
&lt;/p&gt;
&lt;p&gt;
Also, this article shows how it looks on most browsers - &lt;a class="ext-link" href="https://css-tricks.com/numeric-inputs-a-comparison-of-browser-defaults/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://css-tricks.com/numeric-inputs-a-comparison-of-browser-defaults/&lt;/a&gt; I am personally a fan of Opera and it's easy to click buttons, but as you can see IE is totally different, only having close (empty) button.
&lt;/p&gt;
&lt;p&gt;
Styling the input field buttons will require using some sort of background image, as :after doesn't work on input fields.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>bfintal</dc:creator>

      <pubDate>Sun, 04 Sep 2016 13:07:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:57</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:57/1472994439630675</guid>
      <description>&lt;p&gt;
Building upon the idea:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Minimal — same as above&lt;/strong&gt;
&lt;a style="padding:0; border:none" href="https://i.imgur.com/Htvo5NO.png"&gt;&lt;img src="https://i.imgur.com/Htvo5NO.png" alt="https://i.imgur.com/Htvo5NO.png" crossorigin="anonymous" title="https://i.imgur.com/Htvo5NO.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Full — center button moves to the other alignment buttons for grouping&lt;/strong&gt;
&lt;a style="padding:0; border:none" href="http://i.imgur.com/QAZy9TH.jpg"&gt;&lt;img src="http://i.imgur.com/QAZy9TH.jpg" alt="http://i.imgur.com/QAZy9TH.jpg" crossorigin="anonymous" title="http://i.imgur.com/QAZy9TH.jpg" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;FormatSelect has no Heading 1 — but it will still have an H1 only if content (in the editor) doesn't yet have an H1 &amp;amp; the post is of &lt;code&gt;post_type&lt;/code&gt; page (and maybe a filter too)&lt;/strong&gt;
&lt;a style="padding:0; border:none" href="http://i.imgur.com/VqawM7p.jpg"&gt;&lt;img src="http://i.imgur.com/VqawM7p.jpg" alt="http://i.imgur.com/VqawM7p.jpg" crossorigin="anonymous" title="http://i.imgur.com/VqawM7p.jpg" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
A concern would be that the Toggle Toolbar and its neighboring buttons would move once it is toggled.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37941 (add rel="noopener noreferrer" to any target="_blank") updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 04 Sep 2016 12:50:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37941#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37941#comment:2/1472993439164617</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22002 (Favorite plugins in the plugin installer) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 04 Sep 2016 12:15:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22002#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22002#comment:37/1472991333027665</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #forums by otto42. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/forums/p1472991330000395"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37917 (Users without the edit_private_posts capability can still create ...) updated</title>
      
        <dc:creator>akibjorklund</dc:creator>

      <pubDate>Sun, 04 Sep 2016 11:56:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37917#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37917#comment:1/1472990170830979</guid>
      <description>&lt;p&gt;
Hi @ryan.kanner, welcome to the WordPress Trac! Thanks for your report and for taking the time to create a patch.
&lt;/p&gt;
&lt;p&gt;
While your assumption is indeed very reasonable, I think this is at least partly intended behavior. It is just unintuitive and does not allow fine grained enough control. That is, if I'm understanding things right after doing some research on the subject.
&lt;/p&gt;
&lt;p&gt;
Users, who have the capability to &lt;code&gt;publish_posts&lt;/code&gt;, but do not have &lt;code&gt;edit_published_posts&lt;/code&gt;, can publish posts. They just can't edit them afterwards without the capability. Similarly, it makes sense that users cannot edit private posts afterwards without &lt;code&gt;edit_private_posts&lt;/code&gt;. But alas, there is no separate &lt;code&gt;make_posts_private&lt;/code&gt; (the equivalent to &lt;code&gt;publish_posts&lt;/code&gt; for private posts).
&lt;/p&gt;
&lt;p&gt;
When trying to publish or make posts private without &lt;code&gt;publish_posts&lt;/code&gt; their status status is set to &lt;code&gt;pending&lt;/code&gt; in &lt;code&gt;wp-admin/includes/post.php&lt;/code&gt;. XML-RPC does its own similar validation, but throws an error. &lt;a class="ext-link" href="https://github.com/WP-API/WP-API/blob/develop/lib/endpoints/class-wp-rest-posts-controller.php#L880"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;REST API too requires `publish_posts`&lt;/a&gt; for private status.
&lt;/p&gt;
&lt;p&gt;
So the &lt;code&gt;publish_posts&lt;/code&gt; capability is used instead to also cover cases where status is changing to &lt;code&gt;private&lt;/code&gt;. It makes sense, because if this capability is missing, none of the visibility choices would appear. For more fine-grained control, a new capability would have to be introduced. And that would have to be enforced in many more places than on the UI level. XML-RPC and REST API included.
&lt;/p&gt;
&lt;p&gt;
I'm not totally convinced it makes sense to tie &lt;code&gt;publish_posts&lt;/code&gt; with making posts &lt;code&gt;private&lt;/code&gt;, but that is how it works and it is would probably be very hard to change. So if we were to introduce &lt;code&gt;make_posts_private&lt;/code&gt;, then that would have to depend on &lt;code&gt;publish_posts&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I think the next step would be to hear some arguments why such new capability would need to exist, other than just for completeness (which would be a valid reason to me). What are the use cases for this? What sort of harm is done if people with &lt;code&gt;publish_posts&lt;/code&gt; can also set status to &lt;code&gt;private&lt;/code&gt;? If there is not much harm and the thinking behind the tickets is just to prevent users accidentally setting posts to private, creating a plugin that hides the options with CSS based on for example a custom capability or a user role would do just fine. (It is another issue altogether, but personally I think private posts don't have much use, so they mostly just clutter the UI.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37673 (Masonry problem in Safari (also in iOS)) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 04 Sep 2016 11:48:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37673#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37673#comment:4/1472989695801217</guid>
      <description>invalid: &lt;p&gt;
Hi @anatrog, this Trac is used for enhancements and bug reporting for the WordPress core software.
&lt;/p&gt;
&lt;p&gt;
Please try the &lt;a class="ext-link" href="https://wordpress.org/support/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;support forums&lt;/a&gt; to get help with your site.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #36809 (Remove target="_blank" checkbox in Advanced Link Modal) updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 04 Sep 2016 11:24:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36809#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36809#comment:11/1472988293591718</guid>
      <description>&lt;p&gt;
I made a ticket here &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/37941" title="#37941: enhancement: add rel=&amp;#34;noopener noreferrer&amp;#34; to any target=&amp;#34;_blank&amp;#34; (assigned)"&gt;#37941&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37941 (add rel="noopener noreferrer" to any target="_blank") updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 04 Sep 2016 11:24:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37941#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37941#comment:1/1472988243404999</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Patch is simply adding it to any found instance.
&lt;/p&gt;
&lt;p&gt;
I'm sure it needs more (or less) to be done,
&lt;/p&gt;
&lt;p&gt;
but I don't know which php-files or js-files to touch, to generate this tags for each link with &lt;code&gt;target="_blank"&lt;/code&gt; set.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37941.diff attached to Ticket #37941</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 04 Sep 2016 11:22:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37941/37941.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37941/37941.diff/1472988155280292</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37941 (add rel="noopener noreferrer" to any target="_blank") created</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 04 Sep 2016 11:20:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37941</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37941/1472988030705075</guid>
      <description>&lt;p&gt;
This is a following ticket to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36809" title="#36809: enhancement: Remove target=&amp;#34;_blank&amp;#34; checkbox in Advanced Link Modal (closed: maybelater)"&gt;#36809&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It's about making these links more secure where/when they are used.
&lt;/p&gt;
&lt;p&gt;
see:
&lt;a class="ext-link" href="https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>F J Kaiser</dc:creator>

      <pubDate>Sun, 04 Sep 2016 10:49:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:80</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:80/1472986199067211</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:79" title="Comment 79"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Is your point that using &lt;code&gt;WP::get( '&amp;lt;global_state&amp;gt;' )&lt;/code&gt; means that anyone could easily add any new global state without having to modify the &lt;code&gt;WP&lt;/code&gt; class?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It seems you missed the point with the previous notes and comments about the &lt;em&gt;global state&lt;/em&gt;. Does the first &lt;code&gt;WP_Registry&lt;/code&gt; suffer from accessing globals? Yes. But as others have pointed out already, there should be &lt;em&gt;no&lt;/em&gt; access to globals, but instances built, stacked and returned – to get rid of the globals part as this is where this ticket has its focus.
&lt;/p&gt;
&lt;p&gt;
If you believe there is a need to discuss the community layer (for e.g. barrier for entry level devs), IDE support or yes-nos for using patterns in general further, I believe that Slack is a better route to address this. Still &lt;em&gt;briefly summed up results&lt;/em&gt; of such a discussion would make a good fit in here. This ticket already is hard to follow and comes with a 1h+ reading experience, which raises the entry barrier for devs who would like to participate up to a no-no level.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 04 Sep 2016 10:37:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:18/1472985448261786</guid>
      <description>&lt;p&gt;
@celloexpressions I looked at the patch today and I think before we user test we probably want to tidy up some of the big UI issues. I'm a little concerned at this point that users would get caught up on some of the things over give us experience feedback.
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/s4jR3byOp8.png"&gt;&lt;img width="50%" alt="https://cldup.com/s4jR3byOp8.png" title="https://cldup.com/s4jR3byOp8.png" crossorigin="anonymous" src="https://cldup.com/s4jR3byOp8.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Small things like padding and format I think if fixed will at least give the feature a chance.
&lt;/p&gt;
&lt;p&gt;
I also discovered hitches like this, which if not fixed would just confuse in a user test:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/5m3R264Ltf.png"&gt;&lt;img width="50%" alt="https://cldup.com/5m3R264Ltf.png" title="https://cldup.com/5m3R264Ltf.png" crossorigin="anonymous" src="https://cldup.com/5m3R264Ltf.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
The more I explored this, the more I'm thinking something isn't working in the patch or my setup. Perhaps we can start with working out if that is the case?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37673 (Masonry problem in Safari (also in iOS)) updated</title>
      
        <dc:creator>OriginalEXE</dc:creator>

      <pubDate>Sun, 04 Sep 2016 10:12:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37673#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37673#comment:3/1472983962849592</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello @anatrog, thank you for reporting this.
&lt;/p&gt;
&lt;p&gt;
I don't think this is something that WordPress can or should fix for you though, it seems related to your theme so maybe this should be reported to the author of the theme you are using?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37938 (Split Source Parsing Functions from Press This So Can Be Used Globally) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 04 Sep 2016 10:06:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37938#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37938#comment:1/1472983614655355</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thought the same the other day. A separate class would be very handy for things like automatic link previews.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 09:43:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:79</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:79/1472982204945334</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:78" title="Comment 78"&gt;F J Kaiser&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That is &lt;em&gt;well-architected&lt;/em&gt; as it is open for extension – without constantly changing the access layer to the code base as soon as a new object gets implemented.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Is your point that using &lt;code&gt;WP::get( '&amp;lt;global_state&amp;gt;' )&lt;/code&gt; means that anyone could easily add any new global state without having to modify the &lt;code&gt;WP&lt;/code&gt; class?
&lt;/p&gt;
&lt;p&gt;
If so, do you believe that making it easy to add global state to an application is a virtue? Especially when you can do so without any place where people would know to go and look for documentation in the source code about your newly added global state?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 09:35:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:170</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:170/1472981730770990</guid>
      <description>&lt;p&gt;
Since I don't think I will have much time over the next week I am going to go ahead adiscuss my concerns with it.
&lt;/p&gt;
&lt;p&gt;
I am definitely in favor of add &lt;code&gt;composer.json&lt;/code&gt; to WordPress. It does not make anything complicated for people who do not use Composer but for those who do use it having it in core makes their lives easier.
&lt;/p&gt;
&lt;p&gt;
Beyond that it seems the primary short-term benefit of using Composer is to generate the classmap? &lt;em&gt;(It can't be because of autoloader generation because if you have a classmap the autoloader is trivial.)&lt;/em&gt;  Is there not any other benefit?
&lt;/p&gt;
&lt;p&gt;
Check me here if I am wrong, but is generating a classmap really that hard? I do it for WPLib and it seems pretty trivial. What am I missing?
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
And then there is the idea of bunding Composer with WordPress. What would be benefit of that? For people who use composer already, or for end-users who download and install plugins and themes from WP.org?
&lt;/p&gt;
&lt;p&gt;
If they use Composer already, why would they want to have to worry about incompatible versions?
&lt;/p&gt;
&lt;p&gt;
If they are end-users how would you get Composer to handle the dynamic load scenario of plugins and themes?
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Further, if plugins and themes wanted to use an autoloader would they using their own directories for code storaage, or in the &lt;code&gt;wp-vendor&lt;/code&gt; directory? Would they be responsible to create a project on &lt;code&gt;packagist.org&lt;/code&gt; to point to their code for their plugin, and then the plugin file in the plugins directory would just be a loader for the real plugin in vendors?
&lt;/p&gt;
&lt;p&gt;
Or would each plugin need to define its own package type so they can each map their own includes directory inside &lt;code&gt;composer.json&lt;/code&gt; so that Composer will know to place their autoload files in the right plugin or theme directory?, e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;type:yoast-seo =&amp;gt; `wp-content/plugins/wordpress-seo/inc
&lt;/pre&gt;&lt;p&gt;
Frankly, quoting @rmccue:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;I still think this seems to be a solution (Composer) searching for a problem.&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>F J Kaiser</dc:creator>

      <pubDate>Sun, 04 Sep 2016 09:29:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:78</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:78/1472981397716104</guid>
      <description>&lt;p&gt;
@MikeSchinkel
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
The use of a &lt;code&gt;WP::get( 'whatever' )&lt;/code&gt; seems over-architected and with no benefits I can perceive when we can just as easily use &lt;code&gt;WP::whatever()&lt;/code&gt;. Especially when whatever is known in advance as it is with all existing globals. Better to create hardcoded methods that each have their own PHPDoc and each can trigger autocomplete in an IDE (without requiring complex machinations to get autocomplete to work.)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Having &lt;code&gt;WP::get( 'dragons' )&lt;/code&gt; is the opposite of &lt;em&gt;over-architected&lt;/em&gt;. That is &lt;em&gt;well-architected&lt;/em&gt; as it is open for extension – without constantly changing the access layer to the code base as soon as a new object gets implemented. What you are searching for is called &lt;em&gt;convenience-architected&lt;/em&gt;. If you believe you need convenience-wrappers, then put a Facade in front of it, as already proposed by @jacobsantos . This is the proper way to hide away complexity.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37898 (Prompt message when removing a plugin is sometimes misleading) updated</title>
      
        <dc:creator>OriginalEXE</dc:creator>

      <pubDate>Sun, 04 Sep 2016 09:29:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37898#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37898#comment:3/1472981392544509</guid>
      <description>&lt;p&gt;
Not even the existence of uninstall.php can guarantee that the plugin will remove its data (it could be used for something else), I think that's worth thinking about.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sun, 04 Sep 2016 09:23:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:56/1472981038200184</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27159#comment:54" title="Comment 54"&gt;bfintal&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It is possible to have a page (doesn't apply to posts) without a title. In those cases it is left to the user to "design" the title and wouldn't be able to add an H1 anymore with the suggestions. While I agree that H1 shouldn't be used more than once, maybe we could just leverage that and hide the H1 if 1) there is one already in the content and 2) the post being edited is a page (post_type). This suggestion might be a stretch, but I'm just throwing this idea out there in case there are others who find it useful.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Something like this? Obviously better designed. Just to make sure users do NOT keep adding h1's.
&lt;a style="padding:0; border:none" href="https://i.imgur.com/QPQdhwn.png"&gt;&lt;img src="https://i.imgur.com/QPQdhwn.png" alt="https://i.imgur.com/QPQdhwn.png" crossorigin="anonymous" title="https://i.imgur.com/QPQdhwn.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@celloexpressions and @mrahmadawais I agree that the center button should be readily accessible there. But what if the center button was moved to be beside the other alignment buttons when in full view?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
While having the center button with other align button makes all the sense, it's just used a lot and having it in the primary toolbar is important. But putting other align tools there is wasting space since other important elements can be there.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37929 (Add `pre_delete_option` filter) updated</title>
      
        <dc:creator>OriginalEXE</dc:creator>

      <pubDate>Sun, 04 Sep 2016 09:20:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37929#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37929#comment:2/1472980827410266</guid>
      <description>&lt;p&gt;
Interesting idea.
&lt;/p&gt;
&lt;p&gt;
In your patch, maybe you should use
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;! is_null( $skip )
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
instead of
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;null !== $skip
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
to keep it consistent with the null check immediately below.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 08:59:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:169</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:169/1472979594803526</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:162" title="Comment 162"&gt;tfrommen&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The "proposal" is presented in &lt;a class="ext-link" href="https://www.alainschlesser.com/adding-central-autoloader-wordpress/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this post&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks.  That was very helpful.
&lt;/p&gt;
&lt;p&gt;
However, the proposal did not summarize so I'm still a bit unclear with what is being proposed.  Let me summarize to see if I can get it right:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Add &lt;code&gt;composer.json&lt;/code&gt; to WordPress
&lt;/li&gt;&lt;li&gt;Change &lt;code&gt;wp-config.php&lt;/code&gt; to load a Composer autoloader.
&lt;/li&gt;&lt;li&gt;Generate a PHP52 compatible autoloader using &lt;code&gt;xrstf/composer-php52&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Have Composer generate a classmap for &lt;code&gt;wp-includes&lt;/code&gt; directory
&lt;/li&gt;&lt;li&gt;Fix anything in &lt;code&gt;wp-includes&lt;/code&gt; that is not 1 file=1 class.
&lt;/li&gt;&lt;li&gt;Include the generated classmap and autoloader with WordPress core.
&lt;/li&gt;&lt;li&gt;Once we get beyond PHP52, bundle Composer into WordPress core.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Did I correctly summarize the proposal that is currently being debated?  If not, what did I get wrong?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 08:25:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:77</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:77/1472977559862353</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:73" title="Comment 73"&gt;ChriCo&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
as i see, @schlessera found enough valid arguments for this "discussion" above, so we can continue the work on a integration of a ServiceContainer into WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Oh wow.  And there I thought &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:73" title="#37699: enhancement: Death to Globals Episode #1: A Registry, A Pattern (new)"&gt;your comment&lt;/a&gt; was one of the most epic bits of trolling ever seen on Trac -- and I was going to comment &lt;em&gt;"Well Played"&lt;/em&gt; -- but instead, you were serious.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 04 Sep 2016 08:23:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:76</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:76/1472977406416067</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:72" title="Comment 72"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Your main point is that we fail to keep WordPress development be accessible to "lesser-experienced" developers.
I wholeheartedly agree that a codebase needs to be welcoming and offer a learning curve that is not too steep.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Finally. I feel prior to now that this point was falling on deaf ears.  Thank you for recognizing the concern.
&lt;/p&gt;
&lt;p&gt;
Hopefully others can explicitly state if they agree with this or not. If so, then it can be used as one litmus test for a good approach.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, I think that your conclusions are all backwards.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Actually, I think you misunderstood my conclusions based on the two examples you contrasted.
&lt;/p&gt;
&lt;p&gt;
I mostly agreed with all you wrote in #&lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:72" title="Comment 72"&gt;comment:72&lt;/a&gt;. I agree that &lt;code&gt;WP::get( 'whatever' )-&amp;gt;do_something;&lt;/code&gt; is better than  &lt;code&gt;$GLOBALS['whatever']-&amp;gt;do_something();&lt;/code&gt;.  And while I disagree with your assertion that lesser skilled people will find is easier I think it is not a step too far and one that we should take if we can minimize the learning required to just one more bit is syntax (e.g. &lt;code&gt;::&lt;/code&gt;).
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
As an aside, I have recent specific experience running monthly WordPress coding workshops for a year. They were ostensibly supposed to be for professional developers but the least skilled people in our group always attended. I really learned a lot about what people who attend WordPress user groups with the intention of learning programming struggle with.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
One of key things that trigger them to assume they cannot understand something is &lt;strong&gt;when they see syntax they do not understand&lt;/strong&gt;, especially if they associate it with something they have already decided they can't understand, such as OOP.  For example this is a lot of syntax to learn for a non-programmer and it is intimidating to them: &lt;code&gt;WP::get( 'whatever' )-&amp;gt;do_something;&lt;/code&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
To clarify my specific concerns:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;FOR THIS TICKET:&lt;/strong&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The use of a &lt;code&gt;WP::get( 'whatever' )&lt;/code&gt; seems over-architected and with no benefits I can perceive when we can just as easily use &lt;code&gt;WP::whatever()&lt;/code&gt;.  Especially when &lt;code&gt;whatever&lt;/code&gt; is known in advance as it is with all existing globals. Better to create hardcoded methods that each have their own PHPDoc and each can trigger autocomplete in an IDE &lt;em&gt;(without requiring complex machinations to get autocomplete to work.)&lt;/em&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
&lt;strong&gt;GENERAL ISSUES:&lt;/strong&gt;
&lt;/p&gt;
&lt;ol start="2"&gt;&lt;li&gt;For the benefit of archetypes 1 and 2 from #&lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:66" title="Comment 66"&gt;comment:66&lt;/a&gt;, let's please avoid adding in namespaces, interfaces and/or dependency injection that themers and site builders would thus need to learn and understand.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;And let's try to avoid namespaces and interfaces for archetypes 3-6 whenever it could potentially result in 1 and 2 having to learn them.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="4"&gt;&lt;li&gt;When using dependency injection let's (1) use the $args pattern and not a bunch of positional parameters, and (2) always default to the most common case inside the function/method that uses the dependencies.  Put a one-time burden on the developer of the function/method to deal with as much of the complexity as possible vs. forcing complexity onto tens of not hundreds of thousands of people who have to deal with it daily.
&lt;/li&gt;&lt;/ol&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;You can always solve a simple problem with a too complex architecture (and preferably wrap a simplification around it). But you will not be able to solve a complex problem with a too simple architecture.&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I strongly agree with that.
&lt;/p&gt;
&lt;p&gt;
But I also believe that we need to go the extra mile to ensure that complexity does not leak out and burden "lesser-experienced" developers.  Core (and commercial plugin/theme vendors) should make ever effort to make it trivially easy to use WordPress and their products, respectively, even if it means their own code ends up being very complex.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>ChriCo</dc:creator>

      <pubDate>Sun, 04 Sep 2016 08:02:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:75</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:75/1472976143491908</guid>
      <description>&lt;p&gt;
Howdy.
&lt;/p&gt;
&lt;p&gt;
@jacobsantos i'm replying in a short way here:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;0. My "implementation&lt;/strong&gt;
Actually it was no implementation at all. I just throwed in some "requirements" with examples, so everyone here can follow. I think we all agree that we need &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;has&lt;/code&gt; and some way to &lt;code&gt;protect&lt;/code&gt; values from overwriting. Also some kind of "creation" (&lt;code&gt;factory&lt;/code&gt;) of new instances should be possible. There's also a mix since you should be able to access the current &lt;code&gt;wpdb&lt;/code&gt;-connection, but it should also be possible to connect to another db (create a new instance of this class).
&lt;/p&gt;
&lt;p&gt;
In addtion, your StorageFactory (or for Pimple its a ServiceProvider) could improve everything. Since we cannot use closures because of PHP 5.2, we have to build something arround it.
I also had a look at your MimicCMS, but i think thats not the "right" or full solution/way here. Also, as i see it does not support PHP 5.2 so there need to be changed some internals. And thats the point: when we're starting to change it, i would prefer use some well known Container - which is already proved by many many many users (nothing against you and props to your work!) - as basis,
&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Also we should keep in mind:&lt;/em&gt; We've a ton of "APIs" in WordPress and no &lt;em&gt;real&lt;/em&gt; packages (e.G. a package for Query (Term, Post, ..), Customizer, AssetManagent (WP_Dependencies..irks) ...). So to add some Factories/Providers are a hugh mess currently.
&lt;/p&gt;
&lt;p&gt;
A good way would be something like:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├─&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;├─&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;WP_Query_Post&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;├─&lt;/span&gt; &lt;span class="nx"&gt;Term&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;WP_Query_Term&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;├─&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;├─&lt;/span&gt; &lt;span class="nx"&gt;composer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;haha&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;├─&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;├─&lt;/span&gt;  &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;WP_Query_Provider_Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;thats&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="nx"&gt;above&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
or something similar. It's just a quick example - naming is not fixed and should just show how it could be implemented decoubled from WordPress with own UnitTests (we've no real UnitTests at all in WordPress...they are more like IntegrationTests..)
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;1. To Pimple or not&lt;/strong&gt;
I just mentioned Pimple because it's easy to unterstand, well known, has a very short documention where you can unterstand the complete implementation just by reading some lines. This was just an example, so everyone can get a quick overview what &lt;em&gt;could be&lt;/em&gt; implemented. I'm also not liking the ArrayAccess in Pimple, but thats just my personal opinion and that does not mean anything. I'm open to every other well known, tested and documented Container. And there are a lot of Containers and implementations out there: &lt;a class="ext-link" href="https://github.com/container-interop/container-interop#compatible-projects"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/container-interop/container-interop#compatible-projects&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;2. Seperate it from Core&lt;/strong&gt;
Since we're stucking with PHP 5.2, we're not able to use some existing implementations. This means, we have to put in a lot of effort to build an own implemtation of it with full test coverage.
I totally agree in this point with you, that the ServiceContainer should be seperated from the Core and loaded via composer. Also it should be decoupled from Core to use it on its own (e.G. no usage of WordPress functions/classes such as {{_doing_it_wrong}} or {{WP_Error}}).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>mor10</dc:creator>

      <pubDate>Sun, 04 Sep 2016 07:43:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:55</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:55/1472975009693844</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27159#comment:54" title="Comment 54"&gt;bfintal&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It is possible to have a page (doesn't apply to posts) without a title. In those cases it is left to the user to "design" the title and wouldn't be able to add an H1 anymore with the suggestions. While I agree that H1 shouldn't be used more than once, maybe we could just leverage that and hide the H1 if 1) there is one already in the content and 2) the post being edited is a page (post_type).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is what I was referring to above: If the theme requires an H1 in certain circumstances, there should be an optional filter to activate it when appropriate.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>bfintal</dc:creator>

      <pubDate>Sun, 04 Sep 2016 06:30:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:54</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:54/1472970651230986</guid>
      <description>&lt;p&gt;
It is possible to have a page (doesn't apply to posts) without a title. In those cases it is left to the user to "design" the title and wouldn't be able to add an H1 anymore with the suggestions. While I agree that H1 shouldn't be used more than once, maybe we could just leverage that and hide the H1 if 1) there is one already in the content and 2) the post being edited is a page (post_type). This suggestion might be a stretch, but I'm just throwing this idea out there in case there are others who find it useful.
&lt;/p&gt;
&lt;p&gt;
@celloexpressions and @mrahmadawais I agree that the center button should be readily accessible there. But what if the center button was moved to be beside the other alignment buttons when in full view?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sun, 04 Sep 2016 05:30:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:202</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:202/1472967004922076</guid>
      <description>&lt;p&gt;
Great news!
&lt;/p&gt;
&lt;p&gt;
I've been doing more testing on W.org and WP.com, everything appears to be working smoothly. As such, the plan is to commit in the coming week. Please don't hold back on trying to break it over the next few days, I'd prefer to fix bugs now, rather than after it rolls out in the nightly. :-)
&lt;/p&gt;
&lt;p&gt;
As @nacin suggested &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/17817#comment:169" title="Comment 169"&gt;a lifetime ago&lt;/a&gt;, the &lt;a class="ext-link" href="https://gist.github.com/jbrinley/eaaad00b52e1316c6904"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;draft post&lt;/a&gt; that @jbrinley wrote will be published on make/core, with some comments around timing for the final keep/revert decision.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>noplanman</dc:creator>

      <pubDate>Sun, 04 Sep 2016 05:02:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:201</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:201/1472965352217122</guid>
      <description>&lt;p&gt;
Ok, can confirm that it's working now, great job! :-D
&lt;/p&gt;
&lt;p&gt;
If you need any other testing, just let me know.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sun, 04 Sep 2016 04:29:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:200</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:200/1472963391638141</guid>
      <description>&lt;p&gt;
Oh, good catch @noplanman. I totally forgot to update &lt;code&gt;WP_Hook::do_action()&lt;/code&gt; to keep track of the current priority. :-)
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/17817/17817.18.diff" title="Attachment '17817.18.diff' in Ticket #17817"&gt;17817.18.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/17817/17817.18.diff" title="Download"&gt;​&lt;/a&gt; fixes this, and adds unit tests.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>17817.18.diff attached to Ticket #17817</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sun, 04 Sep 2016 04:28:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17817/17817.18.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17817/17817.18.diff/1472963327764592</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37770 (Docs improvements for 4.7) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 04 Sep 2016 04:08:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37770#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37770#comment:11/1472962092247711</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38519" title="Script Loader: Correct default value for `$src` in ..."&gt;38519&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Script Loader: Correct default value for &lt;code&gt;$src&lt;/code&gt; in &lt;code&gt;wp_enqueue_script()&lt;/code&gt; and &lt;code&gt;wp_enqueue_style()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props Frank Klein for initial patch.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37770" title="#37770: task (blessed): Docs improvements for 4.7 (closed: fixed)"&gt;#37770&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [38519]: Script Loader: Correct default value for `$src` in ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 04 Sep 2016 04:08:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38519</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38519/1472962091788922</guid>
      <description>&lt;p&gt;
Script Loader: Correct default value for &lt;code&gt;$src&lt;/code&gt; in &lt;code&gt;wp_enqueue_script()&lt;/code&gt; and &lt;code&gt;wp_enqueue_style()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Props Frank Klein for initial patch.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37770" title="#37770: task (blessed): Docs improvements for 4.7 (closed: fixed)"&gt;#37770&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 04 Sep 2016 03:41:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:17/1472960495713032</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37661/37661.1.diff" title="Attachment '37661.1.diff' in Ticket #37661"&gt;37661.1.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37661/37661.1.diff" title="Download"&gt;​&lt;/a&gt; adds:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Refine UI for users that can't install themes (and multisite), and restore the existing installed themes filter for these users. We need to figure out how to maintain the grid of themes when some of them are hidden (the nth-child approach for margins breaks when elements are hidden).
&lt;/li&gt;&lt;li&gt;Clean up JS events for theme details buttons.
&lt;/li&gt;&lt;li&gt;Delete themes (shiny), which also updates instances of the theme in other sections accordingly.
&lt;/li&gt;&lt;li&gt;Update themes (shiny). We're now patching updates.js as well so we definitely can't use a plugin for testing unfortunately. We also need to define the JS &lt;code&gt;pagenow&lt;/code&gt; global in the customizer now for updates and deletion to work properly. I unfortunately can't test whether the UI is updated appropriately on a successful update, as my internet connection is currently too slow for my local server to download a theme from .org, but update failures are working well.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I also investigated adding theme reviews to the details modal. Per the above discussion in #meta, the themes api doesn't have a way to query theme reviews yet. This may be possible now that the forums have been updated from bbPress 1.x, but we'll explore further in a separate ticket in a future release, and coordinate was needed with the meta team for API support.
&lt;/p&gt;
&lt;p&gt;
That leaves only on more major development task:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;"Shiny" theme upload ajax action, add new theme control to installed section, focus() control.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
With nearly all of the functionality complete, now is the time for testing to pick up. @karmatosed will be coordinating user tests soon, and anyone who knows how to install a patch is highly encouraged to test the patch and comment here with feedback. Once we go through a round of user testing and design adjustments (I believe @folletto has some suggestions?), we can do a make/core post for additional feedback.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37770 (Docs improvements for 4.7) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sun, 04 Sep 2016 03:40:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37770#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37770#comment:10/1472960405104148</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38518" title="Docs: Update the `$message` parameter for `_default_wp_die_handler()` ..."&gt;38518&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Docs: Update the &lt;code&gt;$message&lt;/code&gt; parameter for &lt;code&gt;_default_wp_die_handler()&lt;/code&gt; to notate that it can also accept a &lt;code&gt;WP_Error&lt;/code&gt; object.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Additionally, update the &lt;code&gt;$message&lt;/code&gt; parameter description in the DocBlock for &lt;code&gt;wp_die()&lt;/code&gt; to make it explicitly clear messages derived from a passed &lt;code&gt;WP_Error&lt;/code&gt; object will only be evaluated if not performing an Ajax or XML-RPC request (as both default handlers completely ignore &lt;code&gt;WP_Error&lt;/code&gt; object messages).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37770" title="#37770: task (blessed): Docs improvements for 4.7 (closed: fixed)"&gt;#37770&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [38518]: Docs: Update the `$message` parameter for `_default_wp_die_handler()` ...</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sun, 04 Sep 2016 03:40:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38518</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38518/1472960404631926</guid>
      <description>&lt;p&gt;
Docs: Update the &lt;code&gt;$message&lt;/code&gt; parameter for &lt;code&gt;_default_wp_die_handler()&lt;/code&gt; to notate that it can also accept a &lt;code&gt;WP_Error&lt;/code&gt; object.
&lt;/p&gt;
&lt;p&gt;
Additionally, update the &lt;code&gt;$message&lt;/code&gt; parameter description in the DocBlock for &lt;code&gt;wp_die()&lt;/code&gt; to make it explicitly clear messages derived from a passed &lt;code&gt;WP_Error&lt;/code&gt; object will only be evaluated if not performing an Ajax or XML-RPC request (as both default handlers completely ignore &lt;code&gt;WP_Error&lt;/code&gt; object messages).
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37770" title="#37770: task (blessed): Docs improvements for 4.7 (closed: fixed)"&gt;#37770&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>37661.1.diff attached to Ticket #37661</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 04 Sep 2016 03:40:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37661/37661.1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37661/37661.1.diff/1472960403931468</guid>
      <description>&lt;p&gt;
Add theme updating and deletion, improve view when users can't install themes, clean up theme details events.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>customize-installed-themes-no-install.png attached to Ticket #37661</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 04 Sep 2016 03:32:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37661/customize-installed-themes-no-install.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37661/customize-installed-themes-no-install.png/1472959932921497</guid>
      <description>&lt;p&gt;
View for users who can't install themes and on multisite.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5915 (Same problem as in #252: apop broken if zero occurs in banner in 2.3.3 ...) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 04 Sep 2016 02:59:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5915#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5915#comment:12/1472957970349666</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18792 (Wrong FROM email when using wp_mail and built in mail() function) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 04 Sep 2016 02:57:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18792#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18792#comment:22/1472957843517396</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2852 (Infinite loop in do_robots causes apache to terminate) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 04 Sep 2016 02:23:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2852#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2852#comment:2/1472955803566070</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #forums by netweb. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/forums/p1472955801000295"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>EusebiuOprinoiu</dc:creator>

      <pubDate>Sun, 04 Sep 2016 02:17:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:53</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:53/1472955453570947</guid>
      <description>&lt;p&gt;
This is my current and ideal layout for the MCE Editor that I made with TinyMCE Advanced. The first row contains the buttons that I use on a daily basis and the second one those that I rarely use. Everything else was removed.
&lt;/p&gt;
&lt;p&gt;
I believe colors and font sizes don't have a place here because all they do is allow people to ruin even the best-designed themes.
&lt;/p&gt;
&lt;p&gt;
I am also a firm believer the H1 Heading doesn't have a place here as well. I saw many people using it multiple times in their post because "the text was bigger". Only titles should be H1 and this is done by the theme.
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://i.imgur.com/6kuMMIk.png"&gt;&lt;img src="http://i.imgur.com/6kuMMIk.png" alt="http://i.imgur.com/6kuMMIk.png" crossorigin="anonymous" title="http://i.imgur.com/6kuMMIk.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) updated</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sun, 04 Sep 2016 02:12:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:27/1472955137085981</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/22744/22744.4.diff" title="Attachment '22744.4.diff' in Ticket #22744"&gt;22744.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/22744/22744.4.diff" title="Download"&gt;​&lt;/a&gt; Accomplishes this task without introducing any new filters. To do so, any time we execute a search query on attachments we modify the JOIN clause to include postmeta, the WHERE clause to include searches for postmeta where &lt;code&gt;_wp_attached_file&lt;/code&gt; is the &lt;code&gt;meta_key&lt;/code&gt; and the GROUP BY clause to avoid returning duplicate posts.
&lt;/p&gt;
&lt;p&gt;
One question is whether we should search attachment file names any time &lt;code&gt;attachment&lt;/code&gt; post types are included in a search query, e.g. &lt;code&gt;$q['post_type'] =&amp;gt; array('attachment', 'post')&lt;/code&gt;, or only when exclusively doing searches on attachments? Currently, I'm only doing the latter.
&lt;/p&gt;
&lt;p&gt;
Also, thanks @Kent Brockman for the suggestion to check out the Media Search Enhanced plugin. Doing so helped me get my head around what needed to happen here.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>22744.4.diff attached to Ticket #22744</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sun, 04 Sep 2016 01:56:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/22744/22744.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/22744/22744.4.diff/1472954204443654</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 04 Sep 2016 01:23:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:52</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:52/1472952194926649</guid>
      <description>&lt;p&gt;
I would be okay with the proposal from @mrahmadawais if the center-align button were moved down with the other alignment buttons and the indent/outdent buttons were kept on the top level after lists. I would also prefer for underline to stay in the second row, since it's not semantic and it's there now.
&lt;/p&gt;
&lt;p&gt;
We could do surveys and maybe user tests but it's going to be extremely difficult to quantitatively determine what the best approach is. I don't know how much we could pick up from user testing here, since individuals have bias and any test steps will carry bias in the tools that they direct a user to use. We'll likely end up have to make a decision without that information, and as the ticket initially proposed, basing it largely on semantics seems logical (starting with headings, then emphasis, etc.).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37927 (Errors occurring after upgrading to WordPress 4.6) updated</title>
      
        <dc:creator>Pulsar_Media</dc:creator>

      <pubDate>Sun, 04 Sep 2016 01:17:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37927#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37927#comment:8/1472951873697131</guid>
      <description>&lt;p&gt;
If i understand correctly that article mentions that the error is related to uppercase characters in the directory name? My theme does not contain uppercase characters in the main theme folder which is labelled "hope-charity-theme-child"
&lt;/p&gt;
&lt;p&gt;
Sorry but i don't believe that article resolves anything.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-test-tinymce-toolbars.2.php attached to Ticket #27159</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sun, 04 Sep 2016 00:53:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27159/wp-test-tinymce-toolbars.2.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27159/wp-test-tinymce-toolbars.2.php/1472950406819086</guid>
      <description>&lt;p&gt;
Icon arrangement proposal!
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sun, 04 Sep 2016 00:52:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:51</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:51/1472950348688394</guid>
      <description>&lt;p&gt;
Well, here's what I propose! The arrangement is shown below and I have added the new plugin file.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Minimal&lt;/strong&gt;
&lt;a style="padding:0; border:none" href="https://i.imgur.com/Htvo5NO.png"&gt;&lt;img src="https://i.imgur.com/Htvo5NO.png" alt="https://i.imgur.com/Htvo5NO.png" crossorigin="anonymous" title="https://i.imgur.com/Htvo5NO.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Full&lt;/strong&gt;
&lt;a style="padding:0; border:none" href="https://i.imgur.com/HEBpWqe.png"&gt;&lt;img src="https://i.imgur.com/HEBpWqe.png" alt="https://i.imgur.com/HEBpWqe.png" crossorigin="anonymous" title="https://i.imgur.com/HEBpWqe.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;FormatSelect has no Heading 1&lt;/strong&gt;
&lt;a style="padding:0; border:none" href="https://i.imgur.com/a8FLLTZ.png"&gt;&lt;img src="https://i.imgur.com/a8FLLTZ.png" alt="https://i.imgur.com/a8FLLTZ.png" crossorigin="anonymous" title="https://i.imgur.com/a8FLLTZ.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I write/edit about 50K words every single week, and this arrangement would mean I could rely on the Minimal version of the above screenshots. Would really help.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sun, 04 Sep 2016 00:25:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:50</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:50/1472948701462869</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27159#comment:48" title="Comment 48"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27159#comment:47" title="Comment 47"&gt;mor10&lt;/a&gt;:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks for the info Andrew! I'd love to participate by contributing via that plugin.
&lt;/p&gt;
&lt;p&gt;
Moreover, Morten I strongly agree with the points you raised I came here to talk about exactly the same arrangement and how removing certain buttons would do more harm than good. But after reading your comment I feel that's all I need to say.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>jacobsantos</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:51:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:74</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:74/1472943089481839</guid>
      <description>&lt;p&gt;
I think your design is too "WordPress", in that it condenses what should be multiple methods or classes to a single method. I would also suggest The PHP League Container library. The problem with Pimple or really any container library is that it still needs to be accessed in some way. Something you mention below. Whether that retrieval is in WP or some other Singleton, that class would not be a container. It would hold the container.
&lt;/p&gt;
&lt;p&gt;
I don't believe you looked at MimicCMS Storage implementation. As a POC, I would rather you used it as a foundation since the ideas are:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The storage container should be separate from the retrieval. This should allow for proper testing of each part of the service container without interference of other pieces of WordPress code. Proper unit test cases, instead of the herculean effort found currently in the WordPress test suite to make the test cases as unit as possible. It is easier to unit test something that is meant to be independent than to make something that is not meant to be independent unit testable.
&lt;/li&gt;&lt;li&gt;The focus of the service container implementation should be separable from WordPress. This means that you would have another service container implementation in the wild that could gain traction outside of WordPress and therefore support larger than the maintainers. I doubt this would happen as there would likely be a split between what is included in WordPress and the progress of any library. The other, more important, reason is so that the implementation in WordPress could be replaced with another library at a later date. Think WP_HTTP with Requests, except WP_Service with Pimple or League Container.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
The reason I don't recommend Pimple is that array access is a bit more difficult to work with than object methods.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$wpdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$service&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'wpdb'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;/// ---------------
&lt;/span&gt;
&lt;span class="nv"&gt;$service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$service&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'wpdb'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$service&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;wpdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nv"&gt;$service&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'event'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Compare that to League's Container library
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;WP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'wpdb'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;wpdb&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;WP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'wpdb'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
It seems the primary advantage and the reason Pimple is being chosen is because it is simple with few lines of code. Practically, the only thing you would need to do to make it PHP5.2 is to remove the namespace and replace the acceptance of closures. If you want to remove SPL dependency and you should do this anyway, you would just rename the ArrayAccess methods.
&lt;/p&gt;
&lt;p&gt;
I will say that the protection and service layer of MimicCMS Storage is within the classes you pass. It is a better candidate for PHP7 with anonymous classes, but I think it would better serve you to imitate the composition and design of it than Pimple. The PHP League Container library may seem more involved, but once you remove the interfaces and drill down to its code, it isn't any more or less complex than MimicCMS Storage.
&lt;/p&gt;
&lt;h2 id="WhatisThis"&gt;What is This?&lt;/h2&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37699#comment:73" title="Comment 73"&gt;ChriCo&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ---------------
// protected
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b..arrrrr i\'m a pirate'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '''not''' possible - exception or at least return FALSE;
&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bar
&lt;/span&gt;
&lt;span class="c1"&gt;// factory
// just an example, since we're not able to use closures we maybe need to build something around it.
// $key, $class_name (instance of class name is the returned value), $args
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wpdb'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'db-user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-pass'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-host'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$wpdb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// complete new instance of wpdb
&lt;/span&gt;&lt;span class="nv"&gt;$wpdb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// complete new instance of wpdb
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;
Again, the design seems to accept arbitrary data types. This is unwise and I would recommend instead creating a class to contain the data types that are not objects.
&lt;/p&gt;
&lt;p&gt;
Prefer instead:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Storage_Factory_Wpdb&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Storage_FactoryInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Implementation creates and stores wpdb instance.
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Storage_Data&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Storage_DataInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Storage_ProtectedData&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Storage_DataInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Storage_Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ---------------
// protected
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Storage_Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Storage_Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"b..arrrrr i'm a pirate"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '''not''' possible - exception or at least return FALSE;
&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// bar
&lt;/span&gt;
&lt;span class="c1"&gt;// factory
// just an example, since we're not able to use closures we maybe need to build something around it.
// $key, $class_name (instance of class name is the returned value), $args
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Storage_Factory_Wpdb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'db-user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-pass'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-host'&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$wpdb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// complete new instance of wpdb
&lt;/span&gt;&lt;span class="nv"&gt;$wpdb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// complete new instance of wpdb
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
The concept is more that if you always return an object, then you can do more with it. Take a facade for example.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Facade_WP_Database&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;WP_Facade&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_serviceName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Facade_WP_Database&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'table'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'fieldName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'data'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Facade_Foo&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;WP_Facade&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_serviceName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;Facade_Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// bar -- from above.
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Sure, it borrows much from Laravel, but it is simple enough to implement with a service container. The point is that it doesn't matter what the implementation for registering and retrieving from the service container, because no one is going to use it. Or more that there is a better, easier way to use it.
&lt;/p&gt;
&lt;p&gt;
Tell people that there is an easier API with a Facade and see if people move over to it. Laravel is MIT licensed, you would just have to backport and provide attribution, but given that the implementation is basic and simple, it shouldn't be that difficult to implement, if you don't want to look at Laravel.
&lt;/p&gt;
&lt;p&gt;
That it is more verbose is a nature of supporting a PHP version that doesn't support many of the features in PHP5.3 and above. Since it is just objects and closures are objects, it should be fine to store closures and execute them when retrieved.
&lt;/p&gt;
&lt;p&gt;
It also allows for more composition with the code, which should open the possibilities and extensions a lot more than a simple array would.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #30741 (Build-out API for adding Customizer Panels, Sections, and Controls ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:46:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/30741#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/30741#comment:16/1472942783742789</guid>
      <description>&lt;p&gt;
Currently, to remove a control you need to do both &lt;code&gt;control.container.remove();&lt;/code&gt; and &lt;code&gt;api.control.remove( control.id );&lt;/code&gt;. We should create a shortcut where &lt;code&gt;control.remove();&lt;/code&gt; self-destructs. Panels and sections should have similar approaches that also delete children, and we also need to revisit adding controls in JS here.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22363 (Accents in attachment filenames should be sanitized) updated</title>
      
        <dc:creator>gitlost</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:37:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22363#comment:79</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22363#comment:79/1472942267755715</guid>
      <description>&lt;p&gt;
I think there's a number of problems with the latest proposed patch.
&lt;/p&gt;
&lt;p&gt;
The encoding of the filename can only be guessed at as far as I know - it's just a string of bytes with no encoding info from the client and is not connected to the page's (or blog's) charset, so there should be no defaulting to the blog's charset. The default should just be nothing.
&lt;/p&gt;
&lt;p&gt;
It's not clear to me why &lt;code&gt;wp_strip_all_tags()&lt;/code&gt; and &lt;code&gt;html_entity_decode()&lt;/code&gt; and entity stripping are being done, as opposed to the current solution of just stripping angle brackets and ampersands via &lt;code&gt;special_chars&lt;/code&gt;, which seems to be as effective and is less drastic.
&lt;/p&gt;
&lt;p&gt;
A small point is that the conversion of the &lt;code&gt;special_chars&lt;/code&gt; filter to a concatenated character class regex is not strictly backward compatible, as people could have been doing multi-byte stripping, which would fail now.
&lt;/p&gt;
&lt;p&gt;
The use of the &lt;code&gt;$utf8_modifier&lt;/code&gt; is only needed when the regex contains a multi-byte pattern, and there's only 2 places in the proposed patch where that is (intentionally) the case, one of which is problematic &lt;code&gt;[\s-]+&lt;/code&gt; and the other arguable &lt;code&gt;(?!\.)[^\p{L}\p{Nd}]+&lt;/code&gt;. A third use on &lt;code&gt;^[a-zA-Z]{2,5}\d?$&lt;/code&gt; looks unintentional as &lt;code&gt;\d&lt;/code&gt; will match &lt;code&gt;\p{Nd}&lt;/code&gt; if UTF-8 mode is set and PCRE has &lt;a class="ext-link" href="http://php.net/manual/en/regexp.reference.unicode.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;UCP&lt;/a&gt; support (which unfortunately are not necessarily the same thing - see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/22692" title="#22692: defect (bug): Quotes Are Messing Up (closed: fixed)"&gt;#22692&lt;/a&gt;#&lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/22363#comment:39" title="Comment 39"&gt;comment:39&lt;/a&gt;). Other uses are unneeded.
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;[\s-]+&lt;/code&gt; use is problematic and as it stands could actually re-introduce the bug that corrupts UTF-8 that was fixed up above (see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26094" title="#26094: defect (bug): sanitize_file_name() breaks some UTF-8 strings (closed: fixed)"&gt;#26094&lt;/a&gt;) if the filename is in UTF-8 and PCRE UTF-8 mode is unavailable (as &lt;code&gt;$utf9_modifier&lt;/code&gt; would then be blank). Even if that's fixed it still has issues due to the difficulty in predicting what it will match - in single-byte mode it's PHP locale dependent, and in UTF-8 mode it's UCP dependent. Its introduction appears to be driven by wanting to encompass both the &lt;code&gt;U+00A0&lt;/code&gt; substitution (see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27281" title="#27281: defect (bug): Videos with a space in the filename can break (closed: fixed)"&gt;#27281&lt;/a&gt; but it's not particularly clear from that bug report whether the fix was appropriate) and the simple substitution &lt;code&gt;[\r\n\t -]+&lt;/code&gt;. I think it would be better and more targeted to leave the current &lt;code&gt;[\r\n\t -]+&lt;/code&gt; as is, and to replace the current &lt;code&gt;preg_match( "#\x{00a0}#siu", ' ', $filename )&lt;/code&gt; with a straightforward &lt;code&gt;str_replace( "\xc2\xa0", ' ', $filename  )&lt;/code&gt; (to be done only when the filename is in UTF-8).
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;(?!\.)[^\p{L}\p{Nd}]+&lt;/code&gt; use should only be done if the filename is in UTF-8, and also technically should check that UCP support is available, as a previous patch &lt;a href="https://core.trac.wordpress.org/attachment/ticket/22363/22363.5.patch"&gt;22363.5.patch&lt;/a&gt; above does. This is the substantive change that fixes up the bug in &lt;code&gt;remove_accents()&lt;/code&gt;, and works. However I think the bug in &lt;code&gt;remove_accents()&lt;/code&gt; - which could be renamed &lt;code&gt;transliterate_commonly_used_latin_to_ascii()&lt;/code&gt; - should be fixed in &lt;code&gt;remove_accents()&lt;/code&gt;, as specified in the branched off bug &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/24661" title="#24661: defect (bug): remove_accents is not removing combining accents (new)"&gt;#24661&lt;/a&gt;. Also to be picky(!) it removes too much, not just decomposed latin accents. The solutions mentioned in &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/24661" title="#24661: defect (bug): remove_accents is not removing combining accents (new)"&gt;#24661&lt;/a&gt; are more targeted.
&lt;/p&gt;
&lt;p&gt;
The use of &lt;code&gt;mb_strtolower()&lt;/code&gt; should probably also only be done if the filename is in UTF-8, and then explicitly pass &lt;code&gt;UTF-8&lt;/code&gt; as the encoding (see &lt;code&gt;sanitize_title_with_dashes()&lt;/code&gt;), rather than using &lt;code&gt;mb_detect_encoding()&lt;/code&gt;, which has &lt;a class="ext-link" href="http://php.net/manual/en/function.mb-detect-encoding.php#102510"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;issues&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32417 (Add new core media widget) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:31:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32417#comment:73</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32417#comment:73/1472941900557925</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #themereview by jcastaneda. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/themereview/p1472941897000300"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37940-background-update.patch attached to Ticket #37940</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:28:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37940/37940-background-update.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37940/37940-background-update.patch/1472941716529673</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>37940-login-info.patch attached to Ticket #37940</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:22:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37940/37940-login-info.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37940/37940-login-info.patch/1472941340053055</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37940 (WordPress email subject update) updated</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:17:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37940#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37940#comment:1/1472941022003407</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The patch has two changes.
&lt;/p&gt;
&lt;p&gt;
The first merges two similar strings "&lt;strong&gt;[%s] Notice of Password Change&lt;/strong&gt;" and "&lt;strong&gt;[%s] Password Changed&lt;/strong&gt;".
&lt;/p&gt;
&lt;p&gt;
The other is just to standardize the email subjects, removing the "&lt;strong&gt;Notice of&lt;/strong&gt;" prefix.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37940.patch attached to Ticket #37940</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:13:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37940/37940.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37940/37940.patch/1472940815083587</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>email-subject-network.png attached to Ticket #37940</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:12:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37940/email-subject-network.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37940/email-subject-network.png/1472940749655793</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>email-subject-admin.png attached to Ticket #37940</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:12:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37940/email-subject-admin.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37940/email-subject-admin.png/1472940734652676</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>email-subject-local.png attached to Ticket #37940</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:12:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37940/email-subject-local.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37940/email-subject-local.png/1472940721049503</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37940 (WordPress email subject update) created</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 22:11:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37940</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37940/1472940698011984</guid>
      <description>&lt;p&gt;
The the attached screenshots and the patch.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37939 (Incorrect references to plugins API in themes_api() inline docs) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 20:42:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37939#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37939#comment:1/1472935343676765</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37939 (Incorrect references to plugins API in themes_api() inline docs) created</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 20:42:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37939</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37939/1472935326196867</guid>
      <description>&lt;p&gt;
The inline documentation for &lt;code&gt;themes_api()&lt;/code&gt; (in &lt;code&gt;wp-admin/includes/theme.php&lt;/code&gt;) contains a couple of references to plugins in the &lt;code&gt;$args&lt;/code&gt; parameter description that should reference themes. There is a correct reference to plugins filtering the API further up in the documentation.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37722 (wp_remote_retrieve_headers no longer an array in WordPress 4.6) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sat, 03 Sep 2016 20:41:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37722#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37722#comment:6/1472935306716647</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Added a patch to fix the docs as well as two minor errors in accordance with PHPCS.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37722.diff attached to Ticket #37722</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sat, 03 Sep 2016 20:40:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37722/37722.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37722/37722.diff/1472935252214672</guid>
      <description>&lt;p&gt;
FIX: DocBlock return to object instead of headers' array &amp;amp; PHPCS Errors
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 03 Sep 2016 20:15:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:16/1472933745999023</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #meta by celloexpressions. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/meta/p1472933744000010"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 19:11:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:21/1472929899030039</guid>
      <description>&lt;p&gt;
@afercia yes looks good there as well. Hadn't noticed that ticket :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 19:00:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:20/1472929213640373</guid>
      <description>&lt;p&gt;
Thanks @celloexpressions can you confirm it fixes also the Theme installer so also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27705" title="#27705: defect (bug): Keyboard navigation should be constrained to the theme installer overlay (closed: fixed)"&gt;#27705&lt;/a&gt; can be closed? 🙂
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37699 (Death to Globals Episode #1: A Registry, A Pattern) updated</title>
      
        <dc:creator>ChriCo</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:58:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37699#comment:73</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37699#comment:73/1472929127175350</guid>
      <description>&lt;p&gt;
Howdy.
&lt;/p&gt;
&lt;p&gt;
as i see, @schlessera found enough valid arguments for this "discussion" above, so we can continue the work on a integration of a ServiceContainer into WordPress.
&lt;/p&gt;
&lt;p&gt;
Since we're also working on composer-integration (&lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/36335" title="#36335: feature request: Next generation: core autoloader proposal (new)"&gt;#36335&lt;/a&gt;), we should maybe think - even it's still far far away and no PHP &amp;gt; 5.2 - about the integration of some PSR-"standards". The PSR-group has currently a proposal for the integration of Containers (&lt;a class="ext-link" href="https://github.com/php-fig/fig-standards/blob/master/proposed/container.md"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/php-fig/fig-standards/blob/master/proposed/container.md&lt;/a&gt;), which should be at least known and respected when developing something similar for WordPress.
&lt;/p&gt;
&lt;p&gt;
Based on the topics above there should also be discussed how the ServiceContainer should be work.
&lt;/p&gt;
&lt;h2 id="a0.Naming"&gt;0. Naming&lt;/h2&gt;
&lt;p&gt;
The Container should be called &lt;code&gt;WP_Service_Container&lt;/code&gt; and be placed into its own subfolder called &lt;code&gt;service&lt;/code&gt;. This - based on my notes above - follows not directly the PSR-standards but in future we &lt;em&gt;maybe&lt;/em&gt; switch to namespaces which leads us to PSR-4 (&lt;a class="ext-link" href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md&lt;/a&gt;) and to &lt;code&gt;WP\Service\Container&lt;/code&gt; --&amp;gt; &lt;code&gt;/service/Container.php&lt;/code&gt;. &lt;em&gt;Note:&lt;/em&gt; i just want to keep - here - the possibility to improve even further in future.. ;)
&lt;/p&gt;
&lt;h2 id="a1.APIDesign"&gt;1. API Design&lt;/h2&gt;
&lt;p&gt;
It needs to be discussed how the API should look like.
&lt;/p&gt;
&lt;h3 id="WP_Service_Container"&gt;WP_Service_Container&lt;/h3&gt;
&lt;p&gt;
This seems to be the major class which has basic implementation of &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;has&lt;/code&gt;. It needs to be discussed what..
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;get&lt;/code&gt; returns/throws if something is accessed which is not there.
&lt;/li&gt;&lt;li&gt;how to implemented &lt;code&gt;protected&lt;/code&gt; values which are not overwriteable and how to handle setting a protected value.
&lt;/li&gt;&lt;li&gt;how to implemented creation of new instances --&amp;gt; e.g. &lt;code&gt;factory&lt;/code&gt; - see Pimple &lt;a class="ext-link" href="http://pimple.sensiolabs.org/#defining-factory-services"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://pimple.sensiolabs.org/#defining-factory-services&lt;/a&gt;.
&lt;/li&gt;&lt;li&gt;what should be extended/implemented to the class (such as &lt;code&gt;ArrayAccess&lt;/code&gt;)
&lt;/li&gt;&lt;li&gt;naming rules of the {{$key}} such as "prefix every internal thing with the "vendor"-name and seperate it with dot's. Configurations are called e.G. &lt;code&gt;wp.config.db&lt;/code&gt;) and classes are called e.G. &lt;code&gt;wp.db&lt;/code&gt;)
&lt;/li&gt;&lt;li&gt;LazyLoading of instances when they are first accessed via &lt;code&gt;set&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;...
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Short example of usage:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ---------------
// set-get-has
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bar
&lt;/span&gt;&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'lorum ipsum'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// TRUE, FALSE
&lt;/span&gt;
&lt;span class="c1"&gt;// ---------------
// protected
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b..arrrrr i\'m a pirate'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '''not''' possible - exception or at least return FALSE;
&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bar
&lt;/span&gt;
&lt;span class="c1"&gt;// factory
// just an example, since we're not able to use closures we maybe need to build something around it.
// $key, $class_name (instance of class name is the returned value), $args
&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wpdb'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'db-user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-pass'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db-host'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$wpdb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// complete new instance of wpdb
&lt;/span&gt;&lt;span class="nv"&gt;$wpdb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// complete new instance of wpdb
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="Configurations"&gt;Configurations&lt;/h3&gt;
&lt;p&gt;
The ServiceContainer on its own is a nice thing. But one step further we can think about the generalization of configurations (such as database-credentials, debug modes, ... stuff from &lt;code&gt;wp-config.php&lt;/code&gt; and &lt;code&gt;define&lt;/code&gt;). The configurations should be "protected" (not changeable) and grouped by "type" such as "db", "debug", ...
&lt;/p&gt;
&lt;p&gt;
Short example to give you a quick view on it:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// get somehow the service container..
// and set the database configuration as "protected" to disallow overwriting the values.
&lt;/span&gt;&lt;span class="nv"&gt;$service_container&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'wp.db.config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'user'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'db-user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'pass'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'db-pass'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'db-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'host'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// later on in code when setting up the wpdb
&lt;/span&gt;&lt;span class="nv"&gt;$conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$service_container&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp.db.config'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$service_container&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'wp.db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;wpdb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;$conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nv"&gt;$conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'pass'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nv"&gt;$conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nv"&gt;$conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'host'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="a2.GLOBALSvs.Singletonvs.instance-holdingfunctionvs.hook"&gt;2. $GLOBALS vs. Singleton vs. instance-holding function vs. hook&lt;/h2&gt;
&lt;p&gt;
Since we're hardly depending on some &lt;code&gt;$GLOBALS&lt;/code&gt; in every single situation, its maybe not the best choice to add the ServiceContainer to the globals to remove some of them. On the other hand, if we don't rely on a global available class, it's highly possible, that the ServiceContainer will contain static methods and implement some Singleton-Pattern.
&lt;/p&gt;
&lt;h3 id="v1-global"&gt;v1 - global&lt;/h3&gt;
&lt;p&gt;
Put it to global..than its accessible to everyone and overwritable too..
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$GLOBALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'wp_service_container'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ...later on
&lt;/span&gt;&lt;span class="nv"&gt;$GLOBALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'wp_service_container'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$GLOBALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'wp_service_container'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="v2-singleton"&gt;v2 - singleton&lt;/h3&gt;
&lt;p&gt;
Singleton, no global variable required..but everything is static. Not the best choice here since mocking in UnitTests could be getting much more difficulty.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get_instance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ...later on
&lt;/span&gt;&lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="v3-instanceholdingfunction"&gt;v3 - instance holding function&lt;/h3&gt;
&lt;p&gt;
The intance-holding function is a mix of "global"-accessible and singleton, but no static methods/variables required. At least worth to discuss about it.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;wp_service_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_Container&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...later on
&lt;/span&gt;&lt;span class="nx"&gt;wp_service_container&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp_service_container&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="v4-hook"&gt;v4 - hook&lt;/h3&gt;
&lt;p&gt;
The hook seems to be another valid solution here, since we're not having any global variable and its accessible on a very specific point for everyone. The main problem here is, that the complete core has to rely on this single hook to get everything which is stored into the container. So everything which needs access to a &lt;code&gt;$value&lt;/code&gt; needs to use this hook, which means we could maybe run into "priority"-problems.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;do_action( 'wp_service_container', new WP_Service_Container() );
// ...later on
add_action( 'wp_service_container', function( WP_Service_Container_Interface $container ) {
        $container-&amp;gt;set( $key, $value );
        $value = $container-&amp;gt;get( $key );
} );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
This needs to be discussed since we're still relying heavily on global variables in every single template. I would not implement a Singleton-class and/or something with static methods/variables here, since we're also having a lot of disadvantages with it. A good way could be v3, since we can mock the function in unit tests and access it easily everywhere. But could also be a main disadvantage, if the container is always accessible.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
For now i think thats enough input. We should define some basics and afterwards we can continue with more features such es ConfigBuilder's (e.G. &lt;code&gt;WP_Service_ConfigBuilder_PluginConfig&lt;/code&gt; whic parses the Plugin file headers:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$service_container&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'my-plugin.config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_Service_ConfigBuilder_PluginConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;__FILE__&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$service_container&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'my-plugin.config'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'textdomain'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// yay, the textdomain!
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Have a nice weekend!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:58:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:21/1472929109882654</guid>
      <description>&lt;p&gt;
@joyously as the ticket description explains, this feature is targeted at inexperienced users who are looking to customize their site beyond any options that the current theme provides, primarily with smaller tweaks. In nearly all cases, the changes they'll want to make are dependent on markup and styling provided by the theme, so the CSS should be scoped to the current theme. There are many plugins that offer custom CSS options, many of which will allow for plugin-related styling that persists across themes. For the core feature, we need to keep the experience as simple as possible.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29158 (Customizer UI Design lacks contrast for visual hierarchy and does not ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:46:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29158#comment:68</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29158#comment:68/1472928388155866</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.1.diff" title="Attachment '29158.left-border.1.diff' in Ticket #29158"&gt;29158.left-border.1.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/29158/29158.left-border.1.diff" title="Download"&gt;​&lt;/a&gt; builds on &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.diff" title="Attachment '29158.left-border.diff' in Ticket #29158"&gt;29158.left-border.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/29158/29158.left-border.diff" title="Download"&gt;​&lt;/a&gt; to improve the focus styles on the close button. These are based on the styling of the device preview buttons, which are also initially on an &lt;code&gt;#eee&lt;/code&gt; background. Note that the close button will no longer be focused on load with &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33228" title="#33228: enhancement: Customizer initial focus (closed: fixed)"&gt;#33228&lt;/a&gt;, which is marked for commit.
&lt;/p&gt;
&lt;p&gt;
Would be good to get some testing and feedback on this final solution so that we can make any tweaks and get this wrapped up.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>29158.left-border.close.png attached to Ticket #29158</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:42:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.close.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.close.png/1472928141165062</guid>
      <description>&lt;p&gt;
Hover (left) and focus (right) styles for the close button in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.1.diff" title="Attachment '29158.left-border.1.diff' in Ticket #29158"&gt;29158.left-border.1.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/29158/29158.left-border.1.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>29158.left-border.1.diff attached to Ticket #29158</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:38:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29158/29158.left-border.1.diff/1472927939363211</guid>
      <description>&lt;p&gt;
Improve close button hover and focus styles.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37822 (Text area misaligned on network setting.php) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:37:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37822#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37822#comment:6/1472927843685937</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37822#comment:5" title="Comment 5"&gt;karmatosed&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Thanks for screenshots, this certainly looks better @Ankit K Gupta. Have you tested on all devices to be sure?
&lt;/p&gt;
&lt;p&gt;
@melchoyce, this seems like a good candidate to get committed in. Could you see what you think please?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't have a multisite test environment to try this out. Maybe another committer could take a look?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:27:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:19/1472927248607947</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thanks for the updqate @afercia. The patch looks good to me. I tested on Chrome on Windows 10 and was able to navigate in and out of the customizer with keyboard-only both with and without &lt;code&gt;customize-loader&lt;/code&gt;, with keyboard focus moving and being constrained as expected.
&lt;/p&gt;
&lt;p&gt;
Let's get &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/33228/33228.diff" title="Attachment '33228.diff' in Ticket #33228"&gt;33228.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/33228/33228.diff" title="Download"&gt;​&lt;/a&gt; committed, and we can follow up if any other issues come up.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37774 (Shiny Updates: Themes updates with no package available still show ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:13:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37774#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37774#comment:2/1472926405442949</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
+1 to not showing the "Update now" unless that is possible.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37799 (Add progress indicator to "Upgrade Network" page) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:12:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37799#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37799#comment:5/1472926354558376</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37799 (Add progress indicator to "Upgrade Network" page) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:11:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37799#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37799#comment:4/1472926315180805</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I'd +1 having some indication and the current solution I think works well.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37860 (Labels are misplaced with respect to text box.) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 18:09:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37860#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37860#comment:3/1472926147968243</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@juhise, good catch. I'm a little concerned with changing things though. The reason is that all our forms have the similar issue by vertical-aligning on the middle. For example you can see this in the General Settings on all fields.
&lt;/p&gt;
&lt;p&gt;
It maybe raises the consideration of if we should have a global change or we should leave things as they are for consistency. I'd probably suggest in this case we kept everything to the same vertical-align. However, lets try and get some other opinions apart from mine on this and I'll raise it in this week's design meeting.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37874 (on my Appearance screen when i click on Customize, Header, Background ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:59:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37874#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37874#comment:4/1472925559858629</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37926 (Twenty Eleven &amp; Twenty Twelve: Dropdown category widget exceeds parent ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:57:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37926#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37926#comment:1/1472925420922775</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi @gma992 and thanks for this ticket. This certainly is an issue, but I'm not sure your suggested solution will work in all browsers and devices. Could you do some testing to show some screenshots of different browsers and devices, using your idea?
&lt;/p&gt;
&lt;p&gt;
If you are able to, it would be great to have a patch also. You can find out more about creating a patch here: &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/tutorials/trac/submitting-a-patch/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/core/handbook/tutorials/trac/submitting-a-patch/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37934 (Separate account settings and profile settings) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:53:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37934#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37934#comment:1/1472925198932149</guid>
      <description>&lt;p&gt;
I would +1 this as from a user view it makes a lot of sense. My only concern is transitioning and how we do this split. I'd be interested in seeing some mockups and ideas about that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) closed</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:51:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933#comment:6/1472925090506977</guid>
      <description>worksforme: &lt;p&gt;
I also can't replicate this myself. I would second this seems to be a plugin combination. If this isn't the case, then please let us know a bit more info so we can try and recreate.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #34880 (Hidden state for Site Title and Tagline) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:49:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34880#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34880#comment:11/1472924975174576</guid>
      <description>&lt;p&gt;
@rianrietveld I'm open to other visual identifiers for disabled. The point currently is we don't have this. Does the a11y team have a suggestion of what visually the disabled should look like? I'd love to see a mockup.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37407 (Filter button should not appear when no posts are available in list) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:45:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37407#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37407#comment:4/1472924719175336</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@melchoyce would you consider this as a good commit to get in? I think it could be.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27253 (Enhancement Request: direct link to Drafts under Posts and Pages on ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:44:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27253#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27253#comment:10/1472924648244503</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37822 (Text area misaligned on network setting.php) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:42:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37822#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37822#comment:5/1472924534676527</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thanks for screenshots, this certainly looks better @Ankit K Gupta. Have you tested on all devices to be sure?
&lt;/p&gt;
&lt;p&gt;
@melchoyce, this seems like a good candidate to get committed in. Could you see what you think please?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24040 (Use "posts" instead of "topics" (in tagcloud tooltips)) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:40:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24040#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24040#comment:6/1472924408486762</guid>
      <description>&lt;p&gt;
A valid point about not just posts being shown. I think topics is also troublesome because of what could be considered to be a topic. It's tricky to find a fit all situation here. If the tag cloud could be intelligent that would be great to see.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37938 (Split Source Parsing Functions from Press This So Can Be Used Globally) created</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 03 Sep 2016 17:08:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37938</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37938/1472922506286393</guid>
      <description>&lt;p&gt;
WordPress already has an HTML parsing function in the form of WP_Press_This::source_data_fetch_fallback and its private called functions.
&lt;/p&gt;
&lt;p&gt;
Suggesting this be split off so it can be used elsewhere. Specifically, my use case is over on the Ping and Trackbacks component. One of the proposals I keep advocating for is improving the presentation.
&lt;/p&gt;
&lt;p&gt;
As we already have this code in WordPress that allows for parsing of HTML for images, embeds, meta tags, etc, it should be used over writing new code to do the same.
&lt;/p&gt;
&lt;p&gt;
But if it were to be called right now, it would reretrieve source HTML already retrieved by the Pingback code and passed into the comment array.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37937 (Support boolean strings for the 'public', 'archived', 'mature', 'spam' ...) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sat, 03 Sep 2016 16:40:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37937#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37937#comment:1/1472920827035080</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>class-wp-site-query.diff attached to Ticket #37937</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sat, 03 Sep 2016 16:30:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37937/class-wp-site-query.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37937/class-wp-site-query.diff/1472920211834554</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37937 (Support boolean strings for the 'public', 'archived', 'mature', 'spam' ...) created</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sat, 03 Sep 2016 16:29:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37937</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37937/1472920191037463</guid>
      <description>&lt;p&gt;
According to the documentation for the &lt;code&gt;WP_Site_Query&lt;/code&gt; class:
&lt;/p&gt;
&lt;pre class="wiki"&gt;*     @type int          $public           Limit results to public sites. Accepts '1' or '0'. Default empty.
*     @type int          $archived         Limit results to archived sites. Accepts '1' or '0'. Default empty.
*     @type int          $mature           Limit results to mature sites. Accepts '1' or '0'. Default empty.
*     @type int          $spam             Limit results to spam sites. Accepts '1' or '0'. Default empty.
*     @type int          $deleted          Limit results to deleted sites. Accepts '1' or '0'. Default empty.
&lt;/pre&gt;&lt;p&gt;
these attributes accepts values &lt;code&gt;'1'&lt;/code&gt; and &lt;code&gt;'0'&lt;/code&gt; (also &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; to be more specific).
&lt;/p&gt;
&lt;p&gt;
I would suggest adding support for general boolean values so these attributes can also support e.g. &lt;code&gt;true, false, 'true', 'false' &lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Currently each attribute is handled like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;if ( is_numeric( $this-&amp;gt;query_vars['archived'] ) ) {
	$archived                               = absint( $this-&amp;gt;query_vars['archived'] );
	$this-&amp;gt;sql_clauses['where']['archived'] = $wpdb-&amp;gt;prepare( "archived = %d ", $archived );
}
&lt;/pre&gt;&lt;p&gt;
Here we see why e.g. &lt;code&gt;true&lt;/code&gt; doesn't work, because &lt;code&gt;is_numeric( true )&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; and the SQL modification is skipped.
&lt;/p&gt;
&lt;p&gt;
I want to suggest using  e.g. &lt;code&gt;wp_validate_boolean()&lt;/code&gt; for the validation.
&lt;/p&gt;
&lt;p&gt;
Here's an example:
&lt;/p&gt;
&lt;pre class="wiki"&gt;if ( isset( $this-&amp;gt;query_vars['archived'] ) ) {
    $archived                               = wp_validate_boolean( $this-&amp;gt;query_vars['archived'] );
    $this-&amp;gt;sql_clauses['where']['archived'] = $wpdb-&amp;gt;prepare( "archived = %d ", $archived );
}
&lt;/pre&gt;&lt;p&gt;
or we could be more specific with:
&lt;/p&gt;
&lt;pre class="wiki"&gt;if ( isset( $this-&amp;gt;query_vars['archived'] ) ) {
    $archived                               = wp_validate_boolean( $this-&amp;gt;query_vars['archived'] ) ? 1 : 0;
    $this-&amp;gt;sql_clauses['where']['archived'] = $wpdb-&amp;gt;prepare( "archived = %d ", $archived );
}
&lt;/pre&gt;&lt;p&gt;
etc.
&lt;/p&gt;
&lt;p&gt;
I added a patch as a starting example. There I added &lt;code&gt;@type mixed&lt;/code&gt; to the documentation because that's how the input of &lt;code&gt;wp_validate_boolean()&lt;/code&gt; is documented (it can be a general boolean value like &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #30150 (apply_filters( 'image_size_names_choose' ) should be provided a named ...) updated</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sat, 03 Sep 2016 16:22:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/30150#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/30150#comment:7/1472919769523982</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Worth noting &lt;a href="https://core.trac.wordpress.org/timeline?from=2016-09-03T16%3A05%3A15Z&amp;amp;precision=second"&gt;my comment&lt;/a&gt; on &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/34981" title="#34981: defect (bug): Usage of `image_size_names_choose` breaks JS attachment model attributes (assigned)"&gt;#34981&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Are there contexts other than &lt;code&gt;wp_prepare_attachment_for_js()&lt;/code&gt; where filtering this value is needed? Perhaps we should either move the filter out of &lt;code&gt;wp_prepare_attachment_for_js()&lt;/code&gt; and into the views being built from the size data returned by these AJAX requests, or allow a second parameter to be passed to &lt;code&gt;wp_prepare_attachment_for_js()&lt;/code&gt; which would return all available sizes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34753 (Remove use of "Toggle" in strings) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 16:06:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34753#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34753#comment:11/1472918807830824</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Adding two screenshots for reference and better understand how accessibility is involved here. Just two examples, this applies to all the meta boxes and several other controls (e.g. in the Customizer) that use &lt;code&gt;aria-label&lt;/code&gt; and &lt;code&gt;aria-expanded&lt;/code&gt; attributes.
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/SojynzhlIH.png"&gt;&lt;img src="https://cldup.com/SojynzhlIH.png" alt="https://cldup.com/SojynzhlIH.png" crossorigin="anonymous" title="https://cldup.com/SojynzhlIH.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/dYqCMR1rtU.png"&gt;&lt;img src="https://cldup.com/dYqCMR1rtU.png" alt="https://cldup.com/dYqCMR1rtU.png" crossorigin="anonymous" title="https://cldup.com/dYqCMR1rtU.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34981 (Usage of `image_size_names_choose` breaks JS attachment model attributes) updated</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sat, 03 Sep 2016 16:05:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34981#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34981#comment:5/1472918715567648</guid>
      <description>&lt;p&gt;
I don't think that removing the &lt;code&gt;image_size_names_choose&lt;/code&gt; filter would reintroduce &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/22598" title="#22598: defect (bug): Not using image_downsize() in wp_prepare_attachment_for_js() can break ... (closed: fixed)"&gt;#22598&lt;/a&gt; as the main issue there is that people might be using the &lt;code&gt;image_downsize&lt;/code&gt; filter to short circuit WP's native image resizing implementation.
&lt;/p&gt;
&lt;p&gt;
Besides &lt;code&gt;wp_prepare_attachment_for_js()&lt;/code&gt;, the &lt;code&gt;image_size_names_choose&lt;/code&gt; filter is applied in three other places:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;image_size_input_fields()&lt;/code&gt; – only called from legacy media upload forms.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Custom_Background::wp_set_background_image()&lt;/code&gt; – deprecated in 3.5
&lt;/li&gt;&lt;li&gt;&lt;code&gt;wp_print_media_templates()&lt;/code&gt; – three times, and always used to populate size options for a select element.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
If &lt;code&gt;wp_prepare_attachment_for_js()&lt;/code&gt; is going to continue to be used as a standard way to create generalized attachment models to return in AJAX requests, then we should probably consider moving this filter to the front-end where interfaces are being populated by size options, rather than doing so when the model is built.
&lt;/p&gt;
&lt;p&gt;
If that approach turns out to be impossible due to backwards compatibility issues, it might be better pass a second parameter to &lt;code&gt;wp_prepare_attachment_for_js()&lt;/code&gt; which would give requests an opportunity to bypass this filter and return all available image sizes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #30796 (Entity Name vs. Entity Number) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 15:24:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/30796#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/30796#comment:4/1472916271766881</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/30796#comment:3" title="Comment 3"&gt;GaryJ&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Is WP UTF-8 safe yet? Could we use the real &lt;code&gt;’&lt;/code&gt; in the code?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There's a precedent in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38359" title="Formatting: for a performance boost in `remove_accents()`, convert ..."&gt;[38359]&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even with numbered or named entities, do translators ensure those entities are used in contractions in the translated strings?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think entities were originally used to make sure the code is ASCII-only, and prevent code editors from introducing issues like the one just fixed in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38517" title="Upload: Correct encoding issue in `swfupload.js`, introduced in ..."&gt;[38517]&lt;/a&gt; :) That said, I guess most editors should be UTF-8 safe now.
&lt;/p&gt;
&lt;p&gt;
Translators can use actual characters instead of entities, that should not cause any issues.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Does GlotPress do any sort of conversion?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not that I know of.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37936 (TinyMCE special character button does not insert non-breaking spaces) created</title>
      
        <dc:creator>GeertDD</dc:creator>

      <pubDate>Sat, 03 Sep 2016 15:12:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37936</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37936/1472915522850094</guid>
      <description>&lt;p&gt;
Nothing gets inserted when clicking the non-breaking space character in the TinyMCE editor:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://s16.postimg.org/d15i95s51/nbsp.png"&gt;&lt;img src="https://s16.postimg.org/d15i95s51/nbsp.png" alt="https://s16.postimg.org/d15i95s51/nbsp.png" crossorigin="anonymous" title="https://s16.postimg.org/d15i95s51/nbsp.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Note that I also tried adding &lt;code&gt;160,nbsp&lt;/code&gt; to the entities in the TinyMCE config as described in &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/26842" title="#26842: defect (bug): Contenteditable, multiple spaces, &amp;amp;nbsp, and U+00A0 (new)"&gt;#26842&lt;/a&gt;. No change.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29299 (Plural forms not available for some strings) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 15:04:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29299#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29299#comment:8/1472915056605821</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29299#comment:7" title="Comment 7"&gt;SergeyBiryukov&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Seems consistent with &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/31696" title="Screen Options: Improve items per page option label.
Previously the ..."&gt;[31696]&lt;/a&gt;, though I'd like to see if we can address &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29299#comment:1" title="Comment 1"&gt;comment:1&lt;/a&gt; as well.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Most of the items in Discussions settings are grouped, and have multiple controls i.e. a checkbox and an input field or dropdown.
&lt;/p&gt;
&lt;p&gt;
They are going to need more thought, and they are mutually exclusive to those in Reading settings. A post-commit discussion or a new ticket may be best IMHO.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29199 (A few typofixes in comments/etc) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 15:01:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29199#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29199#comment:5/1472914867015769</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38517" title="Upload: Correct encoding issue in `swfupload.js`, introduced in ..."&gt;38517&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Upload: Correct encoding issue in &lt;code&gt;swfupload.js&lt;/code&gt;, introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/29479" title="Fix some documentation typos in various core files.
Props vlajos. ..."&gt;[29479]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29199" title="#29199: defect (bug): A few typofixes in comments/etc (closed: fixed)"&gt;#29199&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [38517]: Upload: Correct encoding issue in `swfupload.js`, introduced in ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 15:01:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38517</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38517/1472914866362574</guid>
      <description>&lt;p&gt;
Upload: Correct encoding issue in &lt;code&gt;swfupload.js&lt;/code&gt;, introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/29479" title="Fix some documentation typos in various core files.
Props vlajos. ..."&gt;[29479]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29199" title="#29199: defect (bug): A few typofixes in comments/etc (closed: fixed)"&gt;#29199&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #32998 (What's a weblog?) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:56:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32998#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32998#comment:6/1472914611975419</guid>
      <description>&lt;p&gt;
&lt;code&gt;An avatar is a visual at-a-glance representation of you, across different websites.&lt;/code&gt;
or
&lt;code&gt;An avatar is a visual representation of you, across different websites.&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Two key words here:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;"visual" - we may support screen readers, but the raison d'etre is that it's a graphical instance.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;"representation" - it doesn't have to be a photo, or any likeness of a person - it could be a company logo - so don't focus on what may or may not &lt;em&gt;in&lt;/em&gt; the avatar, but what it stands for - it represents (typically) a single person.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I'm not keen on the "follows", or "shared between websites" - the websites don't share it amongst themselves.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>noplanman</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:54:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:199</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:199/1472914472964255</guid>
      <description>&lt;p&gt;
Hi @pento
&lt;/p&gt;
&lt;p&gt;
Happy to test and get this into core =)
&lt;/p&gt;
&lt;p&gt;
With filters the tests work nicely. But unfortunately my problem persists using your latest code changes.
&lt;/p&gt;
&lt;p&gt;
Using &lt;code&gt;do_action&lt;/code&gt; doesn't seem to work. Here my tests for you to play with:
&lt;/p&gt;
&lt;pre class="wiki"&gt;public function test_remove_and_add_last_action_1() {
  $this-&amp;gt;hook = new Wp_Hook();
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', '__return_empty_string', 10, 0 );
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', array( $this, '_action_remove_and_add1' ), 11, 0 );
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', array( $this, '_action_remove_and_add2' ), 12, 0 );
  $this-&amp;gt;action_output = '';
  $this-&amp;gt;hook-&amp;gt;do_action( [] );
  // Works! First add1, then add2. ($this-&amp;gt;action_output = '12')
  $this-&amp;gt;assertSame( '12', $this-&amp;gt;action_output );
}
public function test_remove_and_add_last_action_2() {
  $this-&amp;gt;hook = new Wp_Hook();
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', '__return_empty_string', 10, 0 );
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', array( $this, '_action_remove_and_add1' ), 13, 0 );
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', array( $this, '_action_remove_and_add2' ), 12, 0 );
  $this-&amp;gt;action_output = '';
  $this-&amp;gt;hook-&amp;gt;do_action( [] );
  // Fails! First add2, but no add1. ($this-&amp;gt;action_output = '2')
  $this-&amp;gt;assertSame( '21', $this-&amp;gt;action_output );
}
public function _action_remove_and_add1() {
  $this-&amp;gt;action_output .= '1';
}
public function _action_remove_and_add2() {
  $this-&amp;gt;hook-&amp;gt;remove_filter( 'remove_and_add', array( $this, '_action_remove_and_add2' ), 12 );
  $this-&amp;gt;hook-&amp;gt;add_filter( 'remove_and_add', array( $this, '_action_remove_and_add2' ), 12, 0 );
  $this-&amp;gt;action_output .= '2';
}
&lt;/pre&gt;&lt;p&gt;
Hope this helps.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24040 (Use "posts" instead of "topics" (in tagcloud tooltips)) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:44:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24040#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24040#comment:5/1472913854679746</guid>
      <description>&lt;p&gt;
With custom taxonomies (i.e. &lt;code&gt;genre&lt;/code&gt;), it might not be posts that are shown but some custom post (i.e. &lt;code&gt;book&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
I suspect the correct solution would be to have the tag cloud look at the post type associated with the chosen taxonomy, and pull in a particular singular or plural label. It would also need to allow for multiple post types associated with the same taxonomy too i.e. &lt;code&gt;1 book and 3 films&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34753 (Remove use of "Toggle" in strings) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:38:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34753#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34753#comment:10/1472913493845556</guid>
      <description>&lt;p&gt;
Adjust, switch, or alternate?
&lt;/p&gt;
&lt;p&gt;
I guess the emphasis in English, is that it's not just a change, but a &lt;em&gt;binary&lt;/em&gt; change between two options. It's one or the other.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29299 (Plural forms not available for some strings) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:37:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29299#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29299#comment:7/1472913449204277</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Seems consistent with &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/31696" title="Screen Options: Improve items per page option label.
Previously the ..."&gt;[31696]&lt;/a&gt;, though I'd like to see if we can address &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29299#comment:1" title="Comment 1"&gt;comment:1&lt;/a&gt; as well.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36194 (Media Settings page description is unclear) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:34:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36194#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36194#comment:1/1472913246443974</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
A little late, but welcome and thank you for your ticket @mklasen!
&lt;/p&gt;
&lt;p&gt;
The patch looks good to me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #30796 (Entity Name vs. Entity Number) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:30:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/30796#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/30796#comment:3/1472913035634600</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="ext-link" href="http://www.w3.org/TR/html-polyglot/#named-entity-references"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Polyglot markup&lt;/a&gt; requires numbered entities and the W3C Recommendation is that &lt;a class="ext-link" href="http://www.w3.org/TR/2005/REC-charmod-20050215/#C048"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;numbered entities SHOULD use the hexadecimal form when it exists&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Is WP UTF-8 safe yet? Could we use the real &lt;code&gt;’&lt;/code&gt; in the code?
&lt;/p&gt;
&lt;p&gt;
Even with numbered or named entities, do translators ensure those entities are used in contractions in the translated strings? Does GlotPress do any sort of conversion? How about plugin authors? I feel some more answers are needed beyond just whether to change the source, to see what effect (good or bad) it will have for translators.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37935 (Add post ID among post's post type posts) created</title>
      
        <dc:creator>mifr45</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:30:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37935</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37935/1472913000265105</guid>
      <description>&lt;p&gt;
Add to database a field containing post ID among post's post type posts.
It can be useful for users when they're using custom post types.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29299 (Plural forms not available for some strings) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:09:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29299#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29299#comment:6/1472911782344429</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Patch added which amends the strings.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>29299.diff attached to Ticket #29299</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 14:07:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29299/29299.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29299/29299.diff/1472911624296745</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:53:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:20/1472910817492185</guid>
      <description>&lt;p&gt;
@westonruter said "The vast majority of uses for this functionality would surely be wanting to tweak the styles of a theme's stylesheet."
This is conjecture. I would submit that the novices would want the theme to do it, and just switch themes to get one that looks better. More experienced users would use a plugin to add CSS or find a theme with that option. Advanced users write their own theme or child theme, and don't need this at all. I would also submit that while it makes sense that the CSS must match the HTML that the theme outputs, this type of feature is more useful as a way to keep something constant regardless of theme. I could see users putting tweaks to plugin CSS in there and then having a big problem when they switch themes. I can also see theme support forums having a lot more issues because of the new place to store CSS that overrides all others (comes last).
&lt;/p&gt;
&lt;p&gt;
I have a client that is a WordPress novice. I styled their site as they requested and the next year, they decided to switch themes without telling me. Most of their site was still operational, but widget areas were different and menu locations were different, so some of the content was missing or needing adjustment. I discovered this, not them. The novice expects all the content to be constant, and just the look to change, as advertised. It currently doesn't work that way, and the proposed change exacerbates the problem.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;If this is really an area that core should be doing&lt;/strong&gt;, why not make it theme independent? Or at least provide an option for that?
If it has to be theme specific, have you considered that the post type is like an attachment and the CSS is actually stored in a file? This way the storage is easier (CSS can be difficult to get into the database correctly), and the inclusion in the header is better (using the src attribute), and the browser can cache the file and it can be served zipped.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18146 (Add user-level timezone setting) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:48:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18146#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18146#comment:31/1472910527014768</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/18146/18146.3.diff" title="Attachment '18146.3.diff' in Ticket #18146"&gt;18146.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/18146/18146.3.diff" title="Download"&gt;​&lt;/a&gt; makes the patch apply cleanly again.
&lt;/p&gt;
&lt;p&gt;
Previous comments are still valid and some additional work needs to be done to actually make use of the user's timezone.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>18146.3.diff attached to Ticket #18146</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:46:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/18146/18146.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/18146/18146.3.diff/1472910410340245</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #34823 (image_send_to_editor filter is not fired when an Image is edited or ...) updated</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:42:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34823#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34823#comment:5/1472910162064024</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37934 (Separate account settings and profile settings) created</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:36:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37934</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37934/1472909801489752</guid>
      <description>&lt;p&gt;
Current limitations of profile management in WordPress:
&lt;/p&gt;
&lt;p&gt;
On &lt;code&gt;wp-admin/profile.php&lt;/code&gt; there's too much you can do:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Change personal preferences
&lt;/li&gt;&lt;li&gt;Account and session management
&lt;/li&gt;&lt;li&gt;Update publicly visible profile data
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
If plugins add additional fields to that page, it gets very long quite quickly. Even without plugins you have to scroll all the way down to change your password. Pretty sure you change your password more often than disabling the visual editor, so that order isn't ideal.
&lt;/p&gt;
&lt;p&gt;
Idea:
&lt;/p&gt;
&lt;p&gt;
Separate account management and profile settings. Platforms like WordPress.com, Facebook or Twitter do this for a reason.
&lt;/p&gt;
&lt;p&gt;
This was recently mentioned in a discussion about adding 2FA to core, see &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1470765550002658"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.slack.com/archives/core/p1470765550002658&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The plugin I mentioned there: &lt;a class="ext-link" href="https://wordpress.org/plugins/wp-user-profiles/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/plugins/wp-user-profiles/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Slightly related: &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/26769" title="#26769: enhancement: Change &amp;#34;Your Profile&amp;#34; under Users Menu to &amp;#34;My Profile&amp;#34; (reopened)"&gt;#26769&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Account management:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Change backend preferences
&lt;/li&gt;&lt;li&gt;Change email address
&lt;/li&gt;&lt;li&gt;Change password
&lt;/li&gt;&lt;li&gt;Log out everywhere else (perhaps with a session overview in the future as was originally the plan)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Profile management:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Show/change profile picture
&lt;/li&gt;&lt;li&gt;Change biographical info like name, contact methods
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20977 (Add Dynamic Comment Statuses) updated</title>
      
        <dc:creator>mymothersdaughter</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:29:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20977#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20977#comment:8/1472909385326896</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20977#comment:7" title="Comment 7"&gt;rachelbaker&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
We don't really have a &lt;code&gt;comment_status&lt;/code&gt; column in the database.  We *DO* have &lt;code&gt;comment_approved&lt;/code&gt; which can have a value of: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;spam&lt;/code&gt; or &lt;code&gt;trash&lt;/code&gt; (check out those amazing mixed types!).
&lt;/p&gt;
&lt;p&gt;
I want to understand the different use-cases for custom comment statuses. That would make it easier to know if we should solve this by adding a filter or two OR we need to add registration functions and handle more like custom &lt;code&gt;post_status&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Hi Rachel, would it be possible to add a "Read" function to the comment statuses? There are plenty of times where the comment is just a message which doesn't need to be approved and placed on the blog post. I will typically respond to it but leave it marked as Unapproved because it's not spam and I don't want to delete it. But I'd like to keep it but mark it "Read" so my number of Unapproved Comments can then go back to zero. Or even a way to move a comment to Feedback.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:28:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:198</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:198/1472909290325956</guid>
      <description>&lt;p&gt;
Ah, I see what's happening.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;p11 removes itself, and so &lt;code&gt;::resort_active_iterations()&lt;/code&gt; causes the current &lt;code&gt;$this-&amp;gt;iterations&lt;/code&gt; to skip forward to priority 12.
&lt;/li&gt;&lt;li&gt;p11 re-adds itself, but now the current priority in &lt;code&gt;$this-&amp;gt;iterations&lt;/code&gt; is 12, so &lt;code&gt;::resort_active_iterations()&lt;/code&gt; doesn't go backwards.
&lt;/li&gt;&lt;li&gt;When &lt;code&gt;::apply_filters()&lt;/code&gt; finishes priority 11, it assumes that the current &lt;code&gt;$this-&amp;gt;iterations&lt;/code&gt; hasn't changed, so it grabs the next priority (after 12).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/17817/17817.17.diff" title="Attachment '17817.17.diff' in Ticket #17817"&gt;17817.17.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/17817/17817.17.diff" title="Download"&gt;​&lt;/a&gt; alters &lt;code&gt;::resort_active_iterations()&lt;/code&gt;, to detect when a new priority level has been created, that matches the current priority according to &lt;code&gt;::apply_filters()&lt;/code&gt;, and moves the current &lt;code&gt;$this-&amp;gt;iterations&lt;/code&gt; back to that priority level.
&lt;/p&gt;
&lt;p&gt;
@noplanman: Could you test &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/17817/17817.17.diff" title="Attachment '17817.17.diff' in Ticket #17817"&gt;17817.17.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/17817/17817.17.diff" title="Download"&gt;​&lt;/a&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:26:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933#comment:5/1472909199490702</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Looks like a conflict with one of your Tevolution (?) plugins or your theme, the button has clearly some styling that doesn't come from core and probably a JS error too. Does it still happen with all plugins disabled and a default theme (for example Twenty Sixteen or Twenty Fifteen) activated?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36492 (Add `WP_Post_Status` class) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:25:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36492#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36492#comment:18/1472909150261331</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Was there any consideration for implementing post statuses as an actual "enumerated" (or "enum") data type (or at least a PHP simulation thereof)?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
An enumerated list wouldn't allow much in the way of custom statuses.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
and what abilities a status should have
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is crying out for an interface to be created first, so that each &lt;code&gt;WP_*_Status&lt;/code&gt;, including &lt;code&gt;WP_Post_Status&lt;/code&gt; can implement it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:19:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933#comment:4/1472908767689474</guid>
      <description>&lt;p&gt;
Could not reproduce on Windows 10 with Chrome 53 either.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>17817.17.diff attached to Ticket #17817</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:16:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17817/17817.17.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17817/17817.17.diff/1472908583707340</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) updated</title>
      
        <dc:creator>MattyRob</dc:creator>

      <pubDate>Sat, 03 Sep 2016 13:07:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933#comment:3/1472908051215796</guid>
      <description>&lt;p&gt;
I've tried to reproduce this on OSX in Safari (v9.1.3), FF (v48) and Chrome (v53) - all seems fine here. Could this be Windows specific?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:58:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933#comment:2/1472907498020468</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) updated</title>
      
        <dc:creator>yktaufik</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:55:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933#comment:1/1472907331827298</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>WordPress 4.6 CSS Issue.mp4 attached to Ticket #37933</title>
      
        <dc:creator>yktaufik</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:53:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37933/WordPress%204.6%20CSS%20Issue.mp4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37933/WordPress%204.6%20CSS%20Issue.mp4/1472907238941071</guid>
      <description>&lt;p&gt;
A short video.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19898 (Create a is_login() function similar to is_admin()) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:53:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19898#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19898#comment:25/1472907220247835</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19898#comment:24" title="Comment 24"&gt;tazotodua&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
My topic (&lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37620" title="#37620: defect (bug): Give us a bit help, with IS_ADMIN and IS_LOGIN (new)"&gt;#37620&lt;/a&gt;) was closed  marked as "DUPLICATE" of this topic.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That ticket is still open. That said, it's unlikely a new constant will be introduced here. Constants are not a great way to check for context, as they are not filterable and hard to use in unit tests, see the discussion in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/25669" title="#25669: enhancement: Introduce helper function for AJAX checks (closed: fixed)"&gt;#25669&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37483" title="#37483: defect (bug): WP_LOGIN is not being detected (closed: duplicate)"&gt;#37483&lt;/a&gt; was closed, because the &lt;code&gt;IS_LOGIN_PAGE&lt;/code&gt; constant proposed there does seem similar to the &lt;code&gt;is_login()&lt;/code&gt; function proposed here. Why is it "completely different"?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37933 (Design Issue - While Uploading a plugin.) created</title>
      
        <dc:creator>yktaufik</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:53:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37933</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37933/1472907200547569</guid>
      <description>&lt;p&gt;
Hi, I found this CSS issue this evening. When I try to upload new plugin the button collapses.
&lt;/p&gt;
&lt;p&gt;
I know I've 2 notifications and might be for that reason this is happening. Even though the button should have proper CSS having number of notifications. Isnt?
&lt;/p&gt;
&lt;p&gt;
Here's a short video:
&lt;a class="ext-link" href="https://www.dropbox.com/s/qddfyqvnabw7f6c/WordPress%204.6%20CSS%20Issue.mp4?dl=0"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.dropbox.com/s/qddfyqvnabw7f6c/WordPress%204.6%20CSS%20Issue.mp4?dl=0&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:52:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:35/1472907161144173</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/26511/26511.diff" title="Attachment '26511.diff' in Ticket #26511"&gt;26511.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/26511/26511.diff" title="Download"&gt;​&lt;/a&gt; applies cleanly against trunk again.
&lt;/p&gt;
&lt;p&gt;
Changes to the previous patch:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Actually includes some unit tests to get us started. Not included are Multisite-related tests (e.g. &lt;code&gt;switch_to_blog()&lt;/code&gt; + &lt;code&gt;switch_to_locale()&lt;/code&gt;) and tests with plugin/theme translations.
&lt;/li&gt;&lt;li&gt;Removes the need for a &lt;code&gt;WP_Locale_Storage&lt;/code&gt; class. One simple filter is enough.
&lt;/li&gt;&lt;li&gt;Adds &lt;code&gt;switch_locale&lt;/code&gt; and &lt;code&gt;restore_locale&lt;/code&gt; action hooks.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
As you can see, this takes into account some of the feedback from &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29783" title="#29783: feature request: User Admin Language (closed: fixed)"&gt;#29783&lt;/a&gt;. This ticket should actually lay the foundation for that one so we can kill two birds with one stone
&lt;/p&gt;
&lt;p&gt;
@SergeyBiryukov: Regarding the &lt;code&gt;$wp_locale_switcher&lt;/code&gt; global, we could change it when &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37699" title="#37699: enhancement: Death to Globals Episode #1: A Registry, A Pattern (new)"&gt;#37699&lt;/a&gt; lands or perhaps make it a property of the &lt;code&gt;WP&lt;/code&gt; class.
&lt;/p&gt;
&lt;p&gt;
There's actually a bunch of i18n globals like &lt;code&gt;$l10n&lt;/code&gt;, &lt;code&gt;$l10n_unloaded&lt;/code&gt;, &lt;code&gt;$locale&lt;/code&gt;, &lt;code&gt;$wp_locale&lt;/code&gt;, &lt;code&gt;$wp_local_package&lt;/code&gt;. We could combine all of these in 1 central &lt;code&gt;WP_i18n&lt;/code&gt; class (which could also be a property of the &lt;code&gt;WP&lt;/code&gt; class), though that's probably out of scope for this ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>26511.diff attached to Ticket #26511</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:38:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/26511/26511.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/26511/26511.diff/1472906317806271</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>noplanman</dc:creator>

      <pubDate>Sat, 03 Sep 2016 12:02:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:197</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:197/1472904124823793</guid>
      <description>&lt;p&gt;
@pento, I see your test is adding the filters with the same priority. The problem only happens if the priorities are different.
&lt;/p&gt;
&lt;p&gt;
Please check &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37679" title="#37679: defect (bug): Actions that remove and add themselves again, break other actions (closed: duplicate)"&gt;#37679&lt;/a&gt; again to see what I mean.
&lt;/p&gt;
&lt;p&gt;
Unfortunately I can't modify your test, as PHP/PHPUnit dies on me with a &lt;code&gt;Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)&lt;/code&gt; when I change the priorities, which is very odd.
I'm trying to find a solution for this, without luck so far.
Maybe you have an idea why PHP is failing like this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 11:50:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:18/1472903442631942</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Refreshed patch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>33228.diff attached to Ticket #33228</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 11:50:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/33228/33228.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/33228/33228.diff/1472903413825514</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37925 (permalink not updating after editing slug, on post edit admin page) closed</title>
      
        <dc:creator>rinkuyadav999</dc:creator>

      <pubDate>Sat, 03 Sep 2016 11:40:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37925#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37925#comment:1/1472902847571582</guid>
      <description>wontfix: &lt;p&gt;
Link will not update till you press page update button.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #37871 (Clarify Login Label (Email Address)) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sat, 03 Sep 2016 11:12:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37871#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37871#comment:6/1472901124778990</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37871#comment:5" title="Comment 5"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm not sure 'Email Address' is really clearer than 'Email'.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'd disagree (of course). They are different things. I can give you my "email address" (&lt;code&gt;me@example.com&lt;/code&gt;), but I can't give you my "email" unless I forward the whole of my inbox to you. Likewise, my home (the building), and my home address (what you'd write on an envelope) are different things. If you want to send me a Christmas card, I'm not going to give you my home.
&lt;/p&gt;
&lt;p&gt;
A similar comparison would be how some people use the term "blog" as a shortened version of "blog post". As web-savvy users, we could probably guess that those people mean a single post, instead of the collection of posts, but what they are saying isn't technically correct.
&lt;/p&gt;
&lt;p&gt;
The point here is to be accurate with language, and avoid the use of colloquialisms, especially on the front-end for something as critical as logging in.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If so, this should likely be changed across the board, for example on the "Add New User" screen(s).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I did see that, but wanted this ticket to have a narrow scope. I'm all for updating Add New User screen too.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37885 (Build out register_setting like register_meta) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 03 Sep 2016 11:08:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37885#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37885#comment:11/1472900896558981</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
If we want to someday unify the meta and settings APIs, sure, but that's not what this ticket is about. Similar to the meta ticket, I think this is a bit off-track, and I worry we're not going to make forward movement if we keep discussing that.
&lt;/p&gt;
&lt;p&gt;
This ticket is about changing the &lt;code&gt;register_setting&lt;/code&gt; function to take extra parameters to make it more extensible. Any other goals should be new tickets.
&lt;/p&gt;
&lt;p&gt;
---
&lt;/p&gt;
&lt;p&gt;
Patch looks good; the change in &lt;code&gt;unregister_setting&lt;/code&gt; should add braces on to the &lt;code&gt;$sanitize_callback != ''&lt;/code&gt; conditional, since we're in the region. Otherwise, :thumbsup:.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37932 (Add annotations for extended `WP_Site` properties) created</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:50:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37932</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37932/1472899841127981</guid>
      <description>&lt;p&gt;
Since &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36935" title="#36935: enhancement: Implement lazy-loading blog details in `WP_Site` (closed: fixed)"&gt;#36935&lt;/a&gt; you can access &lt;code&gt;blogname&lt;/code&gt;, &lt;code&gt;siteurl&lt;/code&gt;, &lt;code&gt;post_count&lt;/code&gt; and &lt;code&gt;home&lt;/code&gt; via &lt;code&gt;WP_Site&lt;/code&gt;. But none of those are annotated like &lt;code&gt;$network_id&lt;/code&gt; or &lt;code&gt;$id&lt;/code&gt; (&lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/class-wp-site.php?rev=38369&amp;amp;marks=18-19#L10"&gt;https://core.trac.wordpress.org/browser/trunk/src/wp-includes/class-wp-site.php?rev=38369&amp;amp;marks=18-19#L10&lt;/a&gt;).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:49:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:17/1472899777835176</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:47:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:16/1472899637843812</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by afercia. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1472899634000076"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33228 (Customizer initial focus) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:45:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33228#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33228#comment:15/1472899531173901</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Looking back at this, just tested on Safari and looks like it wasn't getting the updated &lt;code&gt;themes.css&lt;/code&gt; stylesheet even when pressing &lt;code&gt;Shift-Command-R&lt;/code&gt;. I had to empty the cache from the Develop menu. So in order to properly test this patch, pleas try this:
&lt;/p&gt;
&lt;p&gt;
If you haven't already, go in &lt;code&gt;Safari &amp;gt; Preferences &amp;gt; Advanced tab&lt;/code&gt; and check "Show Develop menu in menu bar". Then just empty the caches from the Develop menu:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/GBBJGnRnwP.png"&gt;&lt;img src="https://cldup.com/GBBJGnRnwP.png" alt="https://cldup.com/GBBJGnRnwP.png" crossorigin="anonymous" title="https://cldup.com/GBBJGnRnwP.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
After this, everything seems to work nicely even in Safari+VoiceOver and the &lt;code&gt;customize-loader&lt;/code&gt; "overlay" is actually the only content available:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;no more need to set initial focus, any related JS can be removed
&lt;/li&gt;&lt;li&gt;the overlay behaves like a normal web page, focus management is a native browser thing
&lt;/li&gt;&lt;li&gt;keyboard navigation is "natively" constrained within the overlay, this fixes also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27705" title="#27705: defect (bug): Keyboard navigation should be constrained to the theme installer overlay (closed: fixed)"&gt;#27705&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Needs a bit more testing (Windows) and cleaning. Moving to 4.7.
&lt;/p&gt;
&lt;p&gt;
There are some more improvements to consider in this area but they should probably go in a separate ticket:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the "X" link hidden text is different, sometimes it's "Close" sometimes "Cancel", I'd propose to simplify and just use "Close" whether it's the live preview or customizer or theme installer
&lt;/li&gt;&lt;li&gt;order of elements: the "X" link should probably be the first control in the tab order
&lt;/li&gt;&lt;li&gt;consider to use &lt;code&gt;wp.a11y.speak()&lt;/code&gt; to announce the &lt;code&gt;customize-loader&lt;/code&gt; overlay has loaded
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37928 (add `pre_add_option` filter) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:42:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37928#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37928#comment:4/1472899340023656</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37928#comment:3" title="Comment 3"&gt;jipmoors&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I would prefer to have a separate filter to allow a short-cicuit instead of abusing a return value to imply such a behaviour.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Definitely makes sense. I patched this way too quickly. :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:38:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:34/1472899085179958</guid>
      <description>&lt;p&gt;
@pbearne Yes, switching to non-existing locales should be avoided. See also suggestions in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29783" title="#29783: feature request: User Admin Language (closed: fixed)"&gt;#29783&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I'll try to wrap my head around the patch &amp;amp; tests now.
&lt;/p&gt;
&lt;p&gt;
Edit: What if there's a locale available for a plugin, but not for core? That shouldn't prevent switching.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37871 (Clarify Login Label (Email Address)) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:19:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37871#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37871#comment:5/1472897959396001</guid>
      <description>&lt;p&gt;
I'm not sure 'Email Address' is really clearer than 'Email'. If so, this should likely be changed across the board, for example on the "Add New User" screen(s).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37931 (new function post_type_exists()) closed</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:14:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37931#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37931#comment:1/1472897648051202</guid>
      <description>invalid: &lt;p&gt;
Hey there,
&lt;/p&gt;
&lt;p&gt;
Thanks for your report and welcome to WordPress Trac!
&lt;/p&gt;
&lt;p&gt;
The function &lt;code&gt;post_type_exists()&lt;/code&gt; exists in WordPress since version 3.0.0.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #37931 (new function post_type_exists()) created</title>
      
        <dc:creator>mifr45</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:05:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37931</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37931/1472897136926172</guid>
      <description>&lt;p&gt;
&lt;strong&gt;New function post_type_exists()&lt;/strong&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;post_type_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nv"&gt;$types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_post_types&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$types&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27705 (Keyboard navigation should be constrained to the theme installer overlay) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:05:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27705#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27705#comment:8/1472897125303730</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33228" title="#33228: enhancement: Customizer initial focus (closed: fixed)"&gt;#33228&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37928 (add `pre_add_option` filter) updated</title>
      
        <dc:creator>jipmoors</dc:creator>

      <pubDate>Sat, 03 Sep 2016 10:01:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37928#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37928#comment:3/1472896872729865</guid>
      <description>&lt;p&gt;
I would prefer to have a separate filter to allow a short-cicuit instead of abusing a return value to imply such a behaviour.
&lt;/p&gt;
&lt;p&gt;
And a random value really sounds like a terrible idea :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35666 (Add support for HTTP response codes to wp_send_json_error(), ...) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 03 Sep 2016 09:20:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35666#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35666#comment:7/1472894408055355</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Good catch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37930 (Introduce a general `pre_option` filter in `get_option()`) created</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:37:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37930</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37930/1472888252251625</guid>
      <description>&lt;p&gt;
We currently have a &lt;code&gt;pre_option_{$option}&lt;/code&gt; filter in &lt;code&gt;get_option()&lt;/code&gt; to short-circuit the process of retrieving an option. I think it would make sense to also add a global filter &lt;code&gt;pre_option&lt;/code&gt;, similar like we have in &lt;code&gt;update_option()&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37928 (add `pre_add_option` filter) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:34:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37928#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37928#comment:2/1472888041177901</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37929 (Add `pre_delete_option` filter) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:33:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37929#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37929#comment:1/1472888032522075</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37929/37929.diff" title="Attachment '37929.diff' in Ticket #37929"&gt;37929.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37929/37929.diff" title="Download"&gt;​&lt;/a&gt; is a first take on introducing the filter.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37929.diff attached to Ticket #37929</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:33:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37929/37929.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37929/37929.diff/1472887996504853</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37928 (add `pre_add_option` filter) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:26:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37928#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37928#comment:1/1472887595160858</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37928/37928.diff" title="Attachment '37928.diff' in Ticket #37928"&gt;37928.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37928/37928.diff" title="Download"&gt;​&lt;/a&gt; is a first take on introducing the filter. I used &lt;code&gt;null&lt;/code&gt; as a return value to skip since &lt;code&gt;null&lt;/code&gt; is very unlikely to be stored as option. However, it is not a perfect solution I think. I was wondering whether it might make sense to declare a &lt;code&gt;WP_DEFAULT_VALUE&lt;/code&gt; constant, fill it with some random value, and use that in such cases.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37928.diff attached to Ticket #37928</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:23:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37928/37928.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37928/37928.diff/1472887436381824</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37929 (Add `pre_delete_option` filter) created</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:15:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37929</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37929/1472886929791326</guid>
      <description>&lt;p&gt;
&lt;code&gt;get_option()&lt;/code&gt; and &lt;code&gt;update_option()&lt;/code&gt; already have filters to short-circuit their respective processes, so I think a similar filter should be added to &lt;code&gt;delete_option()&lt;/code&gt; as well.
&lt;/p&gt;
&lt;p&gt;
Related: &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37928" title="#37928: enhancement: add `pre_add_option` filter (new)"&gt;#37928&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37928 (add `pre_add_option` filter) created</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:13:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37928</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37928/1472886796763429</guid>
      <description>&lt;p&gt;
&lt;code&gt;get_option()&lt;/code&gt; and &lt;code&gt;update_option()&lt;/code&gt; already have filters to short-circuit their respective processes, so I think a similar filter should be added to &lt;code&gt;add_option()&lt;/code&gt; as well.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #35666 (Add support for HTTP response codes to wp_send_json_error(), ...) reopened</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:09:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35666#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35666#comment:6/1472886564455636</guid>
      <description>&lt;p&gt;
I've found a defect with the changes here. Namely, if &lt;code&gt;status_header()&lt;/code&gt; was being called previously to &lt;code&gt;wp_send_json()&lt;/code&gt;, then the default &lt;code&gt;$status_header&lt;/code&gt; of &lt;code&gt;200&lt;/code&gt; would clobber the &lt;code&gt;status_header()&lt;/code&gt; that was first set. In other words, this breaks backwards compatibility.
&lt;/p&gt;
&lt;p&gt;
On a related note, I also found that &lt;code&gt;_ajax_wp_die_handler&lt;/code&gt; was clobbering the &lt;code&gt;status_header()&lt;/code&gt; call if output buffering is on (since &lt;code&gt;headers_sent()&lt;/code&gt; would be &lt;code&gt;false&lt;/code&gt;). See &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/35666/35666.3.diff" title="Attachment '35666.3.diff' in Ticket #35666"&gt;35666.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/35666/35666.3.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>35666.3.diff attached to Ticket #35666</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 03 Sep 2016 07:06:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/35666/35666.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/35666/35666.3.diff/1472886413094506</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37635 (BUG in get_option) updated</title>
      
        <dc:creator>tazotodua</dc:creator>

      <pubDate>Sat, 03 Sep 2016 06:38:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37635#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37635#comment:3/1472884685638020</guid>
      <description>&lt;p&gt;
maybe you are right.  I will check that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19898 (Create a is_login() function similar to is_admin()) updated</title>
      
        <dc:creator>tazotodua</dc:creator>

      <pubDate>Sat, 03 Sep 2016 06:34:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19898#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19898#comment:24/1472884494963669</guid>
      <description>&lt;p&gt;
My topic (&lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37620" title="#37620: defect (bug): Give us a bit help, with IS_ADMIN and IS_LOGIN (new)"&gt;#37620&lt;/a&gt;) was closed  marked as "DUPLICATE" of this topic.
&lt;/p&gt;
&lt;p&gt;
However, MY REQUEST IS COMPLETELY DIFFERENT!
&lt;/p&gt;
&lt;p&gt;
WHAT ON EARTH, if you add
&lt;code&gt;define('LOGIN_PAGE_EXECUTED', true);&lt;/code&gt;
or something like that in wp-login.php
&lt;/p&gt;
&lt;p&gt;
why dont you make a great help to programmers?
&lt;/p&gt;
&lt;p&gt;
we cant determine when login page is executed (when we output login page on other page then wp-login.php url, like many security plugins do that)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29158 (Customizer UI Design lacks contrast for visual hierarchy and does not ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 03 Sep 2016 06:26:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29158#comment:67</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29158#comment:67/1472883969018048</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by celloexpressions. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1472883967000073"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 03 Sep 2016 05:38:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:19/1472881099786654</guid>
      <description>&lt;p&gt;
@joyously The vast majority of uses for this functionality would surely be wanting to tweak the styles of a theme's stylesheet. That is, to override and extend the cascade. If a user is experienced enough to know about FOUC then they'd just as well add that to their &lt;code&gt;functions.php&lt;/code&gt; to output at the top of &lt;code&gt;wp_head&lt;/code&gt;. That's my opinion on that.
&lt;/p&gt;
&lt;p&gt;
I am not familiar with the state of CSSTidy. I just know that it is used by Jetpack for their CSS editing module.
&lt;/p&gt;
&lt;p&gt;
As for storing the CSS in a custom post type as opposed to directly in a theme mod, the reason for doing this is for scalability. It is conceivable that a lot of CSS could be dumped into such a field and since theme mods are just options and also _autoloaded_ options, it is important that unbounded blocks of CSS to not be included in the theme mod itself. If the Memcached object cache plugin is used, and there are several themes that have lots of CSS, then the 1MB limit for a cache bucket could be breached and the site could crash since alloptions would no longer be cacheable. As for data portability, I don't think that will cause a problem. Consider the CSS being stored in a new post type called &lt;code&gt;theme_css&lt;/code&gt;, where each theme has one and only one &lt;code&gt;theme_css&lt;/code&gt; post created. The &lt;code&gt;post_name&lt;/code&gt; for these posts can exactly correspond to the theme that it is associated with. In that way, the &lt;code&gt;theme_css&lt;/code&gt; posts could be exported via the normal XML exporter and imported on another site, and the would then automatically be recognized because they'd have the &lt;code&gt;post_name&lt;/code&gt; wouldn't change.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 03 Sep 2016 05:09:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:18/1472879396632256</guid>
      <description>&lt;p&gt;
@westonruter I think you have assumed there is no reason to ever need some CSS before all the other CSS?  What about cases of avoiding a "flash of unstyled content"? or a small animation that is visible while the page loads? or other scenarios I haven't thought of? Anyway, it seems like the user should be able to choose.
&lt;/p&gt;
&lt;p&gt;
And as for CSSTidy, do you actually have a good version to use? The one on GitHub is old, and the one I found that checks CSS online is also. I didn't try the GitHub one, but the online one (csstidyonline.com) did not reject my test of putting a couple of HTML tags in between two style blocks. It just complained about text-shadow; like I said, old.
&lt;/p&gt;
&lt;p&gt;
I was not remarking on the use of a post type to store the CSS, except for how it would be emitted. But now that you mention it, I don't really like the idea of having styles stored separately from the theme. It makes it more difficult to duplicate or move the design to a different site. It's bad enough that the menus and widgets are tied by names to the theme, so they can't be generic. You have to configure them for each theme -- such a hassle. Adding more ways to store theme specific data seems like a bad idea.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sat, 03 Sep 2016 04:25:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:196</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:196/1472876739241729</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/17817/17817.16.diff" title="Attachment '17817.16.diff' in Ticket #17817"&gt;17817.16.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/17817/17817.16.diff" title="Download"&gt;​&lt;/a&gt; adds a unit test for the filters being added and removed from the currently running hook.
&lt;/p&gt;
&lt;p&gt;
@noplanman: The new test added (&lt;code&gt;test_remove_and_add&lt;/code&gt; in &lt;code&gt;tests/hooks/add_filter.php&lt;/code&gt;) seems to cover the remove/add behaviour you described in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37679" title="#37679: defect (bug): Actions that remove and add themselves again, break other actions (closed: duplicate)"&gt;#37679&lt;/a&gt;, but I was unable to reproduce the output you described.
&lt;/p&gt;
&lt;p&gt;
Could I get you to have a look at the test, and say how it differs from your code?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>17817.16.diff attached to Ticket #17817</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sat, 03 Sep 2016 04:25:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17817/17817.16.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17817/17817.16.diff/1472876718211695</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>17817.15.diff attached to Ticket #17817</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sat, 03 Sep 2016 04:18:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17817/17817.15.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17817/17817.15.diff/1472876319327585</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>17817.14.diff attached to Ticket #17817</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Sat, 03 Sep 2016 04:16:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17817/17817.14.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17817/17817.14.diff/1472876203335584</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37335 (Standardized API for themes to add info/links to the customizer) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 03 Sep 2016 03:43:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37335#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37335#comment:12/1472874234293785</guid>
      <description>&lt;p&gt;
@FolioVision that's more on the theme review team side of things, but I imagine that there will eventually be a requirement to use the approach that we come up with here or to put UI within a section.
&lt;/p&gt;
&lt;p&gt;
@westonruter more than JS, I'd say that custom controls/sections/panels and generally the PHP and JS APIs should be used to extend the customizer UI. Right now most themes that add promotional links are bypassing the API entirely and injecting content into the DOM with arbitrary JS, into core-defined UI elements such as the global header (implying that they're taking their site "Pro" by buying a custom theme, and in a way implying that they're getting a "pro" version of WordPress). An &lt;code&gt;action&lt;/code&gt; would be a stopgap solution to provide a simple route that complies with core-recommended UI practices, and is the only good way I can think of to facilitate adding UI to a core section heading that should not be overridden by a custom instance. The other way is creating a custom section (which could display only a top level link and not expand), but that would introduce more UI for end users and more complexity for devs than being able to add a link via this action.
&lt;/p&gt;
&lt;p&gt;
If you ask me, theme shouldn't be allowed to alter the top-level UI in any way, especially not with external links, but the theme review team decided to allow this so we need to make sure that it's possible to do in a reasonably elegant way that won't break things.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37927 (Errors occurring after upgrading to WordPress 4.6) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 03 Sep 2016 02:37:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37927#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37927#comment:7/1472870236387010</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37927#comment:6" title="Comment 6"&gt;Pulsar_Media&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The theme is installed and i can verify its installed through FTP - but for some reason WordPress thinks it doesn't exist.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Might be related to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37924" title="#37924: defect (bug): Cannot delete or update themes in directories containing an uppercase ... (closed: fixed)"&gt;#37924&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37927 (Errors occurring after upgrading to WordPress 4.6) updated</title>
      
        <dc:creator>Pulsar_Media</dc:creator>

      <pubDate>Sat, 03 Sep 2016 02:23:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37927#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37927#comment:6/1472869431966945</guid>
      <description>&lt;p&gt;
Ok here's one example - i just tried to delete one of my child themes and here is the WordPress error i got along with the ajax return message in the web console:
&lt;/p&gt;
&lt;p&gt;
WordPress error:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Deletion failed: The requested theme does not exist.
&lt;/pre&gt;&lt;p&gt;
Ajax message:
&lt;/p&gt;
&lt;pre class="wiki"&gt;{"success":false,"data":{"delete":"theme","slug":"hope-charity-theme-child","errorMessage":"The requested
 theme does not exist."}}
&lt;/pre&gt;&lt;p&gt;
The theme is installed and i can verify its installed through FTP - but for some reason WordPress thinks it doesn't exist.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35614 (Cannot check capabilities on single taxonomy terms) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 03 Sep 2016 02:15:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35614#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35614#comment:7/1472868901267885</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38516" title="Taxonomy: Introduce some taxonomy capability tests in preparation for ..."&gt;38516&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Taxonomy: Introduce some taxonomy capability tests in preparation for introducing more fine grained capabilities for terms.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35614" title="#35614: enhancement: Cannot check capabilities on single taxonomy terms (closed: fixed)"&gt;#35614&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [38516]: Taxonomy: Introduce some taxonomy capability tests in preparation for ...</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 03 Sep 2016 02:15:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38516</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38516/1472868900671687</guid>
      <description>&lt;p&gt;
Taxonomy: Introduce some taxonomy capability tests in preparation for introducing more fine grained capabilities for terms.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35614" title="#35614: enhancement: Cannot check capabilities on single taxonomy terms (closed: fixed)"&gt;#35614&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #37218 (get_main_network_id should use WP_Network_Query) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sat, 03 Sep 2016 00:07:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37218#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37218#comment:3/1472861220482469</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37218#comment:2" title="Comment 2"&gt;flixos90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
One thing I don't think we need is the &lt;code&gt;! empty( $_networks )&lt;/code&gt; check. That kind of check hasn't been in place before and shouldn't be required since every Multisite has at least one network.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed. I don't believe there's a way to hit that condition unless something has gone very wrong. I think we're okay without it. I've added &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37218/37218.4.diff" title="Attachment '37218.4.diff' in Ticket #37218"&gt;37218.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37218/37218.4.diff" title="Download"&gt;​&lt;/a&gt;, which makes that change.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
About unit tests, I don't think these are necessary here since that part of &lt;code&gt;get_main_network_id()&lt;/code&gt; is already covered (&lt;a href="https://core.trac.wordpress.org/browser/trunk/tests/phpunit/tests/multisite/network.php#L66"&gt;https://core.trac.wordpress.org/browser/trunk/tests/phpunit/tests/multisite/network.php#L66&lt;/a&gt; would fail if we broke it).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37218.4.diff attached to Ticket #37218</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sat, 03 Sep 2016 00:03:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37218/37218.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37218/37218.4.diff/1472861024582220</guid>
      <description></description>
      <category>attachment</category>
    </item>
   </channel>
</rss>