<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #37964 (Allow customizer controls to be encapsulated by accepting ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 23:20:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37964#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37964#comment:4/1474759247966888</guid>
      <description>&lt;p&gt;
The patch looks like an improvement to me, although I haven't dug into this code before.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 22:04:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:63</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:63/1474754668478649</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:60" title="Comment 60"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Not sure if we really have to be consistent with a naming which is semantically incorrect. But maybe we can provide both functions? &lt;code&gt;restore_current_locale()&lt;/code&gt; would empty the stack and set the locale to &lt;code&gt;$original_locale&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Added in the latest patch.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Can't we move it to &lt;code&gt;default-filters.php&lt;/code&gt; as &lt;code&gt;add_filter( 'locale', array( $GLOBALS['wp_locale_switcher'], 'filter_locale' );&lt;/code&gt;? Or a simple &lt;code&gt;init()&lt;/code&gt; method which gets called in &lt;code&gt;wp-settings.php&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;code&gt;default-filters.php&lt;/code&gt; is loaded in &lt;code&gt;wp-settings.php&lt;/code&gt; on line 113, while &lt;code&gt;$GLOBALS['wp_locale_switcher']&lt;/code&gt; is initialized on line 395, so that doesn't really work. Going with the &lt;code&gt;init()&lt;/code&gt; method for now.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:61" title="Comment 61"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Something I missed to mention earlier: There is an issue with functions like &lt;code&gt;get_post_type_labels()&lt;/code&gt;/&lt;code&gt;_get_custom_object_labels()&lt;/code&gt;. Post type labels are initially registered via &lt;code&gt;register_post_type()&lt;/code&gt; which means they don't change when calling &lt;code&gt;switch_to_locale()&lt;/code&gt;. You can see that with &lt;a href="https://core.trac.wordpress.org/attachment/ticket/29783/user-language-admin-toolbar.php"&gt;the example plugin&lt;/a&gt; in the Add New menu for the Post and Page items.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ugh, I experienced that once when testing but thought it was fixed eventually. Since post type labels are cached it's a bit hacky to reload them. The latest patch tries it anyway.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:62" title="Comment 62"&gt;tfrommen&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There are even more issues, for example, when you have a Custom Post Type or Custom Taxonomy registered by using a translated slug. When you switch to a different locale, the rewrite rules (and thus the generated permalinks) do &lt;strong&gt;not&lt;/strong&gt; get adapted.
&lt;/p&gt;
&lt;p&gt;
The question is if coping with these things should be handled by the locale switcher, or not.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We definitely can't accommodate for rewrite rules (especially as long as they are stored in the database, see &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/36292" title="#36292: feature request: Rewrites: Next Generation (assigned)"&gt;#36292&lt;/a&gt;) as we'd have no idea which part was translated.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>26511.6.diff attached to Ticket #26511</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 21:58:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/26511/26511.6.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/26511/26511.6.diff/1474754321630189</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38155 (get_page_of_comment filter can't be used in some cases because has not ...) created</title>
      
        <dc:creator>zhildzik</dc:creator>

      <pubDate>Sat, 24 Sep 2016 21:26:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38155</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38155/1474752385961847</guid>
      <description>&lt;p&gt;
In WP 4.6.1: wp-includes/comment.php line 969:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'get_page_of_comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$original_args&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
This filter has no parameter comment_ID so it's impossible to get comment and calculate page outside of Wordpress get_page_of_comment function. It's possible to pass comment_ID parameter in $args when calling get_page_of_comment function but when this function called from Wordpress core function, it's impossible to get current comment.
&lt;/p&gt;
&lt;p&gt;
For example, if we use get_comment_link() function, it's impossible to override result of get_page_of_comment() which called from get_comment_link().
&lt;/p&gt;
&lt;p&gt;
Example:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get_page_of_comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'theme_reverse_page_comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$recent_comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'orderby'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'comment_date'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'order'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'DESC'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'status'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'approve'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s1"&gt;'number'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$recent_comments&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$rc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_comment_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$recent_comment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;theme_reverse_page_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$original_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// hook triggered from get_page_of_comment() function called in get_comment_link()
&lt;/span&gt;
  &lt;span class="c1"&gt;// in this function - $recent_comment or ID of comment passed to get_comment_link() isn't available
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37516 (Site title and tagline: allow ability to hide each independently) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 24 Sep 2016 20:05:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37516#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37516#comment:4/1474747501542237</guid>
      <description>&lt;p&gt;
My favorite thing is when I go to make a ticket and @karmatosed has already made it. :)
&lt;/p&gt;
&lt;p&gt;
I tried out both checkboxes and having a hide/show for each. Checkboxes are definitely more straightforward and intuitive, but the show/hide version isn't &lt;em&gt;terrible&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
Regardless, I love this idea — the introduction of logos means I often want a logo in place of a site title, but I still want a tagline.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>title-tagline-2.jpg attached to Ticket #37516</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 24 Sep 2016 20:02:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-2.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-2.jpg/1474747369324270</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>title-tagline-1.jpg attached to Ticket #37516</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 24 Sep 2016 20:02:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-1.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-1.jpg/1474747323453702</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38154 (my wordpress platform is missing the editor : it only shows editor for css) updated</title>
      
        <dc:creator>rm2773</dc:creator>

      <pubDate>Sat, 24 Sep 2016 19:59:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38154#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38154#comment:1/1474747154804282</guid>
      <description>&lt;p&gt;
Hi Kimbert, I never like to leave a stone un-turned.
&lt;/p&gt;
&lt;p&gt;
Are you sure that you have administrator capability in your user profile?
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38154" title="#38154: defect (bug): my wordpress platform is missing the editor : it only shows editor for css (closed: invalid)"&gt;Kimbert&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
on my dashboard I cannot see the editor for my files.  It only says editor css.
&lt;/p&gt;
&lt;p&gt;
I have deactivated all plugins and reinstalled the latest wp but nothing changes this.
&lt;/p&gt;
&lt;p&gt;
is this the file I should be looking at?
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
includes/class-pclzip.php
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
to correct this bug?
&lt;/p&gt;
&lt;p&gt;
tx
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37276 (tax_query with field=name doesn't work if the term contains an apostrophe) updated</title>
      
        <dc:creator>elrae</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:38:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37276#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37276#comment:8/1474738699357408</guid>
      <description>&lt;p&gt;
Thanks for the reference boone. Unfortunately my schedule has been crazy packed the last few months. If I get some time in the next few weeks to add this test I definitely will, but if anyone else comes across this ticket and wants to hop in feel free.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38140 (Remove target="_blank" from help tab comment/comment-edit) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:29:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38140#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38140#comment:2/1474738182420614</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38141 (Remove target="_blank" from help tab custom-background/custom-header) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:29:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38141#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38141#comment:1/1474738155298306</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38143 (Remove target="_blank" from help tab option files for settings in the Admin) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:29:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38143#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38143#comment:1/1474738140069359</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38145 (Remove target="_blank" from help tab in several Admin screens) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:28:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38145#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38145#comment:1/1474738127323129</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) updated</title>
      
        <dc:creator>ryankienstra</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:58:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021#comment:16/1474736293572691</guid>
      <description>&lt;p&gt;
&lt;strong&gt;New Pull Request To Avoid Merge Conflics&lt;/strong&gt;
&lt;em&gt;Also Removes IE8 Workarounds&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Development is now on a new &lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/157#discussion_r80343831"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;pull request&lt;/a&gt; and &lt;a class="ext-link" href="https://patch-diff.githubusercontent.com/raw/xwp/wordpress-develop/pull/157.diff"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;identical patch&lt;/a&gt;, to avoid merge conflicts.
&lt;/p&gt;
&lt;p&gt;
This also has commits to remove IE8 workarounds:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/157/commits/7448290e3df780337e1dfaddd0cb971e813750bf"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;74482&lt;/a&gt; : Customize - Deprecate function that's not needed without IE8 support.
Commit 2d583 removed Customizer support for IE8.
And this function is no longer needed.
So deprecate it, and remove the hook that calls it.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/157/commits/76ea6b9d7a6588a21e770441ae9a015a8dc81679"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;76ea6&lt;/a&gt; : Customize - Remove IE8 polyfill in Selective Refresh.
The Customizer no longer supports IE8.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38017 (Add widget instance to remaining widget argument filters) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:25:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38017#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38017#comment:2/1474734323443925</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@Takahashi_Fumiki Thanks for the patch. Let's also add &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/php/#since-section-changelogs"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;changelog&lt;/a&gt; entries for the new parameters added to all of these hooks.
&lt;/p&gt;
&lt;p&gt;
Assigning to mark the &lt;em&gt;good-first-bug&lt;/em&gt; as "claimed".
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34335 (URL shorteners ( redirects) should to be supported by the embed ...) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:21:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34335#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34335#comment:14/1474734110873882</guid>
      <description>&lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) reopened</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:09:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:49/1474733393554298</guid>
      <description>&lt;p&gt;
I noticed a bug introduced by the above changeset: The JOIN clause of the query is completely overridden by &lt;code&gt;_filter_query_attachment_filenames()&lt;/code&gt;, regardless of whether other joins were already included. This can break several queries. We need to make sure that original joins are preserved.
&lt;/p&gt;
&lt;p&gt;
I stumbled across this while querying attachment taxonomies. :)
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>TJNowell</dc:creator>

      <pubDate>Sat, 24 Sep 2016 15:26:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:218</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:218/1474730780788942</guid>
      <description>&lt;p&gt;
I believe I've been misinterpreted by both sides regarding performance. It's not wether autoloader X or autoloader Y is faster. It's wether autoloading vs no autoloading is faster.
&lt;/p&gt;
&lt;p&gt;
Right now, with no optimisations autoloading slows down WordPress due to the greater number of files being loaded. It's a small difference but we won't get an autoloader if it slows down core. We need to demonstrate with hard facts that an improvement is possible. Right now all we have is theoretical, and a number of senior developers have already chimed in with that's not good enough.
&lt;/p&gt;
&lt;p&gt;
I'd also like to raise some questions:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I don't understand why we need to rearrange most of core, this sounds like a recipe for disaster and failed auto-updates. It screams fragile
&lt;/li&gt;&lt;li&gt;I don't see why we need to rename our files, the part were we find the classes and their filenames is meant to happen at buildtime, it's just a PHP array &lt;code&gt;'class' =&amp;gt; 'filename'&lt;/code&gt;, why overcomplicate things?
&lt;/li&gt;&lt;li&gt;There may be things we don't want to autoload that are always loaded, or too critical to let a plugin override
&lt;/li&gt;&lt;li&gt;Nobody has ruled out the composer autoloader, discussion on wether it should be used is premature as the case for an autoloader has not been made
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
As for benchmarks, install Query Monitor and run a vanilla install with and without these changes, and measure 10 common page loads 10 times. That should give crude timings. Better yet use a cli tool
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37843 (`http_api_curl` hook no longer available for adding custom cURL options) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 24 Sep 2016 15:01:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37843#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37843#comment:14/1474729291569511</guid>
      <description>&lt;p&gt;
@jaredh123 Whoops, forgot to include that change in my patch. Updated in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37843/37843.2.diff" title="Attachment '37843.2.diff' in Ticket #37843"&gt;37843.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37843/37843.2.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37843.2.diff attached to Ticket #37843</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 24 Sep 2016 14:59:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37843/37843.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37843/37843.2.diff/1474729192079662</guid>
      <description>&lt;p&gt;
Updated instantiation with params
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Screen Shot 2016-09-24 at 4.41.30 PM.png attached to Ticket #38154</title>
      
        <dc:creator>Kimbert</dc:creator>

      <pubDate>Sat, 24 Sep 2016 14:44:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38154/Screen%20Shot%202016-09-24%20at%204.41.30%20PM.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38154/Screen%20Shot%202016-09-24%20at%204.41.30%20PM.png/1474728253410567</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38154 (my wordpress platform is missing the editor : it only shows editor for css) created</title>
      
        <dc:creator>Kimbert</dc:creator>

      <pubDate>Sat, 24 Sep 2016 14:43:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38154</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38154/1474728226788918</guid>
      <description>&lt;p&gt;
on my dashboard I cannot see the editor for my files.  It only says editor css.
&lt;/p&gt;
&lt;p&gt;
I have deactivated all plugins and reinstalled the latest wp but nothing changes this.
&lt;/p&gt;
&lt;p&gt;
is this the file I should be looking at?
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
includes/class-pclzip.php
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
to correct this bug?
&lt;/p&gt;
&lt;p&gt;
tx
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 13:58:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:217</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:217/1474725510502144</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:202" title="Comment 202"&gt;TJNowell&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm also concerned that the generation code relies on global variables and isn't very testable, it wouldn't be possible to write an easy unit test.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Since you mentioned this, you can see a more production ready version in &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/pull/2/commits/42684498b0fc17c3e4d2c7b8119661aba087c444"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this PR&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37772 (Not working "wp_default_styles" on PHP 7.1.0) updated</title>
      
        <dc:creator>hoang2016</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:45:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37772#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37772#comment:11/1474721100279708</guid>
      <description>&lt;p&gt;
WP 7 working fine on PHP 7.1.0 RC2 for me
&lt;/p&gt;
&lt;p&gt;
tip: just simply following the instruction "&lt;a class="ext-link" href="https://codex.wordpress.org/WordPress_Backups"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/WordPress_Backups&lt;/a&gt;" and "&lt;a class="ext-link" href="https://codex.wordpress.org/Updating_WordPress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/Updating_WordPress&lt;/a&gt;"
&lt;/p&gt;
&lt;p&gt;
then re-activate one by one plug in that you have. Deactivate the one which given an error
&lt;/p&gt;
&lt;p&gt;
have fun with new generation of innovative WP.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:26:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:46</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:46/1474719970347233</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:45" title="Comment 45"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think the naming can be improved. Maybe &lt;code&gt;WP_Scripts::add_json_localization()&lt;/code&gt; or &lt;code&gt;WP_Scripts::localize_with_json()&lt;/code&gt; for &lt;code&gt;WP_Scripts::load_translation_file()&lt;/code&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I had a hard time thinking of a good name, so +1. I'll move forward with &lt;code&gt;WP_Scripts::add_json_localization()&lt;/code&gt; for the time being, unless we come up with something better.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm not a fan of the loop in &lt;code&gt;get_js_i18n_data()&lt;/code&gt;. &lt;code&gt;WP_LANG_DIR &lt;/code&gt; should only be checked if &lt;code&gt;$domain&lt;/code&gt; is 'default'. Can we require that a path needs to be set: &lt;code&gt;get_js_i18n_data( $domain, $path )&lt;/code&gt;? Or a &lt;code&gt;$context&lt;/code&gt; which can be [core|theme|plugin]?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;code&gt;$context&lt;/code&gt; sounds interesting. The alternative is to make it more like &lt;code&gt;load_*_textdomain()&lt;/code&gt; with a different function per context.
&lt;/p&gt;
&lt;p&gt;
Idea that came to mind right now: Assuming the MO files are already loaded, we could probably get the path to the MO file from &lt;code&gt;$l10n[ $domain ]&lt;/code&gt; and derive the JSON file from there.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I noticed that &lt;code&gt;escape()&lt;/code&gt; still uses &lt;code&gt;_.keys()&lt;/code&gt; which is an Underscore function.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Good catch. I thought I had removed all underscore leftovers in the latest patch. Will fix in the next one.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Regarding &lt;code&gt;sprintf()&lt;/code&gt;, this patch also removes &lt;code&gt;wp.i18n.sprintf&lt;/code&gt; as Jed's implementation is really out of date. Jed even encourages removing it from its source code:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1, although it seems like Jed uses it at least once in line 147.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah I saw that too, although that line looks irrelevant for our use case. See &lt;a class="ext-link" href="https://github.com/SlexAxton/Jed/pull/46"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/SlexAxton/Jed/pull/46&lt;/a&gt; and &lt;a class="ext-link" href="https://github.com/SlexAxton/Jed/pull/47"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/SlexAxton/Jed/pull/47&lt;/a&gt; for more information about how Jed's version of &lt;code&gt;sprintf()&lt;/code&gt; is different. Keeping the &lt;code&gt;sprintf()&lt;/code&gt; part would make it easier to maintain.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:20:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:4/1474719600792297</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38014 (blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ...) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:18:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38014#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38014#comment:10/1474719530629495</guid>
      <description>&lt;p&gt;
Does someone have a test site with a clean install where the same error exists? I'd like to have a look, please DM me ("ocean90") on &lt;a class="ext-link" href="https://chat.wordpress.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:15:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:3/1474719352000140</guid>
      <description>&lt;p&gt;
For example, updates.js contains the following line:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;l10n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatingLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20491" title="#20491: enhancement: Introduce some JavaScript i18n functions (closed: fixed)"&gt;#20491&lt;/a&gt; allows us to improve this a bit:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Updating %s...'&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
However, this only really works well when there's a single placeholder to replace. It gets more complicated with additional placeholders and as soon as you want to deal with plurals in JavaScript (see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/22229" title="#22229: enhancement: Plurals in JavaScript (closed: duplicate)"&gt;#22229&lt;/a&gt;). Using &lt;code&gt;sprintf()&lt;/code&gt;, which WordPress devs are much more familiar with, would greatly improve readability and flexibility of the code, especially when dealing with translations.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/20491/20491-applied.diff" title="Attachment '20491-applied.diff' in Ticket #20491"&gt;20491-applied.diff:ticket:20491&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/20491/20491-applied.diff" title="Download"&gt;​&lt;/a&gt; is a proof-of-concept that shows various places where &lt;code&gt;sprintf()&lt;/code&gt; in JS could be used in core. For the above example, it would look like this:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Updating %s...'&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
With more and more plugins focusing on JavaScript-heavy admin interfaces, such utility functions become more important. By bundling this library with core, plugins do not have to enqueue it on their own — perhaps even multiple times — and core can benefit from it as well.
&lt;/p&gt;
&lt;p&gt;
It's worth noting that Jed.js, being suggested for inclusion in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20491" title="#20491: enhancement: Introduce some JavaScript i18n functions (closed: fixed)"&gt;#20491&lt;/a&gt;, bundles a modified version of sprintf.js inline, but it's woefully out of date and not used in the current patch and thus not exposed to the global scope.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #38014,​38153 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:13:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=38014%2C38153</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=38014%2C38153/1474719222728573</guid>
      <description>duplicate: &lt;p&gt;
Hello @mikeatdatafault, welcome to Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for your report, we're already tracking this issue in &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/38014" title="#38014: defect (bug): blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ... (reopened)"&gt;#38014&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #38153 (/wp-admin/index.php  wp 4.6.1 not displaying admin home page) created</title>
      
        <dc:creator>mikeatdatafault</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:05:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38153</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38153/1474718710093220</guid>
      <description>&lt;p&gt;
I am not able to access the page /wp-admin/index.php  -- resulting in only the "white screen of death"
&lt;/p&gt;
&lt;p&gt;
I have done the following to verify that this is not a local issue:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Increased memory limit
&lt;/li&gt;&lt;li&gt;Increased PCRE limits
&lt;/li&gt;&lt;li&gt;enabled error logging/verbose messages
&lt;/li&gt;&lt;li&gt;Installed a completely fresh version of wordpress with default theme/plugins on new Database in new directory under a new virtual host
&lt;/li&gt;&lt;li&gt;Installing an earlier version of wordpress (4.5.4) which solves the issue
&lt;/li&gt;&lt;li&gt;Testing from multiple devices
&lt;/li&gt;&lt;li&gt; Disabling mod_security for that vhost
&lt;/li&gt;&lt;/ol&gt;&lt;hr /&gt;
&lt;p&gt;
Steps to reproduce:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;from shell:
&lt;ul&gt;&lt;li&gt;adduser 'testuser'
&lt;/li&gt;&lt;li&gt;add entry into vhosts.conf  (apache configuration)
&lt;/li&gt;&lt;li&gt;update DNS server for new site
&lt;/li&gt;&lt;li&gt;download Wordpress 4.6.1 from the website
&lt;/li&gt;&lt;li&gt;upload to FTP
&lt;/li&gt;&lt;li&gt;unzip  to ~/wordpress/
&lt;/li&gt;&lt;li&gt;mv  ~/wordpress/* ~/
&lt;/li&gt;&lt;li&gt;copy the wp-config-sample.php to wp-config.php
&lt;/li&gt;&lt;li&gt;log into mysql create db/user/grant permissions
&lt;/li&gt;&lt;li&gt;enter necessary information into wp-config.php
&lt;/li&gt;&lt;li&gt;install wp successfully
&lt;/li&gt;&lt;li&gt;log in with  supplied username/password
&lt;/li&gt;&lt;li&gt; redirects to  /wp-admin/
&lt;/li&gt;&lt;li&gt;results in a blank page (no errors on any log files or on screen)
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Response from Server:
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
  "log": {
    "version": "1.1",
    "creator": {
      "name": "Firefox",
      "version": "47.0.1"
    },
    "browser": {
      "name": "Firefox",
      "version": "47.0.1"
    },
    "pages": [
      {
        "startedDateTime": "2016-09-24T04:55:20.515-07:00",
        "id": "page_1",
        "title": "http://td.datafault.net/wp-admin/",
        "pageTimings": {
          "onContentLoad": -1,
          "onLoad": -1
        }
      }
    ],
    "entries": [
      {
        "pageref": "page_1",
        "startedDateTime": "2016-09-24T04:55:20.515-07:00",
        "time": 331,
        "request": {
          "bodySize": 0,
          "method": "GET",
          "url": "http://td.datafault.net/wp-admin/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "td.datafault.net"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.5"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Referer",
              "value": "http://td.datafault.net/wp-login.php"
            },
            {
              "name": "Cookie",
              "value": ""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            }
          ],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.2.1381971762.1474703226"
            },
            {
              "name": "wordpress_4f17dc05329014159271b6238bf5fc89",
              "value": ""
            },
            {
              "name": "wordpress_logged_in_4f17dc05329014159271b6238bf5fc89",
              "value": ""
            },
            {
              "name": "wordpress_test_cookie",
              "value": "WP+Cookie+check"
            }
          ],
          "queryString": [],
          "postData": {
            "mimeType": "",
            "params": [],
            "text": ""
          },
          "headersSize": 857
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "no-cache, must-revalidate, max-age=0"
            },
            {
              "name": "Connection",
              "value": "Keep-Alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Content-Type",
              "value": "x-http-php"
            },
            {
              "name": "Date",
              "value": "Sat, 24 Sep 2016 11:46:13 GMT"
            },
            {
              "name": "Expires",
              "value": "Wed, 11 Jan 1984 05:00:00 GMT"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5, max=100"
            },
            {
              "name": "Server",
              "value": "Apache/2.4.12 (Unix) OpenSSL/1.0.1e"
            },
            {
              "name": "X-Frame-Options",
              "value": "SAMEORIGIN"
            }
          ],
          "cookies": [],
          "content": {
            "mimeType": "text/plain",
            "size": 0,
            "text": ""
          },
          "redirectURL": "",
          "headersSize": 324,
          "bodySize": -1
        },
        "cache": {},
        "timings": {
          "blocked": 0,
          "dns": 0,
          "connect": 5,
          "send": 0,
          "wait": 326,
          "receive": 0
        },
        "serverIPAddress": "10.0.0.4",
        "connection": "80"
      }
    ]
  }
}
&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;All other pages work fine as far as I can tell
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sat, 24 Sep 2016 11:05:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:10/1474715119143134</guid>
      <description>&lt;p&gt;
Indeed, and nothing stops you just writing the shortcode yourself: go to media library, identify object ID, insert shortcode manually in text editor.
&lt;/p&gt;
&lt;p&gt;
For images, I think this method would provide an even cleaner and more flexible method for dealing with image substitution (e.g. for responsive designs, use of CDN and so on).
&lt;/p&gt;
&lt;p&gt;
Only question for me is whether this should use a standard "shortcode" or whether a new/private facility should be created so that it is clearly a separate function.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Sat, 24 Sep 2016 11:01:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:9/1474714876646544</guid>
      <description>&lt;p&gt;
Oh, ok... Now I get what you're saying. I misunderstood your comment above.
But still... Not everyone uses TinyMCE. I know I don't... I just go to the media library, get the URL of the image I want to use, and then write my own markup in the text editor.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:56:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:8/1474714585900060</guid>
      <description>&lt;p&gt;
Why would you need to change the database schema?  Wouldn't the following work:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;New option in TinyMCE to "insert reference to internal content", perhaps showing a popup/filterable list of items; when selected insert shortcode to reference the appropriate database object.
&lt;/li&gt;&lt;li&gt;New shortcode to expand reference to database object to URL.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
No backwards compatibility issues. Current content is unaffected. Users can still insert and edit URLs if they want.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:45:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:7/1474713944389194</guid>
      <description>&lt;p&gt;
@mdgl that would require significantly refactoring parts of WordPress Core... and would most probably cause backwards-compatibility issues. You'd need a mechanism to store those object references, another one to retrieve them ,expand them and so on. There a re a bunch of plugins out there that query the database directly, so all those would probably break if we change the schema.
The current implementation is battle-tested and just works. All it needs in my opinion is just a couple of tweaks...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:34:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:6/1474713250535813</guid>
      <description>&lt;p&gt;
Thinking more radically, why do we store explicit URLs that reference other WordPress managed content in any case? Shouldn't these be expanded dynamically as we generate the page, for example if we stored something like a shortcode in the database &lt;code&gt;[objref id="2392"]&lt;/code&gt;? This would allow us to deal with the http(s) issue, enable users to change slugs/permalinks as they wish and create great filtering opportunities for developers.  Of course you would still need to be able to insert absolute URLs if you want for references to external sites and other special cases.  In my view, a clear distinction between such "internal" and "external" links would be quite helpful.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37873 (Consolidate customizer CSS) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:22:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37873#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37873#comment:5/1474712552903850</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37873#comment:4" title="Comment 4"&gt;celloexpressions&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Thanks for volunteering to take this on @mrahmadawais!
I think the first step is to research duplication of styles and duplication of selectors, and to evaluate the potential areas where things could be consolidated. We're probably best off adding any new common classes as opposed to removing any, to avoid JS issues and minimize back-compat concerns.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Makes sense.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Any changes will have compatibility implications due to the ability to extend the core UI with custom panels, sections, and controls. In general, we should move away from the &lt;code&gt;accordion-&lt;/code&gt; classes as those are from UI that is no longer used.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Let me look into it.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I believe that &lt;code&gt;customize-nav-menus.css&lt;/code&gt; was largely duplicated from &lt;code&gt;customize-widgets.css&lt;/code&gt; and intended to all be merged into &lt;code&gt;customize-controls.css&lt;/code&gt; when the menu customizer plugin merged, but that didn't happen with all of the other work that was ongoing at that time.
There are also numerous pending patches that would be impacted by these changes. Depending on how much we want to clean up, it may be best to work on an actual patch during 4.7 RC and commit early for 4.8.
Also, previously and related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/30618" title="#30618: enhancement: Clean up Customizer Media Control CSS (closed: fixed)"&gt;#30618&lt;/a&gt;, &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/36733" title="#36733: enhancement: Use a custom customizer section for add-widgets and add-menu-items ... (new)"&gt;#36733&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/30713" title="#30713: enhancement: Customizer control subclasses (custom controls) should have all parent ... (closed: maybelater)"&gt;#30713&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think early 4.8 would make a lot more sense. But I will slowly start looking into it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>ThemeZee</dc:creator>

      <pubDate>Sat, 24 Sep 2016 09:35:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:39</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:39/1474709701694891</guid>
      <description>&lt;p&gt;
I would like to add my perspective as a theme author here.
&lt;/p&gt;
&lt;p&gt;
I agree that the Theme Editor is bad for users. I wish it would be removed. Users should not be able to edit PHP files, because they can easily break their sites.
&lt;/p&gt;
&lt;p&gt;
But I'm a really huge fan of adding a CSS Editor to the Customizer. I support my themes via email, wordpress.org forums and wordpress.com forums. I often provide CSS snippets as long as it is only some small visual customizations the user wants. I think WordPress users get in contact with CSS all the time, because we as developers often provide them with CSS code. Just look at the forums.
&lt;/p&gt;
&lt;p&gt;
Now a lot of themes include Custom CSS settings in their themes. There are also several very popular plugins for these. For me this only means that many users need this feature. A Core solution could improve the UI for users, because the CSS options are always at the same location. It will also handle sanitization and security much better than all the custom implementations in themes.
&lt;/p&gt;
&lt;p&gt;
WordPress.com gives users the possibility to add CSS code in the Customizer: &lt;a class="ext-link" href="https://en.support.wordpress.com/custom-design/editing-css/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://en.support.wordpress.com/custom-design/editing-css/&lt;/a&gt;
I think they should have some real user data that CSS options in the Customizer work well for users.
&lt;/p&gt;
&lt;p&gt;
I do not agree that users should not make CSS customizations. They can not break anything here like with the Theme Editor. The WordPress Backend will always work fine, and if they do not like their customizations they can always remove the CSS code.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>tfrommen</dc:creator>

      <pubDate>Sat, 24 Sep 2016 09:02:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:62</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:62/1474707775019151</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:61" title="Comment 61"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Something I missed to mention earlier: There is an issue with functions like &lt;code&gt;get_post_type_labels()&lt;/code&gt;/&lt;code&gt;_get_custom_object_labels()&lt;/code&gt;. Post type labels are initially registered via &lt;code&gt;register_post_type()&lt;/code&gt; which means they don't change when calling &lt;code&gt;switch_to_locale()&lt;/code&gt;. You can see that with &lt;a href="https://core.trac.wordpress.org/attachment/ticket/29783/user-language-admin-toolbar.php"&gt;the example plugin&lt;/a&gt; in the Add New menu for the Post and Page items.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There are even more issues, for example, when you have a Custom Post Type or Custom Taxonomy registered by using a translated slug. When you switch to a different locale, the rewrite rules (and thus the generated permalinks) do &lt;strong&gt;not&lt;/strong&gt; get adapted.
&lt;/p&gt;
&lt;p&gt;
The question is if coping with these things should be handled by the locale switcher, or not.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:51:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:61</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:61/1474707093444424</guid>
      <description>&lt;p&gt;
Something I missed to mention earlier: There is an issue with functions like &lt;code&gt;get_post_type_labels()&lt;/code&gt;/&lt;code&gt;_get_custom_object_labels()&lt;/code&gt;. Post type labels are initially registered via &lt;code&gt;register_post_type()&lt;/code&gt; which means they don't change when calling &lt;code&gt;switch_to_locale()&lt;/code&gt;. You can see that with &lt;a href="https://core.trac.wordpress.org/attachment/ticket/29783/user-language-admin-toolbar.php"&gt;the example plugin&lt;/a&gt; in the Add New menu for the Post and Page items.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:43:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:60</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:60/1474706614604457</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:58" title="Comment 58"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
No. I mainly created that ticket to keep discussions off from this one, but it's good to know where discussion is heading to make this class more future proof. The only thing I would rename at the moment is &lt;code&gt;restore_previous_locale()&lt;/code&gt; to &lt;code&gt;restore_current_locale()&lt;/code&gt; because of &lt;code&gt;restore_current_blog()&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not sure if we really have to be consistent with a naming which is semantically incorrect. But maybe we can provide both functions? &lt;code&gt;restore_current_locale()&lt;/code&gt; would empty the stack and set the locale to &lt;code&gt;$original_locale&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/26511/26511.5.diff" title="Attachment '26511.5.diff' in Ticket #26511"&gt;26511.5.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/26511/26511.5.diff" title="Download"&gt;​&lt;/a&gt; I removed the &lt;code&gt;get_user_locale()&lt;/code&gt; check (which had no test btw!) and improved the docs as well.
&lt;/p&gt;
&lt;p&gt;
I feel like the &lt;code&gt;add_filter()&lt;/code&gt; call should be moved outside the constructor. Any ideas?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Can't we move it to &lt;code&gt;default-filters.php&lt;/code&gt; as &lt;code&gt;add_filter( 'locale', array( $GLOBALS['wp_locale_switcher'], 'filter_locale' );&lt;/code&gt;? Or a simple &lt;code&gt;init()&lt;/code&gt; method which gets called in &lt;code&gt;wp-settings.php&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38150 (Stop using dashicons to show checked state of checkboxes) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:25:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38150#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38150#comment:1/1474705557236696</guid>
      <description>&lt;p&gt;
Context: &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design-dashicons/p1474658281000116"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.slack.com/archives/design-dashicons/p1474658281000116&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38152 (Clarify in the DocBlock that get_site_by_path() does not return exact ...) created</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:23:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38152</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38152/1474705422581622</guid>
      <description>&lt;p&gt;
Related Slack discussion: &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-multisite/p1474390310000390"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.slack.com/archives/core-multisite/p1474390310000390&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;get_site_by_path()&lt;/code&gt; does not return exact matches because it also searches sites with path = '/'. The same applies to &lt;code&gt;WP_Network::get_by_path()&lt;/code&gt;  but &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/class-wp-network.php?rev=37919&amp;amp;marks=253-258#L250"&gt;its DocBlock&lt;/a&gt; is much better. We should add a similar comment to &lt;code&gt;get_site_by_path()&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:02:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:216</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:216/1474704151265704</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:212" title="Comment 212"&gt;wonderboymusic&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
move any discussion to PRs over here - here is the present code diff:
&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you want to contribute code, send a PR with a novella of opinions. this ticket is losing its usefulness.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I would have added an issue to your Git repo but issues are turned off.  Sooo...
&lt;/p&gt;
&lt;p&gt;
How would you prefer to see a build script added to Grunt?  Can you call a PHP script, or does it need to be written in Javascript? &lt;em&gt;(I have not previously used Grunt as other people on our team handle front-end build.)&lt;/em&gt;  Any direction on your preferences would be appreciated.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:23:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:215</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:215/1474701793374323</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:210" title="Comment 210"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:207" title="Comment 207"&gt;schlessera&lt;/a&gt;:
&lt;strong&gt;Generating classmaps is trivial.&lt;/strong&gt;  My ~50 line classmap generator proof-of-concept that was included in my huge patch illustrates this.
So we can please refrain from using &lt;em&gt;"Composer can generate a classmap"&lt;/em&gt; as a reason to use Compser and instead move on to focus on any other potential benefits Composer can provide that I am evidently missing?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Well, you went ahead and renamed all of the class files just to make this possible (or better: to make coding your generator trivial).
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But not without having to using &lt;code&gt;is_file()&lt;/code&gt; a lot. Or are you suggesting that we go ahead and accept that it will &lt;strong&gt;always&lt;/strong&gt; be classmap based?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You can use whatever you want. The generated autoloader "is one or more arbitrary PHP file(s) that we let it generate". Whether you want to have &lt;code&gt;is_file()&lt;/code&gt; or not, whether you want to have unicorn ASCIIs in it, all possible!
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
My statement about staleness is now moot since nobody has taken any action on it.  So I have decide to move forward with a much more incremental approach, hence my numerous comments and additional planned comments today.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, exactly, but that is a very obvious and logical result. We are talking about a major paradigm shift here, this won't be done in a handful of days...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So that seems to me to be a very small benefit for all the intensity of debate.  Generating a classmap is almost trivial, as I have demonstrated.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, you demonstrated the contrary. You needed to refactor the entire codebase to get your generation working and your update went stale and useless in a matter of days.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But the autoloader generated by Composer will need to be modified as as Ryan McCue &lt;a href="https://core.trac.wordpress.org/ticket/36335?replyto=207#comment:180"&gt;points out&lt;/a&gt;.  Thus we really get no &lt;em&gt;"it just works"&lt;/em&gt; benefit from using the Composer autoloader and we get the overhead that it generates too.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, we modify the generator to generate the exact autoloader we need. That work is already done, btw (or at least the parts we could already agree on): &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/pull/1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/pull/1&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Then why don't we just debate the specific pros and cons of naming conventions -- as I was proposing we debate -- instead of getting back on the Composer soapbox right now?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because the ticket is about the autoloader, not about the coding standards.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
One of the benefits of having files named for their class is that it makes it performant to load the classmap dynamically, as would likely be the case for files in &lt;code&gt;/wp-content/&lt;/code&gt;.  Being able to scan a directory and grab the filenames as classnames means their is no potential breaking ambiguity in the conversion of the classname.
That said, I don't consider the file naming part critical, just a nice-to-have I would prefer that we adopt.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, totally agree, but completely irrelevant and unnecessary right now. We can generate whatever autoloader we need.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;What I do consider critical is that we stop having circular debates and move things forward&lt;/strong&gt; by finding things we can work on that do not require resolving the Composer debate, and that get us closer to seeing an autoloader included, no matter which autoloader it is.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We were already moving forward, and most of the work is done already in the GitHub repo for the feature project: &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/tree/autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/tree/autoloader&lt;/a&gt; . People agreed that it is too early to use Composer as a dependency manager, but they also agreed to use it as a build-time tool to simplify building an autoloader and keeping everything in sync. This is done in a feature project.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think you keep saying this has an advantage but from my vista is seems all those proposed advantages have turned out to not be real advantages.  If the main benefit is to save time then in the time we've debated this we could do that work you are trying to bypass three times over, and do a much better job.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We are actively working on this, in the GitHub repo. This was decided in a Slack meeting.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But even if we could, why work with a tool that writes code -- a tool that you have to work to tweak -- when the code is trivial to write by hand?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because you end up with a stale autoloader that does not notice that classes have changed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As an aside, you cannot generate this &lt;strong&gt;exact same&lt;/strong&gt; autoloader with Composer.  But I digress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, I can. Composer passes a list of classes, you then run it through whatever you want to generate a PHP file. Heck, you could even generate an animated GIF of your classes if you so want...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;And I don't see how Composer is preferable either, so let us first focus on what we can move forward, okay?&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, I'll just stop discussing here and continue working on the feature project. If you still want to try persuading people to move to something else, I'm fine with it, but I will (try to) not proceed further with this specific discussion.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:11:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:214</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:214/1474701062069851</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:07:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:213</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:213/1474700861520657</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:212" title="Comment 212"&gt;wonderboymusic&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
move any discussion to PRs over here - here is the present code diff:
&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you want to contribute code, send a PR with a novella of opinions. this ticket is losing its usefulness.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Perfect.
&lt;/p&gt;
&lt;p&gt;
To clarify; to which should we submit PRs to?
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress&lt;/a&gt; OR
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
And thanks.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:04:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:212</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:212/1474700666879598</guid>
      <description>&lt;p&gt;
move any discussion to PRs over here - here is the present code diff:
&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you want to contribute code, send a PR with a novella of opinions. this ticket is losing its usefulness.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 06:46:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:211</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:211/1474699598254697</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:209" title="Comment 209"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But if we ... start to discuss implementation details, file naming conventions, folder layout, etc... we will just end up with a "spaces-vs-tabs" debate and this will go nowhere.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Will we really?  My opinions will be driven by the factual benefits of any given approach. Hopefully others will do the same. Or said another way, I don't really care about what they are as long as they empower autoloading and ideally dynamic discovery.
&lt;/p&gt;
&lt;p&gt;
That said, the file naming conventions, folder layout are not super important &lt;strong&gt;other than that we have something&lt;/strong&gt; so that we can refactor the existing classes to make them autoloadable.  We can always change the file naming conventions folder layouts before code is shipped.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I have my own ideas about what layout and naming schemes would make sense for WordPress. But this ticket is complicated enough as it is, we don't need to add more factors.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Then please tell me what your proposal is to move things forward to address the things we all can agree on?
&lt;/p&gt;
&lt;p&gt;
Without a viable alternative or condemnation from the core contributors here the best thing to do is move forward and start creating patches because actual code is more actionable than circular debates.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 06:35:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:210</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:210/1474698931794940</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:207" title="Comment 207"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Composer Autoloader Generator parses the actual PHP in the files to discover the classes. It doesn't care about the filenames, it manages several classes in one file, etc...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Generating classmaps is trivial.&lt;/strong&gt;  My ~50 line classmap generator proof-of-concept that was included in my huge patch illustrates this.
&lt;/p&gt;
&lt;p&gt;
So we can please refrain from using &lt;em&gt;"Composer can generate a classmap"&lt;/em&gt; as a reason to use Compser and instead move on to focus on any other potential benefits Composer can provide that I am evidently missing?
&lt;/p&gt;
&lt;p&gt;
Wait. Strike that.  &lt;em&gt;Can we just table Composer-or-Not for now and work on moving anything else can we move foward?&lt;strong&gt;
&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The resulting autoloader that is built from that parse step can be completely customized to whatever we think is best. We can include any special WP cases, we can optimizie how we want, etc...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
But not without having to using &lt;code&gt;is_file()&lt;/code&gt; a lot. Or are you suggesting that we go ahead and accept that it will &lt;strong&gt;always&lt;/strong&gt; be classmap based?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...this is the exact reason why I initially proposed to use Composer as a build-time tool in the first place.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My statement about staleness is now moot since nobody has taken any action on it.  So I have decide to move forward with a much more incremental approach, hence my numerous comments and additional planned comments today.
&lt;/p&gt;
&lt;p&gt;
Instead I plan on offering patches that either won't be stale or will be generated via a shell script.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;We will not optimize the WordPress Core in one or two releases&lt;/strong&gt;, and I'm surprised you would think such a thing to be feasible.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And I am surprised that you think it is such an overwhelming job. Sure, to get it to 100% will take a while.  But based on the analysis I have been doing &lt;strong&gt;I see no reason why we can't get to 80% in short order.&lt;/strong&gt;  The only thing holding us back is will and needless bikeshedding.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The goal with using Composer Autoloader Generator as a build-time tool was always to just have a very quick, first step to make autoloading even possible, to get to the real problem: needing to shuffle classes, files and folders around for several releases to optimize the Core for autoloading.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So that seems to me to be a very small benefit for all the intensity of debate.  Generating a classmap is almost trivial, as I have demonstrated.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In the meantime, with every change, a simple re-run of the Grunt build will fix whatever you broke in the autoloader. And I've said it before: the actual autoloader that is generated by Composer can be freely adapted.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
But the autoloader generated by Composer will need to be modified as as Ryan McCue &lt;a href="https://core.trac.wordpress.org/ticket/36335?replyto=207#comment:180"&gt;points out&lt;/a&gt;.  Thus we really get no &lt;em&gt;"it just works"&lt;/em&gt; benefit from using the Composer autoloader and we get the overhead that it generates too.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So, that being said, I would be relieved if we could stop talking about how optimized a specific autoloader implementation is, as that is completely besides the point at this time. Also, we don't need to rename or move files at this point, Composer will just take care of it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Then why don't we just debate the specific pros and cons of naming conventions -- as I was proposing we debate -- instead of getting back on the Composer soapbox right now?
&lt;/p&gt;
&lt;p&gt;
One of the benefits of having files named for their class is that it makes it performant to load the classmap dynamically, as would likely be the case for files in &lt;code&gt;/wp-content/&lt;/code&gt;.  Being able to scan a directory and grab the filenames as classnames means their is no potential breaking ambiguity in the conversion of the classname.
&lt;/p&gt;
&lt;p&gt;
That said, I don't consider the file naming part critical, just a nice-to-have I would prefer that we adopt.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;What I do consider critical is that we stop having circular debates and move things forward&lt;/strong&gt; by finding things we can work on that do not require resolving the Composer debate, and that get us closer to seeing an autoloader included, no matter which autoloader it is.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/tree/autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/tree/autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is news to me, thanks.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;eliminates the advantage that initially brought us to Composer (hence your need to rename files and move stuff around),
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
I think you keep saying this has an advantage but from my vista is seems all those proposed advantages have turned out to not be real advantages.  If the main benefit is to save time then in the time we've debated this we could do that work you are trying to bypass three times over, and do a much better job.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Why debate a one-time process at the level of a fundamental architecture decision?&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;eliminates all other advantages that Composer would add in the future,
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Which is why I said &lt;strong&gt;let up bypass this Composer-or-Not and instead work on making core classes autoloadable&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
But since you bring it up again, as Ryan said I think this is a solution looking for a problem. So please detail your expected advantanges as they related to WordPress. This far all I have read is that Composer's advantages are &lt;em&gt;"because it is standard"&lt;/em&gt; and &lt;em&gt;"using is is a best practice"&lt;/em&gt;, but I have not read about any specific tangible benefits that using Composer with WordPress core would provide WordPress.
&lt;/p&gt;
&lt;p&gt;
No, wait.  That will only delay moving things forward.  But please do give those explanation later when the Composer-or-Not decision is back on the table.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;only seemingly adds one perceived advantage of its own (tightly optimized custom autoloader), which is not really an advantage, because you can generate this exact same autoloader with Composer Autoloader Generator.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
But even if we could, why work with a tool that writes code -- a tool that you have to work to tweak -- when the code is trivial to write by hand?
&lt;/p&gt;
&lt;p&gt;
As an aside, you cannot generate this &lt;strong&gt;exact same&lt;/strong&gt; autoloader with Composer.  But I digress.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Unless I'm missing something crucial, and don't see in what ways this solution would be preferable.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;And I don't see how Composer is preferable either, so let us first focus on what we can move forward, okay?&lt;/strong&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 24 Sep 2016 06:23:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:209</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:209/1474698194906141</guid>
      <description>&lt;p&gt;
@MikeSchinkel: I did not say that what you are discussing is not necessary. But if we now "side-step" the main question and start to discuss implementation details, file naming conventions, folder layout, etc... we will just end up with a "spaces-vs-tabs" debate and this will go nowhere.
&lt;/p&gt;
&lt;p&gt;
I have my own ideas about what layout and naming schemes would make sense for WordPress. But this ticket is complicated enough as it is, we don't need to add more factors.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:48:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:208</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:208/1474696123646070</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:207" title="Comment 207"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@MikeSchinkel : I think you're completely derailing this ticket. If you want to discuss changing the WordPress Coding Style, or the WordPress folder layout, please do so in a new ticket.
Reading through the last handful of comments, it seems like I still wasn't able to fully communicate what Composer brings to the table.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Please re-read &lt;a href="http://core.trac.wordpress.org/ticket/36335?replyto=207#comment:204"&gt;comment #204&lt;/a&gt; where I said &lt;em&gt;(with added &lt;strong&gt;bold&lt;/strong&gt;):&lt;/em&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Thus far the big debate has been over "use a composer autoloader" vs. "use an autoloader optimized for WP" and that has been contentious.&lt;strong&gt; So let me suggest a different first step that I think that maybe all of us will see the need for&lt;/strong&gt; (or at least all of us that would like to see an autoloader built in to WP core.)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
Proposal: First discuss making core files autoloadable, and then divide and conquer to analyze the core files in need of changes? Some files will be very easy to make autoloadable whereas others will be require more finesse. &lt;em&gt;Because without making core files autoloadable the "which autoloader" question is moot.&lt;/em&gt; Why not go ahead and prepare patches to apply that are easy to apply and that we know will not break anything?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My latest tickets have tried to &lt;strong&gt;sidestep the debate&lt;/strong&gt; and work on things we'd need &lt;strong&gt;with or without&lt;/strong&gt; a Composer autoloader.  &lt;em&gt;So how is that derailing the ticket?!?&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:42:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:207</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:207/1474695736322726</guid>
      <description>&lt;p&gt;
@MikeSchinkel : I think you're completely derailing this ticket. If you want to discuss changing the WordPress Coding Style, or the WordPress folder layout, please do so in a new ticket.
&lt;/p&gt;
&lt;p&gt;
Reading through the last handful of comments, it seems like I still wasn't able to fully communicate what Composer brings to the table.
&lt;/p&gt;
&lt;p&gt;
When going with Composer, we don't buy into the Composer Autoloader, as the standard Composer Autoloader is unusable for WordPress. What we want is the &lt;strong&gt;Composer Autoloader Generator&lt;/strong&gt;. We want to add another tool to the build-time chain that let's us parse our current code base and create an autoloader adapted to our needs. The Composer Autoloader Generator parses the actual PHP in the files to discover the classes. It doesn't care about the filenames, it manages several classes in one file, etc...
&lt;/p&gt;
&lt;p&gt;
The resulting autoloader that is built from that parse step can be completely customized to whatever we think is best. We can include any special WP cases, we can optimizie how we want, etc...
&lt;/p&gt;
&lt;p&gt;
So, when you state above:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
but this patch will become stale pretty quickly so if we want to move forward with this we would be best to make a decision sooner than later otherwise most of the work I did will have to be redone again on a future version of WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
...this is the exact reason why I initially proposed to use Composer as a build-time tool in the first place. &lt;strong&gt;We will not optimize the WordPress Core in one or two releases&lt;/strong&gt;, and I'm surprised you would think such a thing to be feasible.
&lt;/p&gt;
&lt;p&gt;
The goal with using Composer Autoloader Generator as a build-time tool was always to just have a very quick, first step to make autoloading even possible, to get to the real problem: needing to shuffle classes, files and folders around for several releases to optimize the Core for autoloading. In the meantime, with every change, a simple re-run of the Grunt build will fix whatever you broke in the autoloader. And I've said it before: the actual autoloader that is generated by Composer can be freely adapted.
&lt;/p&gt;
&lt;p&gt;
So, that being said, I would be relieved if we could stop talking about how optimized a specific autoloader implementation is, as that is completely besides the point at this time. Also, we don't need to rename or move files at this point, Composer will just take care of it. The only thing that needs to be done is to remove global functions from files we want to have autoloaded, which has already ben done in the initial patch by @wonderboymusic and can currently be seen in the &lt;code&gt;autoloader&lt;/code&gt; branch on &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/tree/autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/tree/autoloader&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
@MikeSchinkel the way I see it, the solution you propose:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;eliminates the advantage that initially brought us to Composer (hence your need to rename files and move stuff around),
&lt;/li&gt;&lt;li&gt;eliminates all other advantages that Composer would add in the future,
&lt;/li&gt;&lt;li&gt;only seemingly adds one perceived advantage of its own (tightly optimized custom autoloader), which is not really an advantage, because you can generate this exact same autoloader with Composer Autoloader Generator.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Unless I'm missing something crucial, I don't see in what ways this solution would be preferable.
&lt;/p&gt;
&lt;p&gt;
@TJNowell If anyone wants to play around with benchmarks, please go ahead. I personally will not waste time with benchmarks right now. If the goal is to see what autoloader &lt;strong&gt;implementation&lt;/strong&gt; is faster, then this has nothing to do with Composer/no-Composer. And if the goal is to see whether an autoloader even makes sense in the first place, then I'm baffled, and must admit that we will never find out, because first of all the benefits are not only about performance, and secondly, we would need to implement it and optimize Core for it first to get proof. So, in essence we're trying to benchmark the chicken and egg problem.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:40:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:38/1474695601780139</guid>
      <description>&lt;p&gt;
Has anyone thought about &lt;code&gt;&amp;lt;!--nextpage--&amp;gt;&lt;/code&gt;?
I think the issues of creating content and displaying it are too mixed together. A theme does impact content in terms of menu names, widget area names, and page templates. It seems like the main job of a theme is presentation, not creation. And the Customizer lives under the Appearance menu also. So the theme options specific to a page template logically go in the editor meta box. And anything about content logically goes in the editor itself, unless it's a widget area that can be positioned in different places.
&lt;/p&gt;
&lt;p&gt;
I wouldn't worry about discoverability as much as explainability. I've used WordPress a lot and don't understand what this thing is for. Why you can't just put the content of the page in the page? Then it works with every theme. I've made front pages with dynamic content by using a plugin called Shortcode Any Widget.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:39:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:206</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:206/1474695582255366</guid>
      <description>&lt;p&gt;
&lt;strong&gt;One Class Per File vs. Multiple Classes per File&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Next we consider classes that are contained in a file by themselves vs. files that contain multiple classes.
&lt;/p&gt;
&lt;p&gt;
There appear to be &lt;code&gt;57&lt;/code&gt; classes that are each contained in a file that contains at least one other class. These are all in the &lt;code&gt;wp-includes&lt;/code&gt; directory. Most of these come from externally included projects such as:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;IXR&lt;/code&gt; -  &lt;em&gt;The Incutio XML-RPC Library&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Text/Diff&lt;/code&gt; - &lt;em&gt;General API for generating and formatting diffs&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;pomo&lt;/code&gt; - &lt;em&gt;Translations&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;SimplePie&lt;/code&gt; - &lt;em&gt;RSS and Atom feed parsing&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;ID3&lt;/code&gt; - &lt;em&gt;Extracts information from MP3s &amp;amp; other multimedia files&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;MagpieRSS&lt;/code&gt; - &lt;em&gt;RSS and Atom parser (deprecated in WP)&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Services_JSON&lt;/code&gt; - &lt;em&gt;Converts to and from JSON format&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;AtomLib&lt;/code&gt; - &lt;em&gt;Atom Syndication Format PHP Library&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;PHPMailer&lt;/code&gt; - &lt;em&gt;PHP email creation and transport class&lt;/em&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Some of these include constant declarations inside the class files &lt;em&gt;(ugh!)&lt;/em&gt; including &lt;code&gt;MagpieRSS&lt;/code&gt;, &lt;code&gt;Test/Diff&lt;/code&gt;, &lt;code&gt;SimplePie&lt;/code&gt;, &lt;code&gt;ID3&lt;/code&gt;, and &lt;code&gt;pomo&lt;/code&gt;.  That means to autoload these we'd have to extract the defines and decide where and when to include them &lt;em&gt;(my huge patch from a last week moved them into &lt;code&gt;/wp-includes/constants&lt;/code&gt; and &lt;code&gt;/wp-admin/contstants&lt;/code&gt; and then loaded them from &lt;code&gt;/wp-settings.php&lt;/code&gt; and .&lt;code&gt;/wp-admin/includes/admin/php&lt;/code&gt;, respectively.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Some of these would be easy to break out since they do not perform any &lt;code&gt;require()/require_once()&lt;/code&gt; or &lt;code&gt;include()/include_once&lt;/code&gt; and are not loaded with dynamic name generation, such as &lt;code&gt;PHPMailer&lt;/code&gt;, &lt;code&gt;AtomLib&lt;/code&gt;, and &lt;code&gt;Services_JSON&lt;/code&gt;, but &lt;strong&gt;since they came from external code I don't know what the core team's opinion is on restructuring their code?&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Other files containing classes would be really easy to break out but since I analyzed WP &lt;code&gt;4.6.1&lt;/code&gt; as I write this I am discovering that someone already has done this in &lt;code&gt;trunk&lt;/code&gt;.  So no need for a patch for these as I had planned!
&lt;/p&gt;
&lt;p&gt;
As for the ones above that would not be easy I expect we will tackle them last, or maybe not at all, all depending on what the core team decides.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) reopened</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:23:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:54</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:54/1474694602912108</guid>
      <description>&lt;p&gt;
We need to render panels' content when the container isn't detached. This is fixed by the latest patch on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37661" title="#37661: feature request: A New Experience for Discovering, Installing, and Previewing Themes in ... (closed: fixed)"&gt;#37661&lt;/a&gt; and not worth breaking out separately and cross-coordinating with the other patch again since that's most likely the only instance where it will break currently in existence.
&lt;/p&gt;
&lt;p&gt;
However, I'm reopening this ticket for tracking so that we can ensure we pick it up regardless of the other ticket's status. We'd likely commit this fix separately from that feature, but it doesn't make sense to hinder testing on that project in the meantime by rushing this change in here.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:12:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:53</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:53/1474693967851850</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by westonruter. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474693964001112"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:11:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:43</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:43/1474693907955642</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by celloexpressions. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474693904001110"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:11:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:42/1474693889649841</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37661/37661.4.diff" title="Attachment '37661.4.diff' in Ticket #37661"&gt;37661.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37661/37661.4.diff" title="Download"&gt;​&lt;/a&gt; is a refresh for &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38648" title="Customize: Re-architect and harden panel/section UI logic.
Removes ..."&gt;[38648]&lt;/a&gt;, which represents a significant refactoring of the way sections and panels work internally, see forthcoming Make/Core post.
&lt;/p&gt;
&lt;p&gt;
We still need feedback and testing. Please update to latest trunk, then apply this latest patch and hard refresh and empty the cache in your browser to test the patch directly.
&lt;/p&gt;
&lt;p&gt;
Also, please take a look at the user testing results: &lt;a class="ext-link" href="https://make.wordpress.org/design/2016/09/23/user-testing-the-new-customizer-themes-experience/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/design/2016/09/23/user-testing-the-new-customizer-themes-experience/&lt;/a&gt;. Please share your thoughts on how those go and potential improvements in the comments, then we can bring specific action items back to the ticket for implementation. Additional interpretations there are much appreciated, as I'm certainly biased at this point (and influenced parts of the tests to keep things moving since they were done in person).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37661.4.diff attached to Ticket #37661</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 04:59:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37661/37661.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37661/37661.4.diff/1474693176724691</guid>
      <description>&lt;p&gt;
Refresh for &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38648" title="Customize: Re-architect and harden panel/section UI logic.
Removes ..."&gt;[38648]&lt;/a&gt;. Please report any bugs with the panel and sections properly opening/closing if they come up.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 04:35:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:205</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:205/1474691702225260</guid>
      <description>&lt;p&gt;
Taking a look at the files in WordPress core 4.6.1 I found many different ways to group them that will help us decide how to move forward with patches:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Admin vs. includes&lt;/strong&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Classes declared in files found within &lt;code&gt;/wp-admin&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Classes declared in files found within &lt;code&gt;/wp-includes&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Ideally for classes found in those directories we would like to keep them within those directories, but if we need to anticipate an autoloader that will some day not use a classmap it will be more performant to have one root directory for files.
&lt;/p&gt;
&lt;p&gt;
So this distinction of admin vs. includes will not really matter unless we assume we will always use a classmap. If we can always assume a classmap then we could leave the files within the same top level directories where they are currently found.  But since so many people here want to have the option of moving away from a classmap I will assume we will have one autoloader root combining files from both of these sources.
&lt;/p&gt;
&lt;p&gt;
BTW, if we ever do have an autoloader that does not use a classmap the &lt;code&gt;is_file()&lt;/code&gt; calls used to validate if a file exits before an attempt to load it is made can add up and can be a significant performance hit. Or at least that was made clear to me when several of our projects were code-reviewed by 10up for an enterprise client. Their code sniffer, which I understand was the same code sniffer used for WordPress VIP flagged all calls to &lt;code&gt;is_file()&lt;/code&gt; as errors and would not allow us to use them if not cached in persistent cache.
&lt;/p&gt;
&lt;p&gt;
The above is one reason I have been so adamant that our autoloader needs to be classmap based.  But the patches I am currently working on to make WordPress core classes autoloadable will not require a classmap so there is no reason to halt progress waiting on a decision about this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 04:17:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:204</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:204/1474690625551065</guid>
      <description>&lt;p&gt;
Following up since it has been 4 days since last post and no comments on what was previously a very active ticket &lt;em&gt;(and it is Friday evening so I have time to!)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Thus far the big debate has been over &lt;em&gt;"use a composer autoloader"&lt;/em&gt; vs. &lt;em&gt;"use an autoloader optimized for WP"&lt;/em&gt; and that has been contentious. So let me suggest a different first step that I think that maybe all of us will see the need for &lt;em&gt;(or at least all of us that would like to see an autoloader built in to WP core.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Proposal: First discuss making core files autoloadable, and then divide and conquer to analyze the core files in need of changes?&lt;/strong&gt;  Some files will be very easy to make autoloadable whereas others will be require more finesse. Because without making core files autoloadable the &lt;em&gt;"which autoloader"&lt;/em&gt; question is moot.  Why not go ahead and prepare patches to apply that are easy to apply and that we know will not break anything?
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If we use a classmap autoloader we can have great flexibility in how we organize files. In my prior patch I created two locations for autoload files: &lt;code&gt;wp-admin/autoload&lt;/code&gt; and &lt;code&gt;wp-includes/autoload&lt;/code&gt;, for hopefully obvious reasons. However if we want to plan for the potential to use a Composer autoloader &lt;strong&gt;so that we can move this ticket forward&lt;/strong&gt; then we will need to have one root location for autoload files. This could be &lt;code&gt;wp-autoload&lt;/code&gt; but based on some prior related comments on this thread I think some people might object to a new directory in the root?  Putting it in &lt;code&gt;wp-includes/autoload&lt;/code&gt; and then moving all files from within &lt;code&gt;wp-admin&lt;/code&gt; that need to be autoloaded just feels wrong.  &lt;strong&gt;So, can we discuss this point:  What should the autoloader's root directory be?&lt;/strong&gt;   In the interim I am going to use &lt;code&gt;wp-autoloader&lt;/code&gt; but that will be trivially easy to change if we so desire. &lt;em&gt;(if we do not need to leave the option open to use a Composer autoloader then we can easily just use &lt;code&gt;wp-admin/autoload&lt;/code&gt; and &lt;code&gt;wp-includes/autoload&lt;/code&gt;.)
&lt;/em&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;No matter which autoloader we ultimately choose the autoloader must derive the file name from the class name, so I propose we change the file naming convention for autoloaded classes to be their classname, e.g. &lt;code&gt;wp-autoloader/WP_Query.php&lt;/code&gt; vs. the current &lt;code&gt;wp-includes/query.php&lt;/code&gt;.  &lt;strong&gt;Can we get a thumbs-up or a thumbs-down for this approach?&lt;/strong&gt; And if a thumbs-down it will help if you provide a detailed reason why not along with a better alternate proposal including the benefits for the alternate approach?
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
I'll continue with details related to dividing an conquering on another ticket so these two questions do not get lost.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34690 (when user login is required to comment, there should be a link to ...) updated</title>
      
        <dc:creator>mark-k</dc:creator>

      <pubDate>Sat, 24 Sep 2016 03:55:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34690#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34690#comment:3/1474689340716523</guid>
      <description>&lt;p&gt;
@jignesh.nakrani yes, the flow exists for the user, but when a non registered user sees this message for the first time he do not have any idea that the login form will also enable him to register, and in any case it is a two steps thing that could have been made into one.
&lt;/p&gt;
&lt;p&gt;
@rachelbaker sorry for being lazy but it is early morning over here.... Is there any patch creation flow using the git repository, or does everything still needs to go via SVN?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 24 Sep 2016 02:58:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:38/1474685938532351</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:36" title="Comment 36"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I am pretty firmly against introducing another way for adding "hacks" to WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My sentiments exactly. I spent 2 years as a moderator of a popular theme forum, and most of those users had no clue what CSS is or what to type in this new editor. Having yet another place to look for CSS will make it that much harder for support.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Apart from the above there are several other things that are pretty bad:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inadequate space for editing/writing. Try resizing your coding (text) editor to 275px width and edit something for 10-15 min. It's really bad.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
The editor space needs to be adjustable. And at the point of editing, it's best to be able to see the HTML of a page, not the rendering. How else will you know what selectors to use?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;"Deceiving" preview. CSS hacks affect the whole site but the user can see only one template in the preview. For example it is pretty easy to make a change that "looks good" on the front page but breaks the archive pages, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
And how do you preview/test the responsiveness of your CSS (desktop, mobile)?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In addition there is no good way to make the user entered CSS "secure".
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I addressed this issue earlier, but I don't know if anyone "got" it. If the CSS lives in a file, then anything not CSS in there is a CSS error instead of treated as HTML.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If it has to be theme specific, have you considered that the post type is like an attachment and the CSS is actually stored in a file? This way the storage is easier (CSS can be difficult to get into the database correctly), and the inclusion in the header is better (using the src attribute), and the browser can cache the file and it can be served zipped.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36534 (Media Upload Issue Since 4.5 Upgrade) updated</title>
      
        <dc:creator>megabulk2</dc:creator>

      <pubDate>Sat, 24 Sep 2016 02:28:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36534#comment:95</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36534#comment:95/1474684105552601</guid>
      <description>&lt;p&gt;
Affecting me on WestHost, WP version 4.6.1.
The two fixes to limit the ImageMagick threads (via .htaccess &lt;a href="https://core.trac.wordpress.org/ticket/36534#comment:11"&gt;https://core.trac.wordpress.org/ticket/36534#comment:11&lt;/a&gt; or patching class-wp-image-editor-imagick.php &lt;a href="https://core.trac.wordpress.org/ticket/36534#comment:10"&gt;https://core.trac.wordpress.org/ticket/36534#comment:10&lt;/a&gt;) didn't work, but adding the code to functions.php to switch the image engine to gd did the trick &lt;a href="https://core.trac.wordpress.org/ticket/36534#comment:25"&gt;https://core.trac.wordpress.org/ticket/36534#comment:25&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
And I filed a ticket with them and asked them to look into their configuration of OpenMP. I hope they deal with it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:46:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:37/1474677984460857</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:36" title="Comment 36"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Theme Editor represents an important part of WordPress' mission to democratizing publishing
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, it doesn't. It has nothing to do with democratizing publishing. All it does is making it a bit easier for users to "shoot themselves in the foot".
&lt;/p&gt;
&lt;p&gt;
I'm actually thinking we should be discussing shipping WordPress with &lt;code&gt;define( 'DISALLOW_FILE_EDIT', true );&lt;/code&gt; in wp-config. The explanation in the codex makes a lot of sense:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I've pretty consistently heard from project leadership over the years that there is no chance that the theme/plugin editors will go away or be turned off in core, and serve an important purpose similar to what I've described here. Is this opinion shared by other lead developers or solely yours? Or am I recalling that incorrectly, and if so, why are these editors still on by default in core?
&lt;/p&gt;
&lt;p&gt;
In the future, this type of feedback from a lead developer should come sooner than nine months into a project if at all possible. I would also hope that this project could eventually lead to a compromise where the more dangerous, less user-friendly way to start customizing a site with code can be moved to a plugin. The purpose of this project is to make it harder for users to shoot themselves in the foot when they need to make code-based customizations.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In my opinion adding "theme hacks" through the customizer is plugin material, and the plugin should be able to provide adequate support to users that break their sites.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There's a big terminology difference between "hack" and customization. Being CSS, the focus is on visual adjustments, or customizations, and I wouldn't describe those types of changes as hacks, but maybe that's just me. This is also not unlike the way child themes are designed to extend and customize parent themes.
&lt;/p&gt;
&lt;p&gt;
As I mentioned above, there are easily enough plugin-based solutions (and even many in themes) to justify a core solution. I would also anticipate there being less of a support burden throughout the ecosystem with something like this, as support volunteers already using CSS as needed would no longer need to get the user set up with a plugin to add it, and those that previously suggested edits in the theme editor where the could have taken the site down may be able to suggest this feature instead.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Apart from the above there are several other things that are pretty bad:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inadequate space for editing/writing. Try resizing your coding (text) editor to 275px width and edit something for 10-15 min. It's really bad.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Line lengths are generally pretty short for CSS specifically. The width is also variable based on device size (potentially even more so with my proposal on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/32296" title="#32296: enhancement: Customize: Increase width of controls pane to give more room on high ... (closed: fixed)"&gt;#32296&lt;/a&gt;). We shouldn't make feature decisions based on the current customizer UI, which could always change; we could also bump the textarea out to be wider if we feel that that's more important than maximizing the size of the preview in this instance.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;"Deceiving" preview. CSS hacks affect the whole site but the user can see only one template in the preview. For example it is pretty easy to make a change that "looks good" on the front page but breaks the archive pages, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Users can navigate to different pages on their site within the preview, and even preview different sized screens as they customize the CSS. Perhaps the help text associated with this feature should explicitly suggest doing that? By leveraging the customizer framework, we can provide a much better and less-likely-to-break-things environment for the user than other solutions.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In addition there is no good way to make the user entered CSS "secure". CSSTidy and similar tools can check/fix the syntax but cannot sanitize the CSS for security purposes. I'm not sure such tools exist. New versions of the browsers introduce support for new CSS features pretty much every month. Don't think it is feasible even trying to sanitize all of them. The only way would be to severely limit what is supported then parse the CSS and remove everything else.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I can't provide much input here, but surely this can't be worse in terms of security than being able to edit PHP files directly within the theme and plugin editors? We can decide what the appropriate capability is here, such as &lt;code&gt;edit_files&lt;/code&gt;, if that helps.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38144 (WP 4.6.1 getting an error in PHP 7.1) updated</title>
      
        <dc:creator>hoang2016</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:44:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38144#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38144#comment:3/1474677876120040</guid>
      <description>&lt;p&gt;
Thank you for your advice
&lt;/p&gt;
&lt;p&gt;
I tried install WP 4.7 (beta) as tester the problem had been solved
&lt;/p&gt;
&lt;p&gt;
Before all you guy try to install WP 4.7 or update it later
&lt;/p&gt;
&lt;p&gt;
I strong recommended that backup (fully),deactivate all plugins, and make a copy of wp-content foler
&lt;/p&gt;
&lt;p&gt;
sincerely,
&lt;/p&gt;
&lt;p&gt;
Hoang2016
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37980 (Don't attach events to customizer section headings with cannot-expand class) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:18:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37980#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37980#comment:7/1474676296531314</guid>
      <description>&lt;p&gt;
Cannot-expand headings should not be focusable; if there is a focusable element within them, it would be a distinct link or button element that's separate. Not applying the cannot-expand styling when the element is focusable is a good way to ensure that developers remember to remove the &lt;code&gt;tabindex=0&lt;/code&gt; from section markup that's copied from expandable core sections. On the other hand, it could look broken for users, but if we also unstyle it on focus, the accessible experience is even worse. Anyone else have thoughts here?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38128 (Twitter Embed - Enhancement change theme) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:12:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38128#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38128#comment:2/1474675923061451</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt;, &lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Unless this is something that Twitter exposes via their oEmbed API, this is a wontfix I'm afraid. Some links to docs would help assess this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:10:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:2/1474675804565928</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
What are some example use cases of this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:09:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:5/1474675740730531</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29158 (Customizer UI Design lacks contrast for visual hierarchy and does not ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:08:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29158#comment:80</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29158#comment:80/1474675701612722</guid>
      <description>&lt;p&gt;
I wouldn't be opposed to focusing the first control instead of the back arrow when opening a section, would that work @afercia? Or will the associated labels then be skipped?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37980 (Don't attach events to customizer section headings with cannot-expand class) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:01:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37980#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37980#comment:6/1474675261436771</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@celloexpressions There seems to be a problem in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37980/37980.2.diff" title="Attachment '37980.2.diff' in Ticket #37980"&gt;37980.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37980/37980.2.diff" title="Download"&gt;​&lt;/a&gt; with regards to styling elements that are focused. See &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37980/37980.2-defect.mov" title="Attachment '37980.2-defect.mov' in Ticket #37980"&gt;37980.2-defect.mov&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37980/37980.2-defect.mov" title="Download"&gt;​&lt;/a&gt;. If the desire is to ensure there is a focus style for accessibility, even though it cannot be clicked, then I think the &lt;code&gt;:hover&lt;/code&gt; needs to be overridden by the &lt;code&gt;:focus&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37980.2-defect.mov attached to Ticket #37980</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 23 Sep 2016 23:58:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37980/37980.2-defect.mov</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37980/37980.2-defect.mov/1474675130748641</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38151 (die() instead of wp_die() ?) updated</title>
      
        <dc:creator>johnjamesjacoby</dc:creator>

      <pubDate>Fri, 23 Sep 2016 23:04:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38151#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38151#comment:3/1474671863827844</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Patch looks good to me.
&lt;/p&gt;
&lt;p&gt;
Also, 6 years… 👍
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18493 (HTML emails) updated</title>
      
        <dc:creator>garrett-eclipse</dc:creator>

      <pubDate>Fri, 23 Sep 2016 22:37:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18493#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18493#comment:35/1474670221961851</guid>
      <description>&lt;p&gt;
I'll second @dmccan there as I love the new BP_Email system and think Wordpress would greatly benefit from a templating system to customize the default emails and allow introduction of custom emails from plugins, etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #34344,​34391,​35947 batch updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 23 Sep 2016 22:22:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=34344%2C34391%2C35947</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=34344%2C34391%2C35947/1474669329941702</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38648" title="Customize: Re-architect and harden panel/section UI logic.
Removes ..."&gt;38648&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Customize: Re-architect and harden panel/section UI logic.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Removes contents for sections and panels from being logically nested (in the DOM) in order to eliminate many issues related to using &lt;code&gt;margin-top&lt;/code&gt; hacks. The element containing the link to expand the content element for panels and sections is now a sibling element to its content element: the content is removed from being nested at initialization. The content element is now available in a &lt;code&gt;contentContainer&lt;/code&gt; property whereas the head element (containing the link to open the construct) is in a &lt;code&gt;headContainer&lt;/code&gt; property. The existing &lt;code&gt;container&lt;/code&gt; property is now a jQuery collection that contains both of these elements. Since the head element is no longer in an ancestor element to the &lt;code&gt;content&lt;/code&gt; element, the &lt;code&gt;aria-owns&lt;/code&gt; property is now used to maintain the relationship between the &lt;code&gt;headContainer&lt;/code&gt; and the &lt;code&gt;contentContainer&lt;/code&gt;. These changes are also accompanied by an improvement to the animation performance for the sliding panes.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props delawski, celloexpressions.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34391" title="#34391: defect (bug): Harden panel/section UI code by removing contents from being logically ... (closed: fixed)"&gt;#34391&lt;/a&gt;.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34344" title="#34344: defect (bug): Expanded section margin-top glitches when other section is deactivated (closed: fixed)"&gt;#34344&lt;/a&gt;.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35947" title="#35947: defect (bug): Customizer panel fails to fully expand leaving extra margin (closed: fixed)"&gt;#35947&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>batchmodify</category>
    </item><item>
      <title>Changeset [38648]: Customize: Re-architect and harden panel/section UI logic.  Removes ...</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 23 Sep 2016 22:22:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38648</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38648/1474669329435434</guid>
      <description>&lt;p&gt;
Customize: Re-architect and harden panel/section UI logic.
&lt;/p&gt;
&lt;p&gt;
Removes contents for sections and panels from being logically nested (in the DOM) in order to eliminate many issues related to using &lt;code&gt;margin-top&lt;/code&gt; hacks. The element containing the link to expand the content element for panels and sections is now a sibling element to its content element: the content is removed from being nested at initialization. The content element is now available in a &lt;code&gt;contentContainer&lt;/code&gt; property whereas the head element (containing the link to open the construct) is in a &lt;code&gt;headContainer&lt;/code&gt; property. The existing &lt;code&gt;container&lt;/code&gt; property is now a jQuery collection that contains both of these elements. Since the head element is no longer in an ancestor element to the &lt;code&gt;content&lt;/code&gt; element, the &lt;code&gt;aria-owns&lt;/code&gt; property is now used to maintain the relationship between the &lt;code&gt;headContainer&lt;/code&gt; and the &lt;code&gt;contentContainer&lt;/code&gt;. These changes are also accompanied by an improvement to the animation performance for the sliding panes.
&lt;/p&gt;
&lt;p&gt;
Props delawski, celloexpressions.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34391" title="#34391: defect (bug): Harden panel/section UI code by removing contents from being logically ... (closed: fixed)"&gt;#34391&lt;/a&gt;.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34344" title="#34344: defect (bug): Expanded section margin-top glitches when other section is deactivated (closed: fixed)"&gt;#34344&lt;/a&gt;.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35947" title="#35947: defect (bug): Customizer panel fails to fully expand leaving extra margin (closed: fixed)"&gt;#35947&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #37198 (Use `WP_Term_Query` for `wp_get_object_terms()`) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:26:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37198#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37198#comment:7/1474666017326687</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Are you planning to add documentation and default params back in? You could probably merge a lot of my first patch for that. Looking forward to see a comprehensive patch. :)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sorry about this, I got lazy :)
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37198/37198.3.diff" title="Attachment '37198.3.diff' in Ticket #37198"&gt;37198.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37198/37198.3.diff" title="Download"&gt;​&lt;/a&gt; is a more complete patch. It adds back in the documentation etc. Also:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I'm enforcing the 'term_count' thing by changing the value of 'order' to something legal before passing it to &lt;code&gt;parse_orderby()&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;I moved the deduplication logic so that it can be done in a single block (instead of conditionally using &lt;code&gt;array_unique()&lt;/code&gt;)
&lt;/li&gt;&lt;li&gt;Added some tests
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
So, fun fact, this change adds caching to all &lt;code&gt;wp_get_object_terms()&lt;/code&gt; calls. Yet we still have a separate &lt;code&gt;{$taxonomy}_relationships&lt;/code&gt; cache. We can't easily tear the latter bit out, because it's scattered through the codebase. Plus, it's a more durable cache than the &lt;code&gt;WP_Term_Query&lt;/code&gt; cache, because &lt;code&gt;WP_Term_Query&lt;/code&gt; is based on &lt;code&gt;last_changed&lt;/code&gt;, which will be bumped pretty frequently. Still, having two layers of cache makes me uneasy. I wrote a test that demonstrates that things are working OK. Do you have thoughts about it, @flixos90 ?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38151 (die() instead of wp_die() ?) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:24:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38151#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38151#comment:2/1474665879329837</guid>
      <description>&lt;i&gt;Version&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/16560" title="Adapt user-list-table for network admin site-users. See #15558"&gt;[16560]&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37198.3.diff attached to Ticket #37198</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:21:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37198/37198.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37198/37198.3.diff/1474665711243395</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>jorbin</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:07:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:4/1474664829815343</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="http://www.paulirish.com/2010/the-protocol-relative-url/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;protocol relative urls are an anti pattern&lt;/a&gt; that can lead to &lt;a class="ext-link" href="http://www.netresec.com/?page=Blog&amp;amp;amp;month=2015-03&amp;amp;amp;post=China%27s-Man-on-the-Side-Attack-on-GitHub"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;security issues&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38151 (die() instead of wp_die() ?) updated</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:04:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38151#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38151#comment:1/1474664678107174</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>38151.patch attached to Ticket #38151</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:04:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38151/38151.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38151/38151.patch/1474664654918180</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38151 (die() instead of wp_die() ?) created</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Fri, 23 Sep 2016 21:03:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38151</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38151/1474664628516798</guid>
      <description>&lt;p&gt;
After searching in all files, it's the only place &lt;code&gt;die()&lt;/code&gt; is used instead of &lt;code&gt;wp_die()&lt;/code&gt;, so maybe it should be changed.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 20:50:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:45</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:45/1474663830229501</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:42" title="Comment 42"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/20491/20491.6.diff" title="Attachment '20491.6.diff' in Ticket #20491"&gt;20491.6.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/20491/20491.6.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Introduce &lt;code&gt;wp.i18n.loadLocaleData()&lt;/code&gt; and &lt;code&gt;wp.i18n.getLocale()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Introduce &lt;code&gt;get_js_i18n_data()&lt;/code&gt; to load a JSON translation file.
&lt;/li&gt;&lt;li&gt;Introduce &lt;code&gt;WP_Scripts:: load_translation_file()&lt;/code&gt; to pass that JSON to &lt;code&gt;wp.i18n.loadLocaleData()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Add some more QUnit tests.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
If &lt;code&gt;get_js_i18n_data()&lt;/code&gt; and &lt;code&gt;WP_Scripts:: load_translation_file()&lt;/code&gt; seem legit I'll happily continue working on it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Nice.
&lt;/p&gt;
&lt;p&gt;
I think the naming can be improved. Maybe &lt;code&gt;WP_Scripts::add_json_localization()&lt;/code&gt; or &lt;code&gt;WP_Scripts::localize_with_json()&lt;/code&gt; for &lt;code&gt;WP_Scripts::load_translation_file()&lt;/code&gt;?
I'm not a fan of the loop in &lt;code&gt;get_js_i18n_data()&lt;/code&gt;. &lt;code&gt;WP_LANG_DIR &lt;/code&gt; should only be checked if &lt;code&gt;$domain&lt;/code&gt; is 'default'. Can we require that a path needs to be set: &lt;code&gt;get_js_i18n_data( $domain, $path )&lt;/code&gt;? Or a &lt;code&gt;$context&lt;/code&gt; which can be [core|theme|plugin]?
&lt;/p&gt;
&lt;p&gt;
I noticed that &lt;code&gt;escape()&lt;/code&gt; still uses &lt;code&gt;_.keys()&lt;/code&gt; which is an Underscore function.
&lt;/p&gt;
&lt;p&gt;
&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Regarding &lt;code&gt;sprintf()&lt;/code&gt;, this patch also removes &lt;code&gt;wp.i18n.sprintf&lt;/code&gt; as Jed's implementation is really out of date. Jed even encourages removing it from its source code:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1, although it seems like Jed uses it at least once in line 147.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16031 (Bulk actions: Reactivate bulk actions hook + add hander hook for all ...) updated</title>
      
        <dc:creator>ericlewis</dc:creator>

      <pubDate>Fri, 23 Sep 2016 20:32:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16031#comment:91</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16031#comment:91/1474662768651208</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38647" title="Allow custom bulk actions in admin list tables.
Bulk action filtering ..."&gt;38647&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Allow custom bulk actions in admin list tables.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Bulk action filtering was introduced in 3.1, but only to remove default bulk actions, not add new ones.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Bulk actions can now be registered for all admin list table dropdowns via the &lt;code&gt;bulk_actions-{get_current_screen()-&amp;gt;id}&lt;/code&gt; filter. Handling custom bulk actions can be performed in the corresponding and newly introduced &lt;code&gt;handle_bulk_actions-${get_current_screen()-&amp;gt;id}&lt;/code&gt; filter.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props scribu, flixos90, Veraxus.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/16031" title="#16031: enhancement: Bulk actions: Reactivate bulk actions hook + add hander hook for all ... (closed: fixed)"&gt;#16031&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [38647]: Allow custom bulk actions in admin list tables.  Bulk action filtering ...</title>
      
        <dc:creator>ericlewis</dc:creator>

      <pubDate>Fri, 23 Sep 2016 20:32:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38647</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38647/1474662768148236</guid>
      <description>&lt;p&gt;
Allow custom bulk actions in admin list tables.
&lt;/p&gt;
&lt;p&gt;
Bulk action filtering was introduced in 3.1, but only to remove default bulk actions, not add new ones.
&lt;/p&gt;
&lt;p&gt;
Bulk actions can now be registered for all admin list table dropdowns via the &lt;code&gt;bulk_actions-{get_current_screen()-&amp;gt;id}&lt;/code&gt; filter. Handling custom bulk actions can be performed in the corresponding and newly introduced &lt;code&gt;handle_bulk_actions-${get_current_screen()-&amp;gt;id}&lt;/code&gt; filter.
&lt;/p&gt;
&lt;p&gt;
Props scribu, flixos90, Veraxus.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/16031" title="#16031: enhancement: Bulk actions: Reactivate bulk actions hook + add hander hook for all ... (closed: fixed)"&gt;#16031&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Fri, 23 Sep 2016 20:24:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:3/1474662266161853</guid>
      <description>&lt;p&gt;
I'm not talking about relative vs absolute URLs... Relative URLs strip the domain completely and we wouldn't want to do that.
&lt;/p&gt;
&lt;p&gt;
What I'm suggesting is simply stripping the protocol (http or https) from the URL which is a very different thing.
Stripping the protocol would ensure compatibility with both http &amp;amp; https sites no matter if the user changes from one to the other.
&lt;/p&gt;
&lt;p&gt;
Furthermore it will not break anything since if the saving process changes then only new assets will use the stripped format, while old ones will still have the protocol included.
This will not affect anything on any site running WordPress...
Current sites that already have assets will use the format they're already using for existing images, and new images will have the protocol stripped.
New sites however will be a lot cleaner since all assets will not include the protocol when they're saved in the db, so if they decide to switch from http to https at some point it will be a lot easier for them.
It's just cleaner this way and has no unwanted side-effects.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>lukecavanagh</dc:creator>

      <pubDate>Fri, 23 Sep 2016 19:48:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:2/1474660137577006</guid>
      <description>&lt;p&gt;
Look at ticket &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17048" title="#17048: feature request: URLs delivered to the browser should be root-relative (closed: maybelater)"&gt;#17048&lt;/a&gt;.
As well as &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/contribute/design-decisions/#absolute-versus-relative-urls"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/core/handbook/contribute/design-decisions/#absolute-versus-relative-urls&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Fri, 23 Sep 2016 19:36:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:1/1474659403354421</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>pasted_image_at_2016_09_23_03_18_pm.png attached to Ticket #38150</title>
      
        <dc:creator>EmpireOfLight</dc:creator>

      <pubDate>Fri, 23 Sep 2016 19:24:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38150/pasted_image_at_2016_09_23_03_18_pm.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38150/pasted_image_at_2016_09_23_03_18_pm.png/1474658689306466</guid>
      <description>&lt;p&gt;
Checkboxes use a checkmark dashicon, but they should just use the normal built in browser styling
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38150 (Stop using dashicons to show checked state of checkboxes) created</title>
      
        <dc:creator>EmpireOfLight</dc:creator>

      <pubDate>Fri, 23 Sep 2016 19:23:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38150</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38150/1474658633956515</guid>
      <description>&lt;p&gt;
Checkboxes should use the default system to indicate they are checked. (&amp;lt;input type="checkbox" checked&amp;gt; uses a dashicon check icon instead of the system's default check ui.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37843 (`http_api_curl` hook no longer available for adding custom cURL options) updated</title>
      
        <dc:creator>jaredh123</dc:creator>

      <pubDate>Fri, 23 Sep 2016 19:16:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37843#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37843#comment:13/1474658160664260</guid>
      <description>&lt;p&gt;
@rmccue I tried to test your patch, but got errors. Looks like your &lt;code&gt;WP_Requests_Hooks&lt;/code&gt; class is supposed to be constructed with some parameters, but your code doesn't pass any in.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Fri, 23 Sep 2016 18:54:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:37/1474656898687765</guid>
      <description>&lt;i&gt;Type&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Things that are important to me:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;That fragments of a page are only viewable (and thus previewable) within the context of the entire page, i.e. no individually viewable fragments.
&lt;/li&gt;&lt;li&gt;That said fragments have distinct URLs, whether that's &lt;code&gt;#some-part&lt;/code&gt; or the usual &lt;code&gt;/some-part/&lt;/code&gt; that then functions as an anchor. These are important for human link sharing and content indexing.
&lt;/li&gt;&lt;li&gt;That it is clear in various contexts that X items are a part of Y whole - in a list of pages, when building a nav menu, etc.
&lt;/li&gt;&lt;li&gt;That it is clear what happens when switching to a theme that does not support multi-part pages; or, perhaps more broadly, if this should even be opt-in/out-able at all.
&lt;/li&gt;&lt;li&gt;That this is not thought of as content blocks - it should not preclude them, but the scope really should remain as relatively simple multi-part pages consisting of content that would go within the post content editor as we currently know it (and featured images, I suppose). If one is using a content block or page builder plugin of some sort that displays in &lt;code&gt;the_content&lt;/code&gt;, seems like that would still play together just fine as it's extending the capabilities of each section of a page.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37843 (`http_api_curl` hook no longer available for adding custom cURL options) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 23 Sep 2016 18:49:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37843#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37843#comment:12/1474656561764419</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Added a patch that adds a &lt;code&gt;requests-{$hook}&lt;/code&gt; dynamic hook for WordPress usage of Requests internal hooks. Anything in Requests will be mapped to this automatically (e.g. &lt;code&gt;curl.before_send&lt;/code&gt; will be available as &lt;code&gt;requests-curl.before_send&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
Additionally, it also maps the &lt;code&gt;curl.before_send&lt;/code&gt; hook to the old &lt;code&gt;http_api_curl&lt;/code&gt; hook.
&lt;/p&gt;
&lt;p&gt;
Please note: if you're hooking into this, please consider filtering something else, as your code won't work if the user doesn't have cURL installed. The point of WP_Http is to abstract the need for cURL away, so using this hook is a bad idea.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37843.diff attached to Ticket #37843</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 23 Sep 2016 18:46:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37843/37843.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37843/37843.diff/1474656411725950</guid>
      <description>&lt;p&gt;
Attach Requests hooks to native WP hooks
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 18:18:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:36/1474654710450253</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-themes by melchoyce. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-themes/p1474654707000623"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16379 (Better UI for doing "Page on Front") updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 18:17:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16379#comment:148</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16379#comment:148/1474654632642787</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-themes by davidakennedy. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-themes/p1474654630000616"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:53:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:36/1474653230713258</guid>
      <description>&lt;p&gt;
I am pretty firmly against introducing another way for adding "hacks" to WordPress.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Theme Editor represents an important part of WordPress' mission to democratizing publishing
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, it doesn't. It has nothing to do with democratizing publishing. All it does is making it a bit easier for users to "shoot themselves in the foot".
&lt;/p&gt;
&lt;p&gt;
I'm actually thinking we should be discussing shipping WordPress with &lt;code&gt;define( 'DISALLOW_FILE_EDIT', true );&lt;/code&gt; in wp-config. The explanation in the codex makes a lot of sense:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Occasionally you may wish to disable the plugin or theme editor to prevent overzealous users from being able to edit sensitive files and potentially crash the site. Disabling these also provides an additional layer of security if a hacker gains access to a well-privileged user account.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In my opinion adding "theme hacks" through the customizer is plugin material, and the plugin should be able to provide adequate support to users that break their sites.
&lt;/p&gt;
&lt;p&gt;
Apart from the above there are several other things that are pretty bad:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inadequate space for editing/writing. Try resizing your coding (text) editor to 275px width and edit something for 10-15 min. It's really bad.
&lt;/li&gt;&lt;li&gt;"Deceiving" preview. CSS hacks affect the whole site but the user can see only one template in the preview. For example it is pretty easy to make a change that "looks good" on the front page but breaks the archive pages, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
In addition there is no good way to make the user entered CSS "secure". CSSTidy and similar tools can check/fix the syntax but cannot sanitize the CSS for security purposes. I'm not sure such tools exist. New versions of the browsers introduce support for new CSS features pretty much every month. Don't think it is feasible even trying to sanitize all of them. The only way would be to severely limit what is supported then parse the CSS and remove everything else.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38149 (Customizer mousewheel scrolling issue in Safari on Mac) created</title>
      
        <dc:creator>Martin Snajdr</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:50:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38149</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38149/1474653009624347</guid>
      <description>&lt;p&gt;
I think there is a Customizer scrolling bug in Safari when you change some settings (for example when adding a widget). After you add a widget, the site preview is not scrollable until you resize the window. I tested the same thing in Chrome on mac and it works properly there.
&lt;/p&gt;
&lt;p&gt;
My configuration:
macOS Sierra 10.12
Safari 10.0
Wordpress 4.6.1
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #32417 (Add new core media widget) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:49:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32417#comment:78</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32417#comment:78/1474652960291220</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-images by joemcgill. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-images/p1474652957000534"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22363 (Accents in attachment filenames should be sanitized) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:47:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22363#comment:85</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22363#comment:85/1474652833082212</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-images by joemcgill. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-images/p1474652830000528"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29158 (Customizer UI Design lacks contrast for visual hierarchy and does not ...) updated</title>
      
        <dc:creator>folletto</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:44:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29158#comment:79</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29158#comment:79/1474652685890167</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, back arrows are focused when opening a panel, so we need a clear focus style that is also acceptable whenever a panel/section is opened.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Can't we fix that? I wouldn't try to update the style until that's fixed too.
&lt;/p&gt;
&lt;p&gt;
Even just moving the selection to the first item in the list instead of the close button would work maybe?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:35:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:35/1474652109935376</guid>
      <description>&lt;p&gt;
Noting there is a lot of discussion here: &lt;a class="ext-link" href="https://github.com/WordPress/twentyseventeen/pull/62"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/twentyseventeen/pull/62&lt;/a&gt; - we should keep it back on this ticket and avoid dual places for this important discussion.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #37772,​38144 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:30:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=37772%2C38144</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=37772%2C38144/1474651852043555</guid>
      <description>duplicate: &lt;p&gt;
Hello @hoang2016, welcome to our Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for your report. WordPress 4.6 isn't compatible with PHP 7.1 but WordPress 4.7 will be, see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37772" title="#37772: defect (bug): Not working &amp;#34;wp_default_styles&amp;#34; on PHP 7.1.0 (closed: fixed)"&gt;#37772&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #38144 (WP 4.6.1 getting an error in PHP 7.1) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:27:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38144#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38144#comment:1/1474651641277048</guid>
      <description>&lt;p&gt;
I've also noticed these errors during PHPUnit tests for one of my plugins, when run against PHP 7.1 on Travis CI. I haven't tried to track down the cause though.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22938 (Presentation of hierarchical taxonomy in Media modal should be ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:18:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22938#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22938#comment:22/1474651121716731</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-images by joemcgill. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-images/p1474651119000467"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #23594 (Categorization of files in Media Library (i.e. folders, tags, etc.)) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:17:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23594#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23594#comment:12/1474651061884721</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-images by joemcgill. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-images/p1474651059000465"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37989 (Unexpected change to media title behavior in WP 4.6.1) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:10:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37989#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37989#comment:42/1474650632404576</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-images by joemcgill. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-images/p1474650630000458"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:10:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:48</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:48/1474650632300000</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-images by joemcgill. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-images/p1474650630000458"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37549 (Add optional parameter to wp_generate_attachment_metadata for image ...) updated</title>
      
        <dc:creator>sterlo</dc:creator>

      <pubDate>Fri, 23 Sep 2016 17:04:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37549#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37549#comment:7/1474650241812960</guid>
      <description>&lt;p&gt;
I will be jumping back in here this weekend! Thanks for following up and being cool with the delay :-)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35186 (Put the Customizer "back" button next to the "Close" button) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:55:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35186#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35186#comment:21/1474649709370162</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by folletto. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474649706001060"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34343 (Customizer: Make panel headers sticky?) updated</title>
      
        <dc:creator>folletto</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:53:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34343#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34343#comment:20/1474649587711359</guid>
      <description>&lt;p&gt;
I feel it's important to mention that fixing the back button as per &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/35186" title="#35186: enhancement: Put the Customizer &amp;#34;back&amp;#34; button next to the &amp;#34;Close&amp;#34; button (new)"&gt;#35186&lt;/a&gt; would solve the issue without any need of additional logic, and would be simpler overall (no scroll animation, always visible, solves the presence of two "back" buttons).
&lt;/p&gt;
&lt;p&gt;
That said, this is already an improvement and there's agreement, so I think we can proceed with it, but I'd still move after to fix &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/35186" title="#35186: enhancement: Put the Customizer &amp;#34;back&amp;#34; button next to the &amp;#34;Close&amp;#34; button (new)"&gt;#35186&lt;/a&gt; with the single back/close button, and remove the scrolling logic.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37843 (`http_api_curl` hook no longer available for adding custom cURL options) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:52:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37843#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37843#comment:11/1474649577866357</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) created</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:24:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148/1474647883282219</guid>
      <description>&lt;p&gt;
We should not store the protocol of files in the database.
Instead of &lt;code&gt;http://mysite.com/wp-content/uploads/image.png&lt;/code&gt; we could strip the protocol while saving the entry and save it as &lt;code&gt;//mysite.com/wp-content/uploads/image.png&lt;/code&gt; instead.
This will make http/https issues a lot easier to address, and hopefully ease migrations to HTTPS.
There are a bunch of plugins out there that can do this, but they shouldn't have to... This is something that can be done in-core a lot more efficiently for everyone.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:21:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:44</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:44/1474647686120586</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:43" title="Comment 43"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I don't know if this has been mentioned, but in regard to &lt;code&gt;sprintf()&lt;/code&gt;: in JS that is already using Underscores anyway, it is possible to use Underscores templates to do this. I have done this before.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$text = sprintf( __( 'String with %s.' ), '{{placeholder}}' );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;l10nTemplateFromPHP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
(Just a POC from off the top of my head.)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Interesting! Thanks for sharing. Loading 16KB of JS (the size of underscore.min.js) for using &lt;code&gt;sprintf()&lt;/code&gt; is not a viable solution for core though. That's why I've opened &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/38147" title="#38147: enhancement: Add sprintf.js library to WordPress (new)"&gt;#38147&lt;/a&gt; to suggest adding the lightweight sprintf.js library instead.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:17:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:1/1474647432163450</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/38147/38147.diff" title="Attachment '38147.diff' in Ticket #38147"&gt;38147.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/38147/38147.diff" title="Download"&gt;​&lt;/a&gt; registers the minified version of sprintf.js
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38147.diff attached to Ticket #38147</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:15:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38147/38147.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38147/38147.diff/1474647354095112</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #8592 (Private Pages not listed in the Parent dropdown) updated</title>
      
        <dc:creator>sillybean</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:14:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8592#comment:211</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8592#comment:211/1474647246864773</guid>
      <description>&lt;p&gt;
I've rewritten and updated the small plugin I'd posted as a Gist some time ago. It's now in the repo as &lt;a class="ext-link" href="https://wordpress.org/plugins/inclusive-parents/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Inclusive Parents&lt;/a&gt; (and on &lt;a class="ext-link" href="https://github.com/sillybean/inclusive-parents"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GitHub&lt;/a&gt;, if you want to contribute). The proposed patch would be more comprehensive, but this does add unpublished pages to parent dropdowns (edit, quick edit, and bulk edit), the nav menu checklists, the page widget, and wp_page_menu().
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34343 (Customizer: Make panel headers sticky?) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:13:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34343#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34343#comment:19/1474647232527200</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by delawski. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474647230001055"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Fri, 23 Sep 2016 16:11:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:43</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:43/1474647065262633</guid>
      <description>&lt;p&gt;
I don't know if this has been mentioned, but in regard to &lt;code&gt;sprintf()&lt;/code&gt;: in JS that is already using Underscores anyway, it is possible to use Underscores templates to do this. I have done this before.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$text = sprintf( __( 'String with %s.' ), '{{placeholder}}' );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;l10nTemplateFromPHP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
(Just a POC from off the top of my head.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) created</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:50:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147/1474645822311721</guid>
      <description>&lt;p&gt;
Working on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20491" title="#20491: enhancement: Introduce some JavaScript i18n functions (closed: fixed)"&gt;#20491&lt;/a&gt; revealed a need for a &lt;code&gt;sprintf()&lt;/code&gt; function in JavaScript.
&lt;/p&gt;
&lt;p&gt;
Although ES6 supports some basic string formatting, it's not something core could use in its various JS files. Thus, I suggest adding the very popular &lt;a class="ext-link" href="https://github.com/alexei/sprintf.js"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;sprintf.js&lt;/a&gt; library to WordPress.
&lt;/p&gt;
&lt;p&gt;
The minified script is only 3.7 KB in size, the source file is 9.4 KB large. Adding it to core with the &lt;code&gt;sprintf&lt;/code&gt; handle would not only benefit core but also various plugins and themes in need of such a functionality, especially with translations.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #34344 (Expanded section margin-top glitches when other section is deactivated) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:41:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34344#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34344#comment:19/1474645301492368</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35947 (Customizer panel fails to fully expand leaving extra margin) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:40:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35947#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35947#comment:33/1474645225225561</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #23432 (Review usage of target="_blank" in the admin) updated</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:37:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23432#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23432#comment:36/1474645066269689</guid>
      <description>&lt;p&gt;
Patches done so far:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38145" title="#38145: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab in several Admin screens (closed: fixed)"&gt;#38145&lt;/a&gt;        Remove target="_blank" from help tab in serveral Admin screens
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38143" title="#38143: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab option files for settings in the Admin (closed: fixed)"&gt;#38143&lt;/a&gt;        Remove target="_blank" from help tab option files for settings in the Admin
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38141" title="#38141: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab custom-background/custom-header (closed: fixed)"&gt;#38141&lt;/a&gt;        Remove target="_blank" from help tab custom-background/custom-header
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38140" title="#38140: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab comment/comment-edit (closed: fixed)"&gt;#38140&lt;/a&gt;        Remove target="_blank" from help tab comment/comment-edit
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38159" title="#38159: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab in Network screens in the Admin (closed: fixed)"&gt;#38159&lt;/a&gt; Remove target="_blank" from help tab in Network screens in the Admin
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38215" title="#38215: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab in plugin, theme and update ... (closed: fixed)"&gt;#38215&lt;/a&gt; Remove target="_blank" from help tab in plugin, theme and update screens in the Admin
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38217" title="#38217: defect (bug): Remove target=&amp;#34;_blank&amp;#34; from help tab in user and widget Admin screens (closed: fixed)"&gt;#38217&lt;/a&gt; Remove target="_blank" from help tab in user and widget Admin screens
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38140 (Remove target="_blank" from help tab comment/comment-edit) updated</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:35:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38140#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38140#comment:1/1474644919684300</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>38145.patch attached to Ticket #38145</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:34:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38145/38145.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38145/38145.patch/1474644865560564</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38145 (Remove target="_blank" from help tab in several Admin screens) created</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:33:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38145</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38145/1474644823431233</guid>
      <description>&lt;p&gt;
Patch removes target="_blank" from links in the help tabs in the Admin in:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;wp-admin/edit-comments.php
&lt;/li&gt;&lt;li&gt;wp-admin/edit-form-advanced.php
&lt;/li&gt;&lt;li&gt;wp-admin/edit-link-form.php
&lt;/li&gt;&lt;li&gt;wp-admin/edit-tags.php
&lt;/li&gt;&lt;li&gt;wp-admin/edit.php
&lt;/li&gt;&lt;li&gt;wp-admin/export.php
&lt;/li&gt;&lt;li&gt;wp-admin/import.php
&lt;/li&gt;&lt;li&gt;wp-admin/index.php
&lt;/li&gt;&lt;li&gt;wp-admin/link-manager.php
&lt;/li&gt;&lt;li&gt;wp-admin/media-new.php
&lt;/li&gt;&lt;li&gt;wp-admin/media.php
&lt;/li&gt;&lt;li&gt;wp-admin/nav-menus.php
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I did not remove target="_blank" on links to Preview page/post in edit-form.advanced.php
Tracking ticket with info and discussion: &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/23432" title="#23432: task (blessed): Review usage of target=&amp;#34;_blank&amp;#34; in the admin (assigned)"&gt;#23432&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 15:04:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:42/1474643099104378</guid>
      <description>&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/20491/20491.6.diff" title="Attachment '20491.6.diff' in Ticket #20491"&gt;20491.6.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/20491/20491.6.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Introduce &lt;code&gt;wp.i18n.loadLocaleData()&lt;/code&gt; and &lt;code&gt;wp.i18n.getLocale()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Introduce &lt;code&gt;get_js_i18n_data()&lt;/code&gt; to load a JSON translation file.
&lt;/li&gt;&lt;li&gt;Introduce &lt;code&gt;WP_Scripts:: load_translation_file()&lt;/code&gt; to pass that JSON to &lt;code&gt;wp.i18n.loadLocaleData()&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Add some more QUnit tests.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
If &lt;code&gt;get_js_i18n_data()&lt;/code&gt; and &lt;code&gt;WP_Scripts:: load_translation_file()&lt;/code&gt; seem legit I'll happily continue working on it.
&lt;/p&gt;
&lt;p&gt;
Regarding &lt;code&gt;sprintf()&lt;/code&gt;, this patch also removes &lt;code&gt;wp.i18n.sprintf&lt;/code&gt; as Jed's implementation is really out of date. Jed even encourages removing it from its source code:
&lt;/p&gt;
&lt;pre class="wiki"&gt;// This is not internally used, so you can remove it if you have this
// available somewhere else, or want to use a different system.
&lt;/pre&gt;&lt;p&gt;
We should rather add a proper version to &lt;code&gt;wp.util&lt;/code&gt;. If anyone want's to use &lt;code&gt;sprintf&lt;/code&gt; with translations, they'd have to load both scripts.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>20491.6.diff attached to Ticket #20491</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 14:58:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/20491/20491.6.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/20491/20491.6.diff/1474642680649591</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 14:38:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:51</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:51/1474641514012056</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by celloexpressions. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474641511001021"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38144 (WP 4.6.1 getting an error in PHP 7.1) created</title>
      
        <dc:creator>hoang2016</dc:creator>

      <pubDate>Fri, 23 Sep 2016 14:37:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38144</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38144/1474641475258934</guid>
      <description>&lt;p&gt;
Hello,
I tried installing WP 4.6.1 in with php 7.1.0 the site ran okay, but it shows 2 warning messages on the top of the font page and 3 messages in admin page
&lt;/p&gt;
&lt;p&gt;
In the font page are: (2 messages)
&lt;/p&gt;
&lt;pre class="wiki"&gt;Warning: Parameter 1 to wp_default_scripts() expected to be a reference, value given in my_web_root\wordpress\wp-includes\plugin.php on line 600
Warning: Parameter 1 to wp_default_styles() expected to be a reference, value given in my_web_root\wordpress\wp-includes\plugin.php on line 600
&lt;/pre&gt;&lt;p&gt;
The code line in file like
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
In the admin site are (3 messages)
&lt;/p&gt;
&lt;pre class="wiki"&gt;Warning: Parameter 1 to wp_default_scripts() expected to be a reference, value given in my_web_root\wordpress\wp-includes\plugin.php on line 600
Warning: Parameter 1 to wp_default_styles() expected to be a reference, value given in my_web_root\wordpress\wp-includes\plugin.php on line 600
Warning: Cannot assign an empty string to a string offset in my_web_root\wordpress\wp-includes\class.wp-scripts.php on line 447
&lt;/pre&gt;&lt;p&gt;
The code line of first two messages as the same above
The code line for class.wp-script.php is
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$l10n[$key] = html_entity_decode( (string) $value, ENT_QUOTES, 'UTF-8');
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Any ideas or suggestions how to fix them it would be appreciated
&lt;/p&gt;
&lt;p&gt;
Thank you,
&lt;/p&gt;
&lt;p&gt;
In my wp-config.php; the define (‘WP_DEBUG’, false);
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>38143.patch attached to Ticket #38143</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 14:36:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38143/38143.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38143/38143.patch/1474641409598104</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38143 (Remove target="_blank" from help tab option files for settings in the Admin) created</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 14:36:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38143</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38143/1474641376262752</guid>
      <description>&lt;p&gt;
Patch removes target="_blank" from links in the help tabs of the options files in the Settings of the Admin
Tracking ticket with info and dicussion: &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/23432" title="#23432: task (blessed): Review usage of target=&amp;#34;_blank&amp;#34; in the admin (assigned)"&gt;#23432&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38142 (Media modal: handle keyboard focus when closing the modal) created</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Fri, 23 Sep 2016 13:54:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38142</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38142/1474638850768219</guid>
      <description>&lt;p&gt;
When the media modal closes, it tries to set focus back to a "useful location" and &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/js/media/views/modal.js?rev=33337#L144"&gt;assumes there's an element with id 'wpbody-content'&lt;/a&gt;, i.e. the admin pages main content.
&lt;/p&gt;
&lt;p&gt;
This is not always true, for example there's no &lt;code&gt;wpbody-content&lt;/code&gt; element:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;in the Customizer
&lt;/li&gt;&lt;li&gt;in Press This
&lt;/li&gt;&lt;li&gt;when the media modal is used on the front end
&lt;/li&gt;&lt;li&gt;plugins may provide completely customised pages that don't have &lt;code&gt;wpbody-content&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
This is very evident in the Customizer, for example when setting a Background Image and using the keyboard :
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;press "Select Image"
&lt;/li&gt;&lt;li&gt;the media modal opens
&lt;/li&gt;&lt;li&gt;press Escape to close the modal
&lt;/li&gt;&lt;li&gt;focus is lost and the tab order starts again from the document root (or the browser's toolbar)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Ideally, when the media modal opens it should store a reference to the element that was clicked to open it and then when the modal closes, focus should be restored on this element.
&lt;/p&gt;
&lt;p&gt;
The only exception is TinyMCE: when an imag eis actually inserted in the editable area, focus should go in the editable area. As far as I see TinyMCE already takes care of this.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>38141.patch attached to Ticket #38141</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 13:07:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38141/38141.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38141/38141.patch/1474636065413677</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38141 (Remove target="_blank" from help tab custom-background/custom-header) created</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 13:07:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38141</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38141/1474636021359613</guid>
      <description>&lt;p&gt;
Patch removes target="_blank" from links in the help tabs of custom-background/custom-header in the Admin.
I'm not sure where these files are used anymore, since the functionality is now in the customizer (that has no help tabs at all, by the looks of it).
&lt;/p&gt;
&lt;p&gt;
Tracking ticket with info and dicussion: &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/23432" title="#23432: task (blessed): Review usage of target=&amp;#34;_blank&amp;#34; in the admin (assigned)"&gt;#23432&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #22249 (Add ability to set or remove attributes on enqueued scripts and styles.) updated</title>
      
        <dc:creator>zodiac1978</dc:creator>

      <pubDate>Fri, 23 Sep 2016 12:58:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22249#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22249#comment:41/1474635515417662</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/22249#comment:20" title="Comment 20"&gt;bhubbard&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I also want to use it to add the integrity and crossorigin when I register Bootstrap scripts from BootstrapCDN:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet" integrity="sha256-MfvZlkHCEqatNoGiOXveE8FIwMzZg4W85qfrfIFBfYc= sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
This is a interesting idea, but not well supported enough, I think.
&lt;/p&gt;
&lt;p&gt;
See:
&lt;a class="ext-link" href="https://wiki.mozilla.org/Security/Guidelines/Web_Security#Subresource_Integrity"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wiki.mozilla.org/Security/Guidelines/Web_Security#Subresource_Integrity&lt;/a&gt;
&lt;a class="ext-link" href="https://w3c.github.io/webappsec-subresource-integrity/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://w3c.github.io/webappsec-subresource-integrity/&lt;/a&gt;
&lt;a class="ext-link" href="http://caniuse.com/#search=integrity"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://caniuse.com/#search=integrity&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38140.patch attached to Ticket #38140</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 12:37:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38140/38140.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38140/38140.patch/1474634264722151</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38140 (Remove target="_blank" from help tab comment/comment-edit) created</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Fri, 23 Sep 2016 12:36:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38140</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38140/1474634172492854</guid>
      <description>&lt;p&gt;
Patch removes target="_blank" from links in the help tabs of comments and edit comments in the Admin
&lt;/p&gt;
&lt;p&gt;
Tracking ticket with info and dicussion: &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/23432" title="#23432: task (blessed): Review usage of target=&amp;#34;_blank&amp;#34; in the admin (assigned)"&gt;#23432&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 12:09:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:41/1474632561613995</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:40" title="Comment 40"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:38" title="Comment 38"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;I wonder if we should make &lt;code&gt;wp.i18n.sprintf()&lt;/code&gt; public or if there should be a wrapper instead. Something like &lt;code&gt;wp.i18n.translate( 'Foo %1$s, %2$s', arg1, arg2 )&lt;/code&gt; as an alternative for &lt;code&gt;wp.i18n.sprintf( wp.i18n.__( 'Foo %1$s, %2$s', 'domain' ), arg1, arg2 )&lt;/code&gt;.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
That sounds impossible with the optional domain param before the args, no?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You're right…
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Apparently Jed's &lt;code&gt;sprintf&lt;/code&gt; implementation is simply a copy of the one from &lt;a class="ext-link" href="https://github.com/alexei/sprintf.js"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/alexei/sprintf.js&lt;/a&gt;. We should rather use that directly (in &lt;code&gt;wp-util&lt;/code&gt;, in a new ticket). In the meantime I'll remove the &lt;code&gt;wp.i18n.sprintf&lt;/code&gt; line from the patch
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35453 (Document what installation mode is in inline docs) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:48:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35453#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35453#comment:1/1474627689623648</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@ericlewis Could you explain what you want to see here? Is it about improving the docs of &lt;code&gt;wp_installing()&lt;/code&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33294 (Language files saved in wrong location) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:43:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33294#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33294#comment:4/1474627398688609</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@concatenate Is this still an issue? What's the value of the &lt;code&gt;WP_LANG_DIR&lt;/code&gt; constant?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #9757,​38139 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:26:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=9757%2C38139</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=9757%2C38139/1474626364271079</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/9757" title="#9757: feature request: Allow Plugin/Theme updates from a uploaded .zip file. (new)"&gt;#9757&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Tickets #26914,​29528 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:24:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=26914%2C29528</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=26914%2C29528/1474626266251926</guid>
      <description>&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26914" title="#26914: defect (bug): False update notifications in a localised version of WordPress (closed: duplicate)"&gt;#26914&lt;/a&gt; was marked as a duplicate.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #26680 (Update page error) closed</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:21:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26680#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26680#comment:7/1474626108254177</guid>
      <description>worksforme: &lt;p&gt;
There were no additional reports in 3 years. Closing as worksforme but feel free to reopen with steps to reproduce if it's still a problem.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>update-theme.png attached to Ticket #38139</title>
      
        <dc:creator>rinkuyadav999</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:15:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38139/update-theme.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38139/update-theme.png/1474625725334595</guid>
      <description>&lt;p&gt;
Error Screenshot
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Tickets #22249,​38137 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:15:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=22249%2C38137</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=22249%2C38137/1474625712829072</guid>
      <description>duplicate: &lt;p&gt;
Hello @developersq, welcome to our Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for your request, we're already tracking this enhancement in &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/12009" title="#12009: enhancement: Add support for HTML 5 &amp;#34;async&amp;#34; and &amp;#34;defer&amp;#34; attributes (reopened)"&gt;#12009&lt;/a&gt; and &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/22249" title="#22249: enhancement: Add ability to set or remove attributes on enqueued scripts and styles. (assigned)"&gt;#22249&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #22249 (Add ability to set or remove attributes on enqueued scripts and styles.) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:15:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22249#comment:39</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22249#comment:39/1474625700686181</guid>
      <description>&lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38139 (Theme update through Dashboard) created</title>
      
        <dc:creator>rinkuyadav999</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:14:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38139</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38139/1474625695561075</guid>
      <description>&lt;p&gt;
WordPress do not update theme using Appearance &amp;gt; Theme &amp;gt; Add New.
&lt;/p&gt;
&lt;p&gt;
As we know, a theme can be updated through Dashboard, if it is hosted on w.org.
&lt;/p&gt;
&lt;p&gt;
But what if a user what to update theme using
Appearance &amp;gt; Themes &amp;gt; Add new &amp;gt; Upload theme.
Appearance &amp;gt; Themes &amp;gt; Add new &amp;gt; Upload theme / update theme. (may be we can add this feature).
&lt;/p&gt;
&lt;p&gt;
Suppose we have a theme called xyz v1. and we want to update with xyz v2 by uploading through Dashboard. in this case, we will see error &amp;gt; Parent folder already exit.
&lt;/p&gt;
&lt;p&gt;
I think it should check version of installed and uploaded and if uploaded theme is a valid and updated version, wp should update it.
&lt;/p&gt;
&lt;p&gt;
Right now we can do that only using FTP.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #18375 (Post type templates) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 10:13:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18375#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18375#comment:30/1474625582027371</guid>
      <description>&lt;p&gt;
I'll try to update the patch over the next day.
&lt;/p&gt;
&lt;p&gt;
I think we should use &lt;code&gt;get_file_data()&lt;/code&gt; for retrieving the headers as it's more reliable and reduces the risk of getting false positives. The current regex is over the &lt;em&gt;whole&lt;/em&gt; PHP file.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35916 (WP_Rewrite::generate_rewrite_rules() ignores boolean $endpoints / ...) updated</title>
      
        <dc:creator>solo14000</dc:creator>

      <pubDate>Fri, 23 Sep 2016 09:34:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35916#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35916#comment:3/1474623248114695</guid>
      <description>&lt;p&gt;
Registering custom post type with argument '_builtin' = true seems to be a workaround.
Can anybody tell me more about side effects setting '_builtin' true?
&lt;/p&gt;
&lt;p&gt;
Thanks
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33756 (Improve docs for sanitize_title()) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 23 Sep 2016 09:25:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33756#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33756#comment:13/1474622729491282</guid>
      <description>&lt;p&gt;
There's a tutorial for working with patches in the handbook: &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/tutorials/working-with-patches/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/core/handbook/tutorials/working-with-patches/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
After creating a patch file you can upload it here to this ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38138 (Crop media - NaN error at specific &amp;image-editor URL) created</title>
      
        <dc:creator>NoseGraze</dc:creator>

      <pubDate>Fri, 23 Sep 2016 09:19:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38138</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38138/1474622396410489</guid>
      <description>&lt;p&gt;
The problem can be reproduced using &lt;a class="ext-link" href="http://pastebin.com/Y7AB7Y8Y"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this code&lt;/a&gt; that's taken from &lt;a class="ext-link" href="https://codex.wordpress.org/Javascript_Reference/wp.media"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this codex article&lt;/a&gt; (forgive the ugliness).
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Install that plugin. It adds a meta box to the Edit Post page with a link that triggers the wp.media frame.
&lt;/li&gt;&lt;li&gt;Click on the link to open the media frame.
&lt;/li&gt;&lt;li&gt;When inside the frame, click on an image.
&lt;/li&gt;&lt;li&gt;Click "Edit Image".
&lt;/li&gt;&lt;li&gt;This takes you to this URL in a new tab: &lt;a class="ext-link" href="http://localhost/wp/wp-admin/post.php?post=1706&amp;amp;action=edit&amp;amp;image-editor"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://localhost/wp/wp-admin/post.php?post=1706&amp;amp;action=edit&amp;amp;image-editor&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;Entering a value in "Scale Image" results in the other value being "NaN" (see screenshot).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Or, with no plugins activated, directly visit any "Edit Media" page using this URL format: &lt;a class="ext-link" href="http://localhost/wp/wp-admin/post.php?post=1706&amp;amp;action=edit&amp;amp;image-editor"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://localhost/wp/wp-admin/post.php?post=1706&amp;amp;action=edit&amp;amp;image-editor&lt;/a&gt; and try to crop the image. (My point being that using wp.media directs you to that URL.)
&lt;/p&gt;
&lt;p&gt;
This problem can be "fixed" by clicking "Cancel" on the image edit, then clicking "Edit Image" again, but that shouldn't be necessary. :P
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36961 (wp_roles displays incorrect roles in multisite) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 08:57:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36961#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36961#comment:6/1474621061865765</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36961/36961.diff" title="Attachment '36961.diff' in Ticket #36961"&gt;36961.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36961/36961.diff" title="Download"&gt;​&lt;/a&gt; should fix the problem by switching the site if necessary and then retrieving the roles while in switched state.
&lt;/p&gt;
&lt;p&gt;
The patch can probably be improved, especially my initial logic to extract the site ID out of the &lt;code&gt;$cap_key&lt;/code&gt; property is a bit sloppy. Not sure if we should actually store the site ID as property in &lt;code&gt;WP_User&lt;/code&gt; instead. If we did that, we could possibly run into sync issues between the site ID and the cap key (which should reference to the same site ID).
&lt;/p&gt;
&lt;p&gt;
Unit tests need to be added as well.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36961.diff attached to Ticket #36961</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 08:54:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36961/36961.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36961/36961.diff/1474620840705800</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #33756 (Improve docs for sanitize_title()) updated</title>
      
        <dc:creator>psdtohtmlguru</dc:creator>

      <pubDate>Fri, 23 Sep 2016 08:19:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33756#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33756#comment:12/1474618769212347</guid>
      <description>&lt;p&gt;
@SergeyBiryukov Yes, i will submit soon.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37198 (Use `WP_Term_Query` for `wp_get_object_terms()`) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 08:19:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37198#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37198#comment:6/1474618766498598</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37198#comment:5" title="Comment 5"&gt;boonebgorges&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Your patch is extremely conservative, in the sense that (a) it guarantees 100% backward compatibility, and (b) it attempts not to touch any existing code beyond what must be touched to refactor &lt;code&gt;wp_get_object_terms()&lt;/code&gt;. I like this as a general approach :) But in this case, I think that we can simplify our strategy by looking a bit deeper at the back compat issues.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm glad you see it that way. :) I wasn't sure about how backward-compatible it should be, but indeed, especially the &lt;code&gt;post_process_terms()&lt;/code&gt; logic in my patch to take care of previous handling in &lt;code&gt;wp_get_object_terms()&lt;/code&gt; was kind of painful, so I like handling it in a unified way, plus it's smaller and better readable like you said.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
IMO, passing 'parent' when the taxonomy is non-hierarchical is not meaningful, and it's OK to break it - but I would be interested to hear what you think.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree, returning an empty result when passing a &lt;code&gt;parent&lt;/code&gt; to a non-hierarchical taxonomy is actually what I would expect it to return.
&lt;/p&gt;
&lt;p&gt;
Your other changes make sense to me as well. I'm not exactly sure about whether getting rid of the extra sanitization I did could introduce BC issues, but you probably have a better overview of that. I think we should mention this in a dev-note, and maybe get this in some time soon to see if anything breaks.
&lt;/p&gt;
&lt;p&gt;
One thing I'd like to add back in is only allowing "object_id-related" query vars if &lt;code&gt;object_ids&lt;/code&gt; is passed and not empty. On the one hand, providing &lt;code&gt;fields =&amp;gt; all_with_object_id&lt;/code&gt; doesn't make sense without passing &lt;code&gt;object_ids&lt;/code&gt; anyway, but on the other hand we will be more foolproof by preventing it entirely. The same applies to sorting by term order (this can break the SQL query atm), although I don't like how I did it in the first patch (the method is encapsulated otherwise, but for this particular reason accesses a class property - passing a bool like &lt;code&gt;$has_object_ids&lt;/code&gt; to the method is structurally better I think).
&lt;/p&gt;
&lt;p&gt;
Are you planning to add documentation and default params back in? You could probably merge a lot of my first patch for that. Looking forward to see a comprehensive patch. :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37156 (Multisite: WP-generated permalink for title-less post does not work ...) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Fri, 23 Sep 2016 07:47:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37156#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37156#comment:5/1474616846583506</guid>
      <description>&lt;p&gt;
@raskull Oh okay, I didn't use a subfolder setup, that's probably why it didn't happen for me. Will look at this again a little later.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37789 (Strange results in comment number declension) updated</title>
      
        <dc:creator>pavelevap</dc:creator>

      <pubDate>Fri, 23 Sep 2016 07:16:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37789#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37789#comment:5/1474614983466261</guid>
      <description>&lt;p&gt;
Thank you, @SergeyBiryukov! I did not realize &lt;code&gt;sprintf()&lt;/code&gt; hack to hide &lt;code&gt;%&lt;/code&gt; :-)
&lt;/p&gt;
&lt;p&gt;
Current solution is probably OK even if there are some edgecases. My only idea was to check if passed string is gettexted to prevent these situations, but I am not sure if it is possible somehow?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36901 (Removing wp_die() from wp_allow_comment()) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 06:39:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36901#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36901#comment:9/1474612755630367</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by websupporter. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1474612753003412"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Fri, 23 Sep 2016 05:05:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:41/1474607101915733</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I ran four user tests today; details including the full screencast videos are forthcoming on make/design (pending post approval): &lt;a class="ext-link" href="https://make.wordpress.org/design/2016/09/23/user-testing-the-new-customizer-themes-experience/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/design/2016/09/23/user-testing-the-new-customizer-themes-experience/&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There were a couple of minor points that came up to potentially change, but no big trends between all of the users. I'd specifically like to explore improving the way unsaved changes are handled and the need for the separate install and install &amp;amp; preview buttons (probably needed, but not for most users). The tests also revealed several other areas for improvement, largely on the theme review/standards side and with the way themes look when first being installed; those should be handled separately from this project.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38137 (Add support to add attributes in wp_register_script() and ...) created</title>
      
        <dc:creator>developersq</dc:creator>

      <pubDate>Fri, 23 Sep 2016 04:59:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38137</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38137/1474606797217161</guid>
      <description>&lt;p&gt;
Both &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags support extra attributes to how and when to load the style or script.
&lt;/p&gt;
&lt;p&gt;
Current implementation of &lt;strong&gt;wp_register_script()/wp_enqueue_script()&lt;/strong&gt; and &lt;strong&gt;wp_register_style()/wp_enqueue_style()&lt;/strong&gt; do not have any option to add extra attributes.
&lt;/p&gt;
&lt;p&gt;
Most useful scenario to use this feature(s) in case of JavaScript &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is to easily add 'async' or 'defer' attributes when needed. Also, in case of CSS &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;,    ability to add 'media' and 'rel' attributes. Here, the use of 'rel' is really important to enhance the performance and user experience for the webpage.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://developer.mozilla.org/en/docs/Web/HTML/Element/script"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.mozilla.org/en/docs/Web/HTML/Element/script&lt;/a&gt;
&lt;a class="ext-link" href="https://developer.mozilla.org/en/docs/Web/HTML/Element/link"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.mozilla.org/en/docs/Web/HTML/Element/link&lt;/a&gt;
&lt;a class="ext-link" href="http://www.w3schools.com/tags/att_link_rel.asp"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.w3schools.com/tags/att_link_rel.asp&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33848 (Protect against vulnerability in Netscape 4?) updated</title>
      
        <dc:creator>dmsnell</dc:creator>

      <pubDate>Fri, 23 Sep 2016 04:12:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33848#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33848#comment:12/1474603958990727</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33848#comment:10" title="Comment 10"&gt;chriscct7&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@dmsnell do you have any performance benchmarks before and after patch to demonstrate the performance improvement?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Unfortunately I don't @chriscct7. Earlier in the process I had attempted to benchmark it, but the difference wasn't that significant on my tests. The variation, likely due to external effects on the server, was higher than the performance impact and so I wasn't able to nail anything down.
&lt;/p&gt;
&lt;p&gt;
Maybe we could build a blog with millions of posts and get some valuable data there. I haven't spent the time to get these numbers because I simply wasn't sure how valuable they are. We know that there &lt;em&gt;is&lt;/em&gt; some level of overhead here and we know that the code isn't &lt;em&gt;protecting&lt;/em&gt; us against anything, so it seems like it should disappear.
&lt;/p&gt;
&lt;p&gt;
Thanks for the review!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33848 (Protect against vulnerability in Netscape 4?) updated</title>
      
        <dc:creator>chriscct7</dc:creator>

      <pubDate>Fri, 23 Sep 2016 03:39:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33848#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33848#comment:11/1474601974070264</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Setting version to implemented in version.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33848 (Protect against vulnerability in Netscape 4?) updated</title>
      
        <dc:creator>chriscct7</dc:creator>

      <pubDate>Fri, 23 Sep 2016 03:38:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33848#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33848#comment:10/1474601910047098</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@dmsnell do you have any performance benchmarks before and after patch to demonstrate the performance improvement?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37198 (Use `WP_Term_Query` for `wp_get_object_terms()`) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 23 Sep 2016 03:36:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37198#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37198#comment:5/1474601801747090</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@flixos90 Thank you for the hard work you've done on the first pass, and sorry for the time it took to get around to reviewing it. It's a hard one :)
&lt;/p&gt;
&lt;p&gt;
Your patch is extremely conservative, in the sense that (a) it guarantees 100% backward compatibility, and (b) it attempts not to touch any existing code beyond what must be touched to refactor &lt;code&gt;wp_get_object_terms()&lt;/code&gt;. I like this as a general approach :) But in this case, I think that we can simplify our strategy by looking a bit deeper at the back compat issues.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37198/37198.2.diff" title="Attachment '37198.2.diff' in Ticket #37198"&gt;37198.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37198/37198.2.diff" title="Download"&gt;​&lt;/a&gt; is a somewhat simplified version of your patch. (It's also sloppy - I left out some documentation and default params. This will be cleaned up.) Here are the important differences:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt; // Verification of term hierarchy must be skipped for wp_get_object_terms().&lt;/code&gt; If I'm reading it correctly, this block in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37198/37198.diff" title="Attachment '37198.diff' in Ticket #37198"&gt;37198.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37198/37198.diff" title="Download"&gt;​&lt;/a&gt; was meant to address &lt;code&gt;Test_Term_WpGetObjectTerms::test_parent()&lt;/code&gt;. These tests fail without the block. The reason is that the tests were written incorrectly: they define hierarchical terms, in a taxonomy that is non-hierarchical. By changing the tests, we can avoid the additional logic. This is technically a compatibility break. Currently, if you manually create hierarchical terms in a non-hierarchical taxonomy, and you call &lt;code&gt;wp_get_object_terms()&lt;/code&gt; with 'parent', only the object-terms with the correct 'parent' will be returned. With my patch, doing this same thing will result in an empty array being returned. IMO, passing 'parent' when the taxonomy is non-hierarchical is not meaningful, and it's OK to break it - but I would be interested to hear what you think.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;When building the &lt;code&gt;SELECT&lt;/code&gt; clause, I default to selecting &lt;code&gt;t.*, tt.*&lt;/code&gt; whenever possible. The performance differences are negligible, and keeping a smaller number of variations in the SQL query means better cache coverage. Note that this part of the patch will need refreshing when the main &lt;code&gt;SELECT&lt;/code&gt; clause in &lt;code&gt;WP_Term_Query&lt;/code&gt; grabs only the &lt;code&gt;term_id&lt;/code&gt; (or &lt;code&gt;term_taxonomy_id&lt;/code&gt;) column. See &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37189" title="#37189: enhancement: In wp_term_query on cache ids (new)"&gt;#37189&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34239" title="#34239: task (blessed): Split queries in `get_terms()` and `wp_get_object_terms()` (closed: duplicate)"&gt;#34239&lt;/a&gt;.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;I removed the &lt;code&gt;post_process_terms()&lt;/code&gt; logic. The sanitization you mention was introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/26010" title="Cast proper fields to `int` when returning from ..."&gt;[26010]&lt;/a&gt; to ensure that integer values are, in fact, integers. But we now have &lt;code&gt;WP_Term&lt;/code&gt; for this purpose. So, instead, my patch sends results through &lt;code&gt;get_term()&lt;/code&gt; when &lt;code&gt;fields=all_with_object_id&lt;/code&gt;, and also adds some integer-casting when &lt;code&gt;fields=ids&lt;/code&gt; and some other numeric values. I think this logic can probably be simplified even further with &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34239" title="#34239: task (blessed): Split queries in `get_terms()` and `wp_get_object_terms()` (closed: duplicate)"&gt;#34239&lt;/a&gt; etc, but for now I think it's clearer to ensure that &lt;code&gt;WP_Term&lt;/code&gt; objects are returned.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;You had a special clause for 'orderby' in &lt;code&gt;wp_get_object_terms()&lt;/code&gt; to 'id'. I think this is related to the fact that some of our unit tests passed &lt;code&gt;orderby=t.term_id&lt;/code&gt; to &lt;code&gt;wp_get_object_terms()&lt;/code&gt;. (You also have some logic in &lt;code&gt;parse_orderby()&lt;/code&gt; for this.) But I'm fairly sure that these tests are incorrect: &lt;code&gt;t.term_id&lt;/code&gt; has never been officially supported as a value for 'orderby'. It worked in some cases because, since it didn't match a whitelisted 'orderby' value, it fell through to the default - which happened to be &lt;code&gt;term_id&lt;/code&gt;. However, I don't think this is something that we must continue to support. I could be convinced otherwise if we found a bunch of uses of &lt;code&gt;orderby=t.term_id&lt;/code&gt; in the wild, but even then I'd strongly consider the break. My patch fixes the tests, instead.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
So, my approach is a bit more cavalier, but results in a considerably smaller patch. What do you think, @flixos90 ?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33848 (Protect against vulnerability in Netscape 4?) updated</title>
      
        <dc:creator>chriscct7</dc:creator>

      <pubDate>Fri, 23 Sep 2016 03:36:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33848#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33848#comment:9/1474601792599126</guid>
      <description>&lt;p&gt;
It should be noted the last version this appears to affect would be the last stable of Netscape 4.x which was 4.0.8 released on November 9th, 1998 (17 years ago).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37198.2.diff attached to Ticket #37198</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 23 Sep 2016 03:17:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37198/37198.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37198/37198.2.diff/1474600661632168</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #33848 (Protect against vulnerability in Netscape 4?) updated</title>
      
        <dc:creator>dmsnell</dc:creator>

      <pubDate>Fri, 23 Sep 2016 02:18:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33848#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33848#comment:8/1474597107261882</guid>
      <description>&lt;p&gt;
@nacin or @nbachiyski - any thoughts on this ticket? are we able to move forward on it or is there anything we need from it before it would be ready to merge?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #31101 (get_page_of_comment returns wrong page if comments are ordered with ...) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 23 Sep 2016 01:36:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/31101#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/31101#comment:7/1474594584240179</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
It appears to me that 'comment_order' has never been considered in &lt;code&gt;get_page_of_comment()&lt;/code&gt;, even before the pagination rewrite in 4.4. As far as I can see, this is an oversight. The oversight can probably be explained by the fact that &lt;code&gt;get_page_of_comment()&lt;/code&gt; is only used in core in &lt;code&gt;get_comment_link()&lt;/code&gt;, and in that case only when the page of the comment can't be inferred by context. So the bug would rear its head rarely.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/31101/31101.diff" title="Attachment '31101.diff' in Ticket #31101"&gt;31101.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/31101/31101.diff" title="Download"&gt;​&lt;/a&gt; adds the necessary logic, and it appears to fix the bug in my testing. Can others confirm?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>31101.diff attached to Ticket #31101</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 23 Sep 2016 01:35:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/31101/31101.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/31101/31101.diff/1474594546957952</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #34659 (Whitelist for validation functions which only accept one argument) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 23 Sep 2016 01:06:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34659#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34659#comment:22/1474592800831288</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by rmccue. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1474592799003382"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34659 (Whitelist for validation functions which only accept one argument) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 23 Sep 2016 01:05:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34659#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34659#comment:21/1474592752360644</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I want to solve this with &lt;code&gt;sanitize_callback_args&lt;/code&gt; and &lt;code&gt;validate_callback_args&lt;/code&gt;, which are used as a number in &lt;code&gt;array_slice&lt;/code&gt;. This matches the &lt;code&gt;$accepted_args&lt;/code&gt; parameter to &lt;code&gt;add_filter&lt;/code&gt;, and is completely backwards compatible, plus doesn't involve some weird special whitelist for specific functions.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37171 (Implement preconnect to Google fonts in themes twenty eleven, twelve, ...) updated</title>
      
        <dc:creator>leobaiano</dc:creator>

      <pubDate>Fri, 23 Sep 2016 00:38:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37171#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37171#comment:23/1474591138616611</guid>
      <description>&lt;p&gt;
I know Coding Standards but I have failed at some point, thank you very much if you can spend a feedback.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38136 (The docs for get_pages() - the post_status argument can also be an array) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 23 Sep 2016 00:12:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38136#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38136#comment:3/1474589523254722</guid>
      <description>&lt;p&gt;
@SergeyBiryukov
&lt;/p&gt;
&lt;p&gt;
Yes it's the same with &lt;code&gt;wp_list_pages()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I guess I could address that as well.
&lt;/p&gt;
&lt;p&gt;
Not sure if I should use the same ticket, create a new one or if there's a special ticket for docs improvements in 4.7?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38078 (Wrong transcription of "D with stroke" chars) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 23 Sep 2016 00:06:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38078#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38078#comment:3/1474589184934715</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38646" title="I18N: Add support for Serbian crossed D in `remove_accents()`.
Props ..."&gt;38646&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
I18N: Add support for Serbian crossed D in &lt;code&gt;remove_accents()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props Krstarica for the report.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38078" title="#38078: defect (bug): Wrong transcription of &amp;#34;D with stroke&amp;#34; chars (closed: fixed)"&gt;#38078&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [38646]: I18N: Add support for Serbian crossed D in `remove_accents()`.  Props ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 23 Sep 2016 00:06:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38646</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38646/1474589184453921</guid>
      <description>&lt;p&gt;
I18N: Add support for Serbian crossed D in &lt;code&gt;remove_accents()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Props Krstarica for the report.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38078" title="#38078: defect (bug): Wrong transcription of &amp;#34;D with stroke&amp;#34; chars (closed: fixed)"&gt;#38078&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38078 (Wrong transcription of "D with stroke" chars) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 23 Sep 2016 00:03:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38078#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38078#comment:2/1474589025729076</guid>
      <description>&lt;p&gt;
For reference, from &lt;a class="ext-link" href="https://en.wikipedia.org/wiki/D_with_stroke"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://en.wikipedia.org/wiki/D_with_stroke&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
When a true &lt;em&gt;đ&lt;/em&gt; is not available or desired, it is transcribed as &lt;em&gt;dj&lt;/em&gt; in modern Serbo-Croatian, and as &lt;em&gt;gj&lt;/em&gt; in Macedonian.
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>