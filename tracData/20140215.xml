<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #14215 (MultiSite: Add new &gt; different username from blog title) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Sat, 15 Feb 2014 23:11:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14215#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14215#comment:5/1392505914382020</guid>
      <description>&lt;p&gt;
What about we decouple the behaviors of creating new sites and users? Instead, the behavior would be to add your "First Administrator", and you'd choose between an existing user or explicitly creating a new user. Something like this mockup:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://core.trac.wordpress.org/raw-attachment/ticket/14215/2014-02-15%20at%203.03%20PM.png"&gt;&lt;img src="https://core.trac.wordpress.org/raw-attachment/ticket/14215/2014-02-15%20at%203.03%20PM.png" alt="https://core.trac.wordpress.org/raw-attachment/ticket/14215/2014-02-15%20at%203.03%20PM.png" crossorigin="anonymous" title="https://core.trac.wordpress.org/raw-attachment/ticket/14215/2014-02-15%20at%203.03%20PM.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Personally, I'm always afraid of entering the wrong email address. The auto-complete helps, but I think the two behaviors (create a site vs. create a user) should be completely decoupled.
&lt;/p&gt;
&lt;p&gt;
And, having just said that, maybe the "Add New Site" form should only permit selecting an existing user.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20438 (Custom Post Types with Post Format support aren't registered against ...) closed</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Sat, 15 Feb 2014 23:09:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20438#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20438#comment:7/1392505778534415</guid>
      <description>wontfix</description>
      <category>closedticket</category>
    </item><item>
      <title>2014-02-15 at 3.03 PM.png attached to Ticket #14215</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Sat, 15 Feb 2014 23:04:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14215/2014-02-15%20at%203.03%20PM.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14215/2014-02-15%20at%203.03%20PM.png/1392505458883699</guid>
      <description>&lt;p&gt;
Mockup of add existing vs. create new
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>27039.1.patch attached to Ticket #27039</title>
      
        <dc:creator>Frank Klein</dc:creator>

      <pubDate>Sat, 15 Feb 2014 22:53:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27039/27039.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27039/27039.1.patch/1392504806192345</guid>
      <description>&lt;p&gt;
Updated patch that fixes issues with the responsive small menu styles.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>27137.1.diff attached to Ticket #27137</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Sat, 15 Feb 2014 22:51:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27137/27137.1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27137/27137.1.diff/1392504684862322</guid>
      <description>&lt;p&gt;
Remove the capability check in &lt;code&gt;get_edit_post_link()&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27137 (Remove required user context from `get_edit_post_link()`) created</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Sat, 15 Feb 2014 22:49:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27137</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27137/1392504581044366</guid>
      <description>&lt;p&gt;
In a manner similar to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27113" title="#27113: defect (bug): Explicitly assign menu term relationship in wp_update_nav_menu_item() ... (closed: fixed)"&gt;#27113&lt;/a&gt;, &lt;code&gt;get_edit_post_link()&lt;/code&gt; yields inconsistent behavior when used without a user context.
&lt;/p&gt;
&lt;p&gt;
For example, when using WP-CLI or a cron system to trigger email generation, use of &lt;code&gt;get_edit_post_link()&lt;/code&gt; will return an empty string.
&lt;/p&gt;
&lt;p&gt;
The pattern established in core is to check whether the current user can edit a given post before calling &lt;code&gt;get_edit_post_link()&lt;/code&gt; because the corresponding HTML will be broken otherwise.
&lt;/p&gt;
&lt;p&gt;
Removing the capability check won't introduce a security hole because WordPress institutes a capability check when loading the link.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27113 (Explicitly assign menu term relationship in wp_update_nav_menu_item() ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Sat, 15 Feb 2014 22:42:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27113#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27113#comment:5/1392504177745436</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>dashboard.php2.diff attached to Ticket #27132</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 22:14:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27132/dashboard.php2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27132/dashboard.php2.diff/1392502465653077</guid>
      <description>&lt;p&gt;
This hides future posts form inside wp_dashboard_recent_posts()
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27014 (Incorporate the TinyMCE tests into our JS tests) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 15 Feb 2014 22:02:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27014#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27014#comment:6/1392501720177043</guid>
      <description>&lt;p&gt;
Running the TinyMCE tests from Grunt automatically together with the core tests won't work.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PhantomJS (used for core) cannot run TinyMCE properly. The reason is that a large part of TinyMCE deals with browser specific quirks and normalization. PhantomJS is WebKit based but is neither Chrome nor Safari. It works very well for "pure" JS but doesn't (and shouldn't) emulate browser specific quirks/problems with contenteditable, the DOM, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Even if there is a JavaScript "runner" that emulates different browsers, don't think it will work well. We would be testing the quality of emulation together with the functionality in TinyMCE, and we need it for IE 7,8,9,10,11, latest Firefox, Chrome, Safari, iOS, Android, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
In that terms the best option is to run the TinyMCE tests by hand in all browsers. In Grunt we could &lt;a class="ext-link" href="https://github.com/jjrdn/node-open"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;launch the browser&lt;/a&gt; from Node.js and run the tests. Not sure if we want to go there though.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) updated</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:59:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132#comment:6/1392501589281528</guid>
      <description>&lt;p&gt;
So, the widget wp_dashboard_site_activity() uses two functions:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;wp_dashboard_recent_posts()
&lt;/li&gt;&lt;li&gt;wp_dashboard_recent_comments()
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The latter actually &lt;em&gt;does&lt;/em&gt; have roles in place. It will only preview the comment if the person has permission to read the post, and will only show "approve" option if they can edit it.
&lt;/p&gt;
&lt;p&gt;
So I'm not sure that my second patch is actually relevant. Thoughts?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) updated</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:47:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132#comment:5/1392500850387893</guid>
      <description>&lt;p&gt;
Thanks for the feedback helen. Instead of moving the function call up I put a condition around it to keep the order of the contents intact.
&lt;/p&gt;
&lt;p&gt;
I'll look into more roles for the functions now.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>dashboard.php1.diff attached to Ticket #27132</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:46:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27132/dashboard.php1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27132/dashboard.php1.diff/1392500773834419</guid>
      <description>&lt;p&gt;
Condition added around wp_dashboard_recent_comments
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>class-wp-plugins-list-table.diff attached to Ticket #27136</title>
      
        <dc:creator>enej</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:31:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27136/class-wp-plugins-list-table.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27136/class-wp-plugins-list-table.diff/1392499900350723</guid>
      <description>&lt;p&gt;
patch for the bug...
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27136 (Installed plugin and theme search searched html) created</title>
      
        <dc:creator>enej</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:27:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27136</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27136/1392499636730760</guid>
      <description>&lt;p&gt;
Currently if you search your installed plugins and type 'strong' it will return plugins that have anything bolded in the description of the plugin.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27014 (Incorporate the TinyMCE tests into our JS tests) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:25:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27014#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27014#comment:5/1392499516821686</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/27180" title="TinyMCE tests: remove 'coverage' for now, has unsatisfied ..."&gt;27180&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
TinyMCE tests: remove 'coverage' for now, has unsatisfied dependencies. Tweak the test runner so it auto-starts. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27014" title="#27014: enhancement: Incorporate the TinyMCE tests into our JS tests (closed: fixed)"&gt;#27014&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [27180]: TinyMCE tests: remove 'coverage' for now, has unsatisfied ...</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:25:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/27180</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/27180/1392499515820887</guid>
      <description>&lt;p&gt;
TinyMCE tests: remove 'coverage' for now, has unsatisfied dependencies. Tweak the test runner so it auto-starts. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27014" title="#27014: enhancement: Incorporate the TinyMCE tests into our JS tests (closed: fixed)"&gt;#27014&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) updated</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:20:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132#comment:4/1392499202750951</guid>
      <description>&lt;p&gt;
kirrus: You should be able to use &lt;code&gt;remove_meta_box()&lt;/code&gt; to get rid of it in the interim - can dig up some code if you'd like.
&lt;/p&gt;
&lt;p&gt;
jackreichert: I'd probably just move the &lt;code&gt;wp_add_dashboard_widget()&lt;/code&gt; call up a few lines to be within the same conditional as Right Now, as I don't see anything particularly valuable for somebody who can't edit posts. That said, though, there should also be various cap checks within the widget itself, since people can be doing any number of things with caps and roles.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27127 (Improve plugin search on installed plugins page) updated</title>
      
        <dc:creator>enej</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:19:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27127#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27127#comment:2/1392499165840348</guid>
      <description>&lt;p&gt;
Hi John
&lt;/p&gt;
&lt;p&gt;
Do you think this feature is something that might end up in core?
&lt;/p&gt;
&lt;p&gt;
The latest patch I submitted contains:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Search for the plugin name and the description only. Since in the previous patch and your plugin the search looks at everything. So if you search for edit it would return all plugins instead of finding something like EditFlow. It would be better if it could search for plugin authors as well. The regular plugin search does search for plugin authors. But it also searches html. So if you search 'strong' it will return all the plugins that have something bolded in the description as well. I will submit a separate ticket and patch for that.
&lt;/li&gt;&lt;li&gt;The patch also tries to take into account for plugins that have been selected by the user. It keeps them shown even though they might not match the users selection. Since when someone selects a plugin they most likely want to preforms a bulk action. The search fails if you select everything. Also it doesn't hide the plugin if it is not part of search results and is unselected.
&lt;/li&gt;&lt;li&gt;If no plugins are found it displays the same no plugins found message as regular search.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
What this patch doesn't have.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Right now the patch does check if the page has pagination elements but it doesn't do an ajax call to the backend implemented. Also do we want to have search results paginated as well?
&lt;/li&gt;&lt;li&gt;This features could should also be implemented for the WordPress network.
&lt;/li&gt;&lt;li&gt;Also the JavaScript is currently inline. Should it be its own file or added to one of the existing WordPress JavaScript admin files?
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
What I am not sure about is would it be best to develop this as a plugin and the try to do a patch to merge in to core? Or is it best to try to do a patch that gets merged into core right away? Right now I am trying to keep things simple by having the patch only modify one file.
&lt;/p&gt;
&lt;p&gt;
Also will this change require a JavaScript unit test and a PHP Unit test?
&lt;/p&gt;
&lt;p&gt;
Cheers
Enej
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>27003.11.diff attached to Ticket #27003</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Sat, 15 Feb 2014 21:03:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27003/27003.11.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27003/27003.11.diff/1392498235000036</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Schermata 2014-02-15 alle 20.07.59.png attached to Ticket #27135</title>
      
        <dc:creator>stratboy</dc:creator>

      <pubDate>Sat, 15 Feb 2014 19:18:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27135/Schermata%202014-02-15%20alle%2020.07.59.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27135/Schermata%202014-02-15%20alle%2020.07.59.png/1392491929401910</guid>
      <description>&lt;p&gt;
broken connection
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27135 (get_post_galleries breaks server connection) created</title>
      
        <dc:creator>stratboy</dc:creator>

      <pubDate>Sat, 15 Feb 2014 19:18:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27135</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27135/1392491890267722</guid>
      <description>&lt;p&gt;
Hi. I'm testing locally with this:
&lt;/p&gt;
&lt;p&gt;
v3.8.1 with a custom theme (mine) almost empty.
firefox 27.0.1 (osx)
MAMP PRO
&lt;/p&gt;
&lt;p&gt;
I'm trying to use the media.php &amp;gt; get_post_galleries() function but it breaks the page: it hangs infinitely OR it immediately stops the connection.
&lt;/p&gt;
&lt;p&gt;
It happens in any case, I've tried:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;functions.php
&lt;/li&gt;&lt;li&gt;functions.php inside a 'post_gallery' filter
&lt;/li&gt;&lt;li&gt;single.php, just in the page
&lt;/li&gt;&lt;li&gt;both passing ID or $post object
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I taken a look to the function and progressively commented out code until I've found that what it breaks all is row 2030:
&lt;/p&gt;
&lt;pre class="wiki"&gt;$gallery = do_shortcode_tag($shortcode);
&lt;/pre&gt;&lt;p&gt;
Hope it helps, regards.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #8592 (Private Pages not listed in the Parent dropdown) updated</title>
      
        <dc:creator>OSD</dc:creator>

      <pubDate>Sat, 15 Feb 2014 19:02:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8592#comment:168</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8592#comment:168/1392490954421538</guid>
      <description>&lt;p&gt;
Need help...
&lt;/p&gt;
&lt;p&gt;
When I create a new child page for a private parent page it's not possible to publish this new child page, it will go back to private.
&lt;/p&gt;
&lt;h2 id="solved"&gt;solved&lt;/h2&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) updated</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 18:52:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132#comment:3/1392490347821791</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
In the attached patch I've encapsulated the query for future posts in a current_user_can condition.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>dashboard.php.diff attached to Ticket #27132</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 18:51:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27132/dashboard.php.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27132/dashboard.php.diff/1392490277289423</guid>
      <description>&lt;p&gt;
Encapsulates the future activity in capabilities condition
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #3670 (Removing CDATA close tag ( ]]&gt; ) unbalances the CDATA block) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 15 Feb 2014 18:34:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3670#comment:64</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3670#comment:64/1392489279808436</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #3670,â€‹27134 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 15 Feb 2014 18:34:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=3670%2C27134</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=3670%2C27134/1392489258032086</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/3670" title="#3670: defect (bug): Removing CDATA close tag ( ]]&amp;gt; ) unbalances the CDATA block (new)"&gt;#3670&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #27134 (the_content() contains unexpected hard coded string replacement) created</title>
      
        <dc:creator>awelzel</dc:creator>

      <pubDate>Sat, 15 Feb 2014 18:02:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27134</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27134/1392487339899162</guid>
      <description>&lt;p&gt;
In wp-includes/post-template.php the function the_content() has an unexpected string replacemenet:
&lt;/p&gt;
&lt;pre class="wiki"&gt;function the_content( $more_link_text = null, $strip_teaser = false) {
	$content = get_the_content( $more_link_text, $strip_teaser );
	$content = apply_filters( 'the_content', $content );
	$content = str_replace( ']]&amp;gt;', ']]&amp;amp;gt;', $content );
	echo $content;
}
&lt;/pre&gt;&lt;p&gt;
This makes no sense at all and breaks CDATA blocks. Why?
&lt;/p&gt;
&lt;p&gt;
Suggested solution: Remove the line
&lt;/p&gt;
&lt;pre class="wiki"&gt;	$content = str_replace( ']]&amp;gt;', ']]&amp;amp;gt;', $content );
&lt;/pre&gt;&lt;p&gt;
and implement a filter to do this replacement where neccessary.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3670 (Removing CDATA close tag ( ]]&gt; ) unbalances the CDATA block) updated</title>
      
        <dc:creator>awelzel</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:54:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3670#comment:62</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3670#comment:62/1392486896056577</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/3670" title="#3670: defect (bug): Removing CDATA close tag ( ]]&amp;gt; ) unbalances the CDATA block (new)"&gt;scenic&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
I also suggest to make this a FILTER for RSS!
&lt;/p&gt;
&lt;p&gt;
It is just stupid to do this replacement without a filter. Why?
&lt;/p&gt;
&lt;p&gt;
I will open a new ticket for 3.8.1 - hopefully someone will notice it then.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>plugins.2.diff attached to Ticket #27127</title>
      
        <dc:creator>enej</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:47:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27127/plugins.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27127/plugins.2.diff/1392486460427545</guid>
      <description>&lt;p&gt;
Incomplete plugins quicksearch..
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27133 (Redundant type casting in wp_get_object_terms) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:35:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27133#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27133#comment:3/1392485709835226</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27133 (Redundant type casting in wp_get_object_terms) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:34:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27133#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27133#comment:2/1392485699224310</guid>
      <description>&lt;p&gt;
Blind type-casting can cause its own hidden issues. &lt;code&gt;(array) null&lt;/code&gt; produces &lt;code&gt;array()&lt;/code&gt; but &lt;code&gt;(array) false&lt;/code&gt; (length of 0) produces &lt;code&gt;array( 0 =&amp;gt; false )&lt;/code&gt; (length of 1). It's best to be explicit; is_array() is not exactly slow.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26050 (Continual Admin Page POST (HeartBeats?) Can Cause SQL Connection Issues) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:28:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26050#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26050#comment:9/1392485291824010</guid>
      <description>&lt;p&gt;
This has received a decent amount of testing in both simulated situations and real environments. I would like to see some more data on what the reported problem is. "CPU hog" isn't really enough to go on. Is it MySQL connections? Queries? PHP processes? Memcache writes? What's causing this CPU load? Is it just load averages spiking, or is anything else unusual? This isn't an expensive process, and a request a second or whatever the average might be with a bunch of concurrent editors shouldn't by itself be a big issue. Front-end traffic also shouldn't be a major factor.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #25782 (Admin bar does not display when going from the dashboard to the site ...) closed</title>
      
        <dc:creator>bansod_deven</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:14:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/25782#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/25782#comment:2/1392484440057354</guid>
      <description>invalid</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 15 Feb 2014 17:12:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132#comment:2/1392484376535426</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Confirmed.
&lt;/p&gt;
&lt;p&gt;
In addition, the links for each post (which is an 'edit' link) do not have capability checks in place, resulting in dead links for users who cannot edit the posts.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27133 (Redundant type casting in wp_get_object_terms) updated</title>
      
        <dc:creator>OriginalEXE</dc:creator>

      <pubDate>Sat, 15 Feb 2014 16:50:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27133#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27133#comment:1/1392483028165710</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I have attached a patch removing the unnecessary type casting. It is, however, worth considering replacing all is_array() checks with direct type casting, which appears to be faster in php.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>27133.patch attached to Ticket #27133</title>
      
        <dc:creator>OriginalEXE</dc:creator>

      <pubDate>Sat, 15 Feb 2014 16:47:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27133/27133.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27133/27133.patch/1392482867929301</guid>
      <description>&lt;p&gt;
Proposed improvement
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27133 (Redundant type casting in wp_get_object_terms) created</title>
      
        <dc:creator>OriginalEXE</dc:creator>

      <pubDate>Sat, 15 Feb 2014 16:46:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27133</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27133/1392482794403778</guid>
      <description>&lt;p&gt;
In wp_get_object_terms function (taxonomy.php), there is a redundant type casting to array after is_array() check has already been performed on that variable.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #21113 (Previous/Next page links maintain all GET variables) updated</title>
      
        <dc:creator>kirrus</dc:creator>

      <pubDate>Sat, 15 Feb 2014 16:31:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21113#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21113#comment:13/1392481875464324</guid>
      <description>&lt;p&gt;
Oh, I also forgot, the main problem we were having was that this was leaking into the links, and scaring users, as their address bar suddenly contained useless (but scary looking) attack-type urls.
&lt;/p&gt;
&lt;p&gt;
Saying that, is there much point leaving this bug here, should it be closed as wontfix or invalid?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) updated</title>
      
        <dc:creator>kirrus</dc:creator>

      <pubDate>Sat, 15 Feb 2014 16:29:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132#comment:1/1392481749009578</guid>
      <description>&lt;p&gt;
It's worth noting, that in order to disable, I've had to use a plugin that locks subscribers to profile.php, which means they no-longer see the warning about using the default generated password.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27132 (Activity module shown by default for 'subscribers' includes scheduled posts) created</title>
      
        <dc:creator>kirrus</dc:creator>

      <pubDate>Sat, 15 Feb 2014 16:27:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27132</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27132/1392481621410232</guid>
      <description>&lt;p&gt;
A subscriber can see upcoming posts in their wp-admin page;
&lt;a class="ext-link" href="https://twitter.com/ActionBcool/status/434710377419378689"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://twitter.com/ActionBcool/status/434710377419378689&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This is a problem for this specific site, because it can expose embargoed information, and get them into a lot of trouble. There doesn't appear to be a way to disable this function without a plugin currently.
&lt;/p&gt;
&lt;p&gt;
I'm not sure if this is a bug (information disclosure), or a feature request (please can you make it optional?).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27090 (WordPress XML-RPC method returns error but still posts) updated</title>
      
        <dc:creator>IndigoJo</dc:creator>

      <pubDate>Sat, 15 Feb 2014 11:07:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27090#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27090#comment:6/1392462476710833</guid>
      <description>&lt;p&gt;
The error string read "Error downloading &lt;a class="ext-link" href="http://www.blogistan.co.uk/blog/xmlrpc.php"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://www.blogistan.co.uk/blog/xmlrpc.php&lt;/a&gt; - server replied: Internal Server Error".
&lt;/p&gt;
&lt;p&gt;
It's happened every time I submit a post with Publish status using XML-RPC. Do the Wordpress apps for Android, iOS etc use the wp methods to submit posts? Last time I looked at the source code, they were still using the metaWeblog methods.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27131 (email address in the title breaks in quickedit) updated</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Sat, 15 Feb 2014 09:21:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27131#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27131#comment:3/1392456093318874</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27131 (email address in the title breaks in quickedit) closed</title>
      
        <dc:creator>ryno267</dc:creator>

      <pubDate>Sat, 15 Feb 2014 08:44:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27131#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27131#comment:2/1392453874566431</guid>
      <description>invalid: &lt;p&gt;
Well sheeeet. cloudflare was enabled for our wiki subdomain (didn't know it was honestly) so turned it to bypass and flushed. Issue gone.
&lt;/p&gt;
&lt;p&gt;
My bad. thanks for the find Sergey! Cheers. closing
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #27131 (email address in the title breaks in quickedit) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 15 Feb 2014 08:31:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27131#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27131#comment:1/1392453071730052</guid>
      <description>&lt;p&gt;
That code is not a part of WordPress core.
&lt;/p&gt;
&lt;p&gt;
Looks like it might have to do with CloudFlare "E-mail address obfuscation" feature:
&lt;a class="ext-link" href="http://techblog.gregmarchal.com/strange-javascript-in-wordpress-quick-edit-comment/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://techblog.gregmarchal.com/strange-javascript-in-wordpress-quick-edit-comment/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27111 (Turning off global comments should include existing content) updated</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 04:56:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27111#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27111#comment:3/1392440165416860</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
While the IRC discussion seems to imply that fulfilling this ticket should implement function that goes and turns off comments for each post, I thought that perhaps, instead, a new options flag may be cleaner. I tend to prefer to provide options that are not irrevocable. Switching all comments off, one post at a time, is hard to undo.
&lt;/p&gt;
&lt;p&gt;
The attached patch sets up a new option in the options table similar to 'default_comment_status' but would be global.
&lt;/p&gt;
&lt;p&gt;
The only thing missing from the patch is the line:
&lt;/p&gt;
&lt;pre class="wiki"&gt;INSERT INTO  `wordpress`.`wp_options` (`option_name` , `option_value`)
VALUES ('global_comment_status',  'open');
&lt;/pre&gt;&lt;p&gt;
I wasn't sure where/how to add that to the patch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>global-comments-off.diff attached to Ticket #27111</title>
      
        <dc:creator>jackreichert</dc:creator>

      <pubDate>Sat, 15 Feb 2014 04:55:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27111/global-comments-off.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27111/global-comments-off.diff/1392440122239936</guid>
      <description>&lt;p&gt;
Provides functionality for global comments flag.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27131 (email address in the title breaks in quickedit) created</title>
      
        <dc:creator>ryno267</dc:creator>

      <pubDate>Sat, 15 Feb 2014 02:43:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27131</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27131/1392432216863945</guid>
      <description>&lt;p&gt;
I had some page titles with email addresses in them (dont ask) and when hit "quick edit" from the pages list I get this after the email in the title field in quickedit:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Using test@domain.com/* &amp;lt;![CDATA[ */(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();/* ]]&amp;gt; */ Email
&lt;/pre&gt;&lt;p&gt;
Original title was "Using test@â€¦ Email"
&lt;/p&gt;
&lt;p&gt;
Very repeatable.
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Make page with email address in title.
&lt;/li&gt;&lt;li&gt;view all pages: /wp-admin/edit.php
&lt;/li&gt;&lt;li&gt;click "Quick Edit"
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
If you update without cleaning it up.. all that code is now part of the title.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #25169 (Optimize all images / pngs in core) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sat, 15 Feb 2014 01:28:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/25169#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/25169#comment:17/1392427683195141</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/25169#comment:8" title="Comment 8"&gt;jorbin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm using grunt-contrib-imagmin 0.4.1 rather than the newer 0.5 since 0.5 is using a new library that seems to throw errors on subsequent runs.   I'm looking into that upstream.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
From a quick bit of research it looks like the optional dependencies will fail a little more gracefully in v0.5.0 and going further upstream:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;grunt-contrib-imagemin&lt;/code&gt; currently has a dependency of &lt;code&gt;image-min&lt;/code&gt; v0.1.1
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;v~0.1.1&lt;/code&gt; has a dependency on &lt;code&gt;optipng-bin&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;v~0.1.2&lt;/code&gt; has &lt;code&gt;optipng-bin&lt;/code&gt; as an optional dependency
&lt;/li&gt;&lt;li&gt;&lt;code&gt;v~0.1.3&lt;/code&gt; removes the &lt;code&gt;optipng-bin&lt;/code&gt; dependency in favour of &lt;code&gt;pngquant-bin&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I submitted a pull request &lt;a class="ext-link" href="https://github.com/gruntjs/grunt-contrib-imagemin/pull/152"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://github.com/gruntjs/grunt-contrib-imagemin/pull/152&lt;/a&gt; to bump the &lt;code&gt;grunt-contrib-imagemin&lt;/code&gt; dependency of &lt;code&gt;image-min&lt;/code&gt; to &lt;code&gt;v0.1.3&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Maybe reclose this ticket and create a new one for updating core build to &lt;code&gt;grunt-contrib-imagmin&lt;/code&gt; to &lt;code&gt;v0.5.x&lt;/code&gt; once all the upstream issues are fixed? &lt;em&gt;(I can survive with the errors in Windows for a while)&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #25169 (Optimize all images / pngs in core) reopened</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Fri, 14 Feb 2014 23:24:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/25169#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/25169#comment:16/1392420263392171</guid>
      <description>&lt;p&gt;
This causes numerous issues with &lt;code&gt;npm install&lt;/code&gt; on Windows installs :(
&lt;/p&gt;
&lt;p&gt;
I am reopening the ticket because of the console errors from running &lt;code&gt;npm install&lt;/code&gt;. Previously to the addition of &lt;code&gt;grunt-contrib-imagemin&lt;/code&gt; to &lt;code&gt;package.json&lt;/code&gt; it was an error free build environment for Windows contributors.
&lt;/p&gt;
&lt;p&gt;
Granted I don't think any of the core committers are running Windows to commit against core and the crux of this patch is for the the Grunt &lt;code&gt;precommit&lt;/code&gt; task.
&lt;/p&gt;
&lt;p&gt;
I tested both &lt;code&gt;grunt-contrib-imagemin&lt;/code&gt; v0.4.1 and v0.5.0 and the errors are very similar for both versions.
&lt;/p&gt;
&lt;p&gt;
Using v0.5.0 fails much more gracefully, you still get similar errors but subsequent runs of &lt;code&gt;npm install&lt;/code&gt; does not try to reinstall the missing component.
&lt;/p&gt;
&lt;h2 id="npminstall"&gt;npm install&lt;/h2&gt;
&lt;p&gt;
Using: &lt;code&gt;"grunt-contrib-imagemin" : "~0.4.1",&lt;/code&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;npm install console output log: &lt;a class="ext-link" href="https://gist.github.com/ntwb/8dd0e411650142d721ce"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://gist.github.com/ntwb/8dd0e411650142d721ce&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;npm ERR! weird error 8&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;npm ERR! not ok code 0&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Using: `"grunt-contrib-imagemin" : "~0.5.0",
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;npm install console output log: &lt;a class="ext-link" href="https://gist.github.com/ntwb/146da33743792ed85756"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://gist.github.com/ntwb/146da33743792ed85756&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;npm WARN optional dep failed, continuing optipng-bin@0.3.1&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="gruntbuild"&gt;grunt build&lt;/h2&gt;
&lt;p&gt;
Using: &lt;code&gt;"grunt-contrib-imagemin" : "~0.4.1",&lt;/code&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt; Local Npm module "grunt-contrib-imagemin" not found. Is it installed?&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Done, without errors.&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Using: `"grunt-contrib-imagemin" : "~0.5.0",
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Done, without errors.&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="gruntprecommit"&gt;grunt precommit&lt;/h2&gt;
&lt;pre class="wiki"&gt;Running "imagemin:core" (imagemin) task
Warning: Cannot find module 'optipng-bin' Use --force to continue.
Aborted due to warnings.
C:\xampp\htdocs\develop.wp.nw [trunk]&amp;gt;
&lt;/pre&gt;</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #27130 (Credentials parameter default in wp_signon() should be an array) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 14 Feb 2014 23:24:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27130#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27130#comment:2/1392420253881899</guid>
      <description>&lt;p&gt;
Seems like the default value of &lt;code&gt;$credentials&lt;/code&gt; should be an array.
&lt;/p&gt;
&lt;p&gt;
We use strict comparison for &lt;code&gt;$secure_cookie&lt;/code&gt; though:
&lt;a href="https://core.trac.wordpress.org/browser/tags/3.8.1/src/wp-includes/user.php#L43"&gt;https://core.trac.wordpress.org/browser/tags/3.8.1/src/wp-includes/user.php#L43&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Could probably use &lt;code&gt;null&lt;/code&gt; instead, but need to be careful with backwards compatibility, so I guess it's safer to keep it a string. The &lt;code&gt;@param&lt;/code&gt; description is correct, it's treated as a boolean value.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27130 (Credentials parameter default in wp_signon() should be an array) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 14 Feb 2014 22:57:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27130#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27130#comment:1/1392418627747236</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27130 (Credentials parameter default in wp_signon() should be an array) created</title>
      
        <dc:creator>tivnet</dc:creator>

      <pubDate>Fri, 14 Feb 2014 22:46:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27130</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27130/1392417973399973</guid>
      <description>&lt;pre class="wiki"&gt; * @param array $credentials Optional. User info in order to sign on.
 * @param bool $secure_cookie Optional. Whether to use secure cookie.
 * @return object Either WP_Error on failure, or WP_User on success.
 */
function wp_signon( $credentials = '', $secure_cookie = '' ) {
&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;@return WP_User|WP_Error Either WP_Error on failure, or WP_User on success.&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;&lt;code&gt;$credentials = '', $secure_cookie = ''&lt;/code&gt; probably wrong default values. Or wrong &lt;code&gt;@param&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #21300 (Implement autoloader compatible with PSR-0 / PSR-4 for plugins and themes) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Fri, 14 Feb 2014 22:01:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21300#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21300#comment:22/1392415299559565</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/21300#comment:21" title="Comment 21"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Let me put it this way, though: my main customer at the moment is running a nuclear wasteland comprising of ~80 mostly forked plugins and four themes due to hard-coded references and child themes all over the place, none of them up to date, with a grand total of ~8000 files full of buggy spaghetti code.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
LOL!  Well, you've definitely got me beat for suckiest main client, at least as far as the code you have to work on. Ugh.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #21300 (Implement autoloader compatible with PSR-0 / PSR-4 for plugins and themes) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 21:59:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21300#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21300#comment:21/1392415187385682</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/21300#comment:20" title="Comment 20"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Please don't. Deep directory structures are a real pain to deal, especially when you are talking about a small number of files like with most plugins.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
But then, you and I mustn't be dealing with the same plugins on a day to day basis.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That said, struggling to find classes is a problem I never see. What editor do you use?  Doesn't your editor give you tools to find classes easily?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Textmate, and it does.
&lt;/p&gt;
&lt;p&gt;
Let me put it this way, though: my main customer at the moment is running a nuclear wasteland comprising of ~80 mostly forked plugins and four themes due to hard-coded references and child themes all over the place, none of them up to date, with a grand total of ~8000 files full of buggy spaghetti code.
&lt;/p&gt;
&lt;p&gt;
It's not pretty, and the first thing that came to my mind was -- duh! -- to drop WP entirely and rebuild his entire site on top for a sane PHP framework and Postgres.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #25623 (The design of update_option etc makes race conditions likely to happen) updated</title>
      
        <dc:creator>sphoid</dc:creator>

      <pubDate>Fri, 14 Feb 2014 21:50:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/25623#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/25623#comment:4/1392414634538354</guid>
      <description>&lt;p&gt;
I'm fairly certain I'm actually having this very problem. We have 7 web servers in a production environment using the memcached plugin. I've been thinking for the longest time that there is a bug in php-memcache or in memcached itself because we intermittently get stubborn stale cache data but it sounds very likely that cache writes are stepping all over each other causing old data to get written back to the cache which resets the expiry for the key. This is a very difficult thing to prove because it only seems to happen in high load environments with many servers (this is not a common wp configuration outside of wordpress.com) and I'm also thinking the size of the data blob might be a factor too since we only ever experience this with alloptions which is upwards of 500Kb in our environment. I'm watching this ticket with great interest.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26491 (Bundled themes: update to latest version of HTML5 Shiv) updated</title>
      
        <dc:creator>philiparthurmoore</dc:creator>

      <pubDate>Fri, 14 Feb 2014 21:38:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26491#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26491#comment:5/1392413913655150</guid>
      <description>&lt;p&gt;
I'd love to see this in Core; many themes would benefit from it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27125 (Neutral Errormessage in Login) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Fri, 14 Feb 2014 21:28:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27125#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27125#comment:2/1392413338298953</guid>
      <description>&lt;p&gt;
Those tickets linked by Helen give a good insight into why this won't be changed. It's worth reading through them if you'd like to know the reasoning.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27127 (Improve plugin search on installed plugins page) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Fri, 14 Feb 2014 21:21:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27127#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27127#comment:1/1392412890165805</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This is neat and I've previously written a plugin to do a very similar thing (&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/27127/plugin-filter.php" title="Attachment 'plugin-filter.php' in Ticket #27127"&gt;plugin-filter.php&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/27127/plugin-filter.php" title="Download"&gt;â€‹&lt;/a&gt;). It makes searching much, much faster.
&lt;/p&gt;
&lt;p&gt;
One consideration that needs taking into account is that the plugins screen has pagination, although it is set to a high value by default. It does mean that if someone has lowered the value then they may not find plugins they're expecting to find.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>plugin-filter.php attached to Ticket #27127</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Fri, 14 Feb 2014 21:19:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27127/plugin-filter.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27127/plugin-filter.php/1392412760767342</guid>
      <description>&lt;p&gt;
"Plugin Filter" plugin
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #24373 (WordPress Importer - Strict Standards compatibility) reopened</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 14 Feb 2014 19:49:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24373#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24373#comment:11/1392407399879026</guid>
      <description>&lt;p&gt;
Let's keep the ticket open as a reminder.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #24373 (WordPress Importer - Strict Standards compatibility) updated</title>
      
        <dc:creator>styledev</dc:creator>

      <pubDate>Fri, 14 Feb 2014 19:34:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24373#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24373#comment:10/1392406460392687</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Any idea when this will actually get added into the plugin hosted on Wordpress.org? The last update was Jan. 14th, 2014 and did not include this patch...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26543 (Backbone Routing doesn't support query arguments as parseable route ...) updated</title>
      
        <dc:creator>matveb</dc:creator>

      <pubDate>Fri, 14 Feb 2014 19:28:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26543#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26543#comment:11/1392406080173991</guid>
      <description>&lt;p&gt;
Thanks for the patch, ehg.
&lt;/p&gt;
&lt;p&gt;
From Backbone 1.1.1 release notes: &lt;em&gt;Added an execute hook to the Router, which allows you to hook in and custom-parse route arguments, like query strings, for example.&lt;/em&gt; Hat-tip mattwiebe
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27107 (Rethink how the "special characters" TinyMCE modal works) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 14 Feb 2014 19:19:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27107#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27107#comment:3/1392405569873292</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/27179" title="TinyMCE: when clicking on a character in the Charmap modal, don't ..."&gt;27179&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
TinyMCE: when clicking on a character in the Charmap modal, don't close it if the Crtl key is pressed. Makes it possible to insert several special chars in a row. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27107" title="#27107: enhancement: Rethink how the &amp;#34;special characters&amp;#34; TinyMCE modal works (closed: fixed)"&gt;#27107&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [27179]: TinyMCE: when clicking on a character in the Charmap modal, don't ...</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 14 Feb 2014 19:19:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/27179</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/27179/1392405568572815</guid>
      <description>&lt;p&gt;
TinyMCE: when clicking on a character in the Charmap modal, don't close it if the Crtl key is pressed. Makes it possible to insert several special chars in a row. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27107" title="#27107: enhancement: Rethink how the &amp;#34;special characters&amp;#34; TinyMCE modal works (closed: fixed)"&gt;#27107&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>26959-03.patch attached to Ticket #26959</title>
      
        <dc:creator>gcorne</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:36:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/26959/26959-03.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/26959/26959-03.patch/1392402964919268</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #20578 (Allow users to delete a plugin without uninstalling) updated</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:29:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20578#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20578#comment:16/1392402573337635</guid>
      <description>&lt;p&gt;
Ahem, you guys. kurtpayne said that he knows the language needs reworking/actual attention.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>widgets.php.patch attached to Ticket #27129</title>
      
        <dc:creator>eliorivero</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:12:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27129/widgets.php.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27129/widgets.php.patch/1392401577828034</guid>
      <description>&lt;p&gt;
Inline PHPDocs and Hook Docs.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27129 (Hook Docs (18): wp-includes/widgets.php) created</title>
      
        <dc:creator>eliorivero</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:11:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27129</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27129/1392401480887217</guid>
      <description>&lt;p&gt;
Hi, first time contributing, hope I got this right.
&lt;/p&gt;
&lt;p&gt;
Added PHPDocs for class properties and public methods. Didn't touch the private ones.
&lt;/p&gt;
&lt;p&gt;
Added inline docs for hooks. Didn't touch the ones labeled as temporary_hook.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20578 (Allow users to delete a plugin without uninstalling) updated</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:04:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20578#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20578#comment:15/1392401086992033</guid>
      <description>&lt;p&gt;
Or a better answer of "No, delete only the files."
&lt;/p&gt;
&lt;p&gt;
Also why are we capitalizing 'Delete' here, following a comma?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27128 (Theme installator - ajax error message) created</title>
      
        <dc:creator>vinvin27</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:04:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27128</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27128/1392401068192315</guid>
      <description>&lt;p&gt;
Hi,
&lt;/p&gt;
&lt;p&gt;
I getting ajax error when i opening theme in new tab, only themes were loaded in ajax.
&lt;/p&gt;
&lt;p&gt;
If there are so many results, other themes are loading, opening in current tab is OK but in new tab i getting this message :
&lt;/p&gt;
&lt;pre class="wiki"&gt;{"rows":"
Aucun th\u00e8me ne correspond \u00e0 votre requ\u00eate.&amp;lt;\/div&amp;gt;"}
&lt;/pre&gt;&lt;p&gt;
Cheers :)
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #21300 (Implement autoloader compatible with PSR-0 / PSR-4 for plugins and themes) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Fri, 14 Feb 2014 18:01:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21300#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21300#comment:20/1392400894732358</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/21300#comment:19" title="Comment 19"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It would be *very* sweet if, instead of needing to dig through a hodgepodge of files in order to locate a class, one could find &lt;code&gt;Foo_Bar_Baz&lt;/code&gt; in &lt;code&gt;Foo/Bar/Baz.php&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Please don't. Deep directory structures are a real pain to deal, especially when you are talking about a small number of files like with most plugins.
&lt;/p&gt;
&lt;p&gt;
That said, struggling to find classes is a problem I never see. What editor do you use?  Doesn't your editor give you tools to find classes easily?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26491 (Bundled themes: update to latest version of HTML5 Shiv) updated</title>
      
        <dc:creator>lancewillett</dc:creator>

      <pubDate>Fri, 14 Feb 2014 17:28:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26491#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26491#comment:4/1392398906741846</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26491#comment:2" title="Comment 2"&gt;wonderboymusic&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
anything stopping us from doing this
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sleep, other more urgent work. :)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
why don't we bundle this in core and have all themes point at it?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Do we need to? It's lightweight and doesn't need updating very often.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27003 (Introduce wp_get_network() and begin cleanup of multisite load) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Fri, 14 Feb 2014 17:23:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27003#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27003#comment:14/1392398612905061</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27003#comment:13" title="Comment 13"&gt;TobiasBg&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
(happens, in theory, if there are no rows in &lt;code&gt;$wpdb-&amp;gt;site&lt;/code&gt;)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Would it make sense to use another &lt;code&gt;wp_die()&lt;/code&gt; here if the count is 0 to explain that no networks are setup?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>plugins.diff attached to Ticket #27127</title>
      
        <dc:creator>enej</dc:creator>

      <pubDate>Fri, 14 Feb 2014 17:18:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27127/plugins.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27127/plugins.diff/1392398299824857</guid>
      <description>&lt;p&gt;
Inline JavaScript on the plugins page.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27127 (Improve plugin search on installed plugins page) created</title>
      
        <dc:creator>enej</dc:creator>

      <pubDate>Fri, 14 Feb 2014 17:16:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27127</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27127/1392398213499705</guid>
      <description>&lt;p&gt;
If you have lots of plugins installed trying to find one in the installed plugin page is not quick. The search box is quite slow ( requires a page refresh ).
&lt;/p&gt;
&lt;p&gt;
Adding some JavaScript that transforms the current search box into a quickfind box would help solve this problem.
&lt;/p&gt;
&lt;p&gt;
As the user types a keyword the JavaScript searched across the displayed text for the plugin, only displaying the plugins that contain that keyword.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27116 (Some nav tab and media upload CSS broken in colors.css/wp-admin.css merge) updated</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 14 Feb 2014 16:31:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27116#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27116#comment:8/1392395503051613</guid>
      <description>&lt;p&gt;
I think I know what I did here... My 3.8 test install was not on 3.8 anymore, for some reason... So, you are right. This does not happen on 3.8 and is therefore not a regression. The colors/wp-admin.css merge did not break anything here. I guess the tabs without the bottom border just looked weird to me. So, that part of the ticket is invalid. Sorry for the confusion.
&lt;/p&gt;
&lt;p&gt;
However, while investigating this, I noticed another minor glitch (also not a regression, so no top priority), which is easy to fix: When the &lt;code&gt;.nav-tab-active&lt;/code&gt; is in the bottom row of stacked tabs, the background of the non-active tabs spills into the active tab, as it's transparent. Its background color should simply become the same color as the bottom border.
See the attached screenshot.
&lt;/p&gt;
&lt;p&gt;
Finally, we have the background in the old media upload thickbox (which you can confirm, if I understand correctly).
&lt;/p&gt;
&lt;p&gt;
So, the new &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/27116/27116.3.patch" title="Attachment '27116.3.patch' in Ticket #27116"&gt;27116.3.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/27116/27116.3.patch" title="Download"&gt;â€‹&lt;/a&gt; fixes that and the (newly discovered) &lt;code&gt;.nav-tab-active&lt;/code&gt; glitch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>27116.3.patch attached to Ticket #27116</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 14 Feb 2014 16:31:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27116/27116.3.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27116/27116.3.patch/1392395479539244</guid>
      <description>&lt;p&gt;
Patch for old media upload thickbox and &lt;code&gt;nav-tab-active&lt;/code&gt; background
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>nav-tab-active-background-shine-through.png attached to Ticket #27116</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 14 Feb 2014 16:30:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27116/nav-tab-active-background-shine-through.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27116/nav-tab-active-background-shine-through.png/1392395436935109</guid>
      <description>&lt;p&gt;
Background of top nav tab shines through into active tab
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Tickets #20276,â€‹27126 batch updated</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Fri, 14 Feb 2014 15:41:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=20276%2C27126</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=20276%2C27126/1392392490454138</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20276" title="#20276: task (blessed): Tie nonces and cookies to expirable sessions (closed: fixed)"&gt;#20276&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Tickets #27125,â€‹3708 batch updated</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Fri, 14 Feb 2014 15:40:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=27125%2C3708</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=27125%2C3708/1392392417414176</guid>
      <description>&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27125" title="#27125: enhancement: Neutral Errormessage in Login (closed: duplicate)"&gt;#27125&lt;/a&gt; was marked as a duplicate.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #27126 (Cookies should be invalidated on logout) created</title>
      
        <dc:creator>fkseven</dc:creator>

      <pubDate>Fri, 14 Feb 2014 15:35:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27126</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27126/1392392113647012</guid>
      <description>&lt;p&gt;
Currently cookies do not get invalidated on logout.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27125 (Neutral Errormessage in Login) created</title>
      
        <dc:creator>fkseven</dc:creator>

      <pubDate>Fri, 14 Feb 2014 15:32:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27125</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27125/1392391954063725</guid>
      <description>&lt;p&gt;
Response messages return by Login Form should be neutral making it impossible to identify valid users.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>dunglas</dc:creator>

      <pubDate>Fri, 14 Feb 2014 13:54:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:10/1392386080093297</guid>
      <description>&lt;p&gt;
This new patch (&lt;code&gt; shutdown_flush.diff &lt;/code&gt;) includes @Denis-de-Bernardy improvements but calls &lt;code&gt; wp_ob_end_flush_all() &lt;/code&gt; only if necessary.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>shutdown_flush.diff attached to Ticket #27122</title>
      
        <dc:creator>dunglas</dc:creator>

      <pubDate>Fri, 14 Feb 2014 13:53:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27122/shutdown_flush.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27122/shutdown_flush.diff/1392385981370743</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27078 (Use Autoprefixer for CSS vendor prefixes) closed</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Fri, 14 Feb 2014 13:38:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27078#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27078#comment:21/1392385097652090</guid>
      <description>fixed: &lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27078#comment:20" title="Comment 20"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Needs Safari 5.0 for iPad 1st gen and iPhone 3GS.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Safari in Autoprefixer's config refers to desktop Safari; mobile Safari is iOS. In testing, it makes no actual difference to specify it, because Android 2.1 requires just as many, if not more, -webkit- prefixes.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>dunglas</dc:creator>

      <pubDate>Fri, 14 Feb 2014 13:13:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:9/1392383629987342</guid>
      <description>&lt;p&gt;
I agree to disable this optimization in debug mode, however the problem with your proposal is that &lt;code&gt; wp_ob_end_flush_all() &lt;/code&gt; is always called even when this is unnecessary.
&lt;/p&gt;
&lt;p&gt;
I'll provide a new batch ASAP.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27122#comment:8" title="Comment 8"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I don't like this patch. It makes it harder than it needs if you ever need or want to remove the flush function.
&lt;/p&gt;
&lt;p&gt;
Can I suggest the following instead?
&lt;/p&gt;
&lt;pre class="wiki"&gt;function wp_finish_request() {
    if (!WP_DEBUG &amp;amp;&amp;amp; function_exists('fastcgi_finish_request')) {
        fastcgi_finish_request();
    }
}
add_action('shutdown', 'wp_finish_request', 2);
&lt;/pre&gt;&lt;p&gt;
That function would need a docblock, too. The point is, it shouldn't be enabled when debugging, and a plugin should be able to remove it without worrying about its implementation details.
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27003 (Introduce wp_get_network() and begin cleanup of multisite load) updated</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 14 Feb 2014 11:56:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27003#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27003#comment:13/1392378986593267</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/27003/27003-docs-fix.patch" title="Attachment '27003-docs-fix.patch' in Ticket #27003"&gt;27003-docs-fix.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/27003/27003-docs-fix.patch" title="Download"&gt;â€‹&lt;/a&gt; corrects inline docs param types and name.
&lt;/p&gt;
&lt;p&gt;
Then, in &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/ms-load.php?rev=27178#L252"&gt;this line&lt;/a&gt;, we allow &lt;code&gt;$networks&lt;/code&gt; to be an empty array (happens, in theory, if there are no rows in &lt;code&gt;$wpdb-&amp;gt;site&lt;/code&gt;), but in &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/ms-load.php?rev=27178#L253"&gt;the next line&lt;/a&gt; we access &lt;code&gt;$networks[0]&lt;/code&gt;. I'm not sure how likely that is to happen in practice, but we should probably avoid it to not trigger a notice.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>27003-docs-fix.patch attached to Ticket #27003</title>
      
        <dc:creator>TobiasBg</dc:creator>

      <pubDate>Fri, 14 Feb 2014 11:55:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27003/27003-docs-fix.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27003/27003-docs-fix.patch/1392378958656272</guid>
      <description>&lt;p&gt;
Fix docs for &lt;code&gt;wp_get_network()&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #21300 (Implement autoloader compatible with PSR-0 / PSR-4 for plugins and themes) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 10:50:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21300#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21300#comment:19/1392375025986531</guid>
      <description>&lt;p&gt;
Moreover, I'd argue that the main point in adding this is to guide plugin and theme devs into some level of structure when they develop. It would be *very* sweet if, instead of needing to dig through a hodgepodge of files in order to locate a class, one could find &lt;code&gt;Foo_Bar_Baz&lt;/code&gt; in &lt;code&gt;Foo/Bar/Baz.php&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #21300 (Implement autoloader compatible with PSR-0 / PSR-4 for plugins and themes) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 10:48:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21300#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21300#comment:18/1392374880730002</guid>
      <description>&lt;p&gt;
Fwiw, here's a simple autoloader that I'd love to see added to WP, so as to not need to constantly add the same lines of code in each plugin.
&lt;/p&gt;
&lt;p&gt;
Not that the lines are very long:
&lt;/p&gt;
&lt;pre class="wiki"&gt;# PSR-4 Autoloader
spl_autoload_register(function($class) {
    if ($class !== strstr($class, __NAMESPACE__ . '\\')) return;
    $file = substr($class, strlen(__NAMESPACE__));
    $file = str_replace('\\', DIRECTORY_SEPARATOR, $file) . '.php';
    $file = __DIR__ . DIRECTORY_SEPARATOR . 'src' . $file;
    if (file_exists($file)) {
        require $file;
    }
}, true);
&lt;/pre&gt;&lt;p&gt;
Still, I'd not need to constantly remember to copy/paste them if WP version offered something similar, e.g.:
&lt;/p&gt;
&lt;pre class="wiki"&gt;class WP_Autoloader
    function __construct($namespace, $path) {
        $this-&amp;gt;namespace = $namespace;
        $this-&amp;gt;path = $path;
    }
    function load($class) {
        if ($class !== strstr($class, $this-&amp;gt;namespace . '\\')) return;
        $file = substr($class, strlen($this-&amp;gt;namespace));
        $file = str_replace('\\', DIRECTORY_SEPARATOR, $file) . '.php';
        $file = $this-&amp;gt;path . $file;
        if (file_exists($file)) {
            require $file;
        }
    }
}
wp_register_autoloader($namespace, $path) {
    $loader = new WP_Autoloader($namespace, $path);
    spl_autoload_register(array($loader, 'load'), true);
}
&lt;/pre&gt;&lt;p&gt;
Or perhaps a variation of the above that accommodates prefixes instead of namespaces indifferently (I'll happily supply the patch if it's +1'ed). At any rate, I like this idea and think we should re-open the ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26879 (Friendlier welcome when installing WordPress) updated</title>
      
        <dc:creator>mrtortai</dc:creator>

      <pubDate>Fri, 14 Feb 2014 09:41:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26879#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26879#comment:11/1392370876709869</guid>
      <description>&lt;p&gt;
26879-5.patch is attached.
Small margin adjustment for small screens.
A little language cleanup/simplification throughout the install.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>26879-5.patch attached to Ticket #26879</title>
      
        <dc:creator>mrtortai</dc:creator>

      <pubDate>Fri, 14 Feb 2014 09:39:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/26879/26879-5.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/26879/26879-5.patch/1392370766149152</guid>
      <description>&lt;p&gt;
26879-5.patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27078 (Use Autoprefixer for CSS vendor prefixes) reopened</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 09:33:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27078#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27078#comment:20/1392370400448912</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Safari &amp;gt;= 6.0
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Needs Safari 5.0 for iPad 1st gen and iPhone 3GS.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #20578 (Allow users to delete a plugin without uninstalling) updated</title>
      
        <dc:creator>grapplerulrich</dc:creator>

      <pubDate>Fri, 14 Feb 2014 08:15:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20578#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20578#comment:14/1392365727058993</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/8783" title="#8783: enhancement: Plugin Uninstall - Make it optional to uninstall the plugin on delete ... (closed: invalid)"&gt;8783&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
The second answer does not fully match the question.
&lt;/p&gt;
&lt;p&gt;
Are you sure you wish to delete these files and data?
Yes, Delete only the files.
&lt;/p&gt;
&lt;p&gt;
A better question would be "Are you sure you want to uninstall these plugins?"
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 08:13:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:8/1392365600676481</guid>
      <description>&lt;p&gt;
I don't like this patch. It makes it harder than it needs if you ever need or want to remove the flush function.
&lt;/p&gt;
&lt;p&gt;
Can I suggest the following instead?
&lt;/p&gt;
&lt;pre class="wiki"&gt;function wp_finish_request() {
    if (!WP_DEBUG &amp;amp;&amp;amp; function_exists('fastcgi_finish_request')) {
        fastcgi_finish_request();
    }
}
add_action('shutdown', 'wp_finish_request', 2);
&lt;/pre&gt;&lt;p&gt;
That function would need a docblock, too. The point is, it shouldn't be enabled when debugging, and a plugin should be able to remove it without worrying about its implementation details.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>dunglas</dc:creator>

      <pubDate>Fri, 14 Feb 2014 08:02:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:7/1392364928587778</guid>
      <description>&lt;p&gt;
The new patch is attached (default-filters.diff).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>default-filters.diff attached to Ticket #27122</title>
      
        <dc:creator>dunglas</dc:creator>

      <pubDate>Fri, 14 Feb 2014 08:01:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27122/default-filters.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27122/default-filters.diff/1392364890908403</guid>
      <description>&lt;p&gt;
Updated patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 06:53:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:6/1392360838595985</guid>
      <description>&lt;p&gt;
Nevermind my last comment: I just verified that the globals are still around. They still are in PHP 5.3.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 14 Feb 2014 06:49:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:5/1392360594092131</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 06:43:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:4/1392360227765281</guid>
      <description>&lt;p&gt;
The reason that function is on the shutdown hook was that (in prior PHP versions at least) PHP would trash the various WP globals prior to calling output buffer-related callback functions.
&lt;/p&gt;
&lt;p&gt;
I'd advise to check if, with this function on the shutdown hook at priority 10, you can still see e.g. &lt;code&gt;$wpdb&lt;/code&gt; at priority 11. If not, adding the call will potentially break plugins that hook after it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27124 (A few more hooks would be desirable in the plugin list and plugin ...) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 06:38:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27124#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27124#comment:1/1392359889221375</guid>
      <description>&lt;p&gt;
Oh, another issue I got as:
&lt;/p&gt;
&lt;ol start="6"&gt;&lt;li&gt;There's no convenient means to inject plugin rows in &lt;code&gt;wp-admin/update-core.php&lt;/code&gt;.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>mc-muplugin-loader.php attached to Ticket #27124</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 06:26:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27124/mc-muplugin-loader.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27124/mc-muplugin-loader.php/1392359218155141</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #27124 (A few more hooks would be desirable in the plugin list and plugin ...) created</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 14 Feb 2014 06:26:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27124</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27124/1392359175184609</guid>
      <description>&lt;p&gt;
While working on the attached WP MU plugin loader, I encountered a few use-cases where I needed to hack into WP globals and resorting to some jQuery-fu due to the lack of plugin hooks in the WP plugin API.
&lt;/p&gt;
&lt;p&gt;
As the attached plugin will illustrate:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;There's no convenient means to request a version check for extra plugins in &lt;code&gt;wp_update_plugins()&lt;/code&gt;. One has to resort to filtering the http arguments
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;There's no convenient means to post-process the reply in the same function. One has to hook into e.g. &lt;code&gt;pre_set_site_transient_update_plugins&lt;/code&gt; to catch it before it gets stored.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;There's no proper means to pre-process the contents of the plugins admin page so as to inject extra update notices. The only way to do so is to catch a random hook in there and manipulate the $plugins global.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="4"&gt;&lt;li&gt;When displaying plugin rows, it's not possible to remove the row's checkbox without resorting to javascript or an output buffer.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="5"&gt;&lt;li&gt;is_plugin_active() has no useful filter and/or incorrectly reports that mu-plugins are inactive
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #17923 (add_query_arg() should encode values) updated</title>
      
        <dc:creator>Viper007Bond</dc:creator>

      <pubDate>Fri, 14 Feb 2014 04:26:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17923#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17923#comment:22/1392351996365112</guid>
      <description>&lt;p&gt;
I keep running into this issue, especially when trying to improve code security. You have to be really careful with this function if you don't want to create bad stuff.
&lt;/p&gt;
&lt;p&gt;
Maybe a better solution is to just introduce a new function, such as &lt;code&gt;add_encoded_query_arg()&lt;/code&gt; that encodes and then calls &lt;code&gt;add_query_arg()&lt;/code&gt;. That way we don't have to worry about passing yet another argument, especially when we would otherwise only pass 2 arguments. This also has the advantage of being able to deprecate &lt;code&gt;add_query_arg()&lt;/code&gt; down the road if we so wish.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26823 (wp_get_image_editor-&gt;multi_resize()) updated</title>
      
        <dc:creator>pbearne</dc:creator>

      <pubDate>Fri, 14 Feb 2014 02:56:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26823#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26823#comment:42/1392346585243725</guid>
      <description>&lt;p&gt;
I have added a test for null and zero's
&lt;/p&gt;
&lt;p&gt;
I test that we get an empty array and that file count in folder doesn't change.
&lt;/p&gt;
&lt;p&gt;
But I feel that the re-size function doesn't do the right thing. If you pass both H and W as null/0 with a crop flag an rectangular image should be crop to a square image at the maxmim possible size.
&lt;/p&gt;
&lt;p&gt;
What do you think?
&lt;/p&gt;
&lt;p&gt;
Paul
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>multi_resize.patch attached to Ticket #26823</title>
      
        <dc:creator>pbearne</dc:creator>

      <pubDate>Fri, 14 Feb 2014 02:50:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/26823/multi_resize.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/26823/multi_resize.patch/1392346240194760</guid>
      <description>&lt;p&gt;
patch with null and 0 test
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #21300 (Implement autoloader compatible with PSR-0 / PSR-4 for plugins and themes) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Fri, 14 Feb 2014 01:28:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21300#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21300#comment:17/1392341330901408</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/21300#comment:16" title="Comment 16"&gt;dave1010&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I understand a Composer-esque vendor system isn't the WordPress way. Perhaps I shouldn't have introduced that in this ticket :-).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Oh I hope you did not take any of my comments as personal criticism.   I too wanted exactly the same until recently after I implemented autoloading and tried to implement composer, and learned all that I did about it.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...I think there's certain things that WordPress can do for developers who wants to follow PHP best practices without hindering site builders who cannot write PHP code.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed, in concept. Figuring out exactly what those things are is/has been the difficult part.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It's up to plugin and theme authors to structure their code how they want (inside their own wp-content/plugins/foo directory).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This is the solution I was proposing. WordPress can't force plugins to use an autoloader, the same way WordPress can't force plugins to use &lt;code&gt;$wpdb&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think I wrote my comments poorly, because forcing developers was not something I was suggesting, and did not mean to imply.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As a developer if all my code (WordPress and other PHP) can follow the letter of the PSR autoloaders then it makes life much easier.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes your code can be structured to follow the letter of the PSR.  My assertion is that would mean you would need to split related code into two files each in order to load hooks but not load their related classes, and it would add required complexity to a plugin's directory &lt;em&gt;if&lt;/em&gt; the developer chose to use the autoloader.
&lt;/p&gt;
&lt;p&gt;
And yes it is the developer's choice, but an autoloader is pretty simple to implement so if a developer want to use one in their plugin nothing is stopping them from doing so right now.
&lt;/p&gt;
&lt;p&gt;
The questions about including in core are: Would the required structure be something WordPress core would want to advocate for, and would the benefits of the autoloader be worth it in the 80 percentile case? My opinion is  &lt;em&gt;"no"&lt;/em&gt; would be the answer to both of those questions.
&lt;/p&gt;
&lt;p&gt;
And personally I do not think there's a benefit to an autoloader in core &lt;em&gt;at this stage of WordPress' evolution.&lt;/em&gt; Maybe later, but not now.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Composer has multiple autoloaded roots in &lt;code&gt;vendor&lt;/code&gt;. WordPress would have them in &lt;code&gt;wp-content/plugins&lt;/code&gt;. I don't see how that's particularly different.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
When I tried implementing Composer and getting the directories to work in a WordPress friendly way required significantly complexity, way more than it should require and really fighting the natural approach of Composer.  Take a look at &lt;a class="ext-link" href="http://stackoverflow.com/a/13547137/102699"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;my StackOverflow question and my own followup answer&lt;/a&gt;. Note that I was discussing use with &lt;em&gt;(my own concept of) "libraries"&lt;/em&gt; but the structure would be the same for plugins. IMO that's too much complexity to bake into WordPress core.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This is virtually identical to registering with a PSR-0/4 auto-loader.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Virtually identical and identical are like horseshoes and hand-grenades when it comes to specifications.  If you are following a spec you either follow it exactly or don't say you are following it.  There's a huge benefit to adopting a standard, but not when you have to fit a square peg in a round hole.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Requiring the plugin to know it's path from wp-content seems like a small overhead over just using &lt;code&gt;dirname(__FILE__)&lt;/code&gt; or &lt;code&gt;__DIR__&lt;/code&gt; though. I'm all for WordPress providing a simpler API to an autoloader, but it would be great if the actual autoloader was exposed too.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's just how I presented it in the example. The idea could work with either relative or absolute URLs, developer preference.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Is there any reason plugins couldn't register and get access to autoloaded classes immediately if they wanted?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, but for what benefit?  If you are going to always load specific classes why not use a &lt;code&gt;require()&lt;/code&gt; instead of an autoloader?  Yes development might be simpler but I think you should at least hard code those &lt;code&gt;require()&lt;/code&gt;s for deployment.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Authors could always wrap the call to &lt;code&gt;register_autoload_path()&lt;/code&gt; in an &lt;code&gt;add_action()&lt;/code&gt; if they wanted.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not following why this would have value.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
PSR autoloading is already best practices for PHP in general, which I don't see any harm in WordPress at least providing minimal support for. No BC breaks are required and it's purely opt-in.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because as I said, it's mostly a moot point given the current best practices in the WordPress community.  If WordPress were not so dependent on hooks being loaded on every page load then it would be different. But then it would not be WordPress.
&lt;/p&gt;
&lt;p&gt;
That said, you'll have to convince the core team members to do it if you want; I'm just like you here, another guy offering his opinion.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Plugins can already bootstrap themselves with their own PSR autoloader, or they could use one provided by WordPress. WordPress provides useful tools to plugins (like &lt;code&gt;$wpdb&lt;/code&gt;) so they don't have to reinvent the wheel every time. An autoloader would be a good addition IMO.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
How do you get an autoloader to be able to not load more than 50% of the classes on each page load? That's the question.  If we can tackle that then it might be a lot more clear that adding the extra overhead (in load time, maintenance cost, support issues when people autoloaded classes and hooks didn't get fired, etc.) would be worth it.
&lt;/p&gt;
&lt;p&gt;
How would I approach it?  I'd specify some well-known constants and methods for a class like &lt;code&gt;self::POST_TYPE&lt;/code&gt;, &lt;code&gt;self::ARGS()&lt;/code&gt; and &lt;code&gt;self::HOOKS()&lt;/code&gt; that allow a developer to register post types and add hooks &lt;em&gt;"declaratively"&lt;/em&gt; instead of using procedural code, and then on plugin activation I would load all classes and cache the information to allow all registrations and fixups on normal page load to occur without having to load any of the classes in which the information was defined.
&lt;/p&gt;
&lt;p&gt;
But that approach is nothing like anything else being done in core so I doubt the core team would adopt that approach in the foreseeable future.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Grepping a recent site build, there are 9 plugins (out of 22) that have calls to &lt;code&gt;spl_autoload_register&lt;/code&gt;! How many plugins would use their own DB abstraction layer if WordPress didn't provide &lt;code&gt;$wpdb&lt;/code&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'd really like to have a look at those plugins to see if in fact they are really benefitting from autoloading, or just instantiating most classes on every page load anyway. If I'm correct and it's the latter, maybe what we need to do &lt;em&gt;instead&lt;/em&gt; is to preach the people should &lt;em&gt;not&lt;/em&gt; use autoloaders with WordPress &lt;em&gt;(unless of course they address the issues I'm bringing up in their own plugin.)&lt;/em&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I don't think I follow this. Autoloading is just a more consistent and maintainable way of requiring classes. Instantiating them shouldn't be affected.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
What I'm saying is that you get no benefit from an autoloader if you load the class files for each class on every page load &lt;em&gt;anyway.&lt;/em&gt; You will end up loading any classes that contain hooks that must be added every page load.
&lt;/p&gt;
&lt;p&gt;
I mentioned the instantiation only because that's what triggers an autoloader to load class files.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I really don't think the ability to to improve things like post type registration would be harmed by making this first step.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't follow how this relates.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As a plugin developer, having a standard autoloader would be a big victory.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'll say it again, it would be a &lt;a class="ext-link" href="https://en.wikipedia.org/wiki/Pyrrhic_victory"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Pyrrhic victory&lt;/a&gt; if the result is more complexity, increased page load times on average and increase support issues where plugins are published but they forget to test all logic paths and thus don't load classes that have needed hooks.
&lt;/p&gt;
&lt;p&gt;
BUT, who knows? Maybe I'm all wrong. Suggestion: If you believe this is important why not implement it as you think it should work and submit a patch. Then we can discuss specifics instead of just bikeshedding. And working code is a lot closer to being committed to core than ideas.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24067 (TinyMCE 4.0) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 14 Feb 2014 01:26:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24067#comment:128</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24067#comment:128/1392341211043336</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/24067#comment:126" title="Comment 126"&gt;programmin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Anyone else noticing that _WP_Editors::editor_settings doesn't output the plugin, when using add_filter( 'mce_external_plugins', 'myfunction' ,12,1);
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Your code works as expected here. TinyMCE 4.0 loads external plugins differently: there is a init setting &lt;code&gt;external_plugins: { 'plugin-name': 'url-to-the-plugin-file' }&lt;/code&gt; and WP_Editor sets that correctly.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This seems to be caused by this, around line 250 of class-wp-editor.php:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If you look closely you'll see that an old style translation file is not required. That code is there for back-compat only. These files are loaded only if set with the &lt;code&gt;'mce_external_languages'&lt;/code&gt; filter. Then each file is "marked as done" so TinyMCE doesn't try to load it again. Agree that keeping the old &lt;code&gt;$ext_plugins&lt;/code&gt; variable name is confusing. Not too late to change.
&lt;/p&gt;
&lt;p&gt;
The &lt;a class="ext-link" href="http://codex.wordpress.org/Plugin_API/Filter_Reference"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;codex page&lt;/a&gt; needs updating. You're welcome to update it too :)
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/24067#comment:127" title="Comment 127"&gt;josh401&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
No WP doesn't do anything to the toolbars or the buttons except overriding some of the font based icons in editor.css. Looks like a TinyMCE thing. Maybe use one of the "dashicons" or add the icon image as background from CSS? Both ways will need a little of CSS added to the page.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27123 (get_categories returning duplicate child categories in 3.9) created</title>
      
        <dc:creator>BStofko</dc:creator>

      <pubDate>Fri, 14 Feb 2014 00:45:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27123</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27123/1392338700988509</guid>
      <description>&lt;p&gt;
Executing the get_categories function for child categories returns duplicate entries in version 3.9. This worked in version 3.8.1 so this is something new.
&lt;/p&gt;
&lt;p&gt;
My call:
&lt;/p&gt;
&lt;pre class="wiki"&gt;$terms = get_categories( array ('child_of' =&amp;gt; $cat));
&lt;/pre&gt;&lt;p&gt;
Under version 3.8.1 returns:
&lt;/p&gt;
&lt;pre class="wiki"&gt;terms: Array (
	[0] =&amp;gt; stdClass Object (
		[term_id] =&amp;gt; 7
		[name] =&amp;gt; Child Category I
		[slug] =&amp;gt; child-category-i
		[term_group] =&amp;gt; 0
		[term_taxonomy_id] =&amp;gt; 7
		[taxonomy] =&amp;gt; category
		[description] =&amp;gt;
		[parent] =&amp;gt; 4
		[count] =&amp;gt; 1
		[cat_ID] =&amp;gt; 7
		[category_count] =&amp;gt; 1
		[category_description] =&amp;gt;
		[cat_name] =&amp;gt; Child Category I
		[category_nicename] =&amp;gt; child-category-i
		[category_parent] =&amp;gt; 4
	)
)
&lt;/pre&gt;&lt;p&gt;
Under version 3.9 returns:
&lt;/p&gt;
&lt;pre class="wiki"&gt;terms: Array (
	[0] =&amp;gt; stdClass Object (
		[term_id] =&amp;gt; 7
		[name] =&amp;gt; Child Category I
		[slug] =&amp;gt; child-category-i
		[term_group] =&amp;gt; 0
		[term_taxonomy_id] =&amp;gt; 7
		[taxonomy] =&amp;gt; category
		[description] =&amp;gt;
		[parent] =&amp;gt; 4
		[count] =&amp;gt; 1
		[cat_ID] =&amp;gt; 7
		[category_count] =&amp;gt; 1
		[category_description] =&amp;gt;
		[cat_name] =&amp;gt; Child Category I
		[category_nicename] =&amp;gt; child-category-i
		[category_parent] =&amp;gt; 4
	)
	[4] =&amp;gt; stdClass Object (
		[term_id] =&amp;gt; 7
		[name] =&amp;gt; Child Category I
		[slug] =&amp;gt; child-category-i
		[term_group] =&amp;gt; 0
		[term_taxonomy_id] =&amp;gt; 7
		[taxonomy] =&amp;gt; category
		[description] =&amp;gt;
		[parent] =&amp;gt; 4
		[count] =&amp;gt; 1
		[object_id] =&amp;gt; 1746
		[filter] =&amp;gt; raw
		[cat_ID] =&amp;gt; 7
		[category_count] =&amp;gt; 1
		[category_description] =&amp;gt;
		[cat_name] =&amp;gt; Child Category I
		[category_nicename] =&amp;gt; child-category-i
		[category_parent] =&amp;gt; 4
	)
)
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>dunglas</dc:creator>

      <pubDate>Fri, 14 Feb 2014 00:28:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:3/1392337688977474</guid>
      <description>&lt;p&gt;
Sorry, I was not aware that this function is used in other places.
&lt;/p&gt;
&lt;p&gt;
I agree with your solution @dd32 except that this is better in a performance point of view to call &lt;code&gt; fastcgi_finish_request() &lt;/code&gt; before the last call to &lt;code&gt; ob_end_flush() &lt;/code&gt; and it's even better to not call it at all like in the Symfony implementation.
&lt;/p&gt;
&lt;p&gt;
A compromise can be to register &lt;code&gt; fastcgi_finish_request() &lt;/code&gt; to the shutdown hook with a priority of 1 if the function exists and (always if the function exists) to not register &lt;code&gt; wp_ob_end_flush_all() &lt;/code&gt; to this hook.
&lt;/p&gt;
&lt;p&gt;
This will maximizes performances on FPM and will not break existing code because the behavior of &lt;code&gt; wp_ob_end_flush_all() &lt;/code&gt; is not modified.
&lt;/p&gt;
&lt;p&gt;
If you think this solution is fine I'll submit a new patch tomorrow.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/27122#comment:1" title="Comment 1"&gt;dd32&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I don't think this is a safe optimization to make unfortunately.
&lt;/p&gt;
&lt;p&gt;
Consider the scenario where &lt;code&gt;wp_ob_end_flush_all()&lt;/code&gt; is called mid-pageload by plugins for example, which we also do in core:
&lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/misc.php#L290"&gt;https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/misc.php#L290&lt;/a&gt;
&lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/class-wp-upgrader-skins.php#L251"&gt;https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/class-wp-upgrader-skins.php#L251&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Perhaps a safer option, would be to conditionally add &lt;code&gt;fastcgi_finish_request&lt;/code&gt; to the &lt;code&gt;shutdown&lt;/code&gt; action at priority 2? as you can see &lt;code&gt;wp_ob_end_flush_all ()&lt;/code&gt; being used here:
&lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/default-filters.php#L250"&gt;https://core.trac.wordpress.org/browser/trunk/src/wp-includes/default-filters.php#L250&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
What do you think @dunglas?
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27110 (Allow filtering the plugin list in the admin) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Fri, 14 Feb 2014 00:27:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27110#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27110#comment:1/1392337621521625</guid>
      <description>&lt;p&gt;
I don't want to derail Ryan's emphasis for creating this ticket, but a non-core use case I can think of straight away is for &lt;a class="ext-link" href="http://tgmpluginactivation.com/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;TGM Plugin Activation&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
This is a set of classes that allow a theme to include a plugin (or a reference to a plugin on the .org repo) that is considered required or recommended for the theme i.e. a plugin that registers a CPT, instead of including it within the theme files. Theme Forest make a direct reference to it in their &lt;a class="ext-link" href="http://support.envato.com/index.php?/Knowledgebase/Article/View/472"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Theme Submission Requirements&lt;/a&gt;, so there are more than a handful of folks using it.
&lt;/p&gt;
&lt;p&gt;
TGMPA currently builds it's own page that &lt;a class="ext-link" href="http://tgmpluginactivation.com/images/plugin-table.png"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;shows&lt;/a&gt; the referenced plugins. Being able to filter these plugin references in to the standard plugins page, with some indicator that the plugins are not yet installed (which would be a new status to consider) would potentially make the user flow for those with themes using TGMPA to be considerably smoother.
&lt;/p&gt;
&lt;p&gt;
(Thomas Griffin is in the process of rewriting TGMPA into a new set of classes that accomplish the same thing with new features.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27122 (Optimization for PHP FPM) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 14 Feb 2014 00:23:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27122#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27122#comment:2/1392337432248175</guid>
      <description>&lt;p&gt;
Yeah, we wouldn't want this in wp_ob_end_flush_all(), but having it on shutdown before priority 10 seems fine to me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24067 (TinyMCE 4.0) updated</title>
      
        <dc:creator>josh401</dc:creator>

      <pubDate>Fri, 14 Feb 2014 00:14:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24067#comment:127</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24067#comment:127/1392336855620182</guid>
      <description>&lt;p&gt;
Hi Andrew,
&lt;/p&gt;
&lt;p&gt;
I'm adding a tinymce split button from one of my addons:
&lt;/p&gt;
&lt;pre class="wiki"&gt;editor.addButton('cleardiv', {
	type: 'splitbutton',
	tooltip: 'Clear Div',
	//text: 'Clear',
	image: url + '/images/cleardiv.gif',
	menu:
	[
		{
			text: 'Clear Left',
			onclick: function() { insertClear('left'); }  // Execute function to clear left
		},
		{
			text: 'Clear Right',
			onclick: function() { insertClear('right'); }  // Execute function to clear right
		},
		{
			text: 'Clear Both',
			onclick: function() { insertClear('both'); }  // Execute function to clear both
		}
	]
});
&lt;/pre&gt;&lt;p&gt;
I cannot seem to get the image for the icon to appear.  I've tried using the &lt;code&gt;image:&lt;/code&gt; and the &lt;code&gt;icon:&lt;/code&gt; settings... but nothing.  Everything else works perfectly.. just no image.  The text will display fine if I use that setting; but I'd prefer to use an icon.
&lt;/p&gt;
&lt;p&gt;
I see when adding a normal button, tinymce will add a style of &lt;code&gt;background-image&lt;/code&gt; to the button; which displays the icon.  I don't see this happening when it is a split button (the style isn't applied).
&lt;/p&gt;
&lt;p&gt;
Does WordPress filter this setting?  Or is it perhaps a tinymce bug?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26050 (Continual Admin Page POST (HeartBeats?) Can Cause SQL Connection Issues) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 14 Feb 2014 00:11:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26050#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26050#comment:8/1392336665615916</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
...it is definitely the large number of post lock refreshes via admin-ajax.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
One reason may be that refreshing the post lock writes to the DB. Unfortunately I don't see a way to make this less frequently. The locks "last" for 150 sec. If the browser window is "blurred", the next refresh will be in 120-135 sec. plus connection time.
&lt;/p&gt;
&lt;p&gt;
The only way to decrease the frequency of writing to the DB would be to (substantially) increase the time locks last. However that brings other problems: the lock should be released when the user navigates away from the Edit Post page. The only way this could be done is by another AJAX request, but since that request fires on window.unload, it is sometimes unsuccessful.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;jQuery(document).off('.refresh-lock');&lt;/code&gt; would work well. Another way would be from PHP by removing the filters &lt;code&gt;add_filter( 'heartbeat_received', 'wp_check_locked_posts', 10, 3 );&lt;/code&gt; and &lt;code&gt;add_filter( 'heartbeat_received', 'wp_refresh_post_lock', 10, 3 );&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Everything in Heartbeat is based on filters, both in JS and PHP, so controlling it should be easy. The same is true for &lt;code&gt;remove_filter( 'heartbeat_settings', 'wp_heartbeat_set_suspension' );&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I hope that as the Heartbeat API makes it into more features (i.e. autosave), that there can be some testing on high-traffic sites that intensively use the post editor.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This has been working on WordPress.com and other huge sites without noticeable increase of server load. Seems the most impact is on medium and large sites.
&lt;/p&gt;
&lt;p&gt;
Disabling the updates of post locks will certainly reduce server load as writing to the DB always takes more resources. Been thinking about ways to make that more efficient, perhaps storing the locks in persistent memory cache (when available) and "flushing" them to the DB every 30 min.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>