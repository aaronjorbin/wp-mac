<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>42975.diff attached to Ticket #42975</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sun, 24 Dec 2017 23:13:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/42975/42975.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/42975/42975.diff/1514157215238237</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #42975 (Customize: Previewing a changeset locks the changeset) created</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sun, 24 Dec 2017 23:13:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42975</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42975/1514157196167128</guid>
      <description>&lt;p&gt;
To demonstrate:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Schedule or save a draft of a changeset.
&lt;/li&gt;&lt;li&gt;Close the Customizer.
&lt;/li&gt;&lt;li&gt;Visit the changeset preview link in another browser while logged in as a different user.
&lt;/li&gt;&lt;li&gt;Open the Customizer again as the first user, and see that the changeset has been locked by the second user.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
This can be especially disorienting if the second user doesn't have access to the Customizer.
&lt;/p&gt;
&lt;p&gt;
The attached patch attempts to address this issue by locking the changeset only when &lt;code&gt;customize.php&lt;/code&gt; is being loaded. One downside to this approach is that it would mean anyone providing an alternate interface for editing a changeset would need to set the lock themselves, though.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42974 (Merge login process back into one screen/form) updated</title>
      
        <dc:creator>pross</dc:creator>

      <pubDate>Sun, 24 Dec 2017 14:43:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42974#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42974#comment:1/1514126586840012</guid>
      <description>&lt;p&gt;
Are you using wordpress.com or jetpack?
&lt;/p&gt;
&lt;p&gt;
Nothing has changed on the login form, it has username and password fields.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42974 (Merge login process back into one screen/form) created</title>
      
        <dc:creator>maurymarkowitz</dc:creator>

      <pubDate>Sun, 24 Dec 2017 14:32:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42974</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42974/1514125938077070</guid>
      <description>&lt;p&gt;
At some point in the last year, IIRC, the login process was changed to have two steps, first you enter your username, then move to a second screen where you enter your password.
&lt;/p&gt;
&lt;p&gt;
Unfortunately, for anyone using a password manager, this system does not work. They do not recognize the form with the password input because they are looking for the an editable field with the username, not a stantic field.
&lt;/p&gt;
&lt;p&gt;
Breaking password managers is a Very Bad Idea, and this should really be fixed. It defniitely fails with Safari's systems, as well as 1password.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #35560 (Use of undefined constant DB_USER - assumed 'DB_USER') updated</title>
      
        <dc:creator>mariusvw</dc:creator>

      <pubDate>Sun, 24 Dec 2017 12:39:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35560#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35560#comment:9/1514119152383032</guid>
      <description>&lt;p&gt;
Any progress on this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42973 (REST endpoint points to root installation always) created</title>
      
        <dc:creator>dingo_bastard</dc:creator>

      <pubDate>Sun, 24 Dec 2017 09:16:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42973</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42973/1514106967987149</guid>
      <description>&lt;p&gt;
There is a &lt;a class="ext-link" href="https://github.com/WPTRT/theme-sniffer/issues/80"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;ticket&lt;/a&gt; on github which shows that if a WordPress is installed in a subfolder, the rest route registered in a plugin won't work properly. I tested it on my own test server.
&lt;/p&gt;
&lt;p&gt;
I have a root installation and a test installation in a &lt;code&gt;test&lt;/code&gt; subfolder. I installed the theme sniffer on the test installation, and when I try to run it (I've rewritten it so that it uses &lt;code&gt;REST&lt;/code&gt; instead of &lt;code&gt;admin-ajax.php&lt;/code&gt;), and the route it tries to fetch is &lt;code&gt;https://mydomain/wp-json/theme-sniffer/v1/sniff-run&lt;/code&gt;, when the correct route should be &lt;code&gt;https://mydomain/test/wp-json/theme-sniffer/v1/sniff-run&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
The routes are added in the plugin like this
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'rest_api_init'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'theme_sniffer_endpoint_init'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="sd"&gt;/**
 * Register endpoints function
 *
 * @since 0.1.0
 */&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;theme_sniffer_endpoint_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;register_rest_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'theme-sniffer/v1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/sniff-run'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'methods'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'callback'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'theme_sniffer_run_sniffer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;register_rest_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'theme-sniffer/v1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/individual-sniff'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'methods'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'callback'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'theme_sniffer_individual_sniff'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
I haven't dug deeper but is this normal behavior?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39281 (Twenty Seventeen: header.php forces thumbnails on all post types) updated</title>
      
        <dc:creator>justnorris</dc:creator>

      <pubDate>Sun, 24 Dec 2017 08:07:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39281#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39281#comment:8/1514102846336148</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42972 (XHTML CDATA compliance regression in preview script) created</title>
      
        <dc:creator>sephr</dc:creator>

      <pubDate>Sun, 24 Dec 2017 01:52:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42972</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42972/1514080337522196</guid>
      <description>&lt;p&gt;
The following script is injected on post preview pages without CDATA for XHTML compliance. I remember this issue being fixed a few years ago, and it has regressed.
&lt;/p&gt;
&lt;pre class="wiki"&gt;	&amp;lt;script&amp;gt;
	( function() {
		var query = document.location.search;
		if ( query &amp;amp;&amp;amp; query.indexOf( 'preview=true' ) !== -1 ) {
			window.name = 'wp-preview-530';
		}
		if ( window.addEventListener ) {
			window.addEventListener( 'unload', function() { window.name = ''; }, false );
		}
	}());
	&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;p&gt;
The script needs /*&amp;lt;![CDATA[*/ at the start and /*]]&amp;gt;*/ at the end to fix rendering errors when served as application/xhtml+xml.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42971 (Page editor (TinyMCE) strips preformatted code entered inside ...) created</title>
      
        <dc:creator>Sakis</dc:creator>

      <pubDate>Sat, 23 Dec 2017 23:57:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42971</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42971/1514073423684844</guid>
      <description>&lt;p&gt;
Edit some page or post
Switch editor to text
Enter the following snippet
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;pre&amp;gt;
&amp;lt;code&amp;gt;
/* Just for testing purposes */
#include &amp;lt;stdio.h&amp;gt;
main()
{
    printf("Hello World");
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;p&gt;
Save, publish or switch to visual
Voila, "&amp;lt;stdio.h&amp;gt;" part is stripped out from both visual editor and page when rendered.
&lt;/p&gt;
&lt;p&gt;
PS: Tested with clean installed WP, no plugins or third party themes, with Chrome, Edge and Safari browsers in Win10 and MacOS X
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 23 Dec 2017 23:47:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:12/1514072869799028</guid>
      <description>&lt;p&gt;
&lt;em&gt;Unrelated aside:&lt;/em&gt; The &lt;code&gt;wordpress-bdd.com&lt;/code&gt; domain name violates &lt;a class="ext-link" href="https://wordpressfoundation.org/trademark-policy/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;the WordPress trademark policy&lt;/a&gt;. You may want to change it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) closed</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 23 Dec 2017 23:45:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:11/1514072758125144</guid>
      <description>invalid: &lt;p&gt;
The points made above by knutsp and Clorith are correct.
&lt;/p&gt;
&lt;p&gt;
The old address is unconnected to the process of changing the admin email address. It is literally not used (apart from a courtesy notification to the old address &lt;em&gt;after&lt;/em&gt; the confirmation link is clicked).
&lt;/p&gt;
&lt;p&gt;
The confirmation email doesn't get sent from the old address. If it does in your case, then something on your site has been configured to do so, for example a plugin or theme on your site. I suspect your site has an SMTP plugin in place which is configured to send emails from the existing admin email address. If that's the case, then you ought to reconfigure it to send it from an address which is capable of sending emails, otherwise it serves no purpose anyway.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>NathanAtmoz</dc:creator>

      <pubDate>Sat, 23 Dec 2017 23:45:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:10/1514072723099788</guid>
      <description>&lt;p&gt;
The changes in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39118" title="#39118: enhancement: Verify change of single site admin email address before it changes (closed: fixed)"&gt;#39118&lt;/a&gt; are beneficial to the majority of use cases and I don't think they should be reverted.
&lt;/p&gt;
&lt;p&gt;
In the case that you're a sys admin, and you want to changed the site email, and outgoing email is not available, and you're unable to query the database to update the administrator password field, then you can add the following as a must-use plugin:
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_action( 'load-options-general.php', function() {
  $new_admin_details = get_option( 'adminhash' );
  if( is_array( $new_admin_details) &amp;amp;&amp;amp; ! empty( $new_admin_details ) ) {
    update_option( 'admin_email', $new_admin_details[ 'newemail' ] );
    delete_option( 'adminhash' );
    delete_option( 'new_admin_email' );
    $redirect = 'options-general.php?updated=true';
    wp_redirect( admin_url( $redirect ) );
  }
});
&lt;/pre&gt;&lt;p&gt;
Then you'll be able to change the email addresses on the Options General page without email confirmation.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42970 (Add a 'rest_nonce_action' filter to the REST API) created</title>
      
        <dc:creator>enlightenedpie</dc:creator>

      <pubDate>Sat, 23 Dec 2017 23:22:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42970</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42970/1514071331227622</guid>
      <description>&lt;p&gt;
In the spirit of fully customizing the REST API, as I'm doing in my current application, some features (like the REST prefix) are customizable through filters, while the nonce name, or rather the rest nonce 'action', is not. 'wp_rest' is a bit generic and could easily have a 'rest_nonce_name' or 'rest_nonce_action' filter added in wp-includes/rest-api.php.
&lt;/p&gt;
&lt;p&gt;
I believe in this regard that allowing alignment with user-defined namespaces and naming conventions would really further the extensibility of the WP REST API, especially in cases where pretty much every default (including default endpoints) are being disabled or overridden/overwritten. Thoughts?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>johndeebdd</dc:creator>

      <pubDate>Sat, 23 Dec 2017 16:03:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:9/1514044995881963</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Here's the current flow:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User is registered with the email address &lt;code&gt;username@hotmail.com&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;User goes into their profile page in the WordPress admin
&lt;/li&gt;&lt;li&gt;User edits the &lt;em&gt;email&lt;/em&gt; field and changes it to &lt;code&gt;username@gmail.com&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;WordPress sends an email to &lt;strong&gt;&lt;code&gt;username@gmail.com&lt;/code&gt;&lt;/strong&gt; with a link to click to confirm the address change
&lt;/li&gt;&lt;li&gt;User clicks the link in the email to change their address
&lt;/li&gt;&lt;li&gt;WordPress sends an email to &lt;code&gt;username@hotmail.com&lt;/code&gt; with information that the address has now been changed to &lt;code&gt;username@gmail.com&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
No access to the old address is required, it is merely included in the flow as a courtesy (and security precaution, in case of a malicious change the user is now made aware of that change) to inform of an already completed change.
&lt;/p&gt;
&lt;p&gt;
---
&lt;/p&gt;
&lt;p&gt;
Honestly, for the vast majority of users, this behavior isn't a problem (and for many, probably expected as most services you encounter these days require email verification on edits), as such I would say this is a &lt;code&gt;wontfix&lt;/code&gt; issue, as the behavior can be controlled via filters and actions for those unhappy with the implementation, but will leave it open for final input by the implementing deveoper.
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;send_email_change_email&lt;/code&gt; filter will allow you to prevent sending the email, and also provides you with the data the user supplied, this can be used to override things and store the new email straight away.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You're looking at it from the point of view of a shared hosting user. You're not looking at it from the point of view of a sys admin who has to install WordPress themselves. How can WordPress SEND an email if you don't have access to the OLD email? What if the OLD email was setup as "dummy@â€¦"? You don't need external SMTP to install WordPress, but as of now, you do infact need it to CHANGE the email. So you can install it fine, just not change it [yet you can run arbitrary code]. That's weird - and new, and a unique case in WordPress.
&lt;/p&gt;
&lt;p&gt;
Here is how WordPress is setup:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WordPress receives an HTTP request and is activated without wp-config and goes into install mode.
&lt;/li&gt;&lt;li&gt;DB creds are entered, and the system asks the admin for an email WHICH IS NOT CONFIRMED, JUST ACCEPTED. I think this is the misunderstanding. You DO NOT need to confirm the initial admin email, and this is absolutely by design. i.e. localhost installs, single page apps. There are MANY uses of WordPress besides blogging on a shared host with email setup. I was brought here because this cause a problem in one of my apps.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The CHANGE:
Previously, admins could change the site email without a confirmation. For instance, they STILL can create users without email confirmation. The change is that they cannot change the site email. This is absolutely different from other emails, and doesn't make sense. It was made by someone who doesn't understand that on single sites, there is no "super admin", just "admin" who is the penultimate. The change assumes there is someone besides the "admin" who could control outgoing SMTP, this isn't the case.
&lt;/p&gt;
&lt;p&gt;
Questions:
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
What is the benefit to create this new restriction?
Do you understand this is a NEW thing, that previously an admin could operate WordPress without restriction, and now this additional restriction has been made?
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Do you understand this creates a new class of settings. This is the ONLY setting in WordPress which has this characteristic:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
-This setting cannot be changed by the logged in user with capabilities to in fact change it
-This same user [a logged in single site admin] CAN run arbitrary code
-This same user CAN still actually affect to change the setting, they just need to know PHP - this is a SERIOUS security flaw. A co-admin might assume another admin couldn't change the site email, since he can't. But the co-admin would be wrong! This is the only example of this in the system.
-This setting requires external send SMTP to be changed by a logged in admin
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;
Do you understand this is a CHANGE, that previously no setting existed with the characteristic?
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Do you understand that if you install WordPress without external SMTP, you can never change the admin email within WordPress [but not really, because you can run arbitrary code]?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42941 (Improve options.php error "options page not found") updated</title>
      
        <dc:creator>williampatton</dc:creator>

      <pubDate>Sat, 23 Dec 2017 15:39:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42941#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42941#comment:2/1514043541587175</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This seems like a welcome change to me. It's only a small modification that adds some useful information for people who stumble across this error while developing their options pages.
&lt;/p&gt;
&lt;p&gt;
Changed from &lt;code&gt;defect&lt;/code&gt; to &lt;code&gt;enhancement&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>johndeebdd</dc:creator>

      <pubDate>Sat, 23 Dec 2017 15:23:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:8/1514042600267906</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/42967#comment:4" title="Comment 4"&gt;knutsp&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Why would anyone bother change the email address if the server can't send emails? In such case any stored email address, for the site or for users, are completely unusable.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Knutsp, there are MANY use cases for using WordPress without having external email capability! Single page web apps, apps behind firewalls, API projects etc. Both SMTP and FTP are sperate services from WordPress, and you should be able to opperate without either. [In fact you CAN opperate without either, except for this ONE SINGLE SETTING, which is the issue].
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Sat, 23 Dec 2017 13:51:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:7/1514037080653399</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/42967#comment:5" title="Comment 5"&gt;mark-k&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@knutsp even if emails can be sent, the admin might have created a user for a "guest" author
without knowing the email, or have done a mistake while entering it. Now the user can not change &amp;gt; it, which is not optimal.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
He can, as long as the new one is correct.
&lt;/p&gt;
&lt;p&gt;
If not, the change will be pending and the user may retry.
&lt;/p&gt;
&lt;p&gt;
With this implemented change the site email gets the same treatment as for users.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39766 (Plugin does not gracefully fail when editing active plugin causes ...) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sat, 23 Dec 2017 12:18:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39766#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39766#comment:30/1514031501077909</guid>
      <description>&lt;p&gt;
Please do create a new topic on our &lt;a class="ext-link" href="https://wordpress.org/support"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;support forums&lt;/a&gt; if you are having issues, this is likely caused by a plugin or theme conflict though which we'll be able to help you troubleshoot there.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sat, 23 Dec 2017 12:14:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:6/1514031273676817</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@mark-k You do not need access to the old email address to change anything, you need access to the &lt;strong&gt;new&lt;/strong&gt; address, which is where the confirmation email is sent from WordPress.
&lt;/p&gt;
&lt;p&gt;
Here's the current flow:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User is registered with the email address &lt;code&gt;username@hotmail.com&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;User goes into their profile page in the WordPress admin
&lt;/li&gt;&lt;li&gt;User edits the &lt;em&gt;email&lt;/em&gt; field and changes it to &lt;code&gt;username@gmail.com&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;WordPress sends an email to &lt;strong&gt;&lt;code&gt;username@gmail.com&lt;/code&gt;&lt;/strong&gt; with a link to click to confirm the address change
&lt;/li&gt;&lt;li&gt;User clicks the link in the email to change their address
&lt;/li&gt;&lt;li&gt;WordPress sends an email to &lt;code&gt;username@hotmail.com&lt;/code&gt; with information that the address has now been changed to &lt;code&gt;username@gmail.com&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
No access to the old address is required, it is merely included in the flow as a courtesy (and security precaution, in case of a malicious change the user is now made aware of that change) to inform of an already completed change.
&lt;/p&gt;
&lt;p&gt;
---
&lt;/p&gt;
&lt;p&gt;
Honestly, for the vast majority of users, this behavior isn't a problem (and for many, probably expected as most services you encounter these days require email verification on edits), as such I would say this is a &lt;code&gt;wontfix&lt;/code&gt; issue, as the behavior can be controlled via filters and actions for those unhappy with the implementation, but will leave it open for final input by the implementing deveoper.
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;send_email_change_email&lt;/code&gt; filter will allow you to prevent sending the email, and also provides you with the data the user supplied, this can be used to override things and store the new email straight away.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39766 (Plugin does not gracefully fail when editing active plugin causes ...) updated</title>
      
        <dc:creator>Ste_95</dc:creator>

      <pubDate>Sat, 23 Dec 2017 07:19:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39766#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39766#comment:29/1514013565006597</guid>
      <description>&lt;p&gt;
I'm not sure reopening this is the correct policy, but I believe the implemented fix causes more issues. More often than not, it happens that I cannot edit a file on a customer's site, getting the following error:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://i65.tinypic.com/eug8qu.png"&gt;&lt;img src="http://i65.tinypic.com/eug8qu.png" alt="http://i65.tinypic.com/eug8qu.png" crossorigin="anonymous" title="http://i65.tinypic.com/eug8qu.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This has happened more than once, on apparently unrelated websites.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>mark-k</dc:creator>

      <pubDate>Sat, 23 Dec 2017 07:06:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:5/1514012811643587</guid>
      <description>&lt;p&gt;
@knutsp even if emails can be sent, the admin might have created a user for a "guest" author without knowing the email, or have done a mistake while entering it. Now the user can not change it, which is not optimal.
At least in that case he can contact the admin, but what happens if some previous admin have create a new admin acount and went for a 3 months sabatical? How will the new admin correct his faulty email address?
&lt;/p&gt;
&lt;p&gt;
It is not great from security POV, but admin users should probably be able to change their own email address without verification. (as said above, they probably can do the change directly in the DB, but why to force people to do such things?)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Sat, 23 Dec 2017 04:06:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:4/1514001989709481</guid>
      <description>&lt;p&gt;
Why would anyone bother change the email address if the server can't send emails? In such case any stored email address, for the site or for users, are completely unusable.
&lt;/p&gt;
&lt;p&gt;
A confirmation is sent to the new address, as a kind of sanitation of the email address. The old address is not involved in this process. If the confirmation cannot be received by the admin there is no point in committing the change.
&lt;/p&gt;
&lt;p&gt;
A lot of applications use some extra, or repeated, credentials to change certain settings. All changes of all email addresses in any system should be confirmed by proving you can receive a message by it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>johndeebdd</dc:creator>

      <pubDate>Sat, 23 Dec 2017 01:25:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:3/1513992349982748</guid>
      <description>&lt;p&gt;
Thank you Clorith. I don't think I'm making myself clear. This is an issue for sysadmins, not shared hosting customers. I'll summarize:
&lt;/p&gt;
&lt;p&gt;
This is a NEW feature, nothing to do with how emails work. The new feature is that as of 4.9, when you change the admin email in a single site, you must confirm the email before the change takes place, like when a new user registers. But this new action restriction is placed on a LOGGED IN ADMIN.
&lt;/p&gt;
&lt;p&gt;
The stated purpose of this new feature, as per the announcement, is "The intention is to make it more difficult for an attacker to take over a user account or a site by changing the email address associated with the user or the site, and also to reduce the chance of a mistaken or erroneous change causing you to get locked out."
&lt;/p&gt;
&lt;p&gt;
The author of this feature thought he was confirming if the recipient email is valid. That's only half true. It's also inadvertently testing if the server can SEND emails. I don't think that was considered. In other words, for the admin to do this action, he has to be logged in via the normal WordPress auth cookie AND the server has to successfully connect to outgoing SMTP. This is the absolute only setting in WordPress that requires the system to also have credentials to an outside service not listed in the wp-config.php file. SMTP is, by definition, an outside service, and admin actions shouldn't be restricted in a new way like this. Additionally, it doens't actually provide the protection it thinks it does, since a logged in admin can run arbitrary code and alter the site email anyway.
&lt;/p&gt;
&lt;p&gt;
Also note that many applications use WordPress without having access to outgoing mail. Now they cannot change the admin email of the site.
&lt;/p&gt;
&lt;p&gt;
It seems the initial desire was to improve security. It doesn't do that, but it DOES create new restrictions on how WordPress can be installed and used. Previously, an admin could change the site's email. Now the admin must have outgoing SMTP access to do this, and that access is controlled outside of WordPress, but WordPress still relies on it. All the while still allowing this logged in user to run arbitrary code and defeat the new restriction in any case.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #42832,â€‹42955 batch updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sat, 23 Dec 2017 00:54:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=42832%2C42955</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=42832%2C42955/1513990482688061</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/42832" title="#42832: enhancement: Improve JS Documentation: /js/media/views/attachments.js (reopened)"&gt;#42832&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Thanks @ireneyoast &amp;amp; @atimmer +1
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #42966 (bug in docs) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sat, 23 Dec 2017 00:38:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42966#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42966#comment:2/1513989481277970</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Just give the &lt;a class="ext-link" href="https://make.wordpress.org/docs/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Docs team&lt;/a&gt; a heads up and they'll sort issues like this :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42967 (New admin email change featuer should be rolled back) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sat, 23 Dec 2017 00:25:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42967#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42967#comment:2/1513988726859060</guid>
      <description>&lt;p&gt;
Hi there, and welcome to Trac!
&lt;/p&gt;
&lt;p&gt;
I'd like to address your concerns here, as I think some of them may be a misunderstanding of how WordPress handles the email process.
&lt;/p&gt;
&lt;p&gt;
Note that I'll skip many sections, because the answers to many of them are all covered in the first response.
&lt;/p&gt;
&lt;p&gt;
The most notable point you make is that WordPress needs access to your emails to do anything, which is incorrect.
&lt;/p&gt;
&lt;p&gt;
WordPress doesn't access your email to send anything, it is sent by the server your website is hosted on, and the sender will be automatically set as &lt;code&gt;wordpress@&amp;lt;your-domain.tld&amp;gt;&lt;/code&gt;, unless a plugin is set to modify this.
&lt;/p&gt;
&lt;p&gt;
You don't need to set up anything for emails to be sent inside WordPress it self. For some users, they will have set up a plugin that passes emails through an external SMTP server, this is then a deliberate choice and the user setting this up should be able to change the settings within that plugins interface if it should no longer be correct.
&lt;/p&gt;
&lt;p&gt;
You are right that if your site can't send emails, it becomes problematic to do these changes, but if that's the case one should contact their host as it would also prevent other legitimate functionality such as password recoveries.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This is the only instance where a single site addresses the admin with the pronoun "we". When I saw this, my jaw dropped. Who is the "we" that is going to email me? Is someone else gathering emails from my privately hosted site? The pronoun "we" should not be used here.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This part can understandably be confusing in some scenarios, I would suggest creating a separate ticket to look at finding better wording for this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>