<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sat, 04 Mar 2017 23:01:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:11/1488668471534484</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:6" title="Comment 6"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:2" title="Comment 2"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm rather new to annotations"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I only learned about them ~12 hours before you.  Before posting this ticket I read &lt;a class="ext-link" href="https://www.w3.org/blog/news/archives/6156"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the three recommendations&lt;/a&gt; in full . I'd highly recommend if you or anyone else is interested in this ticket -- pro or con -- to read at least the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;data model spec&lt;/a&gt; so you can come fully up to speed on what annotations are and what they are not.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks. I haven't read through the whole thing, but just glancing at the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/#selectors"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;section on selectors&lt;/a&gt; was informative. (See below.)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"But this sounds like basically adding support for an entirely separate class of content than WordPress is currently built for, mostly under-the-hood."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
All we need is &lt;strong&gt;already&lt;/strong&gt; in WordPress core as an &lt;em&gt;existing&lt;/em&gt; class of content. We already have the tables needed in the standard WordPress database schema: &lt;code&gt;wp_comments&lt;/code&gt; and &lt;code&gt;wp_commentmeta&lt;/code&gt;.  Had this concept required new tables or even table modification it would have been a non-starter because of WordPress.com and so I would never have proposed it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I understand that it can fit into the same generic under-the-hook comment types. By "class of content", I was thinking more in terms of what that content means to the user, how it would be presented, etc. More like, the purpose and function of the content. Obviously, WordPress can handle most any class of content, but usually that is through plugins, not part of core. It just seems like a shift in WordPress's core purpose at present, if one that is in the general sentiment of its mission. On the other hand, perhaps it is not much different that the trackback support that is currently languishing in core.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Are we even talking about actual annotation management being provided through WordPress, or essentially just storage?"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am not sure what you specifically mean by &lt;em&gt;"actual annotation management"&lt;/em&gt; so I cannot yet answer.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
By this I meant letting the user edit their annotations, delete them, etc.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Honestly, although I like the idea of annotations, I'm not comfortable with the idea of decentralization if it completely ignores the wishes and copyrights of the publisher of the annotated content."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think I chose poor wording here, by "publisher" I was actually meaning "author". See below.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm not sure it would be entirely unjustified to say that this ticket is trying to turn WordPress into a glorified content-scraping and republishing engine."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My concern was that specifying the part of the content that an annotation relates to would be done primarily through saving a copy of that part of the content. After reading the selector spec, I realize that there are actually many other options for specifying this, and there's a &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/#text-quote-selector"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;warning there against this particular "selector"&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;Note&lt;/strong&gt;
If the content is under copyright or has other rights asserted on its use, then this method of selecting text is potentially dangerous. A user might select the entire text of the document to annotate, which would not be desirable to copy into the Annotation and share. For static texts with access and/or distribution restrictions, the use of the Text Position Selector is perhaps more appropriate.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is what I was concerned about, and what I was referring to by "content-scraping" (which is essentially what this selector method can work out to). As long as use of this selector method is minimized/restricted, my fears about copyright issues are allayed, and I am happy with the concept of annotations. (Well, maybe not &lt;em&gt;entirely&lt;/em&gt; happy, I still question the fundamental premise of some people's arguments in favor of some uses of annotations, but that is a rabbit hole that this ticket probably doesn't need to go down.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:17:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:10/1488665876497714</guid>
      <description>&lt;p&gt;
Here is the video that @chrisaldrich referenced as well as a more specific one about Hypothes.is and it would be really helpful for people who have not been immersed in the Web Annotations discussion:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.youtube.com/watch?v=QCkm0lL-6lc"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.youtube.com/watch?v=QCkm0lL-6lc&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.youtube.com/watch?v=deOlFn6q01Y"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.youtube.com/watch?v=deOlFn6q01Y&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40034 (Add License and License URI as valid style.css headers to WP_Theme) updated</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:17:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40034#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40034#comment:2/1488665872181659</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40034 (Add License and License URI as valid style.css headers to WP_Theme) updated</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:17:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40034#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40034#comment:1/1488665851676840</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:09:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:9/1488665368777302</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:5" title="Comment 5"&gt;chrisaldrich&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Mostly to provide some additional resources to the conversation I'll add the following:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Excellent! Thanks for commenting and providing the additional background.
&lt;/p&gt;
&lt;p&gt;
Also, may I burden you to explain to @jdgrimes how you use &lt;a class="ext-link" href="http://boffosocko.com/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;your own website&lt;/a&gt; to first publish all your comments, to allay concerns regarding copyright expressed by @jdgrimes?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:05:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:8/1488665151693904</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:4" title="Comment 4"&gt;dshanske&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"If someone wants to annotate a URL on another site, that should be a custom post type. The post type would be associated with their user...so there is authorship of the annotation. It doesn't need to have anything to do with the comment table."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I would instead argue &lt;em&gt;"It doesn't need to have anything to do with the posts table"&lt;/em&gt; because posts are conceptually source documents and comments are conceptually annotations to a source document.  So &lt;code&gt;wp_comments&lt;/code&gt; is a better fit than &lt;code&gt;wp_posts&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
And as comments have the &lt;code&gt;user_id&lt;/code&gt; field, authorship is addressed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"the annotation server merely serves to translate the custom post type posts into the format that other systems can understand...the Annotation spec."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The prior notwithstanding; yes, this is the thinking of the proposal.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"If someone wants to annotate something on the same site they have a user on, that can be a comment type."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And that is another reason to make all annotations comments; it is more &lt;a class="ext-link" href="https://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;D.R.Y.&lt;/a&gt; than having the same logic attached to both posts and comments.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 21:56:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:7/1488664602869513</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:3" title="Comment 3"&gt;dshanske&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Annotation to me sounds like a type of comment where you are specifying a specific part of a post to comment on. It would therefore not be displayed at the bottom, but inline in some fashion."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Annotations can be either of those.  And they can be many other things too.  Highly recommend reading about the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Annotations Data Model&lt;/a&gt; if this ticket continues to interest you.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I think this is the wrong approach for WordPress Core in the short term. if WordPress wants to start with annotations, how about we enhance the comment system to support annotations?"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am assuming you made this comment because of an assumption that Web Annotations refers to being able to select a section of content and then comment on that content?
&lt;/p&gt;
&lt;p&gt;
Yes, that use-case is addressed by Web Annotation, but Web Annotations is &lt;em&gt;(IMO at least)&lt;/em&gt; more about establishing a JSON format for linking between annotation and the subject of the annotation, and thus about enabling additional storage &lt;strong&gt;the fact that such an annotation exists&lt;/strong&gt; in a location different than where the annotations or the subject of the annotation is currently stored.
&lt;/p&gt;
&lt;p&gt;
Or in less abstract terms, Web Annotations is about enabling a website to serve a feed of Web Annotations one of which might look like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
  "@context": "http://www.w3.org/ns/anno.jsonld",
  "id": "https://david.shanske.com/annotation-3264",
  "type": "Annotation",
  "motivation": "replying",
  "body": "https://david.shanske.com/2016/11/28/cbss-elementary-gets-kosher-wrong/",
  "target": [
    "https://david.shanske.com/2016/11/28/cbss-elementary-gets-kosher-wrong/#comment-3264",
    "https://www.facebook.com/dshanske/posts/1188775184544354?comment_id=1188793234542549"
  ]
}
&lt;/pre&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"While support for custom comment types is a 'blessed' task, we still don't have that."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No reason this ticket could not be the catalyst to make that blessed task a higher priority.  It might even inform the design of comment types by providing some insight into use-cases.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"So, having annotations as a built-in comment type would allow someone to annotate a post/page/etc. Now, that's initially a local implementation, not a distributed one. But from the perspective of site owners, you should always have a local implementation of a feature before you start fetching stuff from other sites. A base feature should be built in, and only enhanced by an outside site or service."&lt;/em&gt; ... I may be on a completely different line of thought than the initial proposal, but I feel strongly about local first as a building philosophy.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You have made an philosophical argument but it is too abstract to prove or disprove. And thus I think debating it distracts from the specific use-cases and requirements we could be discussing.
&lt;/p&gt;
&lt;p&gt;
Let us first make sure we all understand what is being proposed and what the goals of the proposal are and then discuss if those goals are appropriate before we debate philosophy of implementation? The former really should inform the latter.  Otherwise we'll just be talking past each other.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40034 (Add License and License URI as valid style.css headers to WP_Theme) created</title>
      
        <dc:creator>grapplerulrich</dc:creator>

      <pubDate>Sat, 04 Mar 2017 21:35:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40034</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40034/1488663349323997</guid>
      <description>&lt;p&gt;
The style.css headers &lt;code&gt;License&lt;/code&gt; and &lt;code&gt;License URI&lt;/code&gt; are required for WordPress.org theme repository but it is not possible to fetch the data using &lt;code&gt;WP_Theme::get()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The reason I realized this is that I am working on an automated testing plugin for theme and wanted to check that the &lt;code&gt;License&lt;/code&gt; and &lt;code&gt;License URI&lt;/code&gt; were set.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 21:26:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:6/1488662766694026</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:2" title="Comment 2"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm rather new to annotations"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I only learned about them ~12 hours before you.  Before posting this ticket I read &lt;a class="ext-link" href="https://www.w3.org/blog/news/archives/6156"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the three recommendations&lt;/a&gt; in full . I'd highly recommend if you or anyone else is interested in this ticket -- pro or con -- to read at least the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;data model spec&lt;/a&gt; so you can come fully up to speed on what annotations are and what they are not.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"storing the comments that a website owner leaves as annotations anywhere else on the web."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, that is a mostly correct characterization.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"But this sounds like basically adding support for an entirely separate class of content than WordPress is currently built for, mostly under-the-hood."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
All we need is &lt;strong&gt;already&lt;/strong&gt; in WordPress core as an &lt;em&gt;existing&lt;/em&gt; class of content. We already have the tables needed in the standard WordPress database schema: &lt;code&gt;wp_comments&lt;/code&gt; and &lt;code&gt;wp_commentmeta&lt;/code&gt;.  Had this concept required new tables or even table modification it would have been a non-starter because of WordPress.com and so I would never have proposed it.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Or whatever UI it did have would require some modification from what is in core now."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The existing comment UI in the admin would not need trivial enhancements to support this proposal.  Add a new core post type &lt;code&gt;persona&lt;/code&gt; and then associate the annotations to the persona for the person making the comment &lt;em&gt;(a person may choice to comment on the web using different persona's;  e.g.  &lt;/em&gt;"legal analyst"&lt;em&gt;, &lt;/em&gt;"father of daughters"&lt;em&gt;, &lt;/em&gt;"soccer fan"&lt;em&gt;, et. al. so the persona post type would allow them to keep track of annotations for a specific persona.  But in most cases people would have just one persona, at least to start with.
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Note I recommend a Persona post type because &lt;code&gt;wp_comments&lt;/code&gt; has a &lt;code&gt;comment_post_ID&lt;/code&gt; field so we'd need an ID from a record in &lt;code&gt;wp_posts&lt;/code&gt; to occupy this foreign key and one or more personas for an individual would be a great way to address this.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Are we even talking about actual annotation management being provided through WordPress, or essentially just storage?"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am not sure what you specifically mean by &lt;em&gt;"actual annotation management"&lt;/em&gt; so I cannot yet answer.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm also not clear whether we're talking about possibly having WordPress display annotations, like as a list of "things I've been annotating recently", kind of like a blog, or whether that is outside scope here as well."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, definitely.   But for that I am really only seeing the need for an addition to the template hierarchy rules, a few rewrite rules, and possibly a new theme template page in the current default theme.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Honestly, although I like the idea of annotations, I'm not comfortable with the idea of decentralization if it completely ignores the wishes and copyrights of the publisher of the annotated content."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Conveniently &lt;em&gt;(in the absence of a legal contract that assigns copyright)&lt;/em&gt; copyright of creative works always rests automatically with the creator of the work.  If @jdgrimes writes and posts a comment on NYTimes.com it is you @jdgrimes that holds the copyright, not The New York Times &lt;em&gt;(unless NYTimes.com has an egregious click-thru agreement, but that's an edge case and one in which I expect public pressure would quickly correct if this proposal were to become a reality in WordPress code, so let's assume they have no such agreement.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
So the wishes of the publisher are actually moot because  the publisher does not own the copyright nor the moral rights to &lt;strong&gt;your comment&lt;/strong&gt;. You have simply implicitly agreed to allow them to publish it but you have not given up legal right to it &lt;em&gt;(unless as I said they have an egregious legal agreement in place.)&lt;/em&gt;  Also I would think that worrying about the publisher vs. the author is the opposite of &lt;em&gt;"Democratizing Publishing" (although I could have my own view of that which is different than the WordPress project's at large? If so, please enlighten me.)&lt;/em&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm not sure it would be entirely unjustified to say that this ticket is trying to turn WordPress into a glorified content-scraping and republishing engine."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
To say that would be &lt;strong&gt;entirely unjustified&lt;/strong&gt;.  Content scraping and republishing assumes taking other people's content. This proposal &lt;strong&gt;only&lt;/strong&gt; concerns itself with the content that is created by author of the work.  This proposal assumes the comment would first be posted to the author's own WordPress site first &lt;em&gt;(via an API of course)&lt;/em&gt; before it ever gets posted to a 3rd party publisher's site. So no scraping or republishing whatsoever.
&lt;/p&gt;
&lt;p&gt;
Also, in the case of an organization that gains copyright of commenters work by click-thru agreement, and they won't budge even the case of public pressure, realize that a minimum Web Annotation is just three (3) URLs:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;URL to the item being annotated, e.g. the web page being commented on,
&lt;/li&gt;&lt;li&gt;URL to the annotation text, e.g. the fragment pinpointing the comment on the web page being commented on,
&lt;/li&gt;&lt;li&gt;URL to the annotation JSON file containing these three (3) URLs.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
So even in those cases maintaining an annotation being 3 URLs would not violate any ill-gained publisher's copyright, it would just be a link to said publisher's page and the comment contained therein and courts have upheld that linking does not violate copyright.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Anyway, like I said, I'm fairly new to annotations, but that's my initial thoughts.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I had a different idea a first until I read the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;data model spec&lt;/a&gt;; highly recommend you at least review it if this ticket continues to interest you.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>chrisaldrich</dc:creator>

      <pubDate>Sat, 04 Mar 2017 20:38:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:5/1488659901589346</guid>
      <description>&lt;p&gt;
Mostly to provide some additional resources to the conversation I'll add the following:
Web Annotation Working Group's &lt;a class="ext-link" href="https://www.w3.org/blog/news/archives/6156"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;three recommendations and two additional notes&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Prior to the WPTavern post which motivated the conversation, there was a &lt;a class="ext-link" href="https://hypothes.is/blog/annotation-is-now-a-web-standard/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;post written by Dan Whaley of Hypothes.is&lt;/a&gt; who worked extensively within the group. This post has some interesting overview, but those interested in a fully implemented annotation platform (presumably using many of the pieces of the proposed standard) should take a quick look at &lt;a class="ext-link" href="https://hypothes.is/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Hypothes.is&lt;/a&gt;, what it is and what it allows. Their front page has a pretty useful video introduction.
&lt;/p&gt;
&lt;p&gt;
Keep in mind that some of the standard is geared specifically toward browsers and browser vendors, though WordPress could certainly implement some of the pieces from the CMS side.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40033 (Press-this: can't set featured image) created</title>
      
        <dc:creator>Livsy</dc:creator>

      <pubDate>Sat, 04 Mar 2017 19:00:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40033</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40033/1488654054846340</guid>
      <description>&lt;p&gt;
Hi! I can not set featured image using press-this.php. I tested at two sites - both of them on the 4.7.2. version of WP. On ver. 4.3.1 everything works well.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 04 Mar 2017 17:43:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:4/1488649400495449</guid>
      <description>&lt;p&gt;
Read the entire ticket a third time. Have to add....
&lt;/p&gt;
&lt;p&gt;
If someone wants to annotate a URL on another site, that should be a custom post type. The post type would be associated with their user...so there is authorship of the annotation. It doesn't need to have anything to do with the comment table.
&lt;/p&gt;
&lt;p&gt;
Then the annotation server merely serves to translate the custom post type posts into the format that other systems can understand...the Annotation spec.
&lt;/p&gt;
&lt;p&gt;
If someone wants to annotate something on the same site they have a user on, that can be a comment type.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 04 Mar 2017 17:21:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:3/1488648060167112</guid>
      <description>&lt;p&gt;
I think this is the wrong approach for WordPress Core in the short term. if WordPress wants to start with annotations, how about we enhance the comment system to support annotations?
&lt;/p&gt;
&lt;p&gt;
Annotation to me sounds like a type of comment where you are specifying a specific part of a post to comment on. It would therefore not be displayed at the bottom, but inline in some fashion.
&lt;/p&gt;
&lt;p&gt;
In WordPress, remember that comments themselves are a type of comment(referring to the comment table). If you look at the current WordPress design. While support for custom comment types is a 'blessed' task, we still don't have that. We have the built-in ones, and some custom ones built without full Core support for registration.
&lt;/p&gt;
&lt;p&gt;
So, having annotations as a built-in comment type would allow someone to annotate a post/page/etc. Now, that's initially a local implementation, not a distributed one. But from the perspective of site owners, you should always have a local implementation of a feature before you start fetching stuff from other sites. A base feature should be built in, and only enhanced by an outside site or service.
&lt;/p&gt;
&lt;p&gt;
Once you have the support for storing and displaying annotations on a post, you can add support for someone to create them on the front-end, then work on receiving them in a distributed manner.
&lt;/p&gt;
&lt;p&gt;
I may be on a completely different line of thought than the initial proposal, but I feel strongly about local first as a building philosophy.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39893 (Header Media: YouTube Embed Does Not Fill Screen) updated</title>
      
        <dc:creator>cingrosso</dc:creator>

      <pubDate>Sat, 04 Mar 2017 17:04:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39893#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39893#comment:4/1488647043384208</guid>
      <description>&lt;p&gt;
Brilliant Brady, well done!
&lt;/p&gt;
&lt;p&gt;
Works a treat....
&lt;/p&gt;
&lt;p&gt;
Thanks
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40032 (Automatic redirects with _wp_old_slug won't mantain GET parameters if ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 04 Mar 2017 16:35:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40032#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40032#comment:1/1488645306743039</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sat, 04 Mar 2017 15:24:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:2/1488641097413294</guid>
      <description>&lt;p&gt;
I'm rather new to annotations, so I may not understand this proposal fully yet. At first I just assumed that this was about having WordPress support in-post comments, but now I realize that it is about the completely other end of annotations: storing the comments that a website owner leaves as annotations anywhere else on the web. I guess being a CMS, and annotations kind of being content, that makes some sense. But this sounds like basically adding support for an entirely separate class of content than WordPress is currently built for, mostly under-the-hood. Or whatever UI it did have would require some modification from what is in core now. Are we even talking about actual annotation management being provided through WordPress, or essentially just storage? I'm also not clear whether we're talking about possibly having WordPress display annotations, like as a list of "things I've been annotating recently", kind of like a blog, or whether that is outside scope here as well.
&lt;/p&gt;
&lt;p&gt;
Honestly, although I like the idea of annotations, I'm not comfortable with the idea of decentralization if it completely ignores the wishes and copyrights of the publisher of the annotated content. I'm not sure it would be entirely unjustified to say that this ticket is trying to turn WordPress into a glorified content-scraping and republishing engine. Not saying that's really accurate, but doesn't implementing this require us to scrape and store the annotated piece of content in some way, or at least a portion of it? If the publisher hasn't specifically granted that right, eventually folks should get into legal trouble, it seems to me. (Though of course, I'm not a lawyer.) Maybe it isn't that much different than Press This, but then, maybe that's just to say that Press This can be abused to. The difference though is that with annotations the entire type of content is designed around this by definition.
&lt;/p&gt;
&lt;p&gt;
Anyway, like I said, I'm fairly new to annotations, but that's my initial thoughts.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40032 (Automatic redirects with _wp_old_slug won't mantain GET parameters if ...) created</title>
      
        <dc:creator>DrLightman</dc:creator>

      <pubDate>Sat, 04 Mar 2017 15:05:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40032</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40032/1488639927498460</guid>
      <description>&lt;p&gt;
If for example links come up with GET parameters, for example utm parameters for analytics, they get stripped before the redirect.
&lt;/p&gt;
&lt;p&gt;
post_name = 'new-slug'
_wp_old_slug = 'old-slug'
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://example.org/old-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.org/old-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Wordpress will build the link for the redirect to the new slug without any GET parameter:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://example.org/new-slug/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.org/new-slug/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I think it should mantein them instead:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://example.org/new-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.org/new-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I'm not even sure if this should be classified as a bug, if it's the correct behaviour or not. I'll let you judge.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sat, 04 Mar 2017 14:35:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:126</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:126/1488638145245732</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:125" title="Comment 125"&gt;seancjones&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
I think exploring some of this with users at WordCamps is a great idea. Finding out how users actually feel about having this information shared with them is really going to be imperative. And it could potentially re-frame the entire conversation here, because the goal is to put users first. If it was demonstrated, for example, that most affected users actually &lt;em&gt;want&lt;/em&gt; to know this information, it would contradict the general consensus, which is that they really don't want to know or care about this. I can imagine that for a portion of them though, they'll feel that knowledge is power. We really won't know for sure until we do some research. So far we've just been more or less making assumptions based on the best knowledge that we have—the experience of those that regularly interact with average users on the forums, etc. (Which actually, I expect won't prove too far off, but you never know what you don't know.)
&lt;/p&gt;
&lt;p&gt;
Of course, the average WordCamp attendee likely isn't a complete analog for the average WordPress user. But it would probably still be a good place to begin.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
I was thinking last night that really one thing we should be doing here is researching what strategies other large CMSs have employed regarding PHP version upgrades. Certainly WordPress is in a class all its own in terms of the size of its user base, but there is still probably a lot that we can learn from the experiences of similar, if slightly smaller, projects:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What is their policy regarding PHP version support?
&lt;/li&gt;&lt;li&gt;When they drop a PHP version, how do they communicate that to users?
&lt;/li&gt;&lt;li&gt;How do they communicate that to hosts?
&lt;/li&gt;&lt;li&gt;When they have dropped versions in the past, what has the fallout been?
&lt;ul&gt;&lt;li&gt;How many people were upset?
&lt;/li&gt;&lt;li&gt;How many people just quietly updated?
&lt;/li&gt;&lt;li&gt;How many people didn't update and were just left behind on the old version of the software?
&lt;/li&gt;&lt;li&gt;How many people needed help from support?
&lt;/li&gt;&lt;li&gt;How did web hosts respond? (Did they get most users updated ahead of time, etc.)
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I think that one practical number to consider when coming up with a percentage/number of users at which to drop a PHP version, is the support burden that will be generated, and what the forum volunteers can handle. If 10% of users require some kind of support in order to update their PHP version, out of 500k users that's 50k users who will be seeking support in addition to the normal burden. That wouldn't happen all in one day, of course, (and these numbers are completely made up so they may be unrealistic), and I don't know what the average support load is right now, but that sounds like it would probably be overwhelming. Which is why the Half-elf Support Rogue has always been against trying to tell users anything about PHP.
&lt;/p&gt;
&lt;p&gt;
(Yes, a lot of that support should really be directed at hosts, but some people, especially frustrated ones, are going to come to WordPress for help, to vent, etc.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36613 (Browser back button doesn't work in Theme Browser) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sat, 04 Mar 2017 13:51:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36613#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36613#comment:14/1488635478683171</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36613#comment:13" title="Comment 13"&gt;afercia&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@adamsilverstein finally tested a bit, yep previous error seems gone. However, there are still edge cases where seems it's a bit difficult to make the history work correctly. To reproduce one of these cases:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ha, you are a pro edge case finder. The current routing doesn't include browse= query var, however it is a good idea to add it if possible. I will take a look and try to improve the behavior here.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sat, 04 Mar 2017 08:34:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:7/1488616460698611</guid>
      <description>&lt;p&gt;
I see, thanks for the explanation! Added new patch that does that. I only updated widgets for which it made sense, i.e. widgets that also show their title by default.
&lt;/p&gt;
&lt;p&gt;
Some examples that show their title (added placeholder): Archives, Categories, etc.
Some examples that don't show their title (didn't add placeholder): Text, Search, Calendar, etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>39909.3.patch attached to Ticket #39909</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sat, 04 Mar 2017 08:32:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39909/39909.3.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39909/39909.3.patch/1488616337738491</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 05:25:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:1/1488605132549824</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) created</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 05:20:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031/1488604830516476</guid>
      <description>&lt;p&gt;
This is a strawman ticket published to generate discussion and hopefully concensus.
&lt;/p&gt;
&lt;p&gt;
The W3C has standardized &lt;a class="ext-link" href="https://wptavern.com/web-annotations-are-now-a-w3c-standard-paving-the-way-for-decentralized-annotation-infrastructure"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Web Annotions&lt;/a&gt; to decentralize annotations  across the web &lt;em&gt;("annotations" being a superset of commenting.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
As WordPress' mission is to &lt;em&gt;"Democratize Publishing,"&lt;/em&gt; and as WordPress is by far the most widely used tool for publishing content on the web that also allows other people to comment on said content, it would seem fitting &lt;em&gt;(at least to me)&lt;/em&gt; that WordPress would empower users of WordPress to control their own annotations across the web, moving forward.
&lt;/p&gt;
&lt;p&gt;
How might to work?  WordPress could offer three (3) new and yet related features:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Add enhancements to the commenting system to accept references to annotations.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;Enable a WordPress site to be an &lt;em&gt;"Annotation Server."&lt;/em&gt; This would likely leverage the existing comment system where the comments could be associated with a new custom post type where each inidividual post could collection annotations for and represent one "persona" of a given registered user as well as how that persona could be presented to the outside world in the form of a URL that represents the user.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;An &lt;em&gt;"Annotate This"&lt;/em&gt; feature similar to &lt;em&gt;"Press This"&lt;/em&gt; which can store annotations at the user's own WordPress site where the Annotate This UI could become the UI for commenting on all future WordPress websites (and potential non-WordPress sites) that offer feature 1.  For those that doesn't offer feature 1 this UI could provide functionality to more easily transfer the comment to the foreign commenting system &lt;em&gt;(such as copying it to the clipboard on user request)&lt;/em&gt; and possibly even implement commenting for specific well-known services &lt;em&gt;(Twitter, Facebook, LinkedIn, Disqus, Medium, etc.)&lt;/em&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Note that some people's first reaction to this idea might be &lt;em&gt;"that's plugin territory"&lt;/em&gt; -- which I can appreciate -- but there are four (4) reasons why I think this is core territory instead:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It is reasonable to assume that 80% of WordPress users would want to maintain their own comments in addition to their own posts,
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;This idea only really has benefits if it can become ubiquitous, e.g. If the 3 features are all available. If a plugin then an individual can only ever control one side of annotations thus dooming their implementation to obscurity.  Note that a &lt;em&gt;"Feature Plugin"&lt;/em&gt; slated for a future version of WP core is not &lt;em&gt;"plugin territory"&lt;/em&gt; that I am arguing against.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;It is a W3C recommendation, not some startup 3rd party service so it is likely to be adopted by many if not all of the web in the next few years.  Why should WordPress not be the tool that helps define for the world how annotations should best be utilized, before some walled-garden like Facebook establishes the defacto-approach ahead of WordPress?
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="4"&gt;&lt;li&gt;And finally, WordPress's mission is to &lt;em&gt;"Democratize Publishing"&lt;/em&gt; and I cannot think of many other feature requests that are more &lt;em&gt;"on-mission"&lt;/em&gt; than this one,
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Thoughts?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 04 Mar 2017 05:07:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:6/1488604063908553</guid>
      <description>&lt;p&gt;
@dlh you are correct. &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch" title="Attachment '39909.2.patch' in Ticket #39909"&gt;39909.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39909/39909.2.patch" title="Download"&gt;​&lt;/a&gt; is the direction to take.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40030 (Pass User and Comment Objects to rest_get_avatar_urls) created</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 04 Mar 2017 04:10:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40030</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40030/1488600642490308</guid>
      <description>&lt;p&gt;
This function retrieves avatars based on email address. It is used by the comments and user controllers.
&lt;/p&gt;
&lt;p&gt;
However, this means that we are locking ourselves into Gravatar, which is a whole other conversation.
&lt;/p&gt;
&lt;p&gt;
The dependent Comment and User 'prepare_item_for_response' functions pass the email address from a User Object or Comment Object to the rest_get_avatar_urls function.
&lt;/p&gt;
&lt;p&gt;
Instead, they should pass the entire Comment or User object. Since get_avatar_url supports this, it will result in no backward compatibility issues, and this will allow the objects to be filtered using existing filters, assuming that you wanted to return alternative avatar data, such as a local avatar, alternative remote service, what have you.
&lt;/p&gt;
&lt;p&gt;
Since this is internal to Core, it won't result in any data leakage to the API.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #31245 (Replace alloptions with a key cache) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:45:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/31245#comment:44</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/31245#comment:44/1488595521553800</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1488595518727103"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27669 (Stale `db_version` value after update with external object cache) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:45:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27669#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27669#comment:24/1488595521046700</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1488595518727103"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37840 (Optimize full size images) updated</title>
      
        <dc:creator>bahia0019</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:23:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37840#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37840#comment:15/1488594223901967</guid>
      <description>&lt;p&gt;
I just saw this pop up in the summary email. I love the idea, as even I'm confused what to use now that SrcSet is out. Large doesn't cover a 27" screen (let alone a 27" Retina iMac), and Full seems too overkill (even though I use JPEGMini before upload).
&lt;/p&gt;
&lt;p&gt;
I don't know what compression methods are currently being used on upload. Last I knew it was a straight 90% JPEG compression.
But what if we looked at replacing it with something like EWWW that utilizes multiple lossless compression utilities. I think they actually use JPEGMini and TinyPNG.
&lt;/p&gt;
&lt;p&gt;
APIs may be an issue for some of these utilities but (and I can't believe I'm going to say this, as I hate Jetpack), but maybe that becomes an option for Jetpack users.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17924 (Make Integrating Multiple Roles Per User Easier for Plugin Authors) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:16:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17924#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17924#comment:49/1488593784994134</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
It would be great to see this milestoned in the near future, adding &lt;code&gt;dev-feedback&lt;/code&gt; to existing &lt;code&gt;commit&lt;/code&gt; hoping to attract some attention
&lt;/p&gt;
&lt;p&gt;
FYI: Patch still applies to /trunk cleanly :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sat, 04 Mar 2017 01:58:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:5/1488592701815957</guid>
      <description>&lt;p&gt;
@bor0 Your patch updates the various &lt;code&gt;widget()&lt;/code&gt; methods, but I think the &lt;code&gt;form()&lt;/code&gt; methods are what need updating? &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch" title="Attachment '39909.2.patch' in Ticket #39909"&gt;39909.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39909/39909.2.patch" title="Download"&gt;​&lt;/a&gt; has an example of what I understood the intent to be.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>39909.2.patch attached to Ticket #39909</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sat, 04 Mar 2017 01:56:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch/1488592594300964</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>seancjones</dc:creator>

      <pubDate>Sat, 04 Mar 2017 00:49:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:125</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:125/1488588573171713</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:124" title="Comment 124"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I agree that when we present this information to users, that this is a good way to do it. I'm just cautioning that if we are talking about presenting this to everybody within the admin panel, the core devs are going to be very hesitant to do that.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Excellent points. Thanks for voicing the head devs. It's easy to forget the incredible responsibility of running the largest CMS in the world. I am always trying to push things forward, but I also work in IT. Don't want to be the next AWS!
&lt;/p&gt;
&lt;p&gt;
Clearly I didn't fully consider the mass hysteria that could result. What you' said got me thinking in a different direction entirely. Mainly, what is the absolute smallest educational step that can be made that still goes a long way to moving a plan forward?
&lt;/p&gt;
&lt;p&gt;
We talk about tech a first as devs but one of the best places to start testing out the message and it's efficiency is at WordCamps and meetups. A lot of users go and they're already highly engaged. I know the medium is different than web, but it has a lot of appeal, not least of which is that it engages the community directly. Perhaps it could be an early foray into a broader strategy where user input is directly requested/received.
&lt;/p&gt;
&lt;p&gt;
A talk like "How to not get hacked" with a few topics, especially upgrading PHP, and time for discussion, could help shed light on the greater strategy. Even if it takes a while to finalize a plan that takes still longer, I think a lot of us would be happy to finally see some headway.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36514 (posting with custom taxes) updated</title>
      
        <dc:creator>ZaneMatthew</dc:creator>

      <pubDate>Sat, 04 Mar 2017 00:30:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36514#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36514#comment:21/1488587404651567</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36514/36514.4.diff" title="Attachment '36514.4.diff' in Ticket #36514"&gt;36514.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36514/36514.4.diff" title="Download"&gt;​&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I've submitted a unit test for the proposed patch. The unit test failed before applying the patch, and passed once the patch was applied.
&lt;/p&gt;
&lt;p&gt;
I was able to manually reproduced the issue via the WP Admin. I then created a unit test that;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;registers a given taxonomy based on the reporters criteria,
&lt;/li&gt;&lt;li&gt;creates a post and term for the newly registered taxonomy,
&lt;/li&gt;&lt;li&gt;sets the current user to editor role,
&lt;/li&gt;&lt;li&gt;uses &lt;code&gt;edit_post()&lt;/code&gt; to apply the newly created term to the given post,
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I verified that WordPress did create a new term with the term ID as the term, vs. adding the term to the post.
&lt;/p&gt;
&lt;p&gt;
I then applied the patch, re-run the test, and the test passed.
&lt;/p&gt;
&lt;p&gt;
One item to note is that to fully simulate the process of editing a post from the WP Admin, the &lt;code&gt;$term_id&lt;/code&gt; had to be type casted as &lt;code&gt;(string) $term_id&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36514.4.diff attached to Ticket #36514</title>
      
        <dc:creator>ZaneMatthew</dc:creator>

      <pubDate>Sat, 04 Mar 2017 00:02:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36514/36514.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36514/36514.4.diff/1488585728039117</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>39909.patch attached to Ticket #39909</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Fri, 03 Mar 2017 23:51:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39909/39909.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39909/39909.patch/1488585092855440</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Fri, 03 Mar 2017 23:51:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:4/1488585071284712</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Added diff that implements the proposed behaviour.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Fri, 03 Mar 2017 23:05:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:124</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:124/1488582339629948</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:122" title="Comment 122"&gt;seancjones&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Not sure what you mean about "still a way from the point where we could do the yellow vs green though".  Colors/graphs of any kind are a very, very good teaching tool. I understand not wanting to make someone feel panicked if they're "Yellow" and maybe just have "green" and "red", or something equivalent UX people like.
&lt;/p&gt;
&lt;p&gt;
But people do NOT read, they DO look at graphs.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree that when we present this information to users, that this is a good way to do it. I'm just cautioning that if we are talking about presenting this to everybody within the admin panel, the core devs are going to be very hesitant to do that. Trust me, I've memorized all of the talking points. :-) I think that if they will agree to pursue educating users about this at all, they'll want to test the waters first. (And really, it would be easy to get this wrong and end up scaring people, so that's a good thing.) I like @alexander.rohmann's idea of eventually doing something similar to browsehappy as well. I just think that if we try to jump in with both feet, the core devs will just try to shut down the whole education idea.
&lt;/p&gt;
&lt;p&gt;
As far as the parallel between this and browsehappy goes, note that folks will be quick to point out that one difference is that many users actually know what their browser is, what it does, and most of them can update it (actually, not all though). But in this case, many users know nothing about PHP, what it does, and they don't have any control over what version they are running. I think though that as far as that last point, users are probably gaining more control over what PHP version they are running. Possibly most of the remaining users are on crummy hosts and don't have any control though.
&lt;/p&gt;
&lt;p&gt;
This isn't to argue against the idea, just to prepare you for what has been said about the idea before. I think that before the core team and the support team are ready to OK something like this, they're going to want some proof that it is feasible and worth the effort. Which is why at this point we'll probably have to thing minimalistically in regard to scope (how many users are exposed to whatever we come up with), though I guess really that doesn't have to necessarily cramp the method that is used—something like brosehappy is one good idea, but probably only shown to the users running the very oldest PHP version (5.2).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36613 (Browser back button doesn't work in Theme Browser) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Fri, 03 Mar 2017 22:59:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36613#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36613#comment:13/1488581972617110</guid>
      <description>&lt;p&gt;
@adamsilverstein finally tested a bit, yep previous error seems gone. However, there are still edge cases where seems it's a bit difficult to make the history work correctly. To reproduce one of these cases:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;start from the Popular tab (&lt;code&gt;?browse=popular&lt;/code&gt;)
&lt;/li&gt;&lt;li&gt;click on the second theme
&lt;/li&gt;&lt;li&gt;the installer opens, navigate 2 themes forward
&lt;/li&gt;&lt;li&gt;click on the browser's Back button three times, and the installer closes
&lt;/li&gt;&lt;li&gt;you're back on the Popular tab
&lt;/li&gt;&lt;li&gt;notice your browser's Forward button is disabled, maybe should keep the forward history
&lt;/li&gt;&lt;li&gt;notice in the browser address bar &lt;code&gt;?browse=popular&lt;/code&gt; is gone
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Now start a new theme navigation:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;click on the third theme
&lt;/li&gt;&lt;li&gt;the installer opens, navigate 2 themes forward
&lt;/li&gt;&lt;li&gt;click on the browser's back three times, and the installer closes
&lt;/li&gt;&lt;li&gt;you're now on the Featured tab, you should be on the Popular one
&lt;/li&gt;&lt;li&gt;notice your browser's Forward button is enabled and clickable
&lt;/li&gt;&lt;li&gt;click on the browser's Forward button
&lt;/li&gt;&lt;li&gt;the address bar gets updated with the last theme displayed parameter &lt;code&gt;?theme=themename&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;nothing happens but you get a JS error &lt;code&gt;Cannot read property 'toJSON' of undefined&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;refresh the page, and the theme installer opens
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I &lt;em&gt;think&lt;/em&gt; some of the issues come from underlying issues in the theme installer, but haven't looked in depth.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40029 (Media endpoint can return wrong number of results) updated</title>
      
        <dc:creator>jnylen0</dc:creator>

      <pubDate>Fri, 03 Mar 2017 22:35:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40029#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40029#comment:1/1488580511145971</guid>
      <description>&lt;p&gt;
I think there are also other situations where the pagination/count values returned by the API are not reliable.  We should investigate this more in general and either resolve these situations, or document this caveat and indicate that client code should be prepared to deal with this.
&lt;/p&gt;
&lt;p&gt;
This situation in particular is pretty edge-case since WordPress &lt;a href="https://core.trac.wordpress.org/browser/tags/4.7.2/src/wp-includes/post.php?marks=2467-2468,2486#L2465"&gt;should handle this correctly&lt;/a&gt; under normal circumstances.  It would be good to see some repro steps if this is more common than I'm thinking.  See also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39881" title="#39881: defect (bug): `WP_REST_Posts_Controller::check_read_permission()` should check if ... (closed: fixed)"&gt;#39881&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40029 (Media endpoint can return wrong number of results) created</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Fri, 03 Mar 2017 22:28:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40029</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40029/1488580102703056</guid>
      <description>&lt;p&gt;
&lt;code&gt;WP_REST_Posts_Controller::check_read_permission()&lt;/code&gt; will filter out items from a collection based on readability of the item's parent.
&lt;/p&gt;
&lt;p&gt;
Attachments have a weird association with a post via the "Uploaded To" paradigm, but can exist outside of a parent after that parent mysteriously disappears - example: bug in WordPress, post gets trashed and deleted but image does not rescind its association, etc.
&lt;/p&gt;
&lt;p&gt;
What can happen - I request 10 items on page 1 and get back 7? The fulfillment of the request should be opaque to the client. I have 100s of images - if I ask for 10, I should get 10. The SQL probably needs to be more aggressive by including a clause like:
&lt;/p&gt;
&lt;pre class="wiki"&gt;post_parent = 0 OR post_parent IN (.... {subquery that looks only for IDs that exist} ....)
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36514 (posting with custom taxes) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 03 Mar 2017 22:24:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36514#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36514#comment:20/1488579898039338</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>40028.diff attached to Ticket #40028</title>
      
        <dc:creator>johnjamesjacoby</dc:creator>

      <pubDate>Fri, 03 Mar 2017 22:01:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40028/40028.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40028/40028.diff/1488578510762846</guid>
      <description>&lt;p&gt;
Check &lt;code&gt;$_wp_suspend_cache_invalidation&lt;/code&gt; (and also some related whitespace &amp;amp; order clean-up in &lt;code&gt;clean_blog_cache()&lt;/code&gt;)
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40028 (Network/Site cache cleaning does not obey cache invalidation suspension) created</title>
      
        <dc:creator>johnjamesjacoby</dc:creator>

      <pubDate>Fri, 03 Mar 2017 22:00:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40028</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40028/1488578400082913</guid>
      <description>&lt;p&gt;
Sites &amp;amp; Networks do not obey the &lt;code&gt;$_wp_suspend_cache_invalidation&lt;/code&gt; global when their &lt;code&gt;clean&lt;/code&gt; functions are called.
&lt;/p&gt;
&lt;p&gt;
This can result in an excessive number of cache invalidations when this global value is explicitly set.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40027 (Tags and Categories should have a "slugs" parameter for batch fetching) updated</title>
      
        <dc:creator>jnylen0</dc:creator>

      <pubDate>Fri, 03 Mar 2017 21:41:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40027#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40027#comment:2/1488577274913013</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This is very similar to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38579" title="#38579: enhancement: REST API: Allow listing posts that match any of a set of slugs rather ... (closed: fixed)"&gt;#38579&lt;/a&gt; for posts.  As Adam mentioned, we should use the same &lt;code&gt;slug&lt;/code&gt; parameter but support arrays and comma-separated lists.  Let's see if we can get it in the next minor release.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 03 Mar 2017 21:32:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:3/1488576760733895</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Ready for dev. Patch would include whatever the default titles are as found in &lt;code&gt;WP_*_Widget::widget()&lt;/code&gt; methods to be added to the &lt;code&gt;title&lt;/code&gt; input &lt;code&gt;placeholder&lt;/code&gt; in the corresponding&lt;code&gt;WP_*_Widget::form()&lt;/code&gt; methods.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40025 (Customer checkbox control is checked when the default value is false.) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Fri, 03 Mar 2017 21:30:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40025#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40025#comment:1/1488576617373216</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@gandham Please provide a standalone plugin with code that demonstrates the issue you're having.
&lt;/p&gt;
&lt;p&gt;
From your screenshot, I see you have “flase” (a mispelling). In PHP, if you try to use &lt;code&gt;flase&lt;/code&gt; you'll get:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Notice: Use of undefined constant flase - assumed 'flase'
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In other words, it converts &lt;code&gt;flase&lt;/code&gt; into a string &lt;code&gt;'flase'&lt;/code&gt; and this would then be interpreted as boolean &lt;code&gt;true&lt;/code&gt;, and result in the checkbox being checked.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>alexander.rohmann</dc:creator>

      <pubDate>Fri, 03 Mar 2017 21:26:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:123</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:123/1488576403707347</guid>
      <description>&lt;p&gt;
@seancjones That's great stuff!
&lt;/p&gt;
&lt;p&gt;
Anyone remember this? &lt;a class="ext-link" href="http://browsehappy.com/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://browsehappy.com/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I think something more designed, and engaging as an informational site could be cool. It would be pretty easy to get up on GitHub pages. I bought &lt;a class="ext-link" href="http://codehappy.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://codehappy.org/&lt;/a&gt; a while back in anticipation of something like this and would be happy to point it to a site made for this cause.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>seancjones</dc:creator>

      <pubDate>Fri, 03 Mar 2017 21:23:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:122</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:122/1488576228456222</guid>
      <description>&lt;p&gt;
I'll hold off until I get word from @jorbin. This is now in Markdown anyway.
&lt;/p&gt;
&lt;p&gt;
Not sure what you mean about "still a way from the point where we could do the yellow vs green though".  Colors/graphs of any kind are a very, very good teaching tool. I understand not wanting to make someone feel panicked if they're "Yellow" and maybe just have "green" and "red", or something equivalent UX people like.
&lt;/p&gt;
&lt;p&gt;
But people do NOT read, they DO look at graphs.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40027 (Tags and Categories should have a "slugs" parameter for batch fetching) updated</title>
      
        <dc:creator>kadamwhite</dc:creator>

      <pubDate>Fri, 03 Mar 2017 20:45:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40027#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40027#comment:1/1488573936692781</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
From a design standpoint we've tried to make any list-style query parameter (include, exclude, categories, etc) behave the same... in this regard I agree that "slug" is the odd one out, because it is a filtering query that returns an array, but does not accept multiple values. I'm in favor of the change, as the benefit to clients is significant and the query overhead within WP should be significantly less of a burden than the HTTP latency or query overhead of making multiple requests in parallel or sequence
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Fri, 03 Mar 2017 20:18:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:121</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:121/1488572310711562</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:119" title="Comment 119"&gt;seancjones&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@jdgrimes Great document! I modified it, hope you don't mind. It's in a Gist. Feel free to fork and make any changes. If you recommend a better location I'll put it there.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://gist.github.com/smcjones/6a46957b6a89568243350ac0f395db85"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://gist.github.com/smcjones/6a46957b6a89568243350ac0f395db85&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Cool. I agree with @Sobak that we're probably going to want a full repo for this though. Not only does it support PRs, but it also allows us to break out discussion of each point into separate issues, instead of continuing to grow this already huge ticket. Eventually that should probably be under the WordPress organization on GitHub, but I guess there is nothing stopping us from going ahead and creating a repo, that can be transferred to there later.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I reference colors in the gist.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think this is an interesting idea. I think we're still a way from the point where we could do the yellow vs green though. Eventually it might be nice, but it requires user education, and we still need to test the waters regarding how easy/beneficial it is going to be to educate users about this. Even if the core devs admit that some education effort here might be necessary, I think that they'll probably want to keep that to a minimum.
&lt;/p&gt;
&lt;p&gt;
So I think we should focus on starting small, just educating those users who are using the oldest version of PHP, and see how that goes. Then we could think about green and yellow users.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
For those who didn't see, @jorbin brought this up in &lt;a class="ext-link" href="https://make.wordpress.org/core/2017/03/03/dev-chat-summary-march-1st-4-7-3-week-5/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the last core dev chat in Slack&lt;/a&gt;, suggesting that version support procedures for all of the different technologies used by WordPress should be discussed at the upcoming community summit. High-five to him for his continued willingness to wrestle with this stuff.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40027 (Tags and Categories should have a "slugs" parameter for batch fetching) created</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Fri, 03 Mar 2017 20:08:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40027</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40027/1488571717331503</guid>
      <description>&lt;p&gt;
I have 8 categories but I want to query only 3:
1 taco
2 burrito
3 enchilada
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;/categories?slug=taco&lt;/code&gt; only returns one item because there is no batch slug mechanism
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;/categories?include[]=1&amp;amp;include[]=2&amp;amp;include[]=3&lt;/code&gt; returns all 3
&lt;/p&gt;
&lt;p&gt;
What I want:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;/categories?slugs[]=taco&amp;amp;slugs[]=burrito&amp;amp;slugs[]=enchilada&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
The endpoints, by default, are way too slow to effectively be used with serial HTTP. The batching parameters are essential.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>Sobak</dc:creator>

      <pubDate>Fri, 03 Mar 2017 19:50:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:120</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:120/1488570627788545</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:119" title="Comment 119"&gt;seancjones&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@jdgrimes Great document! I modified it, hope you don't mind. It's in a Gist. Feel free to fork and make any changes. If you recommend a better location I'll put it there.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://gist.github.com/smcjones/6a46957b6a89568243350ac0f395db85"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://gist.github.com/smcjones/6a46957b6a89568243350ac0f395db85&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Hi!
&lt;/p&gt;
&lt;p&gt;
Thank you, it's definitely something to begin with. I would suggest to make it a repository, though. Gists are nice for fast prototyping of documents but they lack pull requests support. Sure, what's happening it's totally unofficiall but I still believe this work could be used somehow later on.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>seancjones</dc:creator>

      <pubDate>Fri, 03 Mar 2017 19:34:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:119</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:119/1488569647055358</guid>
      <description>&lt;p&gt;
@jdgrimes Great document! I modified it, hope you don't mind. It's in a Gist. Feel free to fork and make any changes. If you recommend a better location I'll put it there.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://gist.github.com/smcjones/6a46957b6a89568243350ac0f395db85"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://gist.github.com/smcjones/6a46957b6a89568243350ac0f395db85&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Note:
&lt;/p&gt;
&lt;p&gt;
I reference colors in the gift. This is related to the thought I have below. It seems to make sense to put this in the dashboard and provide the UX folks with information like recommended PHP version. Because a picture is worth a thousand words, I believe color coding would be very helpful. Just to throw out some - maybe bad ideas as I know there is color blindness out there:
&lt;/p&gt;
&lt;p&gt;
Green - Good - display positive message, you are up-to-date (WordPress recommended minimum version)
Yellow - OK - display cautious message: could be better, but not the end of the world (PHP supported version)
Red - Danger! - display urgent message: Upgrade version ASAP.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Revelation‏.png attached to Ticket #22363</title>
      
        <dc:creator>programmin</dc:creator>

      <pubDate>Fri, 03 Mar 2017 18:17:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/22363/Revelation%E2%80%8F.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/22363/Revelation%E2%80%8F.png/1488565020817577</guid>
      <description>&lt;p&gt;
Another file with special (hidden) character
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40020 (Customizer fails to load in Safari due to X-Origin Header mismatch) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 03 Mar 2017 18:04:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40020#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40020#comment:1/1488564252536737</guid>
      <description>&lt;p&gt;
Hey there, thanks for your report!
&lt;/p&gt;
&lt;p&gt;
This sounds like a duplicate of &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/39128" title="#39128: defect (bug): Customize: Preview fails to load when domain mapping in use ... (assigned)"&gt;#39128&lt;/a&gt;. Can you verify that?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40022 (Too much data in wp_options entry where option_name = 'cron' drags down WP) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 03 Mar 2017 18:02:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40022#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40022#comment:4/1488564131929786</guid>
      <description>&lt;p&gt;
In this case, a plugin misbehaved and created a huge cron option. That's not that different to a plugin bloating up the posts table or another option in the database, IMHO.
&lt;/p&gt;
&lt;p&gt;
If you want to "fix" it for cron specifically, I'd suggest going with &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/15148" title="#15148: enhancement: Cron Storage Abstraction (closed: wontfix)"&gt;#15148&lt;/a&gt; or something like Cavalcade.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40026 (Image Uploading and Resizing) created</title>
      
        <dc:creator>khenkel</dc:creator>

      <pubDate>Fri, 03 Mar 2017 17:57:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40026</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40026/1488563869204112</guid>
      <description>&lt;p&gt;
When uploading an image, the link to edit the image is available but when trying to resize the numbers in the selection fields display NaN. Also unable to actually crop or scale the image. Once the image has been uploaded and you return to the image it is then able to be edited.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39206 (Replace `is_super_admin()` with `current_user_can( 'manage_options' )` ...) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Fri, 03 Mar 2017 17:50:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39206#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39206#comment:8/1488563404392520</guid>
      <description>&lt;p&gt;
I'd prefer a &lt;code&gt;setup_network&lt;/code&gt; meta capability (handled in &lt;code&gt;map_meta_cap()&lt;/code&gt;) which maps to the logic you mentioned.
&lt;/p&gt;
&lt;p&gt;
Needs a patch, and the cap needs adding to &lt;code&gt;Tests_User_Capabilities::_getSingleSiteMetaCaps()&lt;/code&gt; and &lt;code&gt;Tests_User_Capabilities::_getMultiSiteMetaCaps()&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>customize-bug.png attached to Ticket #40025</title>
      
        <dc:creator>gandham</dc:creator>

      <pubDate>Fri, 03 Mar 2017 17:15:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40025/customize-bug.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40025/customize-bug.png/1488561329003026</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40025 (Customer checkbox control is checked when the default value is false.) created</title>
      
        <dc:creator>gandham</dc:creator>

      <pubDate>Fri, 03 Mar 2017 17:11:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40025</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40025/1488561084391056</guid>
      <description>&lt;p&gt;
If we set the default value of the setting as boolean  false, not "false", checkbox on the customiser is checked.
If I set the default value to 0, it is working as expected.
&lt;/p&gt;
&lt;p&gt;
Should a boolean false be treated as false?
&lt;/p&gt;
&lt;p&gt;
Customiser saves the false value as 0 and true value as 1, when actually saving to the db.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39973 (Adding playbuzz.com as an oEmbed provider) updated</title>
      
        <dc:creator>playbuzz</dc:creator>

      <pubDate>Fri, 03 Mar 2017 16:21:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39973#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39973#comment:2/1488558103913378</guid>
      <description>&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Is the service popular enough for core developers to have heard of it before? Is it “mainstream?”&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Playbuzz is indeed a mainstream platform: Playbuzz-powered content is published regularly on over 13,000+ of our editorial partners’s sites, including: CNBC, The Huffington Post, The Telegraph, MTV, Sports Illustrated, Sky Sports, USA Today and many more. Commercial partners, for sponsored content campaigns, include: Unilever, Clinique, Walgreens, Samsung, Halifax, Ford, American Express and many more. Our content creators community consists of over 100k creators, and monthly traffic to our website is at 20 million visits.
&lt;/p&gt;
&lt;p&gt;
Playbuzz is the winner of Digiday Europe’s &lt;a class="ext-link" href="http://digiday.com/awards/financial-times-publisher-year-digiday-awards-europe/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Best Publishing Platform and Best Brand Platform 2016&lt;/a&gt;, and is featured regularly on leading technology and business publications, such as &lt;a class="ext-link" href="https://techcrunch.com/2016/08/05/playbuzz-impact/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;TechCrunch&lt;/a&gt;, Business Insider, &lt;a class="ext-link" href="http://mashable.com/2014/10/08/playbuzz-buzzfeed/#33uvO5SbksqY"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Mashable&lt;/a&gt;, &lt;a class="ext-link" href="http://blogs.wsj.com/digits/2016/03/31/disney-saban-invest-in-content-platform-maker-playbuzz/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;The Wall-Street Journal&lt;/a&gt; and more.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;If similar services are already supported, how does this service compare in terms of size, features, and backing?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Playbuzz is currently the leading authoring platform for interactive content, offering users a toolset of over a dozen different interactive storytelling tools. Content items created using the Playbuzz platform can be translated to over 40 languages, and combine video, text and visual features in order to deliver a compelling message to online readers worldwide. The company operates offices in 7 different locations, including the US, UK, China, Russia and Israel.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Does this service have a large following on Twitter, Facebook, or other social media?  Is its Twitter account verified?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The Playbuzz twitter account is indeed verified. Between our B2C and B2B channels (Facebook and Twitter), we have over 2.5 million followers on Facebook, and reach over 112k people on Twitter. In addition, Playbuzz content was &lt;a class="ext-link" href="https://www.newswhip.com/2015/02/the-biggest-facebook-publishers-of-january-2015/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the most shared on Facebook&lt;/a&gt; in 2015.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Is its oEmbed endpoint clearly established and properly documented? (Sometimes, they are just a developer’s pet project that may not be supported.)&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The oEmbed service was established a couple of years ago, and is being used ever since. Please find the documentation &lt;a class="ext-link" href="https://publishers.playbuzz.com/academy/how_to/how-to-use-playbuzz-wordpress-oembed/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Does the oEmbed endpoint work with WordPress’ oEmbed auto-discovery? If not, could it be made to work with additional HTML tags or attributes being whitelisted?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
No, the oEmbed endpoint does not work with the WordPress’ auto-discovery. Playbuzz does not fit the type of content that can be embedded via non-whitelisted sites, such as links, blockquotes, and iframes.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Does the service make an effort to build relationships with developers, such as through robust APIs?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The Playbuzz community consists of developers, creators and designers who seek out new ways to improve the content they create. Our community managers maintain a close relationship with users, and invite them to be the first to try new features. In addition, Playbuzz organizes and hosts meetups for developers in the company’s office in Tel Aviv on a regular basis.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;How old is the service?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Playbuzz was founded in 2012 and released its product soon after.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Does it have a well-established Wikipedia article? (Seriously.)&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Please find the Playbuzz Wikipedia page &lt;a class="ext-link" href="https://en.wikipedia.org/wiki/Playbuzz"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Has anyone written a WordPress plugin that leverages the service in some way, whether adding it as an oEmbed provider, creating a shortcode, or leveraging other APIs of the service? Do these plugins have any noticeable adoption or traction that would indicate usage and demand?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The Playbuzz WordPress plugin supports oEmbed, with over 5000 downloads and a rapidly growing awareness and popularity among Playbuzz partners, partially as a result of Playbuzz’s efforts to promoting the adoption of the Wordpress plugin.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Is the provider frequently proposed?&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Unknown.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40022 (Too much data in wp_options entry where option_name = 'cron' drags down WP) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 03 Mar 2017 15:58:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40022#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40022#comment:3/1488556689180244</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/15148" title="#15148: enhancement: Cron Storage Abstraction (closed: wontfix)"&gt;#15148&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40024 (Include CPT archives in the menu cutomizer) created</title>
      
        <dc:creator>eclare</dc:creator>

      <pubDate>Fri, 03 Mar 2017 15:35:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40024</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40024/1488555325926050</guid>
      <description>&lt;p&gt;
If we create a new Custom Post Type and go to the menu customizer, we can insert links to particular posts of that type.
&lt;/p&gt;
&lt;p&gt;
What we can't easily do is insert a link to the Custom Post Type archive page.
&lt;/p&gt;
&lt;p&gt;
Example: we create a Movies CPT. We want to add a link to the list (archive) of all Movies to the menu. We can't do that unless we use the custom URL field (and the URL is not provided anywhere in the admin panel, only in the CPT registering code itself).
&lt;/p&gt;
&lt;p&gt;
Enhancement needed: add a section which lets you link to archive pages for CPTs.
&lt;/p&gt;
&lt;p&gt;
Suggested name for the box: "Content archives" or "Custom content archives".
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40022 (Too much data in wp_options entry where option_name = 'cron' drags down WP) updated</title>
      
        <dc:creator>yannielsen</dc:creator>

      <pubDate>Fri, 03 Mar 2017 15:34:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40022#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40022#comment:2/1488555261659847</guid>
      <description>&lt;p&gt;
Thank you @pothi :-) I'm considering just coding this "right away" if noone else is working on it and if it's deemed to be a good idea :-)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40022 (Too much data in wp_options entry where option_name = 'cron' drags down WP) updated</title>
      
        <dc:creator>pothi</dc:creator>

      <pubDate>Fri, 03 Mar 2017 15:31:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40022#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40022#comment:1/1488555114490145</guid>
      <description>&lt;p&gt;
Welcome to WP core trac.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
if it was an idea to implement a mechanism to split up the 'cron' entry into multiples when passing a threshold?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Of course.
&lt;/p&gt;
&lt;p&gt;
Probably, WP could get some inspiration from &lt;a class="ext-link" href="https://github.com/humanmade/Cavalcade"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/humanmade/Cavalcade&lt;/a&gt; .
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40023 (Include CPT &amp; term archives in the inline link insert search field) created</title>
      
        <dc:creator>eclare</dc:creator>

      <pubDate>Fri, 03 Mar 2017 15:26:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40023</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40023/1488554778026583</guid>
      <description>&lt;p&gt;
When we insert a link using the inline modal, we can search for pages, posts &amp;amp; custom post type pages.
&lt;/p&gt;
&lt;p&gt;
What the search feature of this field does NOT find is:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Custom Post Type archive pages (like "movies" for a Movie CPT, with a list of all movies)
&lt;/li&gt;&lt;li&gt;term archive pages (like "Horror" for a normal post category or for a custom post type category)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The most common scenario: user wants to link to a category page. The link modal doesn't suggest it.
&lt;/p&gt;
&lt;p&gt;
Enhancement needed: the search feature of the add link field should also suggest CPT archives &amp;amp; term archives.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Fri, 03 Mar 2017 15:05:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:118</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:118/1488553536717441</guid>
      <description>&lt;p&gt;
I two more thoughts on this last night:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Building docs and possibly adding a notice eventually is something that is going to need input from the UX team or whoever can help us do usertests. Sometimes it is hard for us to really know how a user is going to respond to something like that in real life. Non-devs will need to be heavily involved.
&lt;/li&gt;&lt;li&gt;As far as time based vs percentage based in terms of deciding when to update, I don't support an entirely percentage-based approach. Of course, the percentage does need to be taken into account, but I think that a time factor has to be there as well, and here is why. If we just say, for the sake of example, that we're going to drop support once a version reaches 5% usage, then we are basically always going to be leaving approximately the last 5% of users on an unsupported version. Even if everybody is more proactive about staying up to date, that just means that we get to 5% quicker. Some people will still come in last, even if they aren't taking years to update. That's why there needs to be a deadline component. If we set a date 6 months or a year ahead of time, that gives everybody enough time that potentially when the deadline comes there is nobody still running that version. I realize that won't actually happen, but you get the general idea. A large number of that 5% is given a better chance of getting updated in time, probably by their hosts, and never even having to deal with this.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
So basically, I'd recommend something similar to @Sobak: once we approach 5% (or whatever number), we should set a date 3 releases into the future. Maybe during that first release cycle, we are basically just giving hosts a chance to get their users updated so that the users themselves never have to deal with it. When the second release comes around, we will have it begin warning users about the impending requirement update. (Actually, depending on how the infrastructure is built, this wouldn't necessarily have to coincide with a release, I guess. But it does make sense to tell users, "get ready for the next version of WordPress.") Then in the third release, the requirement would officially be upped, and new features could be introduced in that release that required newer PHP features.
&lt;/p&gt;
&lt;p&gt;
If we started work on this now, we could try to up the requirement in WordPress 5.0, which has a nice ring to it even if WordPress doesn't follow semantic versioning.
&lt;/p&gt;
&lt;p&gt;
However, what percentage to actually use is the question. Given about 60 million WordPress installs (the number quoted on the homepage), 5% = 3 million people. However, based on &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:88" title="Comment 88"&gt;the numbers that @dd32 shared above&lt;/a&gt;, we know that the latest 4 versions of WordPress (4.4-4.7), likely represent about half of that right now. These are the people who are the most likely to actually update WordPress in the next year or so, and they are a full 3/4 of all WordPress users. Of that majority of users who mostly haven't abandoned their sites then, that 5% actually becomes just 1.5 million people. But wait, the percentage for those newer versions isn't 5%. 4.4 was the first version that came in under that, about 4.75%. 4.7 is at ~2.5%. So we are talking about something like 3.5-4% of these users here. Which comes out to closer to just 1 million installs. Yes, that is still a lot, but remember that it is actually less than 1.75% of all WordPress installs. That is the percentage of WordPress users who are likely going to actually want to update in the near future and not be able to due to their PHP version, assuming that we dropped PHP 5.2 &lt;em&gt;today&lt;/em&gt;. But say that it takes us about a year? The total number of installs on PHP 5.2 will only be about 3.3% then. (Yes, I keep track of all this with equations and graphs. :-) That's about 2 million total installs, which would come out to something like 500k installs in the latest 4 versions at that time, the ones where most users are going to update from. Which will be something like 0.8% of WordPress's total userbase.
&lt;/p&gt;
&lt;p&gt;
500k is a big number. But I don't think it is unreasonable. In fact, I'd say that if we set a date now (like WP 5.0), and communicate that to hosts, it might end up being significantly lower by the time we feel like we need to begin actively trying to educate the affected users about the situation.
&lt;/p&gt;
&lt;p&gt;
As others have mentioned, I think that ideally the ultimate goal would be to get to a place where we only support non-EOL PHP versions. That isn't going to happen overnight, obviously, and for the next few years, maybe even 5, we'll have to just drop EOL versions one by one. But eventually though, we should get to the place where there are few enough users using EOL versions that we are comfortable switching to a PHP version support routine that is based on PHP's schedule. The PHP release schedule seems generous enough on its own that at that point it should give users and hosts sufficient time to update as each version approaches EOL.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40022 (Too much data in wp_options entry where option_name = 'cron' drags down WP) created</title>
      
        <dc:creator>yannielsen</dc:creator>

      <pubDate>Fri, 03 Mar 2017 14:22:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40022</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40022/1488550971704153</guid>
      <description>&lt;p&gt;
Recently I experienced an installation running on a Cloud Server with 10GB RAM, 4 CPU cores being dragged down because of a plugin 'malfunctioning' with cron events.
&lt;/p&gt;
&lt;p&gt;
The plugin created excessive amounts of extra entries in wp_options entry where option_name = 'cron' resulting in a 15,4MB entry in the table.
&lt;/p&gt;
&lt;p&gt;
It wasn't a "endless loop"-error that suddenly resulted in it. It had gone unnoticed for quite some time before it got to the point where the server timed out because the requests to the database simply became too slow.
&lt;/p&gt;
&lt;p&gt;
The plugin should ofcourse not be doing that, but it got me wondering if it was an idea to implement a mechanism to split up the 'cron' entry into multiples when passing a threshold?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38922 (Use REST API for ajax tag search) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 03 Mar 2017 12:54:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38922#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38922#comment:13/1488545697388538</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/38922#comment:11" title="Comment 11"&gt;jnylen0&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The extra response size seems like something we can live with until &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38131" title="#38131: enhancement: REST API: Provide interface to include or exclude specific fields from ... (closed: fixed)"&gt;#38131&lt;/a&gt; is done.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sounds fine waiting and agree we will need this functionality repeatedly. I added the patch for consideration and to demonstrate how to filter the response.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Fri, 03 Mar 2017 11:40:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:2/1488541246064733</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/39909#comment:1" title="Comment 1"&gt;westonruter&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@karmatosed what do you think about updating each widget to have a &lt;code&gt;placeholder&lt;/code&gt; in each of their “Title” inputs if there is a default title that gets rendered in the preview? This would be a quick win.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Quick wins are 👍 I agree in hindsight lets not add a backwards-incompatible change.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40021 (Empty p tags when adding multiple consecutive shortcodes in the editor.) updated</title>
      
        <dc:creator>kmgalanakis</dc:creator>

      <pubDate>Fri, 03 Mar 2017 10:11:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40021#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40021#comment:1/1488535876984522</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40021 (Empty p tags when adding multiple consecutive shortcodes in the editor.) created</title>
      
        <dc:creator>kmgalanakis</dc:creator>

      <pubDate>Fri, 03 Mar 2017 10:09:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40021</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40021/1488535769925295</guid>
      <description>&lt;p&gt;
&lt;strong&gt;Steps to reproduce&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create a simple shortcode in your &lt;code&gt;functions.php&lt;/code&gt; file.
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;dummy_div_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$atts&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;div&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;add_shortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'dummy-div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'dummy_div_handler'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Add the &lt;code&gt;[dummy-div][dummy-div]&lt;/code&gt; shortcodes to a new page using either the Visual or the Text editor.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The markup that is outputted on the browser is
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;p&amp;gt;&amp;lt;div&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/div&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;p&gt;
which clearly is invalid. The browser processes the page source and transforms those  &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; tags to empty &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags by adding the missing opening or closing tag, so the resulting markup is something like
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38922 (Use REST API for ajax tag search) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Fri, 03 Mar 2017 07:53:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38922#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38922#comment:12/1488527622986774</guid>
      <description>&lt;p&gt;
@adamsilverstein @jnylen0 thanks, I totally trust your judgment since you're the experts here :) As a non-expert, I think solving the general issue in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38131" title="#38131: enhancement: REST API: Provide interface to include or exclude specific fields from ... (closed: fixed)"&gt;#38131&lt;/a&gt; make sense though.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The extra response size seems like something we can live with until &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38131" title="#38131: enhancement: REST API: Provide interface to include or exclude specific fields from ... (closed: fixed)"&gt;#38131&lt;/a&gt; is done.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yep, after all, in this specific case with tags, the size difference is pretty small. However, in other cases it's potentially huge. See &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/38920" title="#38920: enhancement: Use REST API for link query in editor (new)"&gt;#38920&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39888 (Right after delete author - PHP notices on '%s is currently editing') updated</title>
      
        <dc:creator>1naveengiri</dc:creator>

      <pubDate>Fri, 03 Mar 2017 07:49:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39888#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39888#comment:8/1488527362877366</guid>
      <description>&lt;p&gt;
okey
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/39888#comment:7" title="Comment 7"&gt;SergeyBiryukov&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Tickets are fixed when a commit is made to WordPress trunk.
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39888 (Right after delete author - PHP notices on '%s is currently editing') updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 03 Mar 2017 07:17:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39888#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39888#comment:7/1488525426161642</guid>
      <description>&lt;p&gt;
Tickets are fixed when a commit is made to WordPress trunk.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39888 (Right after delete author - PHP notices on '%s is currently editing') updated</title>
      
        <dc:creator>1naveengiri</dc:creator>

      <pubDate>Fri, 03 Mar 2017 07:14:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39888#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39888#comment:6/1488525255820617</guid>
      <description>&lt;p&gt;
@SergeyBiryukov  could you set props for this bug. If it is fixed.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>Sobak</dc:creator>

      <pubDate>Fri, 03 Mar 2017 06:38:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:117</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:117/1488523132797110</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:111" title="Comment 111"&gt;jorbin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm really not sure what many of the comments here are about, but they don't seem to be about coming up with a strategy for upgrading the minimum version of PHP.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I hope @jdgrimes explained reason for such impression. To me, it looks like people were waiting to see actual arguments and feedback from the core developers and it's great it happened!
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
One thing that I think predates implementing any sort of process is coming up with some user level educational materials about 1) What PHP (and for that matter, MySQL and other server technologies) are 2) Why new versions are important and 3) How to go about upgrading. I would love to see someone step up and own the creation of that matterial.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Absolutely fair point. I propose to make it open and collaborative effort, perhaps using GitHub.
&lt;/p&gt;
&lt;p&gt;
If you are asking for suggested strategies and concrete ideas, here are mine.
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Start joint effort on educational materials which would be linked from the dashboard.
&lt;/li&gt;&lt;li&gt;Revive &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23880" title="#23880: feature request: Minimum PHP version in Plugins (closed: duplicate)"&gt;#23880&lt;/a&gt; to improve UX. Personally, I think it would be good to contact guys working on &lt;a class="ext-link" href="https://github.com/Yoast/whip"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Yoast whip package&lt;/a&gt; to make use of their ideas and also make sure the work isn't duplicated without a need.
&lt;/li&gt;&lt;li&gt;When looking at PHP 5.2 (or any other PHP version) usage metrics, focus on last two major releases of WordPress. People running older versions probably just abandoned their installs.
&lt;/li&gt;&lt;li&gt;I wasn't able to find out much about WordPress release process so I don't know if there is any strict scheudle for releasing new major versions and how often it happen. For now, let me suggest three major releases cycle (so it results in about the one year if I'm not mistaken). First release to just inform people that WordPress is looking for new possibilities and improvements and thus they should know what the hell that PHP is and why running old version is bad for them. Second release to inform that it's last branch (in terms of software management) compatible with their current environment (provided with educational materials, of course) and third release to actually bump the requirements.
&lt;/li&gt;&lt;li&gt;Bump to PHP 5.3. When it comes to further updates strategy, I think 5% of versions share (across two most recent WP releases) is safe time to start that three-releases cycle I talked about. Probably it's still more tolerant than what most software does so hopefully it would fit WordPress philosophy of putting user first (which I absolutely agree with, to be clear)
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Looking forward to hear your (and others) opinion on that! Thank you for your efforts of finding a consensus.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>CyberCr33p</dc:creator>

      <pubDate>Fri, 03 Mar 2017 06:13:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:116</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:116/1488521607195810</guid>
      <description>&lt;p&gt;
In my country we say: You can't make an omelette without breaking eggs. But you don't need to break many eggs in this case.
&lt;/p&gt;
&lt;p&gt;
Most servers running old PHP versions use old and outdated OS version. I am sure that the wordpress versions running in these machines are old too. Most users with old wordpress versions don't know or don't care for security and they will stay in the same old wordpress version for ever (or until someone hacks them).
&lt;/p&gt;
&lt;p&gt;
To show a message in dashboard to notify for upgrading php will not help these users either, because to see the message they need to have a newer wordpress version that supports auto-updates.
&lt;/p&gt;
&lt;p&gt;
In fewer words, if you change the minimum php version it will not case any trouble to most people with old wordpress versions.
&lt;/p&gt;
&lt;p&gt;
Also someone that doesn't upgrade wordpress and plugins (and any other CMS) is a security threat for all the internet users (spam, phishing, ddos, etc).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40014 (&amp; converted to '#038) updated</title>
      
        <dc:creator>subrataemfluence</dc:creator>

      <pubDate>Fri, 03 Mar 2017 05:01:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40014#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40014#comment:3/1488517314822328</guid>
      <description>&lt;p&gt;
For me its absolutely fine with "Plain" in permalink settings as well.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://prnt.sc/efe2rp"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://prnt.sc/efe2rp&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38280.5.diff attached to Ticket #38280</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Fri, 03 Mar 2017 04:30:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38280/38280.5.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38280/38280.5.diff/1488515447789598</guid>
      <description>&lt;p&gt;
Updated patch adds another meta key for tracking the object types that were counted. Also removes all previously counted object types each time to prevent abandoned meta keys.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38922 (Use REST API for ajax tag search) updated</title>
      
        <dc:creator>jnylen0</dc:creator>

      <pubDate>Fri, 03 Mar 2017 04:22:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38922#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38922#comment:11/1488514952534218</guid>
      <description>&lt;p&gt;
I would prefer that we solve the general case in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38131" title="#38131: enhancement: REST API: Provide interface to include or exclude specific fields from ... (closed: fixed)"&gt;#38131&lt;/a&gt; instead of adding special logic based on &lt;code&gt;$_GET['action']&lt;/code&gt;.  That logic isn't very RESTful and I foresee hundreds of other special cases appearing for wp-admin usage if we're not careful.
&lt;/p&gt;
&lt;p&gt;
The extra response size seems like something we can live with until &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38131" title="#38131: enhancement: REST API: Provide interface to include or exclude specific fields from ... (closed: fixed)"&gt;#38131&lt;/a&gt; is done.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39932 (`get_terms()` with `name` and without `taxonomy` generates warning) closed</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 03:01:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39932#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39932#comment:2/1488510100363927</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/40147" title="Taxonomy: When querying terms, ensure `$taxonomies` is an array.
This ..."&gt;40147&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Taxonomy: When querying terms, ensure &lt;code&gt;$taxonomies&lt;/code&gt; is an array.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This avoids PHP notices that otherwise arise when no &lt;code&gt;taxonomy&lt;/code&gt;&lt;br /&gt;
parameter is passed to &lt;code&gt;get_terms()&lt;/code&gt; or &lt;code&gt;WP_Term_Query&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props dlh.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39932" title="#39932: defect (bug): `get_terms()` with `name` and without `taxonomy` generates warning (closed: fixed)"&gt;#39932&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [40147]: Taxonomy: When querying terms, ensure `$taxonomies` is an array.  This ...</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 03:01:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/40147</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/40147/1488510099908552</guid>
      <description>&lt;p&gt;
Taxonomy: When querying terms, ensure &lt;code&gt;$taxonomies&lt;/code&gt; is an array.
&lt;/p&gt;
&lt;p&gt;
This avoids PHP notices that otherwise arise when no &lt;code&gt;taxonomy&lt;/code&gt;
parameter is passed to &lt;code&gt;get_terms()&lt;/code&gt; or &lt;code&gt;WP_Term_Query&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Props dlh.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39932" title="#39932: defect (bug): `get_terms()` with `name` and without `taxonomy` generates warning (closed: fixed)"&gt;#39932&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #39932 (`get_terms()` with `name` and without `taxonomy` generates warning) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 03:00:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39932#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39932#comment:1/1488510031334372</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Yes, I think this is right. Previously, it wasn't possible to query for terms without passing a taxonomy, so this problem never really arose in the past.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34545 ('parent_item' taxonomy label should be used in tag edit form) closed</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:53:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34545#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34545#comment:3/1488509614908001</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/40146" title="Taxonomy: Improve 'Parent' label when editing taxonomy terms.
Instead ..."&gt;40146&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Taxonomy: Improve 'Parent' label when editing taxonomy terms.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Instead of the hardcoded 'Parent', use the &lt;code&gt;parent_item&lt;/code&gt; label.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props abrain, dlh.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34545" title="#34545: enhancement: 'parent_item' taxonomy label should be used in tag edit form (closed: fixed)"&gt;#34545&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [40146]: Taxonomy: Improve 'Parent' label when editing taxonomy terms.  Instead ...</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:53:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/40146</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/40146/1488509614445540</guid>
      <description>&lt;p&gt;
Taxonomy: Improve 'Parent' label when editing taxonomy terms.
&lt;/p&gt;
&lt;p&gt;
Instead of the hardcoded 'Parent', use the &lt;code&gt;parent_item&lt;/code&gt; label.
&lt;/p&gt;
&lt;p&gt;
Props abrain, dlh.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34545" title="#34545: enhancement: 'parent_item' taxonomy label should be used in tag edit form (closed: fixed)"&gt;#34545&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #39984 (wp_insert_term can return wrong ID when multiple existing terms are ...) closed</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:49:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39984#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39984#comment:6/1488509354107424</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/40145" title="Taxonomy: Take 'parent' into account when checking for terms with ..."&gt;40145&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Taxonomy: Take 'parent' into account when checking for terms with duplicate names.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Terms with duplicate names are not allowed at the same level of a&lt;br /&gt;
taxonomy hierarchy. The name lookup introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34809" title="When creating terms, avoid false dupe checks due to accented ..."&gt;[34809]&lt;/a&gt; did not&lt;br /&gt;
properly account for the 'parent' parameter, with the result that&lt;br /&gt;
the duplicate-name restriction was tighter than intended (terms&lt;br /&gt;
with duplicate names could not be created at different levels of&lt;br /&gt;
a single hierarchy).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props mikejolley.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39984" title="#39984: defect (bug): wp_insert_term can return wrong ID when multiple existing terms are ... (closed: fixed)"&gt;#39984&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [40145]: Taxonomy: Take 'parent' into account when checking for terms with ...</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:49:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/40145</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/40145/1488509353605219</guid>
      <description>&lt;p&gt;
Taxonomy: Take 'parent' into account when checking for terms with duplicate names.
&lt;/p&gt;
&lt;p&gt;
Terms with duplicate names are not allowed at the same level of a
taxonomy hierarchy. The name lookup introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34809" title="When creating terms, avoid false dupe checks due to accented ..."&gt;[34809]&lt;/a&gt; did not
properly account for the 'parent' parameter, with the result that
the duplicate-name restriction was tighter than intended (terms
with duplicate names could not be created at different levels of
a single hierarchy).
&lt;/p&gt;
&lt;p&gt;
Props mikejolley.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39984" title="#39984: defect (bug): wp_insert_term can return wrong ID when multiple existing terms are ... (closed: fixed)"&gt;#39984&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #39984 (wp_insert_term can return wrong ID when multiple existing terms are ...) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:39:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39984#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39984#comment:5/1488508750111439</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/40144" title="Taxonomy: Improve precision of duplicate name checks when inserting ..."&gt;40144&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Taxonomy: Improve precision of duplicate name checks when inserting terms.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;wp_insert_term()&lt;/code&gt; does not allow for terms with the same name to exist&lt;br /&gt;
at the same hierarchy level, unless the second term has a unique slug.&lt;br /&gt;
When this logic was refactored in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/31792" title="In `wp_insert_term()`, allow a term with an existing name if a unique ..."&gt;[31792]&lt;/a&gt; and &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34809" title="When creating terms, avoid false dupe checks due to accented ..."&gt;[34809]&lt;/a&gt;, a bug was&lt;br /&gt;
introduced whereby it was possible to bypass the no-same-named-sibling&lt;br /&gt;
check in cases where the first term had a non-auto-generated slug&lt;br /&gt;
(ie, where the name was 'Foo' but the slug something other than 'foo',&lt;br /&gt;
such that the second term would get the non-matching slug 'foo').&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This changeset fixes this issue by ensuring that the duplicate name&lt;br /&gt;
check runs both in cases where there's an actual slug clash *and* in&lt;br /&gt;
cases where no explicit &lt;code&gt;slug&lt;/code&gt; has been provided to &lt;code&gt;wp_insert_term()&lt;/code&gt;.&lt;br /&gt;
The result is a more reliable error condition:&lt;br /&gt;
&lt;code&gt;wp_insert_term( 'Foo' ... )&lt;/code&gt; will always fail if there's a sibling&lt;br /&gt;
'Foo', regardless of the sibling's slug.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props mikejolley.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39984" title="#39984: defect (bug): wp_insert_term can return wrong ID when multiple existing terms are ... (closed: fixed)"&gt;#39984&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [40144]: Taxonomy: Improve precision of duplicate name checks when inserting ...</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:39:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/40144</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/40144/1488508749499893</guid>
      <description>&lt;p&gt;
Taxonomy: Improve precision of duplicate name checks when inserting terms.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;wp_insert_term()&lt;/code&gt; does not allow for terms with the same name to exist
at the same hierarchy level, unless the second term has a unique slug.
When this logic was refactored in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/31792" title="In `wp_insert_term()`, allow a term with an existing name if a unique ..."&gt;[31792]&lt;/a&gt; and &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34809" title="When creating terms, avoid false dupe checks due to accented ..."&gt;[34809]&lt;/a&gt;, a bug was
introduced whereby it was possible to bypass the no-same-named-sibling
check in cases where the first term had a non-auto-generated slug
(ie, where the name was 'Foo' but the slug something other than 'foo',
such that the second term would get the non-matching slug 'foo').
&lt;/p&gt;
&lt;p&gt;
This changeset fixes this issue by ensuring that the duplicate name
check runs both in cases where there's an actual slug clash *and* in
cases where no explicit &lt;code&gt;slug&lt;/code&gt; has been provided to &lt;code&gt;wp_insert_term()&lt;/code&gt;.
The result is a more reliable error condition:
&lt;code&gt;wp_insert_term( 'Foo' ... )&lt;/code&gt; will always fail if there's a sibling
'Foo', regardless of the sibling's slug.
&lt;/p&gt;
&lt;p&gt;
Props mikejolley.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/39984" title="#39984: defect (bug): wp_insert_term can return wrong ID when multiple existing terms are ... (closed: fixed)"&gt;#39984&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #39984 (wp_insert_term can return wrong ID when multiple existing terms are ...) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Fri, 03 Mar 2017 02:31:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39984#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39984#comment:4/1488508290370395</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thanks, @mikejolley.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think it's important we allow multiple terms with same names under different parents.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, WP has always allowed this. This particular weird bug was introduced as part of a refactor in support of multibyte slugs. See &lt;a href="https://core.trac.wordpress.org/ticket/31328#comment:9"&gt;https://core.trac.wordpress.org/ticket/31328#comment:9&lt;/a&gt; and follow-up conversation, especially &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/31792" title="In `wp_insert_term()`, allow a term with an existing name if a unique ..."&gt;[31792]&lt;/a&gt;. (Prior to WP 4.2, this specific kind of bug didn't occur because we used &lt;code&gt;term_exists()&lt;/code&gt; instead of &lt;code&gt;get_term_by( 'name' )&lt;/code&gt;; &lt;code&gt;term_exists()&lt;/code&gt; would fall back on a slug check.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40000 (Alot of tickets continue to be created) updated</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Fri, 03 Mar 2017 01:58:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40000#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40000#comment:18/1488506308783503</guid>
      <description>&lt;p&gt;
Alot of you make phenomenal points.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40014 (&amp; converted to '#038) updated</title>
      
        <dc:creator>fervillz</dc:creator>

      <pubDate>Fri, 03 Mar 2017 00:06:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40014#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40014#comment:2/1488499619863346</guid>
      <description>&lt;p&gt;
Hi @subrataemfluence,
&lt;/p&gt;
&lt;p&gt;
Hmm. Can you try to modify your &lt;strong&gt;Permalink Settings&lt;/strong&gt; to the default &lt;strong&gt;'Plain&lt;/strong&gt;' .
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>