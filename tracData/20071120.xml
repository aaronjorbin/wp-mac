<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #3780 (gettext fails to determine byteorder on 64bit systems with php5.2.1) updated</title>
      
        <dc:creator>madsjensen</dc:creator>

      <pubDate>Tue, 20 Nov 2007 23:59:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3780#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3780#comment:25/1195603145000000</guid>
      <description>&lt;p&gt;
This works !!! thanks ... I have tested many other hacks but only this seems to works.
&lt;/p&gt;
&lt;p&gt;
Apache version        2.0.61
PHP version        5.2.4
MySQL version        5.0.45
Architecture        amd64
Operating system: FreeBSD
&lt;/p&gt;
&lt;p&gt;
Danish localization
&lt;/p&gt;
&lt;p&gt;
cheers mads
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/3780#comment:23" title="Comment 23"&gt;nyuwec&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/3780#comment:21" title="Comment 21"&gt;nbachiyski&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Could everybody, please, try the both patches and report if any is working.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I have a gentoo linux on a 64 bit AMD processor, described in: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5356" title="#5356: defect (bug): gettext cannot parse mo files on 64bit systems (closed: duplicate)"&gt;#5356&lt;/a&gt;, fighting with the above described problem. PHP using PHP_INT_SIZE=8.
&lt;/p&gt;
&lt;p&gt;
Apply 3780.diff: FAILS.
Apply gettext-64-without-bitwise-ops.diff: WORKS!
&lt;/p&gt;
&lt;p&gt;
As I can see the gettext-64-without-bitwise-ops.diff patches the gettext to the format described in: &lt;a class="ext-link" href="http://wordpress.org/support/topic/63038"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/63038&lt;/a&gt; That patch also works on both 64bit and on 32 bit systems I can test!
&lt;/p&gt;
&lt;p&gt;
If only the 3780.diff applied to a 32 bit system it still works, applying the gettext-64-without-bitwise-ops.diff: still works!
&lt;/p&gt;
&lt;p&gt;
So this code in the gettext.php (starting at line 105) works for me on both 32 and 64 bit systems:
&lt;/p&gt;
&lt;pre class="wiki"&gt;		// Caching can be turned off
		$this-&amp;gt;enable_cache = $enable_cache;
		// $MAGIC1 = (int)0x950412de; //bug in PHP 5.0.2, see https://savannah.nongnu.org/bugs/?func=detailitem&amp;amp;item_id=10565
		$MAGIC1 = (int) - 1794895138;
		// $MAGIC2 = (int)0xde120495; //bug
		$MAGIC2 = (int) - 569244523;
		// 64-bit fix
		$MAGIC3 = (int) 2500072158;
		$this-&amp;gt;STREAM = $Reader;
		$magic = $this-&amp;gt;readint();
		if ($magic == $MAGIC1 || $magic == $MAGIC3) { // to make sure it works for 64-bit platforms
			$this-&amp;gt;BYTEORDER = 0;
		} elseif ($magic == ($MAGIC2 &amp;amp; 0xFFFFFFFF)) {
			$this-&amp;gt;BYTEORDER = 1;
		} else {
			$this-&amp;gt;error = 1; // not MO file
			return false;
		}
&lt;/pre&gt;&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5372 (Wrong category on post insertion) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Tue, 20 Nov 2007 23:21:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5372#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5372#comment:1/1195600869000000</guid>
      <description>&lt;p&gt;
Current trunk adds an is_wp_error() check on $id.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://trac.wordpress.org/browser/trunk/wp-includes/taxonomy.php#L1141"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/browser/trunk/wp-includes/taxonomy.php#L1141&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
2.3.1 lacks this check, which could explain the bad id.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Tue, 20 Nov 2007 23:18:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:11/1195600693000000</guid>
      <description>&lt;p&gt;
@dougal
&lt;/p&gt;
&lt;p&gt;
I didn't pick WordPress arbitrarily, or because it is popular, but rather because my WordPress blog (and probably a large number of others) was hacked using precisely this vulnerability.
&lt;/p&gt;
&lt;p&gt;
And no, just because an attacker has &lt;strong&gt;had&lt;/strong&gt; read access to your database does not mean you've lost the battle. Using security measures that have been standard since the 1970s (password hashing and salting), it is quite easy to recover from such compromises, by restoring the database. Then there is the well established principle of "defence in depth".
&lt;/p&gt;
&lt;p&gt;
There are a variety of ways an attacker could get read access to the database, while not being able to do anything more. For example, certain SQL injection flaws can only read but not modify tables, or the attacker could simply find a backup. Before I went public with this vulnerability, I trawled Google for people who had left database backups online and recommended that they remove the files.
&lt;/p&gt;
&lt;p&gt;
Regarding fixes, I think it is possible to improve the security without affecting user convenience at all. Salting passwords and hashing cookies in the right direction would be a good start. Protecting data on the wire (with SSL or otherwise) is nice, but a much less important issue than the one raised here and in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2394" title="#2394: defect (bug): Passwords are stored in an insecure un-salted form (closed: fixed)"&gt;#2394&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5371 (Smart quotes broken when surrounding links) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Tue, 20 Nov 2007 23:11:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5371#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5371#comment:1/1195600318000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5369 (jQuery should be used to fade alerts) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Tue, 20 Nov 2007 23:10:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5369#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5369#comment:1/1195600243000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>dougal</dc:creator>

      <pubDate>Tue, 20 Nov 2007 22:49:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:10/1195598992000000</guid>
      <description>&lt;p&gt;
On the one hand, this is yet another case of "Let's take some generic, lame, bad security scenario, slap the name 'WordPress' on it (for no apparent reason other than the fact that WP is popular), and release a security announcement!" As has already been noted, if an attacker already has read access to your database, then you've probably lost the battle, regardless of anything else.
&lt;/p&gt;
&lt;p&gt;
On the other hand, we could definitely stand to improve the security of the cookie authentication. Things are the way they are now to make it convenient for the user. But it's really hard to provide convenient persistent authentication in a secure fashion without some external method of security (e.g. SSL). We probably need to provide better support for SSL (when it's available), or lose the persistence in most cases. There might be situations where we can provide persistence more securely, but probably not in all server setups.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5373 (wp_list_pages - set 'hierarchical' to 0 on 'include') updated</title>
      
        <dc:creator>Kafkaesqui</dc:creator>

      <pubDate>Tue, 20 Nov 2007 22:06:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5373#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5373#comment:1/1195596403000000</guid>
      <description>&lt;p&gt;
Real world ref:
&lt;a class="ext-link" href="http://wordpress.org/support/topic/144403#post-651718"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/144403#post-651718&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5373 (wp_list_pages - set 'hierarchical' to 0 on 'include') created</title>
      
        <dc:creator>Kafkaesqui</dc:creator>

      <pubDate>Tue, 20 Nov 2007 22:00:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5373</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5373/1195596053000000</guid>
      <description>&lt;p&gt;
Using wp_list_pages() with the 'include' argument, the included Page(s) list will not appear if they have been assigned a parent.
&lt;/p&gt;
&lt;p&gt;
I traced this down to the 'hierarchical'
parameter, which is set to 1 by default. It should added to the "ignore" list of variables in the &lt;code&gt;if ( !empty($include) )&lt;/code&gt;  statement under the get_pages() function (wp-includes/post.php).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5372 (Wrong category on post insertion) created</title>
      
        <dc:creator>malaiac</dc:creator>

      <pubDate>Tue, 20 Nov 2007 21:41:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5372</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5372/1195594896000000</guid>
      <description>&lt;p&gt;
in wp-includes/taxonomy.php
&lt;/p&gt;
&lt;p&gt;
function = wp_set_object_terms
&lt;/p&gt;
&lt;p&gt;
around lines 1013,1014
&lt;/p&gt;
&lt;p&gt;
&amp;lt;?php
&lt;/p&gt;
&lt;p&gt;
$term_ids[] = $id&lt;a class="missing wiki"&gt;term_id?&lt;/a&gt;;
&lt;/p&gt;
&lt;p&gt;
$id = $id&lt;a class="missing wiki"&gt;term_taxonomy_id?&lt;/a&gt;;
&lt;/p&gt;
&lt;p&gt;
?&amp;gt;
&lt;/p&gt;
&lt;p&gt;
bug : when $id is not an array, it resets $id to 1 (i can't figure why)... and the post is assigned to the wrong (1) category, instead of the legit category.
&lt;/p&gt;
&lt;p&gt;
Happens when the post category is new (has just been created)
&lt;/p&gt;
&lt;p&gt;
Found when doing a custom import
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5365 (Still getting cookie error messages) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Tue, 20 Nov 2007 18:49:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5365#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5365#comment:2/1195584586000000</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I guess this issue is caused by a plugin but we still need to fix it in the core (2.4 first and then backport to branches/2.3).
&lt;/p&gt;
&lt;p&gt;
I have seen this with Ryan Duff's contact form plugin which sets up stuff in $_POST without checking for a POST request.
&lt;/p&gt;
&lt;p&gt;
Other plugins may do the same.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5371 (Smart quotes broken when surrounding links) created</title>
      
        <dc:creator>glesik</dc:creator>

      <pubDate>Tue, 20 Nov 2007 17:06:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5371</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5371/1195578414000000</guid>
      <description>&lt;p&gt;
if I put a link in quotes, e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;"&amp;lt;a href="http://mysite.com"&amp;gt;mysite&amp;lt;/a&amp;gt;"
&lt;/pre&gt;&lt;p&gt;
WordPress doesn't put the proper 'curly' quote after the link text. So the result looks like “mysite“ instead of “mysite”.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5308 (continued cookie error after upgrade to 2.3.1) closed</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Tue, 20 Nov 2007 17:04:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5308#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5308#comment:7/1195578265000000</guid>
      <description>duplicate: &lt;p&gt;
Assuming this relates either to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5076" title="#5076: defect (bug): Cookie testing prevents login (closed: fixed)"&gt;#5076&lt;/a&gt; mentioned by pishmishy or &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5365" title="#5365: defect (bug): Still getting cookie error messages (closed: fixed)"&gt;#5365&lt;/a&gt;. Closing as duplicate.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Tue, 20 Nov 2007 16:37:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:9/1195576632000000</guid>
      <description>&lt;p&gt;
Question: Would not having the username and password in the cookie fix this and not break anything else?
&lt;/p&gt;
&lt;p&gt;
I'm not sure why sessions aren't used instead to store this information (always confused about this). Which you'll have another problem with session hijacking, but there are measures that can easily be used to correct that problem.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Tue, 20 Nov 2007 16:32:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:8/1195576340000000</guid>
      <description>&lt;p&gt;
In case I wasn't clear, I should point out that MD5 is &lt;strong&gt;not&lt;/strong&gt; the problem here. Switching to SHA-1 will leave Wordpress vulnerable to precisely the same issues. Although MD5 is vulnerable to collisions from carefully crafted input, this is not an issue for Wordpress's use.
&lt;/p&gt;
&lt;p&gt;
I think the optimum solution would be to use an existing scheme, and preferably a well-audited library for handling authentication and cookie management. Is there really nothing out these which does the job. I'm not a PHP programmer, but it seems that what Wordpress needs is a very common requirement.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>jhodgdon</dc:creator>

      <pubDate>Tue, 20 Nov 2007 16:26:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:7/1195575991000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
There are some interesting comments on secure hashing on this page: &lt;a class="ext-link" href="http://us.php.net/sha1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://us.php.net/sha1&lt;/a&gt; ; lots of links to alternatives for old versions of PHP, though none of them looks all that great.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5370 (No confirmation on deleting posts in Manage, Posts) updated</title>
      
        <dc:creator>demetris</dc:creator>

      <pubDate>Tue, 20 Nov 2007 16:00:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5370#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5370#comment:2/1195574434000000</guid>
      <description>&lt;p&gt;
Thank you!
&lt;/p&gt;
&lt;p&gt;
I thought of the plugins just after submitting the "bug". :-)
&lt;/p&gt;
&lt;p&gt;
I just disabled all of them, I reverted to the default theme, and also re-enabled the visual editor, but I'm not seeing any difference. The problem persists.
&lt;/p&gt;
&lt;p&gt;
The blog is this: &lt;a class="ext-link" href="http://op111.net/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://op111.net/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It is a test site, mostly vanilla, and the only changes I can remember making are in index.php:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;?php
/* Short and sweet */
define('WP_USE_THEMES', true);
require('./wp/wp-blog-header.php');
?&amp;gt;
&lt;/pre&gt;&lt;p&gt;
and also chaning the name of Blogroll in the database, from Blogroll to Links.
&lt;/p&gt;
&lt;p&gt;
I'll look into it again later.
&lt;/p&gt;
&lt;p&gt;
Greetings,
Demetris
&lt;/p&gt;
&lt;p&gt;
NOTE. The problem only appears when I click Delete in Manage, Posts, i.e. in: wp-admin/edit.php
&lt;/p&gt;
&lt;p&gt;
If I first click Edit (in Manage, Posts or in the post page) and then Delete, I DO get the confirmation dialog.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Tue, 20 Nov 2007 14:53:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:6/1195570403000000</guid>
      <description>&lt;p&gt;
Also, the fact that 4.3 totally eclipsed 4.2 &lt;a class="ext-link" href="http://www.nexen.net/chiffres_cles/phpversion/17756-php_stats_evolution_for_october_2007.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;since 2005&lt;/a&gt;, and 4.2 stands at less than 5%.
&lt;/p&gt;
&lt;p&gt;
I'm just throwing this out there, but is it still worth it?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Tue, 20 Nov 2007 14:47:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:5/1195570022000000</guid>
      <description>&lt;p&gt;
If someone is still running PHP 4.2, they have even more security issues to worry about than this one. I would suggest not caring for them based on that fact, but since I'm not a security expert, I'll leave it at that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5370 (No confirmation on deleting posts in Manage, Posts) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Tue, 20 Nov 2007 13:50:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5370#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5370#comment:1/1195566650000000</guid>
      <description>&lt;p&gt;
Demetris, thanks for the bug report, but I'm unable to reproduce this. I get a nice little confirmation dialog. Have you tried disabling all your plugins and trying again? A plugin may be interfering.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5087 (WYSIWYG Insert/Edit Image button issues) updated</title>
      
        <dc:creator>mzeecedric</dc:creator>

      <pubDate>Tue, 20 Nov 2007 10:59:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5087#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5087#comment:22/1195556379000000</guid>
      <description>&lt;p&gt;
Is there any patch or hack to this yet?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5370 (No confirmation on deleting posts in Manage, Posts) created</title>
      
        <dc:creator>demetris</dc:creator>

      <pubDate>Tue, 20 Nov 2007 10:41:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5370</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5370/1195555287000000</guid>
      <description>&lt;p&gt;
Posts are deleted immediately in Manage, Posts, without any confirmation dialog.
&lt;/p&gt;
&lt;p&gt;
Tried with two different accounts, admin and editor.
&lt;/p&gt;
&lt;p&gt;
Tested on Windows XP SP2 with Firefox 3, Opera 9.5 and Internet Explorer 6.
&lt;/p&gt;
&lt;p&gt;
I don't know what the previous behaviour was, before 2.3.1.
&lt;/p&gt;
&lt;p&gt;
Greetings,
Demetris
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5369 (jQuery should be used to fade alerts) created</title>
      
        <dc:creator>JeremyVisser</dc:creator>

      <pubDate>Tue, 20 Nov 2007 01:50:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5369</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5369/1195523419000000</guid>
      <description>&lt;p&gt;
jQuery has the ability to perform fades now, I believe. Doing fades with jQuery should simplify code, and would also give us the ability to drop &lt;code&gt;fat.js&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Additionally, FAT will only fade an alert if it contains an &lt;code&gt;id="something"&lt;/code&gt;, not just &lt;code&gt;class="fade alert"&lt;/code&gt;, which is a pain in the butt for debugging, IMO. jQuery doesn't suffer from that limitation.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Tue, 20 Nov 2007 01:07:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:4/1195520858000000</guid>
      <description>&lt;p&gt;
That scheme sounds good to me, but since we currently support PHP back to 4.2 we have to be aware of portability problems.  I don't think we can count on sha1() or the hash module, for example.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5368 (It's not possible to replace the RSS parser (MagpieRSS) via a plugin) closed</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Tue, 20 Nov 2007 01:04:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5368#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5368#comment:3/1195520683000000</guid>
      <description>invalid: &lt;p&gt;
Closing as invalid because you can in fact declare the functions in &lt;code&gt;wp-includes/rss.php&lt;/code&gt; with a plugin by using the &lt;code&gt;load_feed_engine&lt;/code&gt; hook. I was staring right at it but wasn't using it.
&lt;/p&gt;
&lt;p&gt;
Thanks technosailor!
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #5368 (It's not possible to replace the RSS parser (MagpieRSS) via a plugin) updated</title>
      
        <dc:creator>technosailor</dc:creator>

      <pubDate>Tue, 20 Nov 2007 00:18:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5368#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5368#comment:2/1195517907000000</guid>
      <description>&lt;p&gt;
On the flip side, I'm using a homemade plugin to replace magpie using the load_feed_engine hook perfectly fine...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5368 (It's not possible to replace the RSS parser (MagpieRSS) via a plugin) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Tue, 20 Nov 2007 00:10:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5368#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5368#comment:1/1195517457000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 22:27:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:3/1195511273000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The phpass library looks like a reasonable basis for password hashing.
&lt;/p&gt;
&lt;p&gt;
That PHP encryption algorithm looks like something from the 19th century, and is almost certainly broken. Ignore it.
&lt;/p&gt;
&lt;p&gt;
Is there really nothing better than MD5 to use? For hashing SHA-1 is better and some proper symmetric block ciphers would also be useful.
&lt;/p&gt;
&lt;p&gt;
The scheme I was thinking of is something along the lines of storing salt,H(crypted salted password) in the database and in the cookie storing E(user id,crypted salted password,start time) and its HMAC; where H is the hash and E, HMAC are encryption and authentication under site-specific keys.
&lt;/p&gt;
&lt;p&gt;
This means that given the contents of the database, the attacker cannot create a valid cookie as you can't go from H(crypted salted password) to crypted salted password. Also, since the crypted salted password is encrypted it is infeasible to brute force the password given only a cookie. Setting a start time means that cookies can be expired and this timestamp can't be modified due to the HMAC.
&lt;/p&gt;
&lt;p&gt;
This is just an initial idea and more refinement and analysis are needed, but that's a rough outline.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5368 (It's not possible to replace the RSS parser (MagpieRSS) via a plugin) created</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:54:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5368</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5368/1195509257000000</guid>
      <description>&lt;p&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/5845" title="function_exists() wrapper around fetch_rss() to allow for plugin ..."&gt;r5845&lt;/a&gt; doesn't do as intended.
&lt;/p&gt;
&lt;p&gt;
The file &lt;code&gt;wp-includes/rss.php&lt;/code&gt; is loaded before plugins are loaded, therefore a plugin isn't able to replace the &lt;code&gt;fetch_rss()&lt;/code&gt; function (which was the intention of &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/5845" title="function_exists() wrapper around fetch_rss() to allow for plugin ..."&gt;r5845&lt;/a&gt;) as it's already been declared in &lt;code&gt;wp-includes/rss.php&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Not sure what to do about this one aside from moving &lt;code&gt;fetch_rss()&lt;/code&gt; into &lt;code&gt;wp-includes/pluggable.php&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>5365.2.diff attached to Ticket #5365</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:42:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5365/5365.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5365/5365.2.diff/1195508551000000</guid>
      <description>&lt;p&gt;
Complete patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>5365.diff attached to Ticket #5365</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:30:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5365/5365.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5365/5365.diff/1195507823000000</guid>
      <description>&lt;p&gt;
Check if REQUEST_METHOD is POST
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:28:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:2/1195507690000000</guid>
      <description>&lt;p&gt;
This vulnerability been assigned the CVE candidate ID &lt;a class="ext-link" href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6013"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;CVE-2007-6013&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5365 (Still getting cookie error messages) updated</title>
      
        <dc:creator>WCityMike</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:18:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5365#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5365#comment:1/1195507094000000</guid>
      <description>&lt;p&gt;
Please note that in thread marked &lt;a class="ext-link" href="http://wordpress.org/support/topic/144079"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/144079&lt;/a&gt;, reporting user has WordPress install in main folder; WordPress address (URL) is same as Blog address (URL).
&lt;/p&gt;
&lt;p&gt;
Also user xknown seems to have offered a patch that successfully stops the error ...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Mon, 19 Nov 2007 21:13:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:1/1195506787000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Would phpass &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/1" title="New repository initialized by cvs2svn."&gt;[1]&lt;/a&gt; for salting and hashing passwords plus a two-way salted encryption (such as &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/2" title="*** empty log message ***
"&gt;[2]&lt;/a&gt;) on cookies be good enough?  Are there more contemporary libraries to consider that are portable enough for WP's needs?
&lt;/p&gt;
&lt;p&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/1" title="New repository initialized by cvs2svn."&gt;[1]&lt;/a&gt; &lt;a class="ext-link" href="http://www.openwall.com/phpass/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.openwall.com/phpass/&lt;/a&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/2" title="*** empty log message ***
"&gt;[2]&lt;/a&gt; &lt;a class="ext-link" href="http://www.tonymarston.net/php-mysql/encryption.html#2004-08-27"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.tonymarston.net/php-mysql/encryption.html#2004-08-27&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5364 (Cron not updated correctly when deleting a future post) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Mon, 19 Nov 2007 20:29:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5364#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5364#comment:2/1195504176000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4627 (Link manager exploit?) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 19:23:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4627#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4627#comment:23/1195500228000000</guid>
      <description>&lt;p&gt;
An attacker used the vulnerability described in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5367" title="#5367: defect (bug): Wordpress cookie authentication vulnerability (closed: fixed)"&gt;#5367&lt;/a&gt; to post spam links on my blog. Could that be it?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) created</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Mon, 19 Nov 2007 19:06:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367/1195499210000000</guid>
      <description>&lt;h1 id="WordpressCookieAuthenticationVulnerability"&gt;Wordpress Cookie Authentication Vulnerability&lt;/h1&gt;
&lt;p&gt;
Original release date: 2007-11-19&lt;br /&gt;
Last revised: 2007-11-19&lt;br /&gt;
Latest version: &lt;a class="ext-link" href="http://www.cl.cam.ac.uk/users/sjm217/advisories/wordpress-cookie-auth.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.cl.cam.ac.uk/users/sjm217/advisories/wordpress-cookie-auth.txt&lt;/a&gt; &lt;br /&gt;
CVE ID: &amp;lt;pending&amp;gt;&lt;br /&gt;
Source: Steven J. Murdoch &lt;a class="ext-link" href="http://www.cl.cam.ac.uk/users/sjm217/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.cl.cam.ac.uk/users/sjm217/&lt;/a&gt; &lt;br /&gt;
&lt;/p&gt;
&lt;h2 id="SystemsAffected:"&gt;Systems Affected:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
Wordpress 1.5 -- 2.3.1 (including current version, as of 2007-11-19)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="Overview:"&gt;Overview:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
With read-only access to the Wordpress database, it is possible to
generate a valid login cookie for any account, without resorting to a
brute force attack. This allows a limited SQL injection vulnerability
to be escalated into administrator access.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
This vulnerability is known to be actively exploited, hence the
expedited public release.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="I.Description"&gt;I. Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
For authentication, the Wordpress user database stores the MD5 hash
of login passwords. A client is permitted access if they can present a
password whose hash matches the stored one.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="wiki"&gt; $ mysql -u wordpress -p wordpress
   Enter password: ********
   mysql&amp;gt; SELECT ID, user_login, user_pass FROM wp_users;
   +----+-------------+----------------------------------+
   | ID | user_login  | user_pass                        |
   +----+-------------+----------------------------------+
   |  1 | admin       | 4cee2c84f6de6d89a4db4f2894d14e38 |
   ...
&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;
Of course, entering your password after each action that requires
authorization would be exceptionally tedious. So, after logging in,
Wordpress presents the client with two cookies:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
wordpressuser_6092254072ca971c70b3ff302411aa5f=admin
wordpresspass_6092254072ca971c70b3ff302411aa5f=813cadd8658c4776afbe5de8f304a684
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
The cookie names contains the MD5 hash (6092...1a5f) of the blog URL.
The value of wordpressuser_... is the login name, and the value of
wordpresspass is the double-MD5 hash of the user password.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
Wordpress will permit access to a given user account if the
wordpressuserpass_... cookie matches the hash of the specified user's
wp_users.user_pass database entry.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
In other words, the database contains MD5(password) and the cookie
contains MD5(MD5(password)). It is thus trivial to convert a database
entry into an authentication cookie.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
At this point the vulnerability should be clear. If an attacker can
gain read access to the wp_user table, for example due to a publicly
visible backup or SQL injection vulnerability, a valid cookie can be
generated for any account.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
This applies even if the user's password is sufficiently complex to
resist brute force and rainbow table attacks. While it should be
computationally infeasible to go backwards from MD5(password) to
password, the attacker needs only to go forwards.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
The exploitation steps are therefore:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
1) Find the hash of the blog URL: Either just look at the URL, or
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
create an account to get a user cookie
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
2) Read the user_pass entry from wp_users table: Look for
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
backups, perform SQL injection, etc...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
3) Set the following cookies:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
wordpressuser_&amp;lt;MD5(url)&amp;gt;=admin
wordpresspass_&amp;lt;MD5(url)&amp;gt;=MD5(user_pass)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
4) You have admin access to the blog
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id="II.Impact"&gt;II. Impact&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
A remote attacker, with read access to the password database can gain
administrator rights. This may be used in conjunction with an SQL
injection attack, or after locating a database backup.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
An attacker who has alternatively compromised the database of one
Wordpress blog can also gain access to any other whose users have the
same password on both.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="III.Solution"&gt;III. Solution&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
No vendor patch is available.
No timeline for a vendor patch has been announced.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="Workarounds:"&gt;Workarounds:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Protect the Wordpress database, and do not allow backups to be
released.
&lt;/li&gt;&lt;li&gt;Keep your Wordpress installation up to date. This should reduce the
risk that your database will be compromised.
&lt;/li&gt;&lt;li&gt;Do not share passwords across different sites.
&lt;/li&gt;&lt;li&gt;If you suspect a database to be compromised, change all passwords
to different ones. It is not adequate to change the passwords to
the same ones, since Wordpress does not "salt" [1] the password
database.
&lt;/li&gt;&lt;li&gt;Remove write permissions on the Wordpress files for the system
account that the webserver runs as. This will disable the theme
editor, but make it more difficult to escalate Wordpress
administrator access into the capability to execute arbitrary code
&lt;/li&gt;&lt;li&gt;Configure the webserver to not execute files in any directory
writable by the webserver system account (e.g. the upload
directory).
&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Potentialfixes:"&gt;Potential fixes:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;
The problem occurs because it is easy to go from the password hash
in the database to a cookie (i.e the application of MD5 is the wrong
way around). The simplest fix is to store MD5(MD5(password)) in the
database, and make the cookie MD5(password). This still makes it
infeasible to retrieve the password from a cookie, but means that it
is also infeasible to generate a valid cookie from the database
entry.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
However, there are other vulnerabilities in the Wordpress cookie and
password handling, which should be resolved too:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;Passwords are unsalted [2], leaving them open to brute force, rainbow
table and other attacks [3].
&lt;/li&gt;&lt;li&gt;It is impossible to revoke a cookie without changing the user's
password.
&lt;/li&gt;&lt;li&gt;Cookies do not contain an expiry time, so are always valid (until
the user's password changes)
&lt;/li&gt;&lt;li&gt;There ought to be an option to limit cookies to a particular
IP address or range.
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="References:"&gt;References:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
[1] &lt;a class="ext-link" href="http://en.wikipedia.org/wiki/Salt_(cryptography"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://en.wikipedia.org/wiki/Salt_(cryptography&lt;/a&gt;) &lt;br /&gt;
[2] &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/2394"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/2394&lt;/a&gt; &lt;br /&gt;
[3] &lt;a class="ext-link" href="http://www.lightbluetouchpaper.org/2007/11/16/google-as-a-password-cracker/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.lightbluetouchpaper.org/2007/11/16/google-as-a-password-cracker/&lt;/a&gt; &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="Timeline:"&gt;Timeline:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
2007-10-29: security@… notified; no response &lt;br /&gt;
2007-11-02: security@… notified; Confirmation of active exploitation requested by Wordpress &lt;br /&gt;
2007-11-02: Confirmation sent; no response &lt;br /&gt;
2007-11-19: Advisory released to full-disclosure and BugTraq &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5366 (XMLRPC interface misinterprets mt_allow_comments value) created</title>
      
        <dc:creator>redsweater</dc:creator>

      <pubDate>Mon, 19 Nov 2007 18:17:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5366</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5366/1195496232000000</guid>
      <description>&lt;p&gt;
WordPress's XMLRPC interface makes an understandable mistake when interpreting the mt_allow_comments field.
&lt;/p&gt;
&lt;p&gt;
The field as described and used by MovableType and others is actually a ternary value with integer values meaning:
&lt;/p&gt;
&lt;p&gt;
0 - None - No comments allowed
1 - Open - Comments can be read and write
2 - Closed - Comments can be read but not written
&lt;/p&gt;
&lt;p&gt;
WordPress doesn't have a notion of "read-only comments" but it needs to do something accurate when the "2" (closed) value is passed to the XMLRPC interface.
&lt;/p&gt;
&lt;p&gt;
Right now what it does is fail to recognize 2 as a valid input, and defaults to the system default comment status.
&lt;/p&gt;
&lt;p&gt;
I believe it should map "2" -&amp;gt; "closed" so that the expected behavior of halting further comments is obtained by the user. The typical scenario now is that the blog defaults to "open" comments, so when a user of a client application specifies "closed" for the comment status, the server defaults it back to "open" ... exactly the opposite of the user's desire.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5365 (Still getting cookie error messages) created</title>
      
        <dc:creator>MichaelH</dc:creator>

      <pubDate>Mon, 19 Nov 2007 16:20:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5365</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5365/1195489239000000</guid>
      <description>&lt;p&gt;
Still getting cookie error messages, even after upgrade to 2.3.1.  WordPress is in sub-folder so the WordPress address (URL) is different than Blog address (URL).
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
ERROR: WordPress requires Cookies but your browser does not support them or they are blocked.
&lt;/p&gt;
&lt;p&gt;
ERROR: The username field is empty.
&lt;/p&gt;
&lt;p&gt;
ERROR: The password field is empty.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Also get this after logging out:
&lt;/p&gt;
&lt;p&gt;
ERROR: The username field is empty.
&lt;/p&gt;
&lt;p&gt;
ERROR: The password field is empty.
&lt;/p&gt;
&lt;p&gt;
Successfully logged you out.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Apache version        1.3.37 (Unix)
PHP version        4.4.7
MySQL version        4.1.22-standard
&lt;/p&gt;
&lt;p&gt;
Also see &lt;a class="ext-link" href="http://wordpress.org/support/topic/144079"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/144079&lt;/a&gt; for a related report.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3820 (Squid in accelerator mode; Permalink "mod_rewrite" problem.) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Mon, 19 Nov 2007 15:54:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3820#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3820#comment:11/1195487648000000</guid>
      <description>&lt;p&gt;
See also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/3686" title="#3686: defect (bug): index page gives 404 when using non-default permalinks (closed: duplicate)"&gt;#3686&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3686 (index page gives 404 when using non-default permalinks) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Mon, 19 Nov 2007 15:53:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3686#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3686#comment:16/1195487588000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3686 (index page gives 404 when using non-default permalinks) closed</title>
      
        <dc:creator>jamesw</dc:creator>

      <pubDate>Mon, 19 Nov 2007 15:44:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3686#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3686#comment:15/1195487062000000</guid>
      <description>duplicate: &lt;p&gt;
Looking into this, it appears this problem is due to Squid, much like &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/3820"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/3820&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Perhaps someone of suita ble authority could merge the tickets?
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item>
   </channel>
</rss>