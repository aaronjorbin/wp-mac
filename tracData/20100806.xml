<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #11003 (wp_get_object_terms Returns Duplicate Terms) updated</title>
      
        <dc:creator>filosofo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 23:52:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11003#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11003#comment:11/1281138767000000</guid>
      <description>&lt;p&gt;
It's better than nothing, but not a true solution.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>11003.notice.patch attached to Ticket #11003</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:50:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/11003/11003.notice.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/11003/11003.notice.patch/1281135056000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #11003 (wp_get_object_terms Returns Duplicate Terms) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:47:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11003#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11003#comment:10/1281134845000000</guid>
      <description>&lt;p&gt;
It's pretty easy to make the terms unique afterwards, once you know there might be duplicates.
&lt;/p&gt;
&lt;p&gt;
Maybe we should just add a notice in the documentation?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11003 (wp_get_object_terms Returns Duplicate Terms) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:45:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11003#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11003#comment:9/1281134734000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt;, &lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #9698 (WordPress back end is not accessible) updated</title>
      
        <dc:creator>gormer</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:35:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/9698#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/9698#comment:15/1281134141000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
What about Authoring Tool Accessibility Guidelines 1.0 (ATAG)?
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://www.w3.org/TR/WAI-AUTOOLS/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://www.w3.org/TR/WAI-AUTOOLS/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14550 (No action when comments are closed by WP after close_comments_days_old) updated</title>
      
        <dc:creator>gormer</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:30:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14550#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14550#comment:2/1281133825000000</guid>
      <description>&lt;p&gt;
Not really relevant as _close_comments_for_old_posts doesn't modify db state, but only memory post state. W
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14550 (No action when comments are closed by WP after close_comments_days_old) closed</title>
      
        <dc:creator>gormer</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:29:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14550#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14550#comment:1/1281133769000000</guid>
      <description>invalid</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #14556 (get_pagenum_link() needs esc_url()) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:14:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14556#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14556#comment:4/1281132858000000</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/13051" title="#13051: defect (bug): admin_url() and site_url() shouldn't need esc_url() (closed: wontfix)"&gt;#13051&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13051 (admin_url() and site_url() shouldn't need esc_url()) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:14:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13051#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13051#comment:25/1281132840000000</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14556" title="#14556: enhancement: get_pagenum_link() needs esc_url() (closed: fixed)"&gt;#14556&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14556 (get_pagenum_link() needs esc_url()) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:09:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14556#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14556#comment:3/1281132590000000</guid>
      <description>&lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
You need to use esc_url() before outputing what get_pagenum_link() returns.
&lt;/p&gt;
&lt;p&gt;
Decreasing severity because it's used properly everywhere in core.
&lt;/p&gt;
&lt;p&gt;
Should probably add a warning somewhere in the function's doc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14557 (Side by side shortcodes leave one as text) updated</title>
      
        <dc:creator>adiant</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:03:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14557#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14557#comment:1/1281132207000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14557 (Side by side shortcodes leave one as text) created</title>
      
        <dc:creator>adiant</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:03:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14557</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14557/1281132191000000</guid>
      <description>&lt;p&gt;
Coding
&lt;/p&gt;
&lt;pre class="wiki"&gt;[gallery][gallery]text
&lt;/pre&gt;&lt;p&gt;
displays the current page's gallery then "[gallery]text".  The problem reproduces consistently when coded using the HTML tab of TinyMCE in Edit Page, immediately hitting Update, and viewing the actual page.
&lt;/p&gt;
&lt;p&gt;
This was first observed when using the Shortcode Exec PHP plug-in, so I installed a fresh version of WordPress and tested with the gallery shortcode to remove the possibility of this being a problem with the plug-in.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14556 (get_pagenum_link() needs esc_url()) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:02:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14556#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14556#comment:2/1281132171000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I'm not able to reproduce. Please paste the code you're using to generate the page links.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14556 (get_pagenum_link() needs esc_url()) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 22:00:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14556#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14556#comment:1/1281132029000000</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14556 (get_pagenum_link() needs esc_url()) created</title>
      
        <dc:creator>guigouz</dc:creator>

      <pubDate>Fri, 06 Aug 2010 21:49:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14556</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14556/1281131372000000</guid>
      <description>&lt;p&gt;
We're using get_pagenum_link() to build a page navigation instead of older/newer posts only. We've found this vulnerability on multiple sites, here's an example
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://robertbasic.com/blog/?%3E%22'%3E%3CScRiPt%3Ealert(428017202033)%3C/ScRiPt%3E"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://robertbasic.com/blog/?%3E%22'%3E%3CScRiPt%3Ealert(428017202033)%3C/ScRiPt%3E&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #10332 (Backdated pre-1st January 1970 post displayed as published on the ...) updated</title>
      
        <dc:creator>rhoare</dc:creator>

      <pubDate>Fri, 06 Aug 2010 19:23:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10332#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10332#comment:23/1281122583000000</guid>
      <description>&lt;p&gt;
After testing, I can still confirm that dates before 1970, back to 1901, work when the bug introduced in 2.8 is commented out.
&lt;/p&gt;
&lt;p&gt;
In addition, to get dates before 1901 you need to use a 64 bit operating system, which has a 64 version of PHP.  In my case, it works with 64 bit Ubuntu 9.10 and PHP 5.2.10-2ubuntu6.4.  I can modify a post to historical dates (such as 1485), and the date seems to be displayed correctly everywhere so far (including archives) (ignoring Gregorian/Julian calendar changes or old style/new style years, which would really be the job of an extension as it's specialist).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14443 (Stop notifying spammers about newly installed blogs) updated</title>
      
        <dc:creator>KKWangen</dc:creator>

      <pubDate>Fri, 06 Aug 2010 19:11:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14443#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14443#comment:8/1281121862000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14443#comment:3" title="Comment 3"&gt;filosofo&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think we should keep it but add to Settings &amp;gt; Discussion:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A radio selection: &lt;code&gt;"Be spammed [X] now or [] later?"&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;An input field, so users have the freedom to choose: &lt;code&gt;"Enter the evil spammer to notify (required): [spammers@stupidjerks.com]"&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Two new action hooks for plugin developers: &lt;code&gt;pre_spammer_notification&lt;/code&gt; and &lt;code&gt;prior_to_pre_spammer_notification&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Wouldn't it be better to add these options to the install-prosess as well. - You know, it's already hooked for public, so adding a "be spamed now" option should not be that much efort to add..
&lt;/p&gt;
&lt;p&gt;
Anyway, there should be a prefered_spammer_network() hook somewhere..
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14545 (move wp-settings from wp-config to wp-load) updated</title>
      
        <dc:creator>wpmuguru</dc:creator>

      <pubDate>Fri, 06 Aug 2010 17:25:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14545#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14545#comment:3/1281115555000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14545#comment:1" title="Comment 1"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This isn't backwards compatible...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It would work with any existing installs which load wp-settings in wp-config.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14545#comment:1" title="Comment 1"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
More than a few plugins call wp-config.php directly, hence the additional conditional ABSPATH define.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Good point. It would break those plugins in new installs.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14545#comment:1" title="Comment 1"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What else can we do?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, I know. A bit of a rock and hard place. What about adding a last comment line instructing adding above the stop editing line?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14243 (Content of css interfering with functions) updated</title>
      
        <dc:creator>matveb</dc:creator>

      <pubDate>Fri, 06 Aug 2010 17:15:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14243#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14243#comment:9/1281114920000000</guid>
      <description>&lt;p&gt;
Some new findings:
&lt;/p&gt;
&lt;p&gt;
It seems that all default header tags can be populated through CSS selectors, given that they were not defined earlier on the theme header.
&lt;/p&gt;
&lt;pre class="wiki"&gt;/*
Theme Name: Test
Template: twentyten
*/
#status:hover p {
  color: #666; }
#author:hover p {
  color: #666; }
#themeuri:hover p {
  color: #666; }
#description:hover p {
  color: #666; }
#authoruri:hover p {
  color: #666; }
#version:hover p {
  color: #666; }
#tags:hover p {
  color: #666; }
&lt;/pre&gt;&lt;p&gt;
On the WordPress admin theme tab you should see some "hover p {" around.
&lt;/p&gt;
&lt;p&gt;
This does not seem to be too much of a concern when tags are already defined; but eventually you could set a template for themes which don't have one, effectively displaying a &lt;em&gt;The parent theme is missing. Please install the "hover p {" parent theme.)&lt;/em&gt; on the admin.
&lt;/p&gt;
&lt;p&gt;
Just add &lt;strong&gt;#template:hover p { color: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/666" title="#666: defect (bug): correct author uri in google-hilite.php (closed: fixed)"&gt;#666&lt;/a&gt;; }&lt;/strong&gt; to Twenty Ten's style.css not too far from the top and you have a broken Twenty Ten.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11624 (Stop using $id global) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 16:44:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11624#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11624#comment:14/1281113073000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Updated patch removes all instances of $id that I could find.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>11624.2.diff attached to Ticket #11624</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 16:44:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/11624/11624.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/11624/11624.2.diff/1281113041000000</guid>
      <description>&lt;p&gt;
Replace all instances
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14554 (Only run update checks from the main site) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 06 Aug 2010 16:37:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14554#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14554#comment:2/1281112636000000</guid>
      <description>&lt;p&gt;
Looks good.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13450 (Filter Comments Link) updated</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 15:55:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13450#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13450#comment:3/1281110101000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13449 (Filter Cron URL) updated</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 15:52:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13449#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13449#comment:4/1281109957000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13450 (Filter Comments Link) updated</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 15:51:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13450#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13450#comment:2/1281109915000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14555 (broken sprintf calls at multi site localization) created</title>
      
        <dc:creator>codestyling</dc:creator>

      <pubDate>Fri, 06 Aug 2010 15:43:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14555</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14555/1281109411000000</guid>
      <description>&lt;p&gt;
The current version 3.0.1 contains this 2 places, where the brackets are not closed after the gettext phrase part and the surounded sprintf fails without having an argument that's why! Not sure, if this could be used to format anything from internal php stack stack into output!
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;file: wp-admin/ms-edit.php:211&lt;/strong&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_die( sprintf( __( 'You probably need to go back to the &amp;lt;a href="%s"&amp;gt;sites page&amp;lt;/a&amp;gt;', esc_url( admin_url( 'ms-sites.php' ) ) ) ) );
&lt;/pre&gt;&lt;p&gt;
&lt;strong&gt;file: wp-admin/ms-edit.php:32&lt;/strong&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_die( sprintf( __( 'You probably need to go back to the &amp;lt;a href="%s"&amp;gt;options page&amp;lt;/a&amp;gt;.', esc_url( admin_url( 'ms-options.php' ) ) ) ) );
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14553 (Prevent localized MS sites from stomping core update checks) updated</title>
      
        <dc:creator>nkuttler</dc:creator>

      <pubDate>Fri, 06 Aug 2010 15:17:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14553#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14553#comment:2/1281107873000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I tested the patch and it fixes the nag messages for me, for all blogs and after deleting the _site_transient_update_core entry repeatedly.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14553 (Prevent localized MS sites from stomping core update checks) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:59:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14553#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14553#comment:1/1281103192000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14554 (Only run update checks from the main site) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:59:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14554#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14554#comment:1/1281103176000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>14554.diff attached to Ticket #14554</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:59:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14554/14554.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14554/14554.diff/1281103163000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14554 (Only run update checks from the main site) created</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:58:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14554</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14554/1281103096000000</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14435" title="#14435: task (blessed): Network Admin (closed: fixed)"&gt;#14435&lt;/a&gt; (network admin), &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14553" title="#14553: defect (bug): Prevent localized MS sites from stomping core update checks (closed: fixed)"&gt;#14553&lt;/a&gt; (related locale bug).
&lt;/p&gt;
&lt;p&gt;
Simple patch attached. Doesn't affect the functions themselves, only them hooking onto various actions and also being scheduled for the cron.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>14553.diff attached to Ticket #14553</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:51:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14553/14553.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14553/14553.diff/1281102709000000</guid>
      <description>&lt;p&gt;
Adding an arg to get_locale()
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14552 (Eternal upgrade nag message with network and localized blogs) closed</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:48:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14552#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14552#comment:1/1281102523000000</guid>
      <description>duplicate: &lt;p&gt;
You beat me by a few minutes. I'll mark as a duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14553" title="#14553: defect (bug): Prevent localized MS sites from stomping core update checks (closed: fixed)"&gt;#14553&lt;/a&gt; though and I'll be attaching a patch there soon.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #14553 (Prevent localized MS sites from stomping core update checks) created</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:47:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14553</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14553/1281102425000000</guid>
      <description>&lt;p&gt;
For reasons currently passing my understanding, we fire core, plugin, and theme checks on all sites in a network.
&lt;/p&gt;
&lt;p&gt;
One issue is if sites run different locales, then they will stomp on the transient set by the previous check and potentially return bad information.
&lt;/p&gt;
&lt;p&gt;
Example. The network runs 3.0.1. WPLANG is set to &lt;code&gt;''&lt;/code&gt;, which means get_locale() would return &lt;code&gt;en_US&lt;/code&gt;. When site A runs an update check, there's no update. Site B has a blog-level WPLANG option of de_DE. When it runs an update check, the API returns 3.0.1-de_DE, even though the install is defined as 3.0.1-en_US. As this is then stored in a sitemeta transient, each update stomps over the last, and so depending on whether an en_US blog or de_DE blog ran the update check last, you may have a very annoying nag telling you to upgrade to the version you're already at.
&lt;/p&gt;
&lt;p&gt;
Ironically, this is a performance improvement over MU (even if more annoying), since MU stored update check results in a blog transient. Instead of the checks stomping each other, they all ran independently.
&lt;/p&gt;
&lt;p&gt;
I'm not sure of the fix here. I'm not convinced we should put logic in either get_locale() or wp_version_check(). Nor do I think we should attach a MS default filter.
&lt;/p&gt;
&lt;p&gt;
Here's my idea currently -- introduce get_network_locale(), or a &lt;code&gt;$network_wide = false&lt;/code&gt; argument on get_locale(), that would skip checking the blog-level WPLANG option.
&lt;/p&gt;
&lt;p&gt;
Originally reported by nkuttler in IRC yesterday.
&lt;/p&gt;
&lt;p&gt;
I'll be opening a new ticket on 3.1 to restrict core, plugin, and theme update checks to the root site only. Thankfully, our network admin makes that a bit more intuitive.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #13639 (Theme "unit tests" are outdated) closed</title>
      
        <dc:creator>nkuttler</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:43:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13639#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13639#comment:1/1281102236000000</guid>
      <description>fixed: &lt;p&gt;
The unit tests have been updated &lt;a class="ext-link" href="http://codex.wordpress.org/Theme_Unit_Test"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://codex.wordpress.org/Theme_Unit_Test&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #13818 (There should be index pages for custom post types) updated</title>
      
        <dc:creator>jeremyclarke</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:43:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13818#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13818#comment:15/1281102219000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Big +1 on this idea. I agree that it is a no-brainer to have it supported by default.
&lt;/p&gt;
&lt;p&gt;
If someone doesn't want an archive like this then they should use a setting in their post type definition to do so, though it seems like maybe the 'private' flag would work. If its private, no index, otherwise do the routing people expect.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>eternal_nag_fix.diff attached to Ticket #14552</title>
      
        <dc:creator>nkuttler</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:41:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14552/eternal_nag_fix.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14552/eternal_nag_fix.diff/1281102094000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14552 (Eternal upgrade nag message with network and localized blogs) created</title>
      
        <dc:creator>nkuttler</dc:creator>

      <pubDate>Fri, 06 Aug 2010 13:41:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14552</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14552/1281102082000000</guid>
      <description>&lt;p&gt;
I always get the "WordPress 3.0.1 is available! Please update now." nag message, when I dismiss it it comes back after some time.
&lt;/p&gt;
&lt;p&gt;
To quote nacin from IRC:
&lt;/p&gt;
&lt;p&gt;
In wp_version_check() we're asking for the locale via get_locale(), which in turn on some of your blogs is de_DE. So if that blog gets wp_version_check() triggered, then your transient will be showing the de_DE 3.0.1, which you're not running. If is_multisite() we should rely on get_site_option('WP_LANG') and WP_LANG, and we should ignore the individual blog settings. I'm actually not sure the best way to patch it.
&lt;/p&gt;
&lt;p&gt;
I have attached a minimal patch but don't understand in full detail what's going on. The problem might be in the filter or somewhere else. The patch fixes the recurring nag messages.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14551 (menu item : current_page_parent : issue with Front page displays) updated</title>
      
        <author>hughestm@â€¦</author>

      <pubDate>Fri, 06 Aug 2010 13:12:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14551#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14551#comment:2/1281100367000000</guid>
      <description>&lt;p&gt;
Change to the two lines: need to remove (int) from get_option.
&lt;/p&gt;
&lt;p&gt;
$front_page_displays = get_option( 'show_on_front' );
if($front_page_display == 'posts'){$home_page_id=0;}
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14551 (menu item : current_page_parent : issue with Front page displays) updated</title>
      
        <author>hughestm@â€¦</author>

      <pubDate>Fri, 06 Aug 2010 13:04:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14551#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14551#comment:1/1281099883000000</guid>
      <description>&lt;p&gt;
Possible solution:
File: wp-includes/nav-menu-template.php
&lt;/p&gt;
&lt;p&gt;
Add after line 260:
$front_page_displays = (int) get_option( 'show_on_front' );
if($front_page_display == 'posts'){$home_page_id=0;}
&lt;/p&gt;
&lt;p&gt;
This checks to make sure the first toggle is set to have page or posts on the front.  If posts, then reset $home_page_id (page_for_posts) to 0 (value when drop down is set to "select").
&lt;/p&gt;
&lt;p&gt;
I know there are possibly a few other locations you could add similar logic.  I'm not sure what else the $home_page_id (page_for_posts) value would be used for.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) updated</title>
      
        <dc:creator>joehoyle</dc:creator>

      <pubDate>Fri, 06 Aug 2010 12:53:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:7/1281099227000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14540#comment:4" title="Comment 4"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@mark-k: Yes, it can be a PITA, but it the blog owner's choice, not ours. We should not try to make core override the blog owner's choice. It's their site; WP is just the underlying platform.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Surely this is not overriding any functionality - overriding would be actually adding the extra depth. The Reply link becomes just a convenient way to add a reply to the parent comment. The blog owners are probably setting a max depth so they don't get really narrow comments, which doing the stated would not interfere with.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14551 (menu item : current_page_parent : issue with Front page displays) created</title>
      
        <author>hughestm@â€¦</author>

      <pubDate>Fri, 06 Aug 2010 12:46:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14551</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14551/1281098784000000</guid>
      <description>&lt;p&gt;
Settings &amp;gt; Reading &amp;gt; Front page displays: set to your latest posts
Settings &amp;gt; Reading &amp;gt; Posts page: set to anything
&lt;/p&gt;
&lt;p&gt;
When the menus are building, they are only checking that something was set by the dropdown for posts page, even though the parent setting says the posts are to be on the home page.  The pages on the site have the correct logic, however the menu adds "current_page_parent" to the item selected in the "Posts page" menu, even though it's not really the parent.
&lt;/p&gt;
&lt;p&gt;
The work around is to just remember if you switch from having posts on a different page back to having them on the front, you need to set the "Posts page" back to "select" and everything works correctly, but getting users in my multi-site install to do that might be asking a bit much.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 10:34:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:35/1281090858000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Fri, 06 Aug 2010 10:34:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:34/1281090849000000</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
The above code is not so bad if there are &amp;lt;1000 or even &amp;lt;2500 records in wp_terms but if we have 10,000 records (movies) with 10 relationships a piece (actors) this absolutely does not scale.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
How is the number of relationships relevant? They are stored in the wp_term_relationships table.
&lt;/p&gt;
&lt;p&gt;
Please run through the actual queries that happen when using my API before saying "this absolutely does not scale".
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
your code current does not recognize the reciprocal relationship when one is encoded so a user would have to do both tasks: 1.) Add Actors to a Movie and 2.) Add Movies to an Actor which is crazy.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes it does:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;get_connected($id, 'from');&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;get_connected($id, 'to');&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10886 (WordPress should not unnecessarily query posts at page load) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Fri, 06 Aug 2010 07:58:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10886#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10886#comment:18/1281081486000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14550 (No action when comments are closed by WP after close_comments_days_old) created</title>
      
        <dc:creator>gormer</dc:creator>

      <pubDate>Fri, 06 Aug 2010 07:26:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14550</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14550/1281079592000000</guid>
      <description>&lt;p&gt;
There doesn't seem to be any action triggered when comments for a post is closed by WordPress itself.
&lt;/p&gt;
&lt;p&gt;
The function in question is called _close_comments_for_old_posts in wp-includes/comment.php
&lt;/p&gt;
&lt;p&gt;
The use-case I want to support is dispatching a request to external archiving system after WP closes the comments.
&lt;/p&gt;
&lt;p&gt;
Since comments also could be closed from a number of other reasons, I suggest adding just an event for the particular case that a comment gets closed by WP itself. That is, when the option close_comments_for_old_posts is set and close_comments_days_old is &amp;gt; 0.
&lt;/p&gt;
&lt;p&gt;
I can provide a patch for this, but would first check if such an action is considered interesting enough to be added or if there are other ways to achieve the same use-case that I'm not aware of.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #13213 (Add Home option to Nav Menus) updated</title>
      
        <dc:creator>kanuck54</dc:creator>

      <pubDate>Fri, 06 Aug 2010 06:47:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13213#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13213#comment:18/1281077232000000</guid>
      <description>&lt;p&gt;
(I just thought it might be &lt;strong&gt;&lt;em&gt;worth&lt;/em&gt;&lt;/strong&gt; mentioning. Typo!)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13213 (Add Home option to Nav Menus) updated</title>
      
        <dc:creator>kanuck54</dc:creator>

      <pubDate>Fri, 06 Aug 2010 06:45:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13213#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13213#comment:17/1281077140000000</guid>
      <description>&lt;p&gt;
I just thought it might be mentioning that as a long-time WordPress user, new to 3.0, this was not at all discoverable. This is the only place I actually found the information I was looking for! And it just feels very hacked in â€” the way it shows up as "custom," the way it's just my URL in the URL box. I think you can do better, IMO.
&lt;/p&gt;
&lt;p&gt;
Still, this new menus feature in general is wonderful. I can see myself making extensive use of it!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10332 (Backdated pre-1st January 1970 post displayed as published on the ...) updated</title>
      
        <dc:creator>rhoare</dc:creator>

      <pubDate>Fri, 06 Aug 2010 05:08:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10332#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10332#comment:22/1281071322000000</guid>
      <description>&lt;p&gt;
To correct my above note (which I can't see a way to edit).
&lt;/p&gt;
&lt;p&gt;
Commenting out the lines as given in the fix DO work (so why isn't it in the latest version?).
&lt;/p&gt;
&lt;p&gt;
But only back to 1901.  There is a separate bug/feature that makes it impossible to show dates before Dec 14, 1901.  Since that is the start of the Unix epoch it's probably rbecause I use a 32-bit OS, I'll try it on a 64-bit server next to see if that helps.
&lt;/p&gt;
&lt;p&gt;
So, just to clarify, the fix shown does work (back to 1901), and should be applied, allowing for the lines being different on the latest version.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10332 (Backdated pre-1st January 1970 post displayed as published on the ...) updated</title>
      
        <dc:creator>rhoare</dc:creator>

      <pubDate>Fri, 06 Aug 2010 04:38:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10332#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10332#comment:21/1281069525000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Bug still exists in a clean install of 3.0.1.  (Ubuntu Linux 9.10, PHP 5.2.10)
&lt;/p&gt;
&lt;p&gt;
Presumably there are no plans to ever fix it?  Does anybody know of a plugin to work around this long-standing bug?
&lt;/p&gt;
&lt;p&gt;
Commenting out just the lines mentioned in function.php no longer fixes it, something else thinks it knows better and comes along and changes the date when you try to save the modified post.
&lt;/p&gt;
&lt;p&gt;
Maybe programmed by somebody aged under 40, who can't imagine there are any dates before they were born. :-)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>flush_rewrite_rules_on_submit.3.diff attached to Ticket #14547</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 03:31:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14547/flush_rewrite_rules_on_submit.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14547/flush_rewrite_rules_on_submit.3.diff/1281065463000000</guid>
      <description>&lt;p&gt;
Better Code
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) closed</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Fri, 06 Aug 2010 03:28:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:33/1281065283000000</guid>
      <description>wontfix: &lt;p&gt;
Based on Andrew Nacin's comments I'm going to go ahead and close this ticket.  My goal was to get people thinking about the need and applicable use-cases.  I think that was accomplished.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Fri, 06 Aug 2010 03:26:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:32/1281065210000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:31" title="Comment 31"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This ticket is not going to get anywhere if it's just a lot of back and forth, some of it not in the most appropriate tone, complete with questioning the intelligence of a core developer willing to share the current collective opinion of the core team on this. It's only going to cause the folks who you want to pay attention to this ticket to simply mute it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Point taken.
&lt;/p&gt;
&lt;p&gt;
But please reread my comments because I don't want to be misunderstood; I questioned only the level of familiarity related to the use cases. In no way did question intelligence and if that is how it came across I profusely apologize.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
At the moment, this reads more like a wp-hackers discussion, and it belongs there. If any movement is going to happen on this, there needs to be solid consensus on a flexible system that can address clear, popular use cases. I see all sorts of use cases but I'm not convinced they can't be implemented with the existing schema; I've also seen, what, three or four conflicting ideas for how this should be implemented, to the point where the definitions of "this" are different depending on the developer and the use cases they were considering.
&lt;/p&gt;
&lt;p&gt;
We need to see both demand and innovation, and preferably some consensus, before even considering this. Give it a year, I imagine that will evolve, but being ahead of one's time is not always a good thing.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's all fair.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14549 (Allow Control over Hard vs. Soft Rewrite Flush) updated</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 03:11:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14549#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14549#comment:1/1281064295000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14547 (Flush Rewrite Rules on Submit, not on Page Load) updated</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 03:11:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14547#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14547#comment:1/1281064274000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14508 (Always require wp-db.php) updated</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 02:59:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14508#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14508#comment:12/1281063549000000</guid>
      <description>&lt;p&gt;
My plugin (WP Hive) currently uses db.php because it must do some work very early in the WP lifecycle. It's pretty hacky to include this functionality here, but it's the only spot that occurs after $wpdb is instantiated and before $table_prefix is set.
&lt;/p&gt;
&lt;p&gt;
Optimally, it would be nice to be able to hook in separately from db.php, since many users of WP Hive also use caching plugins, and the way it is now causes db.php collisions &amp;amp; overwrites.
&lt;/p&gt;
&lt;p&gt;
While there's still some work to do to resolve these collisions, this patch is a step in the right direction and it's a two-line fix in my plugin to adapt. +1 from me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14549 (Allow Control over Hard vs. Soft Rewrite Flush) created</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 02:20:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14549</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14549/1281061224000000</guid>
      <description>&lt;p&gt;
Many times when the rewrite rules are flushed, it really only requires that the rules be written to the database and not .htaccess. In some cases, re-writing .htaccess can cause detrimental changes to the mod rewrite rules.
&lt;/p&gt;
&lt;p&gt;
This patch allows a plugin author to have control over whether a hard flush is executed when flush_rewrite_rules() is called.
&lt;/p&gt;
&lt;p&gt;
Introduces filter: flush_rewrite_rules_hard
&lt;/p&gt;
&lt;p&gt;
Depends on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14546" title="#14546: enhancement: Refactor direct references for $wp_rewrite class members (closed: fixed)"&gt;#14546&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:58:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:31/1281059902000000</guid>
      <description>&lt;p&gt;
This ticket is not going to get anywhere if it's just a lot of back and forth, some of it not in the most appropriate tone, complete with questioning the intelligence of a core developer willing to share the current collective opinion of the core team on this. It's only going to cause the folks who you want to pay attention to this ticket to simply mute it.
&lt;/p&gt;
&lt;p&gt;
I spent some time yesterday reading through old threads and tickets around the time the taxonomy schema was originally implemented in 2.2. wp-hackers was very effectively used as a discussion of use cases, demand, consensus-building on a schema and API, and the consideration of future situations. Tickets, on the other hand, are for code. In my opinion, a ticket like this -- a major feature request that can only get into core as a blessed task -- should not be created until it has been slated for a milestone at a scope meeting.
&lt;/p&gt;
&lt;p&gt;
At the moment, this reads more like a wp-hackers discussion, and it belongs there. If any movement is going to happen on this, there needs to be solid consensus on a flexible system that can address clear, popular use cases. I see all sorts of use cases but I'm not convinced they can't be implemented with the existing schema; I've also seen, what, three or four conflicting ideas for how this should be implemented, to the point where the definitions of "this" are different depending on the developer and the use cases they were considering.
&lt;/p&gt;
&lt;p&gt;
We need to see both demand and innovation, and preferably some consensus, before even considering this. Give it a year, I imagine that will evolve, but being ahead of one's time is not always a good thing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14548 (registered sidebars with capital letter in the ID don't get loaded) updated</title>
      
        <dc:creator>wjm</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:55:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14548#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14548#comment:1/1281059735000000</guid>
      <description>&lt;p&gt;
this issue was found here,
&lt;a class="ext-link" href="http://www.wpquestions.com/question/show/id/713"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://www.wpquestions.com/question/show/id/713&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>register_sidebar_sanitize_id.patch attached to Ticket #14548</title>
      
        <dc:creator>wjm</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:54:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14548/register_sidebar_sanitize_id.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14548/register_sidebar_sanitize_id.patch/1281059659000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14548 (registered sidebars with capital letter in the ID don't get loaded) created</title>
      
        <dc:creator>wjm</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:53:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14548</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14548/1281059638000000</guid>
      <description>&lt;p&gt;
if you use register_sidebar() and set ID to have a capital letter, it will be displayed in the widgets section but its widgets won't get loaded.
&lt;/p&gt;
&lt;pre class="wiki"&gt;register_sidebar(array(
'name' =&amp;gt; 'RightSideBar',
'id' =&amp;gt; 'Rsidebar',
));
&lt;/pre&gt;&lt;p&gt;
it won't work but
&lt;/p&gt;
&lt;p&gt;
while...
&lt;/p&gt;
&lt;pre class="wiki"&gt;register_sidebar(array(
'name' =&amp;gt; 'RightSideBar',
'id' =&amp;gt; 'rsidebar',
));
&lt;/pre&gt;&lt;p&gt;
... will work.
&lt;/p&gt;
&lt;p&gt;
This has to do with dynamic_sidebar() using sanitize_title() to sanitize the id,
the thing is that sanitize_title() (which calls sanitize_title_with_dashes()) will turn every upper case to a lower case, and later it will look in $wp_registered_sidebars for the key which is non-existant.
&lt;/p&gt;
&lt;p&gt;
This patch sanitizes the sidebar ID at the time of registering it,
so using
'id' =&amp;gt; 'Rsidebar',
or
'id' =&amp;gt; 'rsidebar',
&lt;/p&gt;
&lt;p&gt;
registers the same sidebar.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14481 (Shortcode Enhancements) updated</title>
      
        <dc:creator>deadowl</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:44:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14481#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14481#comment:19/1281059050000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14481#comment:18" title="Comment 18"&gt;aaroncampbell&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm assuming we'd still need to keep a stack of registered shortcodes so we can use those names in the regex? I've not a regular expressions guru by any means (I'm fine at writing them to meet my needs, but it ends there), so how advantageous is it to create the regex using the list of registered shortcode names?  Also, at what point (if any) does it become a problem (what if there are 1,000 shortcodes? 10,000?)? I know that the problems it may create are probably edge cases, but I'm curious.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The regular expression doesn't have to use the registered shortcode names if the interpreter does the checking. The interpreter can use an associative array, so it would generally be faster for the interpreter to check. Using the shortcode in the regex probably takes about the same amount of time as an in_array call as it's interpreted.
&lt;/p&gt;
&lt;p&gt;
Keeping track of valid shortcodes would still be needed in interpretation so something like [not-a-shortcode] would remain content and not be thrown out.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>flush_rewrite_rules_on_submit.2.diff attached to Ticket #14547</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:41:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14547/flush_rewrite_rules_on_submit.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14547/flush_rewrite_rules_on_submit.2.diff/1281058876000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14547 (Flush Rewrite Rules on Submit, not on Page Load) created</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:40:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14547</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14547/1281058805000000</guid>
      <description>&lt;p&gt;
Current: Rewrite rules are flushed when /wp-admin/options-permalink.php is loaded.
&lt;/p&gt;
&lt;p&gt;
Expected: Rewrite rules should be flushed only after the user submits the request.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:28:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:30/1281058091000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:27" title="Comment 27"&gt;scribu&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:26" title="Comment 26"&gt;mikeschinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
you are still ignoring the problem of posts getting renamed by users that have mirrored terms that are shared by other taxonomies.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I thought we covered that. Why do you keep bringing up an argument that has already been addressed?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:28" title="Comment 28"&gt;scribu&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Oh, and yeah, I looked at your code on gist and it's NOT similar to what I'm doing.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The reason I kept bringing it up was that I misunderstood; I thought you were essentially the same as what I was doing. You  are correct, &lt;strong&gt;I apologize&lt;/strong&gt;, is it NOT similar.
&lt;/p&gt;
&lt;p&gt;
However, not only is your solution NOT similar, it is &lt;em&gt;worse&lt;/em&gt;. When you boil away all the other stuff the problem is that you are overloaded a 200 character text field to store a 20 byte key.  It's actually a cool little hack, but it doesn't scale and shouldn't be recommended.
&lt;/p&gt;
&lt;p&gt;
When I run EXPLAIN on this simply query:
&lt;/p&gt;
&lt;pre class="wiki"&gt;mysql&amp;gt; EXPLAIN SELECT term_id,name,slug FROM wp_terms WHERE slug='p24';
&lt;/pre&gt;&lt;p&gt;
This is what we get (I don't know why MySQL makes the key 602 bytes but while it's not as bad as trying to key off a longtext field, it is close):
&lt;/p&gt;
&lt;pre class="wiki"&gt;*************************** 1. row ***************************
id           : 1
select_type  : SIMPLE
table        : wp_terms
type         : const
possible_keys: slug
key          : slug
key_len      : 602
ref          : const
rows         : 1
Extra        :
1 rows in set (0.00 sec)
&lt;/pre&gt;&lt;p&gt;
Your code ultimately runs this (assuming it is not cached) which is basically the same thing:
&lt;/p&gt;
&lt;pre class="wiki"&gt;SELECT t.*, tt.* FROM wp_terms AS t INNER JOIN wp_term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = 'p2p' AND slug = 'p24' LIMIT 1
&lt;/pre&gt;&lt;p&gt;
The above code is not so bad if there are &amp;lt;1000 or even &amp;lt;2500 records in wp_terms but if we have 10,000 records (movies) with 10 relationships a piece (actors) this absolutely does not scale. (And to make matters worse, your code current does not recognize the reciprocal relationship when one is encoded so a user would have to do both tasks: 1.) Add Actors to a Movie and 2.) Add Movies to an Actor which is crazy.
&lt;/p&gt;
&lt;p&gt;
So I can't endorse your implementation except for use on a site that will never have more than a small number of posts.
&lt;/p&gt;
&lt;p&gt;
Heck, if I were going to hack the taxonomy system and use it in a non-standard way that could cause confusion, I'd add an index for "&lt;code&gt;term_group&lt;/code&gt;" and the store foreign key values for &lt;code&gt;$post-&amp;gt;ID&lt;/code&gt; there.  Then you'd at least be to relate to 8 bytes keys with an index with an EXPLAIN that looks like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;mysql&amp;gt; EXPLAIN SELECT term_id,name,slug FROM wp_terms WHERE term_group=24  \G
*************************** 1. row ***************************
id           : 1
select_type  : SIMPLE
table        : wp_terms
type         : ref
possible_keys: term_group
key          : term_group
key_len      : 8
ref          : const
rows         : 1
Extra        :
1 rows in set (0.01 sec)
&lt;/pre&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:29" title="Comment 29"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:18" title="Comment 18"&gt;mikeschinkel&lt;/a&gt;:
Well, if you "must" know...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I've been interested in much the same but have never dug deep so I'll defer to your research and judgement.  Frankly I'd have to really think about what you posted at length and right now I'm too tired.  What's important to me on this ticket is 1.) that we recognize that post-to-post relations are a common and important use-case and 2.) that we don't accept a solution that is impractical and/or doesn't scale simply because nobody stood up to challenge it.  Of course I'd like to support get added to core but frankly I knew that it might be an uphill battle so I'm prepared for that not to happen.
&lt;/p&gt;
&lt;p&gt;
So in the spirit of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2" title="#2: defect (bug):  posting per xmlrpc - works, but gives errmsgs ala &amp;#34;invalid xml&amp;#34; (closed: fixed)"&gt;#2&lt;/a&gt; another option could be to add an indexed field to postmeta (maybe "&lt;code&gt;meta_int&lt;/code&gt;") that can be used to start bigint values in (like post_ids) and/or anything else that can be serialized into a big int (i.e. time, etc.)  If it is &lt;code&gt;null&lt;/code&gt; then is should behave in a backward compatible manner. If it is not null then we could look to meta_value for the "type" (post, date, date/time, etc.)  Just a thought...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14546 (Refactor direct references for $wp_rewrite class members) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:26:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14546#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14546#comment:1/1281057964000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>refactor_for_wp_rewrite.diff attached to Ticket #14546</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:21:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14546/refactor_for_wp_rewrite.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14546/refactor_for_wp_rewrite.diff/1281057669000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14546 (Refactor direct references for $wp_rewrite class members) created</title>
      
        <dc:creator>ikailo</dc:creator>

      <pubDate>Fri, 06 Aug 2010 01:19:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14546</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14546/1281057583000000</guid>
      <description>&lt;p&gt;
This patch replaces direct references to class members $wp_rewrite-&amp;gt;* with their public functions.
&lt;/p&gt;
&lt;p&gt;
Removes:
$wp_rewrite-&amp;gt;flush_rules(), $wp_rewrite-&amp;gt;add_permastruct(), $wp_rewrite-&amp;gt;add_rewrite_tag()
&lt;/p&gt;
&lt;p&gt;
Replaces with:
flush_rewrite_rules(), add_permastruct(), add_rewrite_tag()
&lt;/p&gt;
&lt;p&gt;
Also removes extraneous $wp_rewrite globals.
&lt;/p&gt;
&lt;p&gt;
Follow-Up to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/10912" title="#10912: enhancement: Complete the rewrite API (closed: fixed)"&gt;#10912&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14545 (move wp-settings from wp-config to wp-load) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Thu, 05 Aug 2010 23:56:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14545#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14545#comment:2/1281052610000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14545#comment:1" title="Comment 1"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Additionally, this is more of an education thing. The line says don't add anything past it. What else can we do?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Break a few sites that use hopelessly obsolete plugins? The suggested approach seems right in terms of backwards compat IMO. I'd suggest using a slightly better metric, like a function or class exists call. Something that we're sure won't get overridden by a plugin, or an API change, basically. But it's really nit picking.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14545 (move wp-settings from wp-config to wp-load) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 23:44:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14545#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14545#comment:1/1281051883000000</guid>
      <description>&lt;p&gt;
This isn't backwards compatible... More than a few plugins call wp-config.php directly, hence the additional conditional ABSPATH define. This used to be the proper way to deeply integrate, now you should use either wp-load or wp-blog-header depending on your objective, or in most cases admin-ajax or admin-post. wp-load was created specifically so wp-config can be moved up one directory, so WP can be used as an SVN external.
&lt;/p&gt;
&lt;p&gt;
The only way to handle this is to deliberately define certain constants as false where defining the constant will not produce incompatibilities with plugins. For example, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/14000" title="Prevent half-baked loading of MS that would happen when constants are ..."&gt;[14000]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Additionally, this is more of an education thing. The line says don't add anything past it. What else can we do?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>14545.diff attached to Ticket #14545</title>
      
        <dc:creator>wpmuguru</dc:creator>

      <pubDate>Thu, 05 Aug 2010 23:34:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14545/14545.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14545/14545.diff/1281051277000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14545 (move wp-settings from wp-config to wp-load) created</title>
      
        <dc:creator>wpmuguru</dc:creator>

      <pubDate>Thu, 05 Aug 2010 23:33:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14545</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14545/1281051205000000</guid>
      <description>&lt;p&gt;
In 3.0 we added a number of constants which are manually added to wp-config.php. Some people are adding these to the bottom of the file after the stop editing &amp;amp; load of wp-settings.
&lt;/p&gt;
&lt;p&gt;
This causes unpredictable behavior with some constants (ex. SUNRISE is defined in the admin area but sunrise.php isn't executed because SUNRISE was defined after loading wp-settings.
&lt;/p&gt;
&lt;p&gt;
Attached is a patch that moves wp-settings.php to wp-load.php.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) reopened</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Thu, 05 Aug 2010 23:28:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:6/1281050890000000</guid>
      <description></description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Thu, 05 Aug 2010 23:04:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:29/1281049459000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:18" title="Comment 18"&gt;mikeschinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Denis, another idea besides a specific table could be to simply add a &lt;code&gt;parent_id&lt;/code&gt; to &lt;code&gt;wp_term_taxonomy&lt;/code&gt; and overload it to allow for post relationships?  I don't know if doing so will have unintended consequences with normal usage of the taxonomy system as the &lt;code&gt;nav_menu_item&lt;/code&gt; post type did for plugin queries and such, but it might be manageable?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Well, if you "must" know, the reasoning behind the suggested table set above breaks down to my own research, years back, in semantic indexing algorithms. In essence, the most generic set of tables you can have amount to a nodes (id, parent, type) table and a meta table on the same. It breaks down to the fact that at some point you need to store data in a relationship (say, how much merchandise was moved from a premise to the next), and it follows that a relationship is a node in it's own right (or vice versa).
&lt;/p&gt;
&lt;p&gt;
However, the same research (never published, sorry) also showed that it didn't scale well, and that two tables (plus the obvious meta) As described further up scaled a lot better for data designed to be displayed on a screen (in that particular case, the base case was a bookstore db for web use), because in web use cases it's rare to store data in a relationship (besides the relationship itself).
&lt;/p&gt;
&lt;p&gt;
Fwiw, I've been periodically reinvestigating the topic as a hobby since then, until I came to a final (and dismissive, I'll confess) conclusion that it's a lot better to have multitudes of tables, with a generic API that knows which table to hit. At this point, however, you need to take into account the assumptions behind WP, ie that a db is a huge array that stores generic information to be processed by php, rather than some relational database management system that, low and behold, might contain an sql trigger.
&lt;/p&gt;
&lt;p&gt;
It thus seems, to me, that things point towards using two tables, nodes and relationships (whatever they're called then, plus two meta tables), for storage at some point. Maybe in a year, maybe in five, but I trust we'll eventually get there. And when we get there, posts and terms will be merged at the same time or shortly after because it'll make little sense to some that we've duplicate code all over the place.
&lt;/p&gt;
&lt;p&gt;
Based on the replies I don't sense the slightest interest for 3.1 though. Or 3.2, for that matter. Maybe this should get revisited when php6 returns a fatal error when checking for magic quotes? It might be a good time to break absolutely everything...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14508 (Always require wp-db.php) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 22:40:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14508#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14508#comment:11/1281048039000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14508#comment:10" title="Comment 10"&gt;wpmuguru&lt;/a&gt;:
Switching this around so DB plugins can inherit the default wpdb class should make it so that DB plugins won't need to be updated with every release of WordPress.
&lt;/p&gt;
&lt;p&gt;
That's actually doable now, though HyperDB demonstrates how it is a cheap hack. (It sets $wpdb to true, then includes wp-db.php.) The performance benefit here would be for opcode caches, by taking the include of wp-db out from behind a conditional. And, of course, it makes it a lot easier to extend wpdb, which as the hack indicates isn't really supported well at the moment.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14508 (Always require wp-db.php) updated</title>
      
        <dc:creator>wpmuguru</dc:creator>

      <pubDate>Thu, 05 Aug 2010 22:34:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14508#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14508#comment:10/1281047647000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14508#comment:7" title="Comment 7"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
These DB drop-ins break with almost every release anyway. It's tempting to add a wpdb API revision and die if db.php doesn't declare compat with that revision.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think 2.8 was the first major release in quite a while where the DB wasn't changed. Switching this around so DB plugins can inherit the default wpdb class should make it so that DB plugins won't need to be updated with every release of WordPress.
&lt;/p&gt;
&lt;p&gt;
+1 from this DB plugin dev :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 21:03:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:28/1281042202000000</guid>
      <description>&lt;p&gt;
Oh, and yeah, I looked at your code on gist and it's NOT similar to what I'm doing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 21:01:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:27/1281042099000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:26" title="Comment 26"&gt;mikeschinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
you are still ignoring the problem of posts getting renamed by users that have mirrored terms that are shared by other taxonomies.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I thought we covered that. Why do you keep bringing up an argument that has already been addressed?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) updated</title>
      
        <dc:creator>filosofo</dc:creator>

      <pubDate>Thu, 05 Aug 2010 21:00:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:5/1281042050000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14540#comment:2" title="Comment 2"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That would completely undermine the meaning of the reply to link. The choice on allowing replies is up to the site owner. If they've state they don't want replies nested past a certain level, it would be completely irresponsible for us to make core 'override' that setting by still showing a reply link. People are smart enough to see that there is no reply link on one message but that there is one a level up, and just use that.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It might be worth pointing out that aside from the "reply" link, this is current behavior.  I mean if you reply to a comment too deep and manually change the submitted parent comment ID, it does what mark-k describes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 20:23:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:26/1281039780000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:25" title="Comment 25"&gt;westi&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even with all the examples above I still don't see why the current taxonomy system can't be used (along with custom post types) to provide what you need.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because it doesn't.  With complete respect please try and implement a few real world sites that need this functionality and then let us know if you still feel the same, please.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If you want to store extra data about a particular term within a taxonomy the use a custom post type to store that information and have it linked to the term.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's not a primary concern of the use-case this proposal addresses.  That part was a tangent; the core here is needing a robust and performant way to related two different post records in a many-to-many scenario.  Linking them through a system that requires 6 levels of indirection (&lt;em&gt;post-&amp;gt;term_relationship-&amp;gt;term_taxonomy-&amp;gt;term-&amp;gt;term-&amp;gt;term_taxonomy-&amp;gt;term_relationship-&amp;gt;post&lt;/em&gt;) rather than one level (&lt;em&gt;post-&amp;gt;post_relationship-&amp;gt;post&lt;/em&gt;) is just asking for the downsides that come with too much complexity.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If you implement the ui correctly the user can't break these links i.e. you only give them one way to edit things.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm not so concerned about the users as I am about other plugins.  You are suggesting we build a house of cards.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Taking one of these examples:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;A conference website...&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
You hide the creation ability of the two taxonomies from the users and just let them put the existing ones on to relevant posts using a selection ui on the post edit page.
&lt;/p&gt;
&lt;p&gt;
They add new entries to the Taxonomies by creating custom posts of the matched types.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Although the conference example is the least compelling of all them (hence it shouldn't surprise me you picked on it :) you are still ignoring the problem of posts getting renamed by users that have mirrored terms that are shared by other taxonomies.  It's all a mess. What I struggle with is why I can see the problem yet (most) others cannot.  Maybe I'm wrong, or maybe my specific experience in these use-cases has given me insight that your (potential lack of?) experience in these use-cases has not?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 05 Aug 2010 20:08:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:25/1281038884000000</guid>
      <description>&lt;p&gt;
Even with all the examples above I still don't see why the current taxonomy system can't be used (along with custom post types) to provide what you need.
&lt;/p&gt;
&lt;p&gt;
If you want to store extra data about a particular term within a taxonomy the use a custom post type to store that information and have it linked to the term.
&lt;/p&gt;
&lt;p&gt;
If you implement the ui correctly the user can't break these links i.e. you only give them one way to edit things.
&lt;/p&gt;
&lt;p&gt;
Taking one of these examples:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;A conference website can have sessions, sponsors, presenters, time slots and rooms. A session can have one or more presenters and be presented in one or more time slots and one room per time slot ,and a presenter can represent a sponsor or not.&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Post types: Sessions, Sponsors, Presenters, ( maybe Rooms)
Taxonomies: Presenters (on Sessions), Sponsors (on Presenters).
&lt;/p&gt;
&lt;p&gt;
You hide the creation ability of the two taxonomies from the users and just let them put the existing ones on to relevant posts using a selection ui on the post edit page.
&lt;/p&gt;
&lt;p&gt;
They add new entries to the Taxonomies by creating custom posts of the matched types.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>vteixeira</dc:creator>

      <pubDate>Thu, 05 Aug 2010 20:00:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:24/1281038435000000</guid>
      <description>&lt;p&gt;
I just want to add some considerations:
&lt;/p&gt;
&lt;p&gt;
1- New proposed functions that would really get wordpress to the next level always face difficulties for getting into core.
&lt;/p&gt;
&lt;p&gt;
2- Instead of just adding one table to the database some people prefer to hack with the way taxonomies and post types work... not the best approach.
&lt;/p&gt;
&lt;p&gt;
3- Maybe it's time to think of Canonical plugins more seriously. If the functionality is not considered as a 'must have stuff' as Jane said, then this could be a canonical plugin, which could be implemented faster and without all the restrictions faced when something is trying to get into Core. And then developers could rely on that plugin and build custom functionality and other plugins on top of it.
&lt;/p&gt;
&lt;p&gt;
4- I really think that right now all this Custom Post Type and Custom Taxonomy stuff are incomplete. I'm building two sites right now with not so complicated architecture and I'm having a hard time to get it to work the way I want with custom post types and taxonomies. We don't have different types of columns on the database to store different types of data, everything is stored on a text column - come on this is not a real world cms usage, we should have columns for at list some different data types - text, integer, double, datetime.
&lt;/p&gt;
&lt;p&gt;
5- I also proposed some way to filter taxonomies by post types on the permalink structure (yes, it's not possible right now). See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/14497" title="#14497: enhancement: Relate a taxonomy to a post type on menus (closed: wontfix)"&gt;#14497&lt;/a&gt; and &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/14502" title="#14502: enhancement: Enable /post-type/taxonomy/term/ permalinks (new)"&gt;#14502&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
6- another thing missing that I didn't see anybody talking about yet is taxonomy relationship. Imagine I have a taxonomy called Country, another called States and then Cities. There's no way to relate them so one can depend on another. Not advanced stuff.
&lt;/p&gt;
&lt;p&gt;
If wordpress is going on the CMS way, then it must be a complete and full featured cms without imposing restrictions to the site builder. People should not prefer wordpress over other cms just because of the better UI, but because of the features and flexibility also.
&lt;/p&gt;
&lt;p&gt;
Just my thoughts...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14544 (Add action to post_comment_status_meta_box()) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 19:21:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14544#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14544#comment:2/1281036098000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14544 (Add action to post_comment_status_meta_box()) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 19:21:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14544#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14544#comment:1/1281036065000000</guid>
      <description>&lt;i&gt;Type&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>14544.diff attached to Ticket #14544</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Thu, 05 Aug 2010 19:18:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14544/14544.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14544/14544.diff/1281035926000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14544 (Add action to post_comment_status_meta_box()) created</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Thu, 05 Aug 2010 19:18:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14544</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14544/1281035908000000</guid>
      <description>&lt;p&gt;
Add action to post_comment_status_meta_box() so that more options can be added via plugin.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 18:35:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:23/1281033338000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:21" title="Comment 21"&gt;matt&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Could you describe some use cases for this besides manually-curated related posts?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Absolutely, thanks for asking. Here is what I posted to wp-hackers on the same subject. Not everything mentioned would be a post of need to be related in the manner proposed but each example has at least two pairs of post types that need to be related and the first 3 are actual projects I've worked on since v3.0 went to beta:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;1. A law firm website has attorneys, practice areas, articles, case studies, and events/presentations.  Each attorney is in one or more practice areas.  Each article and each case study can be attached to one or more attorneys and relevant to one or more practice areas.  Each event/presentation can have one or more attorneys presenting and can be represented one one or more practice areas' calendars.&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;2.) A conference website can have sessions, sponsors, presenters, time slots and rooms. A session can have one or more presenters and be presented in one or more time slots and one room per time slot ,and a presenter can represent a sponsor or not.&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;3.) A website listing restaurant menus can have restaurants, locations, menus. A restaurant can have one or more locations and one or more menus (breakfast, lunch, dinner, catering, etc.) A menu can apply to all locations for a restaurant or only a specific location.&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;4.) A movie website could have movies and person-roles where a person-role could be an actor, producer, cinematographer, casting, film editing, costumer, set designer, composer, etc.&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;5.) A hospital website has doctors and departments.  Each department can have multiple doctors and each doctor can work in multiple departments.&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;6.) A radio station website could have stations and disc jockey's where a station could have multiple disc jockeys and each disc jockey could appear on multiple stations (given how radio works these days.)&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I can give you many other examples if you need it. I've advocated with many business owners about using WordPress for their websites (often at Meetups) and I've identified obvious use-case for post relationships for every single prospective business person I've spoken to. This functionality would fill in one of the remaining few missing pieces businesses need without having to hire a developer to use WordPress for their entire website instead of just for their blog. And I expect the businesses I've spoken with are far from unique.
&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;(For developers who may fear adding this will reduce their ability to find clients to pay for enhancements consider that the more businesses that start to use WordPress the more of them will identify functionality specific to their business they need that does require a developer. So let's give them the low value generic things that are not "for free" and they'll have more money to spend on the higher value business specific things.)
&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Actually, if there were only two (2) things left that we could ever add to WordPress I'd vote for 1.) something to address post relationships (which I will contribute code if given the agreed direction) and 2.) &lt;a class="ext-link" href="http://core.trac.wordpress.org/ticket/12935"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;improved URL routing&lt;/a&gt; (which I plan to work on in the near future.)  Beyond that, WordPress is pretty much baked, IMO. :-)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 18:10:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:22/1281031828000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:17" title="Comment 17"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Storing the post_meta table. It won't scale much and, as a cursory look at support threads of scribu's plugin reveal, this results in poor reciprocal relationship management.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
"Cursory looks" very weak base for arguments make.
&lt;/p&gt;
&lt;p&gt;
The issues you saw were either completely UI related or I was using my own API incorrectly.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Thu, 05 Aug 2010 18:07:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:21/1281031670000000</guid>
      <description>&lt;p&gt;
Could you describe some use cases for this besides manually-curated related posts?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 17:39:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:20/1281029950000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:19" title="Comment 19"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The problem I have been running into is ensuring that adding of a
term doesn't fail because of a pre-existing slug that has been added for a
post tag.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
While not exactly intuitive via the existing APIs, it's entirely possible to add a term_taxonomy relationship that uses the term object as a post tag, thus the same slug, etc. Terms (as defined by the schema) can exist in more than one taxonomy.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, but then if I edit the mirrored post's title and automatically update the term's name and slug it modifies the term for the post tag too (the user requirement is, by definition that the two remain in-sync.) Clearly changing the post_tag would be an undesirable side effect, no?
&lt;/p&gt;
&lt;p&gt;
I guess we could run code to create a new term and update all &lt;code&gt;wp_term_taxonomy&lt;/code&gt; records that use the term as a tag but that's starting to feel more and more kludgy; what if that update fails for some reason?  Yes we can code referential integrity in PHP but the more we do it in increasingly complex ways the more we are asking for corrupted user data and yes, disenchanted users.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14212 (Hide more meta boxes by default) updated</title>
      
        <dc:creator>mdawaffe</dc:creator>

      <pubDate>Thu, 05 Aug 2010 17:36:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14212#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14212#comment:2/1281029771000000</guid>
      <description>&lt;p&gt;
+1
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 17:26:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:19/1281029197000000</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
The problem I have been running into is ensuring that adding of a
term doesn't fail because of a pre-existing slug that has been added for a
post tag.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
While not exactly intuitive via the existing APIs, it's entirely possible to add a term_taxonomy relationship that uses the term object as a post tag, thus the same slug, etc. Terms (as defined by the schema) can exist in more than one taxonomy.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 17:20:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:18/1281028825000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:14" title="Comment 14"&gt;scribu&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
You mention that using a taxonomy would be hard because you have to keep post slugs syncronized. I have tried that approach in the past and, indeed, data got corrupted pretty fast.
&lt;/p&gt;
&lt;p&gt;
That's why I use the post ID instead. Since the ID never changes, keeping things consistent is a lot easier. You just have to delete the term when the post is deleted.
&lt;/p&gt;
&lt;p&gt;
Take a look at the most recent version of my plugin to see what I mean:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://plugins.trac.wordpress.org/browser/posts-to-posts/trunk/core.php?rev=271772"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://plugins.trac.wordpress.org/browser/posts-to-posts/trunk/core.php?rev=271772&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's what I'm already doing (using a post ID) as seen in &lt;a class="ext-link" href="http://gist.github.com/507345"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;the code I posted yesterday to gist&lt;/a&gt; for Lox. The problem I have been running into is ensuring that adding of a term doesn't fail because of a pre-existing slug that has been added for a post tag. Sure I can just add a "-2" or whatever, but the client is very anal (as most clients are, and just like me :) and they want the taxonomy slugs to match (if we are using taxonomy then we should be using the taxonomy system URLs, etc.)  It's basically a rock and a hard place. So while I agree using taxonomy is useful in lieu of having a better method, it is non-optimal.
&lt;/p&gt;
&lt;p&gt;
Using taxonomy for this requires telling your client "&lt;em&gt;No, sorry, we just can't do that&lt;/em&gt;" and I'd rather have a system where I can always say "Y&lt;em&gt;es, of course we can do that (it might cost more, but we can do it if it is important to you.)&lt;/em&gt;"  BTW, I think this is the same reason prettyboymp became disenchanted with using the taxonomy system to relate posts.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:15" title="Comment 15"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@Mike. We don't put everything in core. It's meant to be the must-have stuff, and extensible for specific use cases. A use case that is growing is not the same as one that is applicable to all. Get a good plugin out there that makes the table you want, see how many people adopt it. If it's an overwhelming number that would make the case. Adding tables that most of the 20 million+ users probably don't need doesn't make sense. When it gets to a point that it looks like a majority of them really do need that, as shown by plugin stats, that would be a good time to consider it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
What Denis-de-Bernardy said. :)
&lt;/p&gt;
&lt;p&gt;
Seriously, using that same argument we would not have gotten custom post types because most of the 20 million+ users don't (realize they) need them. (Precedent set. :) Future, post relationships are infrastructure not a feature.  Features are plugin territory, infrastructure is not. Actually, this is simply rounding out missing functionality from the evolution of post types, not as a feature in-and-of itself.  Honestly I think maybe you have an automat&lt;strong&gt;&lt;em&gt;T&lt;/em&gt;&lt;/strong&gt;ic (pun intended?) Pavlovian response to any new features: &lt;strong&gt;First&lt;/strong&gt; say "&lt;em&gt;No, make it a plugin&lt;/em&gt;" &lt;em&gt;Then&lt;/em&gt; actually understand the proposal. (I say that in good natured jest, please take it that way. :-)
&lt;/p&gt;
&lt;p&gt;
By analogy, consider &lt;a class="ext-link" href="http://wordpress.org/extend/ideas/topic/threaded-comments"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;the idea for threaded comments&lt;/a&gt;. Mark Jaquith's &lt;a class="ext-link" href="http://wordpress.org/extend/ideas/topic/threaded-comments#post-165"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;suggestion of 3 years ago&lt;/a&gt; was for people to roll their and he points out that the field "&lt;code&gt;comment_parent&lt;/code&gt;" was there for them to be able to do so. Had &lt;code&gt;comment_parent&lt;/code&gt; not been there, his answer would have needed to be "&lt;em&gt;Add your own table&lt;/em&gt;" which I think most of us agree is not something to encourage, right? This is much the same, we need a robust place to store post-to-post relationships. Adding a table may not be the right solution, but a solution is needed even though not all 20 million people will benefit.
&lt;/p&gt;
&lt;p&gt;
Another analogy would be if I asked for the state to build a road between Macon and Columbus and you petitioned against it on the grounds that few people not traveling by car between the two cities. Clearly that's a chicken &amp;amp; egg problem; people don't travel by car between the two as frequently as say between Macon and Savannah or Macon and Valdosta because there simply isn't an easy way to get there. If there were a road there you can be certain more people would travel between the two. That doesn't mean it makes sense to build the road just that the justification for not doing so would have been faulty, same as in this case.
&lt;/p&gt;
&lt;p&gt;
OTOH if WordPress had a built-in system to allow a plugin dev to "require" other plugins and then automatically and transparently have them downloaded and activated maybe I'd be able to agree with you but right now: "&lt;em&gt;What Denis said&lt;/em&gt;."
&lt;/p&gt;
&lt;p&gt;
Now, can we get on to discussing an optimal implementation for post relationship and also when (and even if) it makes sense to add to core? :)
&lt;/p&gt;
&lt;p&gt;
Denis, another idea besides a specific table could be to simply add a &lt;code&gt;parent_id&lt;/code&gt; to &lt;code&gt;wp_term_taxonomy&lt;/code&gt; and overload it to allow for post relationships?  I don't know if doing so will have unintended consequences with normal usage of the taxonomy system as the &lt;code&gt;nav_menu_item&lt;/code&gt; post type did for plugin queries and such, but it might be manageable?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10940 (Default timezone should be set for PHP5) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Thu, 05 Aug 2010 16:31:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10940#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10940#comment:22/1281025888000000</guid>
      <description>&lt;p&gt;
eitch: Be patient with this one. WP 3.2 is going to drop support for PHP 4. Since the only reason for this odd fix is PHP 4 compatibility, it'll be possible to fix it properly after we're PHP 5 only.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14543 (Recent Posts Widget post count setting/display discrepancy) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 16:20:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14543#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14543#comment:1/1281025246000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I think the dashboard widgets properly adjust for the limit upon save. We should be doing the same here.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14543 (Recent Posts Widget post count setting/display discrepancy) created</title>
      
        <dc:creator>Nao</dc:creator>

      <pubDate>Thu, 05 Aug 2010 16:18:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14543</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14543/1281025091000000</guid>
      <description>&lt;p&gt;
Recent Posts Widget can only display 1-15 posts.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://core.trac.wordpress.org/browser/trunk/wp-includes/default-widgets.php#L537"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://core.trac.wordpress.org/browser/trunk/wp-includes/default-widgets.php#L537&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
However, you can save any negative/positive integer from the widget setting field.
The number you can use there should be limited to the min (1) and max (15, if this remains so).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Thu, 05 Aug 2010 16:10:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:17/1281024618000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:15" title="Comment 15"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@Mike. Get a good plugin out there that makes the table you want, see how many people adopt it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Doing so is somewhat nonsensical in this particular instance. No plugin dev in his right mind would use (let alone search for) a plugin that adds an extra table to WP in order to write his own plugin.
&lt;/p&gt;
&lt;p&gt;
What he'll do instead is use dbDelta and create the table himself. (If only to spare his user base the hassle of needing to install two plugins in order to implement whatever he's coding.)
&lt;/p&gt;
&lt;p&gt;
FWIW, I can vaguely picture two approaches for n-n post2post relationships in WP:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Storing the post_meta table. It won't scale much and, as a cursory look at support threads of scribu's plugin reveal, this results in poor reciprocal relationship management.
&lt;/li&gt;&lt;li&gt;The taxonomy API, as in mapping each post to a term and then creating term2post relationships (a bit like we do with menus). But I've my doubts that the menus API can handle more than a hundred dozen menu items.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10940 (Default timezone should be set for PHP5) updated</title>
      
        <dc:creator>eitch</dc:creator>

      <pubDate>Thu, 05 Aug 2010 16:00:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10940#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10940#comment:21/1281024004000000</guid>
      <description>&lt;p&gt;
Since I didn't get any feedback, I'm going to be stuck with setting gmt_offset everytime I create a new blog. IMHO it's better than changing wp-settings.php directly.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 15:57:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:16/1281023876000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14481 (Shortcode Enhancements) updated</title>
      
        <dc:creator>aaroncampbell</dc:creator>

      <pubDate>Thu, 05 Aug 2010 15:53:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14481#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14481#comment:18/1281023612000000</guid>
      <description>&lt;p&gt;
I'm assuming we'd still need to keep a stack of registered shortcodes so we can use those names in the regex? I've not a regular expressions guru by any means (I'm fine at writing them to meet my needs, but it ends there), so how advantageous is it to create the regex using the list of registered shortcode names?  Also, at what point (if any) does it become a problem (what if there are 1,000 shortcodes? 10,000?)? I know that the problems it may create are probably edge cases, but I'm curious.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14212 (Hide more meta boxes by default) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Thu, 05 Aug 2010 15:30:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14212#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14212#comment:1/1281022205000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) updated</title>
      
        <dc:creator>jane</dc:creator>

      <pubDate>Thu, 05 Aug 2010 15:03:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:4/1281020606000000</guid>
      <description>&lt;p&gt;
@mark-k: Yes, it can be a PITA, but it the blog owner's choice, not ours. We should not try to make core override the blog owner's choice. It's their site; WP is just the underlying platform.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) updated</title>
      
        <dc:creator>mark-k</dc:creator>

      <pubDate>Thu, 05 Aug 2010 15:00:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:3/1281020418000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14540#comment:2" title="Comment 2"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That would completely undermine the meaning of the reply to link. The choice on allowing replies is up to the site owner. If they've state they don't want replies nested past a certain level, it would be completely irresponsible for us to make core 'override' that setting by still showing a reply link. People are smart enough to see that there is no reply link on one message but that there is one a level up, and just use that.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Jane, after there are several comments at the maximal nest it becomes a PITA to find the original comment, and reply to it, and while all of us might understand what is going behind the scene and act in appropriate way, for the common commenter it is totally not obvious.
If the semantics should be different than a "reply to", thats ok, but it will be nice if this problem will get some kind of solution.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) closed</title>
      
        <dc:creator>jane</dc:creator>

      <pubDate>Thu, 05 Aug 2010 14:45:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:2/1281019519000000</guid>
      <description>wontfix: &lt;p&gt;
That would completely undermine the meaning of the reply to link. The choice on allowing replies is up to the site owner. If they've state they don't want replies nested past a certain level, it would be completely irresponsible for us to make core 'override' that setting by still showing a reply link. People are smart enough to see that there is no reply link on one message but that there is one a level up, and just use that.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>jane</dc:creator>

      <pubDate>Thu, 05 Aug 2010 14:42:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:15/1281019332000000</guid>
      <description>&lt;p&gt;
@Mike. We don't put everything in core. It's meant to be the must-have stuff, and extensible for specific use cases. A use case that is growing is not the same as one that is applicable to all. Get a good plugin out there that makes the table you want, see how many people adopt it. If it's an overwhelming number that would make the case. Adding tables that most of the 20 million+ users probably don't need doesn't make sense. When it gets to a point that it looks like a majority of them really do need that, as shown by plugin stats, that would be a good time to consider it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14353 (editor cuts off text at first german umlaut) updated</title>
      
        <dc:creator>christian_gnoth</dc:creator>

      <pubDate>Thu, 05 Aug 2010 14:04:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14353#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14353#comment:9/1281017065000000</guid>
      <description>&lt;p&gt;
for me any time after 16:00 o'clock germany time is ok.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14353 (editor cuts off text at first german umlaut) updated</title>
      
        <dc:creator>christian_gnoth</dc:creator>

      <pubDate>Thu, 05 Aug 2010 14:04:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14353#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14353#comment:8/1281017041000000</guid>
      <description>&lt;p&gt;
please log in to the blog above and test it by yourself - please tell at which time you would test, then I can give you a admin user. it happens with a admin user only, the other user types are working well!!!
as it is a wordpress mu installation, migrated to wp 3.0 you have access with a admin user to all blogs. so i would give you the access only for the time you test it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14542 (WordPress doesn't recognize my custom taxonomy) closed</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Thu, 05 Aug 2010 13:38:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14542#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14542#comment:2/1281015499000000</guid>
      <description>invalid: &lt;p&gt;
This is a support question, not a bug. Your order of operations is likely wrong. I have posted in the thread.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #14542 (WordPress doesn't recognize my custom taxonomy) updated</title>
      
        <dc:creator>drika.santos.sp</dc:creator>

      <pubDate>Thu, 05 Aug 2010 13:36:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14542#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14542#comment:1/1281015383000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14542 (WordPress doesn't recognize my custom taxonomy) created</title>
      
        <dc:creator>drika.santos.sp</dc:creator>

      <pubDate>Thu, 05 Aug 2010 13:35:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14542</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14542/1281015313000000</guid>
      <description>&lt;p&gt;
Please, I need some help to solve this:
&lt;a class="ext-link" href="http://wordpress.org/support/topic/wordpress-doesnt-recognize-my-custom-taxonomy?replies=2"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://wordpress.org/support/topic/wordpress-doesnt-recognize-my-custom-taxonomy?replies=2&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) updated</title>
      
        <dc:creator>markmcwilliams</dc:creator>

      <pubDate>Thu, 05 Aug 2010 11:46:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540#comment:1/1281008765000000</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I can see some logic behind that, I'm sure there have been a few other Trac Tickets mention this too (don't have any #'s to hand though!)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14541 (Add boolean at remove_meta_box action) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 11:44:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14541#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14541#comment:1/1281008644000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 10:11:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:14/1281003101000000</guid>
      <description>&lt;p&gt;
@Mike and @Denis:
&lt;/p&gt;
&lt;p&gt;
You mention that using a taxonomy would be hard because you have to keep post slugs syncronized. I have tried that approach in the past and, indeed, data got corrupted pretty fast.
&lt;/p&gt;
&lt;p&gt;
That's why I use the post ID instead. Since the ID never changes, keeping things consistent is a lot easier. You just have to delete the term when the post is deleted.
&lt;/p&gt;
&lt;p&gt;
Take a look at the most recent version of my plugin to see what I mean:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://plugins.trac.wordpress.org/browser/posts-to-posts/trunk/core.php?rev=271772"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://plugins.trac.wordpress.org/browser/posts-to-posts/trunk/core.php?rev=271772&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>metabox.diff attached to Ticket #14541</title>
      
        <dc:creator>Rahe</dc:creator>

      <pubDate>Thu, 05 Aug 2010 09:10:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14541/metabox.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14541/metabox.diff/1280999408000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14541 (Add boolean at remove_meta_box action) created</title>
      
        <dc:creator>Rahe</dc:creator>

      <pubDate>Thu, 05 Aug 2010 09:09:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14541</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14541/1280999391000000</guid>
      <description>&lt;p&gt;
Add the possibility of getting the status of the remove_meta_box action by boolean.
Can be useful if you want to add/remove other metaboxes if one other is present or not.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 08:49:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:13/1280998199000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:10" title="Comment 10"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:8" title="Comment 8"&gt;mikeschinkel&lt;/a&gt;:
I certainly agree that using taxonomies is unrealistic -- things are then broken, slow, awkward, etc. Then again, any generic posts relationship table I can think of would end up looking like:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;nodes (id, type)
&lt;/li&gt;&lt;li&gt;node2node (parent, child, type)
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Definitely another consideration.  I had hoped to others would propose alternate and possibly better implementations, as you just did. (I was actually surprised when some of the first response was "it's not needed.") So thanks.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:12" title="Comment 12"&gt;Otto42&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Let's focus on getting terms (and comments) integrated with posts first. As that happens, then it might just turn out that we really need this along the way.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, that sounds like a great plan. Thanks.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Thu, 05 Aug 2010 06:56:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:12/1280991373000000</guid>
      <description>&lt;p&gt;
I say to not close this, but to let it sit and stew for a while. I'm not convinced of a need for it, but I'm not convinced it's a bad idea either.
&lt;/p&gt;
&lt;p&gt;
Let's focus on getting terms (and comments) integrated with posts first. As that happens, then it might just turn out that we really need this along the way.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Thu, 05 Aug 2010 06:53:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:11/1280991238000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:6" title="Comment 6"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I can't see this as a real candidate for addition to core, given that the bulk of users would probably never need this. If I'm wrong, someone creating a plugin for it and showing wide adoption stats would convince me to reconsider.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Am I correct in assuming that this rigorous process led to introducing the capital P feature? :-)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14540 (Should be able to reply to a comment which is in the maximal possible nest) created</title>
      
        <dc:creator>mark-k</dc:creator>

      <pubDate>Thu, 05 Aug 2010 06:39:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14540</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14540/1280990393000000</guid>
      <description>&lt;p&gt;
When comments reach the maximal nesting, it is confusing for users which got used to having the ability to "reply to" as to how can they reply to those comments.
My suggestion is to keep the "reply to", but instead of creating a new level, to just append the new comment after the latest comment at the same level.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>Denis-de-Bernardy</dc:creator>

      <pubDate>Thu, 05 Aug 2010 06:30:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:10/1280989858000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:8" title="Comment 8"&gt;mikeschinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Does anyone else thinks post-to-post relationships are fairly niche? Surely not scribu, he wrote a plugin to address the use-case. Nacin points out that it is an "increasingly used case." Denis seems to imply that he believes it would be a viable use case (true?)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I certainly agree that using taxonomies is unrealistic -- things are then broken, slow, awkward, etc. Then again, any generic posts relationship table I can think of would end up looking like:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;nodes (id, type)
&lt;/li&gt;&lt;li&gt;node2node (parent, child, type)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
To me, things ought to look like the above in WP, with terms and posts getting merged at some point.
&lt;/p&gt;
&lt;p&gt;
In some respects, it's a horrible idea. But it's also the most generic and flexible. And considering the implicit assumption in WP that a DB is a gigantic array, I'd say we're heading in that direction anyway.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) updated</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 05:21:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:9/1280985669000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14513 (Time for a wp_post_relationships table?) reopened</title>
      
        <dc:creator>mikeschinkel</dc:creator>

      <pubDate>Thu, 05 Aug 2010 05:20:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14513#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14513#comment:8/1280985603000000</guid>
      <description>&lt;p&gt;
I guess I forgot to check "cc" because I didn't get any emails about discussion ticket.  Even though it was closed I'm reopening it so I can respond.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:1" title="Comment 1"&gt;scribu&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
You don't really need an extra table, as demonstrated by my plugin:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://wordpress.org/extend/plugins/posts-to-posts/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Posts 2 Posts&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sure you can do it that way.  But it's not a great, general purpose solution for reasons discussed on wp-hackers and below.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:2" title="Comment 2"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Wondering if we can create a viable API for this increasingly used case by internally leveraging postmeta.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As Denis said, using postmeta would require either doing lookups on a 768 byte key field or storing the relation twice in two different meta fields and thus increasing likelyhood that one of them will get updated by a plugin but not the other and "corrupting" user data.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:3" title="Comment 3"&gt;Denis-de-Bernardy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The above table could be a first step to merging posts and taxonomies, however.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
By "above table" I assume you mean the one proposed?  If yes, +1. :)
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:4" title="Comment 4"&gt;scribu&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There's no point in creating the table if we don't provide UI and APIs to go with it. So the feature request should actually be "Enable many-to-many relationships between posts".
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I completely agree.  Sorry I didn't mention that explicitly; at the time it seemed obviously implied but now seems like not mentioning it was an oversight on my part.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:5" title="Comment 5"&gt;Otto42&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
We already have many-to-many relationships between posts. You can relate a bunch of posts to other posts by simply giving them all the same term in a taxonomy.
&lt;/p&gt;
&lt;p&gt;
I say put this on hold while the discussion happens on wp-hackers. Maybe we can come up with a better solution.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We don't already have many-to-many relationships in a manner that reasonable people agree on the implementation.  Taxonomy requires either to much overhead to do lookups and/or to many joins and it requires maintaining many records in a consistent state across many tables. Too many places where data can get changed a corrupt the data at the user level (and I'm referring to both post_title/name and post_name/slug.)
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14513#comment:6" title="Comment 6"&gt;jane&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This seems to be straightforward plugin territory to me. Fairly niche use, etc. I would support whatever is needed in terms of hooks to make it easy, but I can't see this as a real candidate for addition to core, given that the bulk of users would probably never need this. If I'm wrong, someone creating a plugin for it and showing wide adoption stats would convince me to reconsider.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think you may be unaware how widespread the need for post-to-post relationships really are. Yes for the blogging use-case most people are not going to use it (though I believe many of them would if the benefits were explained to them).
&lt;/p&gt;
&lt;p&gt;
But when using WordPress as a CMS I would be hard pressed to envision a site that would not explicitly need post-to-post relationships. Let me give you an example. You blog a lot about WordCamps. You could add a WordCamp post type where you have city, dates, venue, photo of venue, etc as custom fields. In addition, you could add a post type of "Featured Presenters" to your blog which would include their photo, their bio, their session topic(s), their company, their twitter name, etc. These features presenters could be keynoters or others that are "notable" in a Wikipedia kind of way. Then you could relate all your featured presenters to each WordCamp and have a generic post relationships widget that displays upcoming WordCamps and their Featured Presenters. The widget would be plugin territory but the table that stores that data and the "Related Featured Presenters" metabox in the admin UI (aka "Related %post_types%") that allows you to relate the two would be generic and triggered by a "supports" arg of the register_post_type() function and they should IMO be in core.
&lt;/p&gt;
&lt;p&gt;
Also your mention of offering hooks implies you may not understand the scenario.  The hooks to support this are already in WordPress; I've already implemented a plugin to relate posts. What we need are not hooks but instead a table to store the data. My plugin could add its own table but I loathe writing plugins that add tables to WordPress because that means WordPress doesn't have what we need for common use-cases. And if I add a table it's almost certain nobody else will write functionality for my table but if it was added to core there is 100% certainty that many other people will (which is one reason I'm advocating for it.)
&lt;/p&gt;
&lt;p&gt;
Of course Otto42 and scribu claim that the taxonomy system is sufficient but I and at least prettyboymp disagree. However I had to explain the use-case to Ott42 and (thus it's clear to me) he hasn't actually implemented any sites that use taxonomy for this use-case and so his advocacy for taxonomy hasn't been tested by the rigors of real-world experience. prettyboymp has deployed a large site and came to the conclusion that using taxonomy for related posts was not workable and I'm coming to the same conclusion on a large plugin for CMS use-cases I'm trying to finalize. scribu just yesterday changed his plugin to use taxonomy from postmeta so it seems he hasn't tested it "in the field" either.
&lt;/p&gt;
&lt;p&gt;
Does anyone else thinks post-to-post relationships are fairly niche?  Surely not scribu, he wrote a plugin to address the use-case.  Nacin points out that it is an "increasingly used case." Denis seems to imply that he believes it would be a viable use case (true?)
&lt;/p&gt;
&lt;p&gt;
Unless a reasonable number disagree the point of this debate is not whether it is "fairly niche" (it's not) but instead:
&lt;/p&gt;
&lt;p&gt;
1.) Should a table to relate posts as well as basic supporting UI functionality be added to core? (I think so, prettyboymp thinks it's useful but that we should wait to include in core, and others may agree or disagree with including in core) and
&lt;/p&gt;
&lt;p&gt;
2.) If it will be in core how should it be implemented? (Otto42 and scribu this taxonomy is fine, prettyboymp and I disagree.)
&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Postscript:&lt;/em&gt; Yes I'll be disappointed but otherwise I'll be fine to learn that the majority decide not to include the proposed table or anything similar in core. However I will be upset if the decision is made based on false assumptions.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #14539 (Cache-Control / Expires headers not applied to files in Multisite ...) created</title>
      
        <dc:creator>spherical</dc:creator>

      <pubDate>Thu, 05 Aug 2010 04:21:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14539</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14539/1280982093000000</guid>
      <description>&lt;p&gt;
First reported in Multisite forum and detailed there:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://wordpress.org/support/topic/cache-control-headers-and-uploaded-files-not?replies=5"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://wordpress.org/support/topic/cache-control-headers-and-uploaded-files-not?replies=5&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
These file type accesses should return 304s according to the rules in .htaccess but consistently return 200, showing an incorrect Cache-Control header specification, instead of no specification at all--which is still undesired.
&lt;/p&gt;
&lt;p&gt;
This occurs in two 3.0.1 Multisite installs on all blogs, domain mapped or not, but does not occur on any other domains on the server or in any other file locations in the WP tree (themes, etc.).
&lt;/p&gt;
&lt;p&gt;
Initially, it was image files that I had identified this on but a subsequent check of a CSS file in the files/ location returned the same header that is set for (.php|.pl|.cgi) files; same as the image files do.
&lt;/p&gt;
&lt;p&gt;
Apache 2.2.15, PHP 5.2.13, FreeBSD 7.2-STABLE, MySQL 5.0.90
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14538 (Add option to have WP Nav Menu auto-add pages regardless of hierarchy) created</title>
      
        <dc:creator>bergius</dc:creator>

      <pubDate>Thu, 05 Aug 2010 01:31:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14538</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14538/1280971860000000</guid>
      <description>&lt;p&gt;
The new Navigation Menu should really allow automatic inclusion of pages regardless of whether they are top-level pages or not.
&lt;/p&gt;
&lt;p&gt;
It wouldn't make sense creating a primary navigation if not every page could be automatically added. And sure, you can use wp_list_pages() or whatever for that, but this feature is still great for managing order and possibly adding links that are not directly connected to pages.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #14481 (Shortcode Enhancements) updated</title>
      
        <dc:creator>scribu</dc:creator>

      <pubDate>Thu, 05 Aug 2010 00:41:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14481#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14481#comment:17/1280968879000000</guid>
      <description>&lt;p&gt;
Yeah, that's what I meant. :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14481 (Shortcode Enhancements) updated</title>
      
        <dc:creator>aaroncampbell</dc:creator>

      <pubDate>Thu, 05 Aug 2010 00:36:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14481#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14481#comment:16/1280968595000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14481#comment:15" title="Comment 15"&gt;scribu&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Ok, so why not use do_action() and add_action() internally?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think I agree with Scribu (assuming I'm understanding what he's saying).  It would be nice to be able to use filters, but it would require that the parameters be changed so the content parameter comes first...which REALLY messes with backwards compatibility.  The only way I see to be able to rearrange parameters would be to create new functions (like wp_add_shortcode, or something similar) and use a function with the old functions that rearranges the parameters before calling their handler.  It would be messy, but the end result would be pretty nice:
&lt;/p&gt;
&lt;p&gt;
Basically, when someone did &lt;code&gt;add_shortcode('myshortcode', 'myhandler', 10);&lt;/code&gt; internally it would do something like &lt;code&gt;add_filter('shortcode-myshortcode', 'myhandler', 10, 3);&lt;/code&gt; and then when it processed shortcodes it would simply use &lt;code&gt;apply_filters('shortcode-myshortcode', $content, $attributes, $tag);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
You would obviously also be able to use has_filter, remove_filter, and even remove_all_filters.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13816 (There should be built-in index pages for taxonomies) updated</title>
      
        <dc:creator>louyx</dc:creator>

      <pubDate>Thu, 05 Aug 2010 00:06:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13816#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13816#comment:7/1280966761000000</guid>
      <description>&lt;i&gt;Cc&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>