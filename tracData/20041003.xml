<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #330 (.htaccess generated for permalinks can cause Server 500 error) updated</title>
      
        <dc:creator>jamesvl</dc:creator>

      <pubDate>Sun, 03 Oct 2004 20:27:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/330</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/330/1096835228000000</guid>
      <description>&lt;p&gt;
Forgot to mention:
&lt;/p&gt;
&lt;p&gt;
WordPress version: 2004-09-29 nightly
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33 (Three sql queries with where clauses that can only contain 1=1) updated</title>
      
        <dc:creator>hadj</dc:creator>

      <pubDate>Sun, 03 Oct 2004 20:26:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33/1096835170000000</guid>
      <description>&lt;p&gt;
Reminder sent to 2fargon, Anne, joseph, matt, rboren, skippy
&lt;/p&gt;
&lt;p&gt;
I just added a bugnote to bug 33 that appeals for better coding / db practices in the future.  Let me know what you think.  Are these sorts of changes already in progress?  I could probably pitch in to help over the winter...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #330 (.htaccess generated for permalinks can cause Server 500 error) created</title>
      
        <dc:creator>jamesvl</dc:creator>

      <pubDate>Sun, 03 Oct 2004 20:25:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/330</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/330/1096835122000000</guid>
      <description>&lt;p&gt;
On some web hosts (see below for specifics), the .htaccess generated can cause a Server 500 error - the .htaccess file has a parse problem.
&lt;/p&gt;
&lt;p&gt;
This happened when trying to add the %category% tag to the beginning of the permalink structure. It did not happen when left off:
&lt;/p&gt;
&lt;p&gt;
/%category%/%year%/%monthnum%/%postname%/
generated an .htaccess file that causes the 500 error
while the .htaccess file generated by
/%year%/%monthnum%/%postname%/
did not cause the error.
&lt;/p&gt;
&lt;p&gt;
The problem turned out to be the syntax of the last line of the .htaccess file:
RewriteRule &lt;sup&gt;(.+})/?$ /index.php?category_name=$1 [QSA]
&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;
When I changed it to
RewriteRule &lt;sup&gt;([a-zA-Z0-9_]{1,})/?$ /index.php?category_name=$1 [QSA]
(which *should* be the semantic equivalent), the Server 500 error went away the behavior worked as expected.
&lt;/sup&gt;&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33 (Three sql queries with where clauses that can only contain 1=1) updated</title>
      
        <dc:creator>hadj</dc:creator>

      <pubDate>Sun, 03 Oct 2004 20:18:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33/1096834701000000</guid>
      <description>&lt;p&gt;
As is typical of open source AMP projects, some of the code in WordPress is a hack.  The good news:  Our code is far, far (far, far, far) cleaner than say PHP-Nuke, because we use best practices like CSS, and object classes like the wpdb object.  The bad news - too often, our database queries are as sloppy / hackish as the worst of Nuke.  We are still at v 1.x, Nuke is on v 7.x...by the time we have our own v. 7 code, it will be nearly as insrutable as Nuke's is, unless we do a better job at standardizing than they did.  The place to start is with database queries:
&lt;/p&gt;
&lt;p&gt;
# Don't write queries that return trivial or irrelevant results.  This bug is an example.  An even better one is found in wp-admin/post.php, v 1.2, line X.  When you've finished inserting a row into $tableposts, the ID on that row is guaranteed unique (GUID).  So there is no need to test $tablepost2cat for *each* category to see if that row already exists in $tablepost2cat -- you could just do *one* "select ref_ID from $tablepost2cat where post_id = $post_id" and iff you get any rows back you need to throw an error. Better still, $tablepost2cat should have a UNIQUE index on post_id, cat_id; in v 1.2 it only has a non-unique INDEX.  Better than that, MySQL lets you define table relationships so that no row can be added to $tablepost2cat unless its post_id matchs an ID already present in $tableposts.
&lt;/p&gt;
&lt;p&gt;
# Learn the features of the wpdb object, and USE THEM.  In the above example, with the table relationships enforced by the RDBMS rather than by the php code, the under-appreciated wpdb object sets the proper error condition if you try to insert a second row with the same post_id and cat_id into $tablepost2cat.  This way, the entire insert to $tablepost2cat fails, not just that one row, leaving that table in a consistant state.  Once you understand the properties and functions avaiable from the wpdb object, you can easily trap the error and display a sarcastic "gee, you REEEELLY like categories, don't you?".  Or you could just let the page fail with a runtime error, since whoever is causing this error is up to no good.  For example, they might have submited a bogus HTTP POST indicating a blog post is a member of category X more than one time.  This hack would be passed to the global $_POSTS&lt;a class="missing wiki"&gt;categories?&lt;/a&gt; which would return an array with more than one key having the same value.
&lt;/p&gt;
&lt;p&gt;
# After an INSERT, you *don't* need to do another SELECT to fetch the primary key (autoincrement) value for that row.  If your code does something like $result = $wpdb-&amp;gt;query("INSERT whatever");, in the next line you can write $id = $result-&amp;gt;last_insert_ID and presto you have just elminated an entire round-trip to the DB!  I think my pseudo-code is accurate, if it's not, the details are in wp-includes/wp-db.php, search for last_insert in that file.
&lt;/p&gt;
&lt;p&gt;
# Simplify your WHERE clause.  Or, if a complex where condtion is needed to cover some subtle special cases, comment your code to explain why you wrote the clause the way you did.  This bug is an example of a problem that is unfortunately too wide-spread in WordPress.
&lt;/p&gt;
&lt;p&gt;
# Don't run SELECT * when all you need is a single column, or a list of small columns.  Remember, even if your WHERE clause is efficient, it still takes work for the database to fetch the value of all columns for a given row.  Worse, the PHP &amp;lt;-&amp;gt; MySQL api / middleware has to incurr a lot more overhead to define a rowset with many columns of varying data types and fill each column with data.  Why make your server(s) thrash to bring you all 1K - 100++K of a large post, when all you need is the post_ID and maybe the author_id or some other flags?
&lt;/p&gt;
&lt;p&gt;
SELECT * is a shorthand created for use in ad-hoc querys so your fingers don't get tired.  Don't use it for production level code!
&lt;/p&gt;
&lt;p&gt;
However, you can freely use SELECT COUNT(*) without fear. MySQL is smart enough to treat this as the equivalent to the much more precise SELECT COUNT(primarykey).  And of course, you know that if you want the COUNT of rows in a column C in which nulls are allowed, you have to do COUNT(C) to avoid including the null rows in your count :-)
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
At some point, probably when we go to WP 2.0, there will be a slew of unavoidable changes to the DB structure (added tables, added columns to existing tables, in order to support new or enhanced features; depreciated tables or columns removed, etc.)  Right now is the time to start incrementally improving the php code, table structure, constraints, best practices, etc. so that after the upgrade we will have cleaner code and DB, plus all those nifty features.  Toodles.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [1729]: Fix wp_title() for pages. </title>
      
        <dc:creator>rboren</dc:creator>

      <pubDate>Sun, 03 Oct 2004 17:07:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/1729</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/1729/1096823273000000</guid>
      <description>&lt;p&gt;
Fix wp_title() for pages.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #329 (post_pingback value is always on) created</title>
      
        <dc:creator>anonymousbugger</dc:creator>

      <pubDate>Sun, 03 Oct 2004 12:14:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/329</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/329/1096805685000000</guid>
      <description>&lt;p&gt;
Now, we can choose pingback on/off in Option-discussion. but! Though "Attempt to notify any Weblogs linked to from the article" is turned off. post_pingback value is always turn on in Write page or edit page.
&lt;/p&gt;
&lt;p&gt;
It is caused by fixed post_pingback value at edit-form.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
&amp;lt;input type="hidden" name="post_pingback" value="1" id="post_pingback" /&amp;gt;
&lt;/p&gt;
&lt;hr /&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #328 (Problem with posting and setting the category) created</title>
      
        <dc:creator>anonymousbugger</dc:creator>

      <pubDate>Sun, 03 Oct 2004 11:17:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/328</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/328/1096802268000000</guid>
      <description>&lt;p&gt;
I just installed the latest CVS and noticed a problem with the way the Post is assigned to a category.
In post.php on line 48 the new ID is fetched from the database. The problem is that the ID field is auto-incrementing.
Example:
If you delete three posts the highest ID in the posts table will decreace to 15 for example BUT the next value assigned to a new inserted row will be 19 (via auto_increment).
The select statement returns 16 (15+1) although it should be 19.
I fixed this problem the following way, but maybe there is an easier one.
&lt;/p&gt;
&lt;p&gt;
I changed
&lt;/p&gt;
&lt;p&gt;
$post_ID = $wpdb-&amp;gt;get_var("SELECT ID FROM $wpdb-&amp;gt;posts ORDER BY ID DESC LIMIT 1") + 1;
&lt;/p&gt;
&lt;p&gt;
to
&lt;/p&gt;
&lt;p&gt;
$id_result = $wpdb-&amp;gt;get_row("SHOW TABLE STATUS LIKE '$wpdb-&amp;gt;posts'");
$post_ID = $id_result-&amp;gt;Auto_increment;
&lt;/p&gt;
&lt;p&gt;
This way I always get right ID for the post
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset [1728]: Extend is_single(), is_page(), is_category(), and is_author() to ...</title>
      
        <dc:creator>rboren</dc:creator>

      <pubDate>Sat, 02 Oct 2004 19:24:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/1728</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/1728/1096745080000000</guid>
      <description>&lt;p&gt;
Extend is_single(), is_page(), is_category(), and is_author() to accept an optional argument which designates a particular id, name, or nicename.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #326 (9/29 nightly prevents selecting images in Exhibit) created</title>
      
        <dc:creator>thefreefood</dc:creator>

      <pubDate>Sat, 02 Oct 2004 02:40:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/326</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/326/1096684815000000</guid>
      <description>&lt;p&gt;
Upon upgrading to the 9/29 nightly, I found that I was unable to make any new posts with images in Exhibit.  When selecting an image or folder, the Javascript that allows selection of images would appear to process briefly, but when I then hit 'save and continue editing,' no images were added to the post.  Downgrading to the 9/26 nightly caused Exhibit to function normally again.  I am using the newest version of Exhibit.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset [1727]: Security: Clean up user inputs before using. </title>
      
        <dc:creator>emc3</dc:creator>

      <pubDate>Sat, 02 Oct 2004 00:46:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/1727</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/1727/1096677990000000</guid>
      <description>&lt;p&gt;
Security: Clean up user inputs before using.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item>
   </channel>
</rss>