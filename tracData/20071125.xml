<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #5387 (Script Error on posting) created</title>
      
        <dc:creator>dsole</dc:creator>

      <pubDate>Sun, 25 Nov 2007 23:44:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5387</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5387/1196034244000000</guid>
      <description>&lt;p&gt;
HI,
I really need help with this, I am getting a script error when I try to write new post.   The system hangs just before the formatting toolbar is loaded and then I get the error. No details on it..this pic shows what i get. www.digitalsole.info/scripterror.JPG
&lt;/p&gt;
&lt;p&gt;
This causes Firefox to hang until I stop script and in IE7 it goes not responding and crashes. This only happens when using Write Post..not editing or managing..just new post. I was using 2.2 and upgraded to 2.3.1 but this has not helped. I have tried several themes including the default and nothing seems to help the issue. I also have deactivated all plugins and reactivagted one by one but it makes no difference.
&lt;/p&gt;
&lt;p&gt;
This is causing me a lot of problems and any help would be appreciated.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #4616 (is_email isn't rfc2822 conformant) updated</title>
      
        <dc:creator>Bobcat</dc:creator>

      <pubDate>Sun, 25 Nov 2007 19:58:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4616#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4616#comment:16/1196020719000000</guid>
      <description>&lt;p&gt;
I'm working on a patch for this.  I see that email addresses are run through wp_specialchars().  What is the purpose of this function?  I don't see why email addresses should be run through it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5385 (Page Passwords Not Working) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Sun, 25 Nov 2007 14:31:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5385#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5385#comment:1/1196001071000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Priority&lt;/i&gt;, &lt;i&gt;Severity&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I'm unable to reproduce this with the meager info given.
&lt;/p&gt;
&lt;p&gt;
Could you give some additional information, like:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the version of WordPress you're runnimg,
&lt;/li&gt;&lt;li&gt;exact reproduction steps,
&lt;/li&gt;&lt;li&gt;the platform you're running (Win/*nix, PHP Version, ...)
&lt;/li&gt;&lt;li&gt;any other useful information.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5386 (Define target-language for blogroll links) updated</title>
      
        <dc:creator>hangy</dc:creator>

      <pubDate>Sun, 25 Nov 2007 14:15:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5386#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5386#comment:2/1196000125000000</guid>
      <description>&lt;p&gt;
While I understand the argument of probably not every WordPress user using that function, I do not see how it would cause clutter and/or confusion.
&lt;/p&gt;
&lt;p&gt;
Anyway, if you think that it would be too few people using the hreflang attribute, it might probably be not worth the effort of implementing it into WordPress core ...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5386 (Define target-language for blogroll links) updated</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Sun, 25 Nov 2007 13:08:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5386#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5386#comment:1/1195996125000000</guid>
      <description>&lt;p&gt;
I'm not sure that many people would want to use such a function. It'd just add cluter and confusion. This feature could be achieved using a plugin. Recommend resolving as wontfix.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5386 (Define target-language for blogroll links) created</title>
      
        <dc:creator>hangy</dc:creator>

      <pubDate>Sun, 25 Nov 2007 12:50:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5386</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5386/1195995035000000</guid>
      <description>&lt;p&gt;
It would be nice if WordPress provided a standard option to define the language of the site linked via blogroll.
&lt;/p&gt;
&lt;p&gt;
The given language could then be added to the links upon echo'ing them, using hreflang="xx" to indicate what language the linked page is written in.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 21:37:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:12/1195940242000000</guid>
      <description>&lt;p&gt;
If the consensus is that globals are an acceptable way to handle these types of problems, then fair enough - the patch is unnecessary.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 20:35:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:11/1195936539000000</guid>
      <description>&lt;p&gt;
Use cases include:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WP_INSTALLING and WP_IMPORTING.  These prevent some code from being unit tested because they can't be changed.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;$wp_smiliessearch and other low priority globals
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Patches like &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/5377"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/5377&lt;/a&gt; and &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/5232"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.wordpress.org/ticket/5232&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5385 (Page Passwords Not Working) created</title>
      
        <dc:creator>sarmadhassan</dc:creator>

      <pubDate>Sat, 24 Nov 2007 19:03:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5385</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5385/1195931010000000</guid>
      <description>&lt;p&gt;
The page password is not working in wordpress. When i type in the correct password, the page just refreshes but dont went on to show the page content. Kindly help us in this regard.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>Nazgul</dc:creator>

      <pubDate>Sat, 24 Nov 2007 10:25:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:7/1195899931000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>rob1n</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:43:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:10/1195893815000000</guid>
      <description>&lt;p&gt;
I'm with Matt. This seems a bit useless, and there's not really much of an issue with how WP currently does things.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:25:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:9/1195892755000000</guid>
      <description>&lt;p&gt;
Well, as an registry, it would generally get rid of the whole globals hell. So you take all of the globals and use this API instead. In that context, you would use this everywhere.
&lt;/p&gt;
&lt;p&gt;
However, my theory, is that you can return a reference to the value contained in the array and it will update based on changes made later. If this were to be the case, then it would completely replace globals and not require a huge update of the core code.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) closed</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:25:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:6/1195892738000000</guid>
      <description>duplicate: &lt;p&gt;
When appropriate and there is a clear and present danger to our users, we publicize things quite a bit. Thanks for your feedback on this particular issue. Marking as "duplicate" just so it doesn't clog up our issue tracker.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Sat, 24 Nov 2007 08:16:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:8/1195892212000000</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I can only imagine one or two places where we could possibly use this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 07:21:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:7/1195888876000000</guid>
      <description>&lt;p&gt;
For the unsetting, just add another method to WP_Registry class, and use the same setup as wp_flag_get() and wp_flag_set().
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 07:18:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:6/1195888707000000</guid>
      <description>&lt;pre class="wiki"&gt;class WP_Registry
{
    var $_data = array();
    function set($name, $value) {
        $this-&amp;gt;_data[$name] = $value;
    }
    function get($name) {
        if( isset($this-&amp;gt;_data[$name]) )
            return $this-&amp;gt;_data[$name];
        return null;
    }
}
function &amp;amp;_wp_flag() {
    static $objRegistry;
    if($objRegistry == null)
        $objRegistry = new WP_Registry();
    return $objRegistry;
}
function wp_flag_set($name, $value=true) {
    $registry = _wp_flag();
    $registry-&amp;gt;set($name, $value);
}
function wp_flag_get($name) {
    $registry = _wp_flag();
    return $registry-&amp;gt;get($name);
}
function &amp;amp;wp_registry() {
    return _wp_flag();
}
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 06:52:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:5/1195887159000000</guid>
      <description>&lt;p&gt;
Understood, which was why the ticket wasn't closed in the first place. However, the ticket makes references to other bugs that needed to be made available.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 24 Nov 2007 06:50:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:5/1195887048000000</guid>
      <description>&lt;p&gt;
Dude. I'm sorry. I'm not saying your idea is bad, I actually do like it a lot. I just don't agree with code that uses '@' to suppress errors and warnings. Which all in fact you are doing is covering up a possible bug.
&lt;/p&gt;
&lt;p&gt;
What does &lt;code&gt;@$_flags[$name]&lt;/code&gt; return when it doesn't exist? I would really like to know. The most logical answer is 'NULL', but how can you be sure? It might return an empty string, or '0'. You also suppress the notice or warning that &lt;code&gt;$_flags[$name]&lt;/code&gt; does not exist.
&lt;/p&gt;
&lt;p&gt;
Sure, I get that. However for most PHP versions, using '@' takes a performance hit. It isn't until PHP 5.1+ that the performance hit is fixed. Now, the question you must answer is how many people are using the latest version that fixes that performance hit and how much of an performance hit will be dealt to those that don't have that version?
&lt;/p&gt;
&lt;p&gt;
Don't take this personally, just explain these issues to me and clarify from what I think I know and educate me on what '@' is better than defensively programming.
&lt;/p&gt;
&lt;p&gt;
If something may not exist, then I was always taught to test to make sure that it does exist, explicitly. Using isset() does not introduce bugs, it removes them by explicitly testing what might have been failure in other instances. Less code does not mean always mean less bugs, sometimes you need more code to make sure that bugs won't show up.
&lt;/p&gt;
&lt;p&gt;
Thanks for the updated patch, but as you are creating an Registry Pattern, I think a class would provide a better solution instead.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>JeremyVisser</dc:creator>

      <pubDate>Sat, 24 Nov 2007 06:17:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:4/1195885046000000</guid>
      <description>&lt;p&gt;
Regarding the 3 comments above, this ticket was about improving the way WP informs the community about security issues, not about the latest security issue in particular.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-flag-api-r6342-isset.patch attached to Ticket #5384</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 04:40:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342-isset.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342-isset.patch/1195879239000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 04:40:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:4/1195879205000000</guid>
      <description>&lt;p&gt;
One line of code but with more complexity.  At the moment it's fine, but at some point someone will change it.  The more complex it is the higher the chances a bug will be introduced.
&lt;/p&gt;
&lt;p&gt;
You want to argue the toss over a single line?  One alternative patch coming up.  Take your pick, one expression vs a ternary operator, one function call and two expressions.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>rob1n</dc:creator>

      <pubDate>Sat, 24 Nov 2007 04:21:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:3/1195878112000000</guid>
      <description>&lt;p&gt;
More code? You mean that one line santosj had?
&lt;/p&gt;
&lt;p&gt;
I hardly think more bugs could be introduced. That is a ridiculous argument, but I may not know the whole story.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 03:03:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:2/1195873433000000</guid>
      <description>&lt;p&gt;
isset() uses more code to do the same thing.  More code means more bugs.  If there's a benefit to using isset, fair enough.  If not I don't see the point in making it look more complicated than it is.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Sat, 24 Nov 2007 01:04:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384#comment:1/1195866298000000</guid>
      <description>&lt;p&gt;
I'm not sure what the fascination is with using &lt;code&gt;@$var['key']&lt;/code&gt;, may I suggest calling isset and returning it else returning null? If you don't want to create a branch.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;return (isset($_flags[$name]) ? $_flags[$name] : null;&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-flag-api-r6342.patch attached to Ticket #5384</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 00:59:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5384/wp-flag-api-r6342.patch/1195865950000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5384 (wp_flag api) created</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 00:58:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5384</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5384/1195865925000000</guid>
      <description>&lt;p&gt;
There's a common pattern in wp code that looks like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;turn_something_on();
if (something_is_on())
  do_something();
turn_something_off();
&lt;/pre&gt;&lt;p&gt;
Currently there are two messy options for storing the toggle value when it needs to be shared between functions: either use a global, or write some get/set functions that store a static variable.
&lt;/p&gt;
&lt;p&gt;
The enclosed patch provides a simple reusable api for this and similar patterns.  Simple example:
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_flag_set('myflag');
if ( wp_flag_get('myflag') )
  do_something();
wp_flag_unset('myflag');
&lt;/pre&gt;&lt;p&gt;
It's not limited to booleans, you can store and fetch a value of any type:
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_flag_set('myflag', 'myvalue');
if ( wp_flag_get('myflag') == 'myvalue' )
  do_something();
wp_flag_unset('myflag');
&lt;/pre&gt;&lt;p&gt;
Flag values are not persistent and not shared across concurrent requests.  They are stored in a static array so as not to pollute the global namespace.
&lt;/p&gt;
&lt;p&gt;
Unit tests are in &lt;a class="ext-link" href="http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_functions.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_functions.php&lt;/a&gt;, in the TestFlagFunctions class.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [94]: add TestFlagFunctions</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 24 Nov 2007 00:48:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/94/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/94/tests/1195865325506489</guid>
      <description>&lt;p&gt;
add TestFlagFunctions
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item>
   </channel>
</rss>