<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #38121 (Crossorigin and other attributes for wp_resource_hints) updated</title>
      
        <dc:creator>peterwilsoncc</dc:creator>

      <pubDate>Sun, 25 Sep 2016 23:57:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38121#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38121#comment:3/1474847876270455</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/38121#comment:2" title="Comment 2"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Of course, this all would need to be done in a backward compatible way.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
A couple of possibilities, each attribute can be a string (URL only) or one of the following:
&lt;/p&gt;
&lt;pre class="wiki"&gt;'example.com' =&amp;gt; array(
  'cross-origin' =&amp;gt; 'user-credentials',
  'other' =&amp;gt; 'atts'
),
&lt;/pre&gt;&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class="wiki"&gt;array(
  'href' =&amp;gt; 'example.com',  //alias with url
  'cross-origin' =&amp;gt; 'user-credentials',
  'other' =&amp;gt; 'atts'
),
&lt;/pre&gt;&lt;p&gt;
an &lt;code&gt;is_array&lt;/code&gt; check is used to determine if the additional attributes exist.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 25 Sep 2016 23:31:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:47</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:47/1474846300113618</guid>
      <description>&lt;p&gt;
In the usability testing that's been done so far, the layout/animation to open and close didn't seem to be an issue. It is an entirely different context, but that provides focus on the task of finding a theme and previewing it, which is a detached workflow from the rest of the customizer. However, that doesn't mean that other users won't have issues with this approach and that we shouldn't test more broadly and explore other options.
&lt;/p&gt;
&lt;p&gt;
One other issue with using the preview area for this would be the flow on mobile, where there is a toggle between preview and customize. Stripping everything down to the lowest common denominator of a small screen, the currently-proposed full-screen experience is similar to the way the add-menu-item and add-widget panels behave on mobile. If we can agree that that is a good interaction, on larger screens we need to decide what elements should be added, if any, as the UI scales up.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Why are we rushing to get the feature post out when it's not at all clear that this is the right direction? I totally get we want to get it in but sometimes things need time to simmer. Can we iterate on the layout in the time? I absolutely would oppose something being rushed to a feature post without getting proper consideration.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This has already been simmering for quite a bit of time, with the initial design concept (which was specifically focused on the layout in a full screen panel off to the left) happening 20 months ago and a full-fledged patch being available for 6 weeks. It is unfortunate that there hasn't been more design feedback to date, but hopefully we can come to a conclusion quickly. There are several other teams that need to review and approve this, so we need to give them time to test and review the code as well. We can continue considering changes to any element as that happens, and iteration is likely to be necessary, hence the schedule.
&lt;/p&gt;
&lt;p&gt;
I'm totally open to changes, but the goal remains for this feature to be in 4.7. This is a significant functionality hole that's been in place since 4.2. The specific implementation here has been discussed in the weekly customize meetings and make/core updates, as well as highlighted for attention in the core dev chats and many of the design team meetings over the past six weeks. The later feedback and new ideas arrive, the less time we have to implement them and iterate accordingly. We have until October 19th to get to a commit, and I've budgeted 7 days for the final code review and commit workflow, leaving us with two and a half weeks for iteration.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 25 Sep 2016 23:11:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:41/1474845069332291</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:39" title="Comment 39"&gt;ThemeZee&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But I'm a really huge fan of adding a CSS Editor to the Customizer.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is not a "CSS Editor". I don't even thing such editors exist. The closest to an editor is the "console" in the browser. It shows the HTML on one side and the CSS on the other. It also shows the current styles and selectors, has autocomplete, error highlighting, instant preview, and so on. I don't think the customizer can come even close.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I often provide CSS snippets as long as it is only some small visual customizations the user wants.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This sounds as a good way to test something or provide a temporary fix. But will be pretty bad user experience if you don't take all these snippets into account when you release updates for your themes. I don't see any problems in adding such snippets in the current theme editor.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I do not agree that users should not make CSS customizations. They can not break anything here like with the Theme Editor. The WordPress Backend will always work fine, and if they do not like their customizations they can always remove the CSS code.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Editing the existing style.css in the current theme editor will not take the site down either. Yes, having "undo" when adding CSS hacks would be helpful, but also sends the message that CSS hacks are okay. I don't agree with that. If the users want to do something, we should encourage them to do it "the right way". In this case that is a child theme.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24040 (Use "posts" instead of "topics" (in tagcloud tooltips)) updated</title>
      
        <dc:creator>GaryJ</dc:creator>

      <pubDate>Sun, 25 Sep 2016 22:36:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24040#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24040#comment:9/1474842962944708</guid>
      <description>&lt;p&gt;
"Items" is the quick solution which fixes the immediate incorrectness of "posts", but I still think (perhaps a new ticket) that there's room to be cleverer here that wouldn't take us down a rabbit hole.
&lt;/p&gt;
&lt;p&gt;
For instance, if my CPT is staff members, or a taxonomy of teams, then "8 people" in a Support team or "6 teams" is going to look far better than "8 items" (linking to people's names) or "6 items" (linking to team names).
&lt;/p&gt;
&lt;p&gt;
Multiple tag cloud widgets on a page is also going to be less than ideal, particularly for screen readers. Yes, "posts" may well be wrong, but "items" may well be too generic to be sufficiently right.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 25 Sep 2016 22:34:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:40</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:40/1474842881412966</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:37" title="Comment 37"&gt;celloexpressions&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I've pretty consistently heard from project leadership over the years that there is no chance that the theme/plugin editors will go away or be turned off
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, I think it was quite clear: I would rather discuss turning the file editors off instead of adding another way to add theme hacks. Yes, the currently standing decision is to leave the file editors be. They are useful in cases where a quick fix to a template or plugin is needed in order to get a "live" site back on. They are not good for permanently adding hacks to themes or plugins.
&lt;/p&gt;
&lt;p&gt;
The implementation here is to allow permanent changes to the theme's styles. These changes may break the site when updating the theme. I don't think we need to introduce another pain point on updating the theme.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The purpose of this project is to make it harder for users to shoot themselves in the foot when they need to make code-based customizations.
...
There's a big terminology difference between "hack" and customization. Being CSS, the focus is on visual adjustments, or customizations, and I wouldn't describe those types of changes as hacks, but maybe that's just me. This is also not unlike the way child themes are designed to extend and customize parent themes.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't agree. Don't think the term "code-based customizations" makes sense. Currently most of the popular WordPress themes and plugins are produced by several developers/companies, are quite "mature", and usually have pretty good support. From development point of view they are at the same level as core (if not better). Adding code hacks to them is pretty similar to hacking core files. Furthermore a lot of themes are being developed by using CSS preprocessors. Overriding the CSS by hand there is even harder and more error-prone.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Inadequate space for editing/writing. Try resizing your coding (text) editor to 275px width and edit something for 10-15 min. It's really bad.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Line lengths are generally pretty short for CSS specifically. The width is also variable based on device size (potentially even more so with my proposal on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/32296" title="#32296: enhancement: Customize: Increase width of controls pane to give more room on high ... (closed: fixed)"&gt;#32296&lt;/a&gt;). We shouldn't make feature decisions based on the current customizer UI, which could always change; we could also bump the textarea out to be wider if we feel that that's more important than maximizing the size of the preview in this instance.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. Fixing and improving the customizer UI and UX is much more important than adding a feature that will benefit only a small amount of users. On top of that this feature is already available in plugins so the users that need it already have it.
&lt;/p&gt;
&lt;p&gt;
Even if this finds its way in core, I don't think it needs a preview. As far as I see there are two general user cases:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The users try to change/override some CSS in the theme to perhaps change some colors or hide a component.
&lt;/li&gt;&lt;li&gt;The users receive a CSS snipped specific to their theme (by the theme author or from support) and want to add it to the site. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:39" title="#35395: feature request: Provide a better gateway for code-based theme customizations with the ... (closed: fixed)"&gt;comment 39 above&lt;/a&gt;.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
In the first case the users will actually need to edit the CSS. However doing that without seeing/knowing the current CSS structure and selectors is pretty much impossible. Anybody that is even a little familiar with CSS would know to open the browser tools and try the changes there. The browser tools are also a lot more comfortable when "hacking" any CSS. You can see all styles and selectors, there is autocomplete, error highlighting, instant preview, etc. We will never be able to match that, and don't really need to. There is no point in adding CSS Editor to WordPress.
&lt;/p&gt;
&lt;p&gt;
In this case the users will "compose" their hacks in the browser tools and would only need a place to add them to their sites. In the second case the users will also only need a place to add the snipped (as they don't know how to edit CSS).
&lt;/p&gt;
&lt;p&gt;
In both cases all of the templates would have to be checked for bad CSS interactions. Having a preview increases the chance for the user to believe that everything is okay, i.e. the preview can be "deceitful". I'd rather avoid that.
&lt;/p&gt;
&lt;p&gt;
I also think that there are themes that would want to prevent the users from (easily) changing their CSS. An officially supported child theme would make much more sense in these cases.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...surely this can't be worse in terms of security than being able to edit PHP files directly within the theme and plugin editors? We can decide what the appropriate capability is here, such as &lt;code&gt;edit_files&lt;/code&gt;, if that helps.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. The problems here are not bad syntax or foreign content (HTML, JS, etc.), the problem is that only users with &lt;code&gt;unfiltered_html&lt;/code&gt; or &lt;code&gt;edit_files&lt;/code&gt; should have access. There is such thing as "malicious CSS", you can easily deface a site with just couple of lines :)
&lt;/p&gt;
&lt;p&gt;
In that terms changing the theme's CSS should also obey the &lt;code&gt;DISALLOW_FILE_EDIT&lt;/code&gt; constant.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37188 (Add New Media button does not give aria feedback) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:47:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37188#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37188#comment:4/1474840044767069</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
For better accessibility, and consistency with other screens (Plugins, Themes), the drop zone should immediately follow the toggle button and be placed before the media toolbar, see screenshot below. Would greatly appreciate a quick feedback from the UI team :)
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/URlgMXmfWe.png"&gt;&lt;img src="https://cldup.com/URlgMXmfWe.png" alt="https://cldup.com/URlgMXmfWe.png" crossorigin="anonymous" title="https://cldup.com/URlgMXmfWe.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38142 (Media modal: handle keyboard focus when closing the modal) closed</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:32:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38142#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38142#comment:4/1474839131044555</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38652" title="Accessibility: Handle focus when closing the media modal.
When ..."&gt;38652&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Accessibility: Handle focus when closing the media modal.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
When closing the media modal, by default focus should be moved back to the UI&lt;br /&gt;
control that was clicked to open the modal. The only exception is when inserting&lt;br /&gt;
images into the Visual or Text editor.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38142" title="#38142: defect (bug): Media modal: handle keyboard focus when closing the modal (closed: fixed)"&gt;#38142&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [38652]: Accessibility: Handle focus when closing the media modal.  When ...</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:32:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38652</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38652/1474839130512303</guid>
      <description>&lt;p&gt;
Accessibility: Handle focus when closing the media modal.
&lt;/p&gt;
&lt;p&gt;
When closing the media modal, by default focus should be moved back to the UI
control that was clicked to open the modal. The only exception is when inserting
images into the Visual or Text editor.
&lt;/p&gt;
&lt;p&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38142" title="#38142: defect (bug): Media modal: handle keyboard focus when closing the modal (closed: fixed)"&gt;#38142&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:25:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:46</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:46/1474838740878461</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, I'm not sure that it makes sense cognitively to show a grid of themes where the preview is - that may introduce confusion about what the preview/site vs. the UI is.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Doesn't the entire thing suddenly changing become far more of a friction point for users? I'd strongly argue we have that case here.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
The feature proposal post is scheduled to go out in two days and we have a bit of time to iterate afterwards, but not much, so we'll need to make a decision soon.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Why are we rushing to get the feature post out when it's not at all clear that this is the right direction? I totally get we want to get it in but sometimes things need time to simmer. Can we iterate on the layout in the time? I absolutely would oppose something being rushed to a feature post without getting proper consideration.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36581 (Customizer Header Image Control should extend the cropped image control) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:18:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36581#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36581#comment:3/1474838307575759</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38156" title="#38156: defect (bug): Customizer Previously uploaded header images disappear on focus (closed: fixed)"&gt;#38156&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38142 (Media modal: handle keyboard focus when closing the modal) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:15:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38142#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38142#comment:3/1474838125917756</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/38142#comment:2" title="Comment 2"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
38142.diff looks good. If there is still somebody using Opera &amp;lt;= 12 (which I doubt), they may see some visual artifacts.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks very much for reviewing :) Just for the record, I've actually tested with Opera 12 and I think the issue is solved by the fact the focus is now moved to the media modal and doesn't stay on the Add Media button.
&lt;/p&gt;
&lt;p&gt;
Edit: tested also when inserting images in the "Text" editor.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 25 Sep 2016 21:04:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:45</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:45/1474837444327890</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thanks @karmatosed!
&lt;/p&gt;
&lt;p&gt;
That does look better for the upload section. The button currently remains when it's open to toggle closed, but we could add a close button on the right end of that one-line approach as well. The install button is "supposed" to float right currently, but it may depend on screen size. That particular UI is exactly the same as in the admin, so we'd probably want both places updated. However, the shiny theme upload is actually the one thing that's not yet functional, and a potential element that could be split out and added in the future if we don't have time to add it.
&lt;/p&gt;
&lt;p&gt;
In addition to the "customize" back button, &lt;code&gt;esc&lt;/code&gt; currently closes the panel. The customizer browser history project (slated for 4.7) would enable the browser back button to also work, and this came up as something users expect to work in the user testing as well.
&lt;/p&gt;
&lt;p&gt;
The mockup with themes over the preview is interesting. I like that the customize context remains clearer, and we could potentially show a back button in the customizer pane to close. However, I'm not sure that it makes sense cognitively to show a grid of themes where the preview is - that may introduce confusion about what the preview/site vs. the UI is. We'd also lose the visual hierarchy of themes being "above" all of the other controls by placing them to the left of all of the other customize options. The customize pane also feels like "wasted" space with some irrelevant options (device preview, save &amp;amp; publish probably doesn't make sense when you can't see the preview, etc.), unless we were to place other elements there, such as the help text maybe? Once we start hiding the irrelevant elements and changing the type of thing that's shown there, though, we'd also lose some of the consistency of having that visible.
&lt;/p&gt;
&lt;p&gt;
@folletto what are your thoughts on the proposal above and the current one with a full-screen slideout, since you came up with the original layout concept of the full screen slide?
&lt;/p&gt;
&lt;p&gt;
We're late in the game, so we need other designers to weigh in here ASAP, as well as to explore other potential layouts. It sounds like the overall placement of the themes panel and the navigation in and out of it is the biggest question at the moment. The feature proposal post is scheduled to go out in two days and we have a bit of time to iterate afterwards, but not much, so we'll need to make a decision soon.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37968 (HTML validation errors in admin tool) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:45:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37968#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37968#comment:3/1474836310811065</guid>
      <description>&lt;p&gt;
Actually, after thinking about this a little more, another way to fix the issue with the menu edit screen would be to properly flatten the list, outputting a complete &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt; element within method &lt;code&gt;start_el()&lt;/code&gt; and overriding &lt;code&gt;end_el()&lt;/code&gt; to do nothing. Not sure whether that would be preferable - it is less "semantic" but might fit with the current CSS a bit better.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37968-nav-menus.diff attached to Ticket #37968</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:33:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37968/37968-nav-menus.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37968/37968-nav-menus.diff/1474835615500490</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37968 (HTML validation errors in admin tool) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:33:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37968#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37968#comment:2/1474835602034712</guid>
      <description>&lt;p&gt;
I found another similar validation problem in the Appearance - Menus screen. It's tempting to ask who tests this stuff, but in fact modern browsers are very relaxed with HTML parsing and seem to correct obvious errors automatically, so in practice this kind of bug is becoming very difficult to spot!
&lt;/p&gt;
&lt;p&gt;
Class &lt;code&gt;Walker_Nav_Menu_Edit&lt;/code&gt; is used to populate the "Menu Structure" panel with the menu to be edited. If the menu contains nested items, however the current code attempts to output a nested list of just &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements which is not valid HTML without an intervening &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; (or &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
The solution I think is to follow the example of class &lt;code&gt;Walker_Nav_Menu_Checklist&lt;/code&gt; and override the &lt;code&gt;start_lvl()&lt;/code&gt; and &lt;code&gt;end_lvl()&lt;/code&gt; methods to output the necessary additional &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; markup. See the forthcoming patch for a suggestion. Tab indents and closing tag comments could perhaps be further improved.
&lt;/p&gt;
&lt;p&gt;
Unfortunately, this change also causes the display of the nested menu items to be indented rather more than previously. Some CSS changes are probably required as well, but I'm not sure of the best place to do that - the current CSS seems rather over-specified, perhaps as a result of trying to work around the invalid markup.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38157.diff attached to Ticket #38157</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:25:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38157/38157.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38157/38157.diff/1474835116670938</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38157 (Add tests for get_post_type_labels()) created</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:25:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38157</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38157/1474835105965122</guid>
      <description>&lt;p&gt;
Working on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26511" title="#26511: feature request: Introduce a locale-switching function (closed: fixed)"&gt;#26511&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29783" title="#29783: feature request: User Admin Language (closed: fixed)"&gt;#29783&lt;/a&gt;, I'd thought it would be a good idea to have tests covering &lt;code&gt;get_post_type_labels()&lt;/code&gt; in case we'd have to do some refactoring.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36897 ("You do not have sufficient permissions to access this page." should ...) updated</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:21:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36897#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36897#comment:5/1474834863726392</guid>
      <description>&lt;p&gt;
I should add that not all the users come from the dashboard. This is a &lt;strong&gt;security check&lt;/strong&gt; to prevent access by unauthorized users, usually after the &lt;code&gt;if ( ! current_user_can( 'xxx' ) )&lt;/code&gt; check. It also stops &lt;strong&gt;unauthorized boots and hackers&lt;/strong&gt; trying to apply different attack vectors on WordPress back-end. I think it should remain a simple message without any links.
&lt;/p&gt;
&lt;p&gt;
BTW, in WP4.6 we updated all the permission error messages (see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34521" title="#34521: task (blessed): Unifying permission error messages (closed: fixed)"&gt;#34521&lt;/a&gt;).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38156 (Customizer Previously uploaded header images disappear on focus) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:17:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38156#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38156#comment:2/1474834634919896</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hmm, yeah I don't think &lt;code&gt;overflow: hidden&lt;/code&gt; will work. This is actually likely to be completely rewritten in 4.7 anyway if video headers for Twenty Seventeen happen in core, so let's see whether &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/36581" title="#36581: enhancement: Customizer Header Image Control should extend the cropped image control (new)"&gt;#36581&lt;/a&gt; happens first.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37825 (Introduce functions to check whether there are multiple taxonomy terms) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:08:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37825#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37825#comment:6/1474834128092811</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37825#comment:5" title="Comment 5"&gt;boonebgorges&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Actually, most recent default themes did.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Point taken :)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
About the underscore prefix, when was this decided?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't know of a specific time or where it's written down. It's been personally conveyed to me a number of times. @DrewAPicture can you chime in on this? Even if we were sticking with the underscore convention, it's not obvious to me why the cache-clearing function would qualify as something "private" or "to-be-deprecated" - we'll always need to clear the cache.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't know that we're specifically "moving away from" the convention – maybe more-so in areas where the underscore is kind of moot, e.g. private methods or properties.
&lt;/p&gt;
&lt;p&gt;
I'd be in favor of underscore-prefixing this new helper mostly for consistency. For instance, we've introduced new cache priming helpers with the underscore prefix as recently as 4.4 (&lt;code&gt;_prime_comment_caches()&lt;/code&gt;) and 4.6 (&lt;code&gt;_prime_network_caches()&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
Does that answer your question(s)?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37492 (Unifying translation strings in wp_die()) updated</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 20:05:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37492#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37492#comment:6/1474833929021416</guid>
      <description>&lt;p&gt;
@SergeyBiryukov any updates?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) updated</title>
      
        <dc:creator>kylegilman</dc:creator>

      <pubDate>Sun, 25 Sep 2016 19:47:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:52</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:52/1474832857651457</guid>
      <description>&lt;p&gt;
I have a plugin that generates a number of attachments that usually don't need to show up in the Media Library list. I filter the Media Library query by only displaying items that don't have a particular custom meta key. It works in 4.6 and in 4.7 as long as  &lt;code&gt;_filter_query_attachment_filenames()&lt;/code&gt; is disabled.
&lt;/p&gt;
&lt;p&gt;
This is a more general action than I use, but simplified to reproduce the issue:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;add_action('pre_get_posts', 'kg_hide_based_on_meta_key');
function kg_hide_based_on_meta_key( $query ) {
        $query-&amp;gt;set(
                'meta_query',
                array(
                        array(
                                'key' =&amp;gt; '_anymetakey',
                                'compare' =&amp;gt; 'NOT EXISTS'
                        )
                )
        );
}
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
shouldn't change the results at all assuming &lt;code&gt;_anymetakey&lt;/code&gt; is not in use, but it will result in an empty list in the Media Library. The list of Posts or any other query work fine as far as I can tell. If you change the key to a value we know an attachment will have and remove &lt;code&gt;compare&lt;/code&gt; then the full list is shown.
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;add_action('pre_get_posts', 'kg_hide_based_on_meta_key');
function kg_hide_based_on_meta_key( $query ) {
        $query-&amp;gt;set(
                'meta_query',
                array(
                        array(
                                'key' =&amp;gt; '_wp_attachment_metadata'
                        )
                )
        );
}
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
EDIT: It's worth pointing out that this last one breaks all non-attachment queries and is just an example.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38121 (Crossorigin and other attributes for wp_resource_hints) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 19:33:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38121#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38121#comment:2/1474832002282221</guid>
      <description>&lt;p&gt;
Attributes have come up before, but we didn't really have time to consider all of them, especially since the specification is still in draft status.
&lt;/p&gt;
&lt;p&gt;
There's the hint probability (&lt;code&gt;pr&lt;/code&gt;) attribute (&lt;a class="ext-link" href="https://www.w3.org/TR/resource-hints/#attributes"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.w3.org/TR/resource-hints/#attributes&lt;/a&gt;) as well as the &lt;code&gt;as&lt;/code&gt; attribute. &lt;code&gt;crossorigin&lt;/code&gt; can also have a value, e.g. &lt;code&gt;crossorigin="use-credentials"&lt;/code&gt;, see &lt;a class="ext-link" href="https://html.spec.whatwg.org/multipage/infrastructure.html#cors-settings-attributes"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://html.spec.whatwg.org/multipage/infrastructure.html#cors-settings-attributes&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Also, we might want to support &lt;code&gt;preload&lt;/code&gt; as well.
&lt;/p&gt;
&lt;p&gt;
Of course, this all would need to be done in a backward compatible way.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38142 (Media modal: handle keyboard focus when closing the modal) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 25 Sep 2016 19:24:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38142#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38142#comment:2/1474831464493788</guid>
      <description>&lt;p&gt;
38142.diff looks good. If there is still somebody using Opera &amp;lt;= 12 (which I doubt), they may see some visual artifacts. This browser like pretty much any other browser older than couple of years, falls into the "still supported but no guarantee to look pretty" category.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37516 (Site title and tagline: allow ability to hide each independently) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 19:21:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37516#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37516#comment:5/1474831271854249</guid>
      <description>&lt;p&gt;
The show/hide are interesting but I also feel that the checkboxes are more straightforward and clear. I almost want to consider it to be 'Hide site title' with display being default though.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36514 (posting with custom taxes) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 19:11:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36514#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36514#comment:13/1474830689530713</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
Ah, interesting. Do we break out much of the insert/update post process right now? I feel like the last time I looked it was one giant procedural call.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, the way it's saved is a bit of a mess, and not easily separated from &lt;code&gt;wp_insert_post()&lt;/code&gt; without changing the order in which things happen. We can simplify the improvement by asking for a sanitization callback instead. See &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36514/36514.2.diff" title="Attachment '36514.2.diff' in Ticket #36514"&gt;36514.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36514/36514.2.diff" title="Download"&gt;​&lt;/a&gt; for a proof-of-concept.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In practice, I think it really ends up as three callbacks - single (select, radio), multi (checkboxes, multi-select), and freeform input (currently tags).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, this covers the native HTML elements, but who knows what wacky stuff people are doing inside of a &lt;code&gt;meta_box_cb&lt;/code&gt;. In any case, the sanitize callbacks are good for more than just differentiating between the *shape* of the payload, they can also do specific validation on the *contents* of the payload. Imagine, for instance, that you allowed users to provide a comma-separated list of term IDs (not sure why you'd do this specifically, but you get the idea). A generic &lt;code&gt;meta_box_sanitize_cb&lt;/code&gt; allows you to do whatever you want with your 'tax_input'.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36514.2.diff attached to Ticket #36514</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 19:07:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36514/36514.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36514/36514.2.diff/1474830439277281</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #20842 (Buttons are not on the same line when saving a post as pending (RTL)) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:51:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20842#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20842#comment:21/1474829502160405</guid>
      <description>&lt;p&gt;
I understand the issues, but I am concerned with adding an icon for this action. My concern is that we are needing people to understand the meaning here and icons are tricky for that. I'd be keen on a solution that means we don't go for an icon. This entire box does need some iteration, but perhaps we can begin by thinking around that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #15394 (Ancient "Are you sure you want to do this" now confusing) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:45:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/15394#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/15394#comment:17/1474829122440083</guid>
      <description>&lt;p&gt;
As far as possible giving an actual thing you can do or next action is far better than a blanket message. The 'are you sure you want to do this' has always felt weird to me. We lead users to second guess and that's really not cool. I'm commenting to try and get some progress on this and see if we can get this worked on again.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22822 (New media: 'Create a new gallery' button should indicate that it's the ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:43:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22822#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22822#comment:9/1474828998976138</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22822 (New media: 'Create a new gallery' button should indicate that it's the ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:42:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22822#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22822#comment:8/1474828955401763</guid>
      <description>&lt;p&gt;
In theory I agree that wherever we have steps we should indicate them and show the number and position as you progress. This makes a lot of sense for users.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37825 (Introduce functions to check whether there are multiple taxonomy terms) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:42:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37825#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37825#comment:5/1474828932964420</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
Actually, most recent default themes did.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Point taken :)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
About the underscore prefix, when was this decided?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't know of a specific time or where it's written down. It's been personally conveyed to me a number of times. @DrewAPicture can you chime in on this? Even if we were sticking with the underscore convention, it's not obvious to me why the cache-clearing function would qualify as something "private" or "to-be-deprecated" - we'll always need to clear the cache.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24040 (Use "posts" instead of "topics" (in tagcloud tooltips)) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:39:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24040#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24040#comment:8/1474828785559891</guid>
      <description>&lt;p&gt;
Items works @DrewAPicture :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #31284 (List tables with fixed header on scroll) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:37:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/31284#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/31284#comment:3/1474828638758172</guid>
      <description>&lt;p&gt;
I think I'd need to feel this in a patch. I'm a little concerned about multiple panels and what happens on certain pages. That said, if we can get a patch and run through the paces, things will be easier to evaluate. I would also suggest we turn this off for mobile and consider any a11y implications we may be causing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29872 (Permalink Structure Tags buttons) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:35:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29872#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29872#comment:10/1474828542394624</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29872 (Permalink Structure Tags buttons) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 18:35:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29872#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29872#comment:9/1474828531997479</guid>
      <description>&lt;p&gt;
I'd +1 to not having drag and drop but having suggested tags is a better approach.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38135 (Support 'role__in' and 'role__not_in' arguments in wp_dropdown_users()) closed</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:44:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38135#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38135#comment:3/1474825465024377</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38651" title="Allow 'role' parameters to be passed to `wp_dropdown_users()`.
 ..."&gt;38651&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Allow 'role' parameters to be passed to &lt;code&gt;wp_dropdown_users()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;wp_dropdown_users()&lt;/code&gt; contains a whitelist of function params that are&lt;br /&gt;
passed through to &lt;code&gt;get_users()&lt;/code&gt;. &lt;code&gt;role&lt;/code&gt;, &lt;code&gt;role__in&lt;/code&gt;, and &lt;code&gt;role__not_in&lt;/code&gt;&lt;br /&gt;
have now been added to this whitelist.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props sillybean.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38135" title="#38135: enhancement: Support 'role__in' and 'role__not_in' arguments in wp_dropdown_users() (closed: fixed)"&gt;#38135&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [38651]: Allow 'role' parameters to be passed to `wp_dropdown_users()`.  ...</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:44:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38651</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38651/1474825464564078</guid>
      <description>&lt;p&gt;
Allow 'role' parameters to be passed to &lt;code&gt;wp_dropdown_users()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;wp_dropdown_users()&lt;/code&gt; contains a whitelist of function params that are
passed through to &lt;code&gt;get_users()&lt;/code&gt;. &lt;code&gt;role&lt;/code&gt;, &lt;code&gt;role__in&lt;/code&gt;, and &lt;code&gt;role__not_in&lt;/code&gt;
have now been added to this whitelist.
&lt;/p&gt;
&lt;p&gt;
Props sillybean.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38135" title="#38135: enhancement: Support 'role__in' and 'role__not_in' arguments in wp_dropdown_users() (closed: fixed)"&gt;#38135&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38135 (Support 'role__in' and 'role__not_in' arguments in wp_dropdown_users()) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:43:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38135#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38135#comment:2/1474825381334590</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Sounds good. Let's add 'role' too, while we're at it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38155 (get_page_of_comment filter can't be used in some cases because has not ...) closed</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:32:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38155#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38155#comment:2/1474824758019450</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38650" title="Pass comment ID to `get_page_of_comment` filter.
Introduced in ..."&gt;38650&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Pass comment ID to &lt;code&gt;get_page_of_comment&lt;/code&gt; filter.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34808" title="Introduce 'page_of_comment' filter.
This filter allows developers to ..."&gt;[34808]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props zhildzik.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38155" title="#38155: defect (bug): get_page_of_comment filter can't be used in some cases because has not ... (closed: fixed)"&gt;#38155&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [38650]: Pass comment ID to `get_page_of_comment` filter.  Introduced in ...</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:32:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38650</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38650/1474824757469810</guid>
      <description>&lt;p&gt;
Pass comment ID to &lt;code&gt;get_page_of_comment&lt;/code&gt; filter.
&lt;/p&gt;
&lt;p&gt;
Introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34808" title="Introduce 'page_of_comment' filter.
This filter allows developers to ..."&gt;[34808]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props zhildzik.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38155" title="#38155: defect (bug): get_page_of_comment filter can't be used in some cases because has not ... (closed: fixed)"&gt;#38155&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38155 (get_page_of_comment filter can't be used in some cases because has not ...) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:30:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38155#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38155#comment:1/1474824642330095</guid>
      <description>&lt;i&gt;Component&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi @zhildzik - Thanks for the ticket, and welcome to WordPress Trac! The fact that &lt;code&gt;$comment_ID&lt;/code&gt; is missing here is a very strange oversight. Let's fix it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27314 (Make sure button-primary has button class) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:30:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27314#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27314#comment:13/1474824641690988</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Refreshed patch. Tried to address all the points mentioned in the ticket description and comments. Additionally, there's a mixed situation now where &lt;code&gt;submit_button()&lt;/code&gt; is sometimes used passing an empty string for the CSS class, and sometimes passing &lt;code&gt;button&lt;/code&gt; (alone or together with other classes). Since passing &lt;code&gt;button&lt;/code&gt; is unnecessary, I'd propose to standardise and remove it. This implies a small adjustment to &lt;code&gt;get_submit_button()&lt;/code&gt; in order to remove empty items to avoid a single class &lt;code&gt;button&lt;/code&gt; being printed out with a space at the end &lt;code&gt;class="button "&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The patch is pretty big and would need to be merged as soon as possible :) Any feedback welcome, see also the QUnit tests part. /cc @helen @iseulde
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>27314.diff attached to Ticket #27314</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:20:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/27314/27314.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/27314/27314.diff/1474824059679815</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #14490 (function "get cat ID" fails if category name has an apostrophe) reopened</title>
      
        <dc:creator>sologne</dc:creator>

      <pubDate>Sun, 25 Sep 2016 17:08:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14490#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14490#comment:11/1474823315999563</guid>
      <description>&lt;p&gt;
The &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/14490#comment:3" title="Comment 3"&gt;comment 3&lt;/a&gt; nails it.
&lt;/p&gt;
&lt;p&gt;
Using single_cat_title to retrieve the category name ; and from that the cat_id ; is a common advice on the internet and it got me losing over an hour to fix the issue ; with the unintuitive get_query_var from comment 3.
&lt;/p&gt;
&lt;p&gt;
Worse, there is not any kind of warning in the codex for single_cat_title that there may be such an issue.
&lt;/p&gt;
&lt;p&gt;
This ticket has been closed ; but is there a good reason for get_cat_ID to NOT support "fancy quotes" ?
&lt;/p&gt;
&lt;p&gt;
Also : seems related to &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/24354" title="#24354: defect (bug): get_cat_id() fails with category names containing ampersand (assigned)"&gt;#24354&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #37407 (Filter button should not appear when no posts are available in list) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 16:42:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37407#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37407#comment:5/1474821770203443</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@michaelarestad can you please commit this as the code and patch look good to me and be great to get this one in.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 16:32:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:44</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:44/1474821133935567</guid>
      <description>&lt;p&gt;
After some working with the files, I have got the patch working enough to run through - yay. Noting the latest patch for some reason applied double the contents of class-wp-customize-themes-panel.php. This may be some svn crazy going on, but I had reverted to clear the patch previously unable to fix. I also reset the box up - in theory it shouldn't have caused this. I'm more noting incase anyone else has this.
&lt;/p&gt;
&lt;p&gt;
The experience of going from Customizer to full width still feels weird. This totally could be due to the expectations I have but it is jarring. I wonder how we can make this experience less wrenching.
&lt;/p&gt;
&lt;p&gt;
I will note that a lot of my feedback here probably goes to anywhere this interface is used, but as I'm seeing it I am commenting. We may have to iterate beyond this patch to cover things ported in. Let me try and break into points as there's a lot going through this.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The far left 'Customize' is easy to miss. This begun me thinking about why aren't we keeping the tab to the right?
&lt;/li&gt;&lt;li&gt;I hit back in browser out of sheer instinct, my brain thought 'lets use this to go back to Customizer'. It was weird to just throw me out.
&lt;/li&gt;&lt;li&gt;The upload file area needs some serious visual attention. The font suddenly seems weirdly big, the button is lost under the the choose file. This area really needs some work. I almost feel it takes too much space up. Could we have it all on one line?
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/7eQGs-e4Ay.png"&gt;&lt;img width="100%" alt="https://cldup.com/7eQGs-e4Ay.png" title="https://cldup.com/7eQGs-e4Ay.png" crossorigin="anonymous" src="https://cldup.com/7eQGs-e4Ay.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I had a first run at something based on a few changes. Note, I remove the upload button if the user has asked to upload, I also have given it less space for a leaner interface.
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/N3tjKcnbnO.png"&gt;&lt;img width="100%" alt="https://cldup.com/N3tjKcnbnO.png" title="https://cldup.com/N3tjKcnbnO.png" crossorigin="anonymous" src="https://cldup.com/N3tjKcnbnO.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
As I stepped through and found all the above points, I began to think of my hitch from the full screen experience, the uploading and the lack of cohesion I felt. This pulled me away from commenting on anything else (I feel I can do that later) I then began to sketch a merging of this idea into Customizer. I came up with the following:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/RHIOXl9QJG.png"&gt;&lt;img width="100%" alt="https://cldup.com/RHIOXl9QJG.png" title="https://cldup.com/RHIOXl9QJG.png" crossorigin="anonymous" src="https://cldup.com/RHIOXl9QJG.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I totally know this is assuming a lot of how we can do things, but I think it has potential for solving a lot of the visual issues. It still gives us a large screen space, but we can use the panels of Customizer and stop the user suddenly having a different experience. This feels a lot more unified to me. I totally admit this is a  really rough sketch but this is what came to mind when I was running through the experience.
&lt;/p&gt;
&lt;p&gt;
I do strongly feel the current solution isn't ready to merge. I feel we need to iterate and totally think we can. I wouldn't be happy signing off experience wise the current flow. Hopefully I've shown some ways this can be worked on to get us to a point where we give a really great user experience.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) updated</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sun, 25 Sep 2016 16:03:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:51</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:51/1474819386931489</guid>
      <description>&lt;p&gt;
@flixos90 good catch. I can see where JOINs are getting blown away. We'll need to get some unit tests on this.
&lt;/p&gt;
&lt;p&gt;
@kylegilman can you give an example of how to reproduce the issue you're seeing?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) updated</title>
      
        <dc:creator>kylegilman</dc:creator>

      <pubDate>Sun, 25 Sep 2016 14:41:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:50</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:50/1474814487508643</guid>
      <description>&lt;p&gt;
@flixos90 I second that. I was having a problem with a meta_query in the media library and I tracked it back to &lt;code&gt;_filter_query_attachment_filenames()&lt;/code&gt;. Any meta_query in the media library using &lt;code&gt;NOT EXISTS&lt;/code&gt; for &lt;code&gt;compare&lt;/code&gt; leads to an empty result. With &lt;code&gt;_filter_query_attachment_filenames()&lt;/code&gt; disabled everything works fine.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38142 (Media modal: handle keyboard focus when closing the modal) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 13:38:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38142#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38142#comment:1/1474810681565561</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/38142/38142.diff" title="Attachment '38142.diff' in Ticket #38142"&gt;38142.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/38142/38142.diff" title="Download"&gt;​&lt;/a&gt;  is a first pass. Removes an old hack for Opera 12 that prevented to correctly get &lt;code&gt;document.activeElement&lt;/code&gt;, see &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/22665" title="Media: Blur the &amp;#34;Add Images&amp;#34; button when the media modal is opened. ..."&gt;[22665]&lt;/a&gt;. Feedback welcome. Since it relates also to the insertion of images in TinyMCE, I'm going to /cc @azaozz :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38142.diff attached to Ticket #38142</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 13:27:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38142/38142.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38142/38142.diff/1474810048437253</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38156 (Customizer Previously uploaded header images disappear on focus) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 13:24:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38156#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38156#comment:1/1474809866164620</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The proposed patch avoids to use &lt;code&gt;overflow: hidden&lt;/code&gt; on the images container: if the focus style is going to be some outline or box-shadow around the images, it would be cut-off by &lt;code&gt;overflow: hidden&lt;/code&gt;. Needs a decision about the actual focus style, I'd defer this to @celloexpressions :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38156.diff attached to Ticket #38156</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 13:16:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38156/38156.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38156/38156.diff/1474809419796535</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38156 (Customizer Previously uploaded header images disappear on focus) created</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 25 Sep 2016 13:10:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38156</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38156/1474809022985192</guid>
      <description>&lt;p&gt;
The Customizer "Header Image" panel displays the previously uploaded images inside button elements, and each image is paired with an "X" button to remove the image:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/5g6XYBvIue.png"&gt;&lt;img src="https://cldup.com/5g6XYBvIue.png" alt="https://cldup.com/5g6XYBvIue.png" crossorigin="anonymous" title="https://cldup.com/5g6XYBvIue.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
When using the keyboard to navigate, as soon as the "X" button receives focus, the images "disappear" (they are moved off-screen):
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/Zor9UgjUPP.png"&gt;&lt;img src="https://cldup.com/Zor9UgjUPP.png" alt="https://cldup.com/Zor9UgjUPP.png" crossorigin="anonymous" title="https://cldup.com/Zor9UgjUPP.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Additionally, for better accessibility, I'd propose two small improvements:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;move the "X" button after the image:in a linearised navigation process makes sense to get first the image and then the remove button
&lt;/li&gt;&lt;li&gt;the images would need some focus style (webkit browsers will show their native focus style but other browsers won't show any style), while I guess the "X" button focus style is not necessary since they appear on focus
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37547 (Twenty Twelve IE stylesheet: Missing CSS) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 12:23:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37547#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37547#comment:7/1474806189037610</guid>
      <description>&lt;p&gt;
I'm trying to work out this issue so please allow me to ask a question that may not be relevant. If it only is around media queries, does it even fire off with IE 9? We also won't be going back as far as IE 8 for support at this point, IE 9 yes we do.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36497 (Merge Twenty Sixteen with the rest of WordPress Core) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 12:20:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36497#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36497#comment:14/1474806019373781</guid>
      <description>&lt;p&gt;
Is this something we can close now?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37536 (Twenty Fifteen: Improve sticky sidebar logic.) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 25 Sep 2016 12:19:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37536#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37536#comment:3/1474805962576973</guid>
      <description>&lt;p&gt;
@DvanKooten do you have an example of a plugin that does this? I would like to test in a real case over outputting code to footer.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 25 Sep 2016 12:04:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:223</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:223/1474805096461454</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:221" title="Comment 221"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The difference in memory usage probably comes from the fact that your approach has relative paths in the classmap, and the Composer one has absolute paths in the classmap. Again, this can be changed into whatever we want for both, so that point is moot as well.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The key point I was trying to convey is that autoloading has a lower memory footprint than what is currently in core, no matter which autoloader we use. After all, ~1% is within the margin of error.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
A note regarding your comparison: the one currently merged into the feature project GitHub repo has excluded most of the third-party/legacy classes for now: &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/blob/autoloader/src/composer.json#L49-L68"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/blob/autoloader/src/composer.json#L49-L68&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Similarly we can optimize the custom autoloader by including these classes to exclude &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/pull/2/files#diff-aa79250a91f72b52e20d458064bbce13R15"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt; or we could easily add an &lt;code&gt;omit_files()&lt;/code&gt; method to omit them by filename.  And I would like to get rid of the filepaths from the classmap entirely, but that would require moving the classes to files with new names in a few known directories. Together that would lower the memory footprint even more.
&lt;/p&gt;
&lt;p&gt;
BTW, having files listed in an autoloader that do not ever need to be loaded does not break anything -- as you know -- it only takes up memory.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
And I would once again make you aware that you're now slowly building, feature-for-feature, a replica of the Composer Generator, but without the unit tests, without the community and maturity, and without the standardized configuration.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And without the bulk and overhead of handling all use-cases.
&lt;/p&gt;
&lt;p&gt;
We do not need to handle all use-cases -- constraints can be beneficial, especially to enable simplification -- so we only need to handle the small subset that applies to core.
&lt;/p&gt;
&lt;p&gt;
Further it also means we do not have to deal with Composer making breaking changes in the future which anyone on core who has dealt with breaking changes from jQuery can almost certainly attest to.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This last point is very important, as it allows to reconcile several autoloaders into a single coherent, optimized autoloader. I still fail to see what the exact &lt;strong&gt;advantage&lt;/strong&gt; is of reinventing the wheel...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If Composer were the right tool for the job, I might agree, ignoring the potential for future breaking changes.  But Composer is not the right tool for WordPress as &lt;a class="ext-link" href="https://wptavern.com/i-love-composer-i-love-wordpress-but-i-object-to-a-marriage"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;several people&lt;/a&gt; &lt;a class="ext-link" href="https://github.com/wecodemore/wpstarter/issues/55#issuecomment-248620966"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;have recently&lt;/a&gt; &lt;a class="ext-link" href="http://blog.wppusher.com/a-warning-about-using-composer-with-wordpress/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;said&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
And if the Composer autoloader can end up being written to do everything exactly as the custom autoloader -- with the same optimizations we are capable of with the custom autoloader -- than what actual benefit is there to using the Composer autoloader other than introducing a lot more code to core and adding an external dependency? &lt;em&gt;(Yeah, I know. Those are not benefits.)&lt;/em&gt; I mean, I thought the argument for it was that it was already written?
&lt;/p&gt;
&lt;p&gt;
Composer is a square peg and WordPress has a round hole.  It is a really, really nice square peg, but square pegs and round holes don't mix.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:222" title="Comment 222"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@wonderboymusic: Please enable Issues on the Feature Project's GitHub repo so we can have a more structured discussion.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Yes. Please!
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;(P.S. I will be so glad when a core committer makes a decision on this -- no matter what the outcome -- so that this pissing match will finally stop.)&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11311 (kses converts ampersands to &amp;amp; in post titles, post content, and more) updated</title>
      
        <dc:creator>nicoblog</dc:creator>

      <pubDate>Sun, 25 Sep 2016 11:33:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11311#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11311#comment:22/1474803207346758</guid>
      <description>&lt;p&gt;
Still happening.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29783 (User Admin Language) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 10:21:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29783#comment:45</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29783#comment:45/1474798871082122</guid>
      <description>&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/29783/29783.6.diff" title="Attachment '29783.6.diff' in Ticket #29783"&gt;29783.6.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/29783/29783.6.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add some more tests, especially for multisite
&lt;/li&gt;&lt;li&gt;Change &lt;code&gt;$locale&lt;/code&gt; to &lt;code&gt;$user_locale&lt;/code&gt; in wp-admin/user-edit.php because it would override the global &lt;code&gt;$locale&lt;/code&gt;. That way, when no user locale is chosen, the site locale is properly selected as the default (instead of being &lt;code&gt;false&lt;/code&gt;).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
We're &lt;em&gt;almost&lt;/em&gt; there. One misbehaviour I noticed is that post type labels aren't properly translated because they are set before the user locale is loaded. In fact, &lt;code&gt;create_initial_post_types()&lt;/code&gt; is called before &lt;code&gt;wp_get_current_user()&lt;/code&gt; is even defined. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26511" title="#26511: feature request: Introduce a locale-switching function (closed: fixed)"&gt;#26511&lt;/a&gt; for a discussion about translating post type labels.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 10:21:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:64</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:64/1474798868062196</guid>
      <description>&lt;p&gt;
Actually, &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/26511/26511.6.diff" title="Attachment '26511.6.diff' in Ticket #26511"&gt;26511.6.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/26511/26511.6.diff" title="Download"&gt;​&lt;/a&gt; won't work for post type labels (though I want to keep the new methods).
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;_get_custom_object_labels()&lt;/code&gt; has some logic to add specific labels, like &lt;code&gt;name_admin_bar&lt;/code&gt;. If that label isn't set during post type registration, it falls back to &lt;code&gt;singular_name&lt;/code&gt;. However, it is set for all the built-in post types. This means it gets lost when simply calling &lt;code&gt;$post_type-&amp;gt;labels = get_post_type_labels( $post_type ); &lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>29783.6.diff attached to Ticket #29783</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 25 Sep 2016 10:15:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29783/29783.6.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29783/29783.6.diff/1474798528661913</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sun, 25 Sep 2016 07:43:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:222</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:222/1474789420190242</guid>
      <description>&lt;p&gt;
@wonderboymusic: Please enable Issues on the Feature Project's GitHub repo so we can have a more structured discussion.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sun, 25 Sep 2016 07:36:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:221</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:221/1474788972711394</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:220" title="Comment 220"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That said I am honestly &lt;strong&gt;I am not seeing conclusive difference in performance between any of the three options&lt;/strong&gt;. The problem is the timing numbers jump around all over the place and also seem dependent on how long since the last request of the same page, so without a scripted test any data I generate would likely not be valid.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I suspected so. The issue is that the code is still basically loaded procedurally, only through the additional detour of an autoloader. As long as we don't do the work of actively optimizing for loading on-demand, autoloader benchmarks will be arbitrary and pretty meaningless. The only think you can compare at this point is the actual implementations of the generated autoloaders, which is an exercise in futility, as both can be freely adapted to match each other.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;However, I am seeing a difference in memory usage&lt;/strong&gt;: Trunk was the worst, Custom was the best, and Composer was almost as good as Custom.  &lt;strong&gt;&lt;em&gt;Best I can tell&lt;/em&gt;&lt;/strong&gt; Custom used between &lt;code&gt;5%&lt;/code&gt; and &lt;code&gt;10%&lt;/code&gt; less memory, and using Custom is about &lt;code&gt;1%&lt;/code&gt; less memory than with Composer.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The difference in memory usage probably comes from the fact that your approach has relative paths in the classmap, and the Composer one has absolute paths in the classmap. Again, this can be changed into whatever we want for both, so that point is moot as well.
&lt;/p&gt;
&lt;p&gt;
A note regarding your comparison: the one currently merged into the feature project GitHub repo has excluded most of the third-party/legacy classes for now: &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/blob/autoloader/src/composer.json#L49-L68"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/blob/autoloader/src/composer.json#L49-L68&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
And I would once again make you aware that you're now slowly building, feature-for-feature, a replica of the Composer Generator, but without the unit tests, without the community and maturity, and without the standardized configuration. This last point is very important, as it allows to reconcile several autoloaders into a single coherent, optimized autoloader. I still fail to see what the exact &lt;strong&gt;advantage&lt;/strong&gt; is of reinventing the wheel...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 25 Sep 2016 06:45:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:220</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:220/1474785949963580</guid>
      <description>&lt;p&gt;
A quick follow up. I did decide to do some benchmarks.  I compared the current trunk with the code in the &lt;code&gt;autoloader&lt;/code&gt; branch of &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this repo&lt;/a&gt; using Query Monitor with inclusion of my autoloader.
&lt;/p&gt;
&lt;p&gt;
So I compared Trunk to Composer to Custom.  Up front I will say setting up a valid test is very challenging. All setups were running in WPLib Box making it likely they would be equal, but the database in all cases was for an initial install database with almost no records as I am not sure what would be a good DB to test with.
&lt;/p&gt;
&lt;p&gt;
That said I am honestly &lt;strong&gt;I am not seeing conclusive difference in performance between any of the three options&lt;/strong&gt;. The problem is the timing numbers jump around all over the place and also seem dependent on how long since the last request of the same page, so without a scripted test any data I generate would likely not be valid.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;However, I am seeing a difference in memory usage&lt;/strong&gt;: Trunk was the worst, Custom was the best, and Composer was almost as good as Custom.  &lt;strong&gt;&lt;em&gt;Best I can tell&lt;/em&gt;&lt;/strong&gt; Custom used between &lt;code&gt;5%&lt;/code&gt; and &lt;code&gt;10%&lt;/code&gt; less memory, and using Custom is about &lt;code&gt;1%&lt;/code&gt; less memory than with Composer.
&lt;/p&gt;
&lt;p&gt;
The following is the &lt;code&gt;mu-plugin&lt;/code&gt; I used to create the timing and then I just ran multiple side-by-side  terminal windows running &lt;code&gt;tail -f timing-log.txt&lt;/code&gt; so I could easily she the results after each page load:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;?php
add_action( 'shutdown', 'log_qm_stats', 11 );
function log_qm_stats() {
    $data = QM_Collectors::get( 'overview' )-&amp;gt;get_data();
    if ( ! empty( $data['time_taken'] ) ) {
        file_put_contents(
            ABSPATH . 'timing-log.txt',
            sprintf(
                "'%s', %s, %s, '%s', '%s'\n",
                defined( 'USE_COMPOSER_AUTOLOADER' ) &amp;amp;&amp;amp; USE_COMPOSER_AUTOLOADER
                    ? 'composer'
                    : ( 'wptrunk.dev' === $_SERVER[ 'HTTP_HOST' ]
                        ? 'trunk___'
                        : 'custom__'
                    ),
                $data['memory_usage'],
                $data['time_taken'],
                $_SERVER['REQUEST_URI'],
                isset( $_REQUEST ) ? str_replace( "'", "\\'", http_build_query( $_REQUEST ) ) : 'null'
            ),
            FILE_APPEND
        );
    }
}
&lt;/pre&gt;&lt;p&gt;
That said, my methodology could very easily have been flawed and I would be happy if anyone would like to validate it.
&lt;/p&gt;
&lt;p&gt;
One this is that Query Monitor does not keep track of data for certain Customizer page loads which I had expected might show a difference, but as is I could not verify.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34436 (Issue with wp.customizer.panel('name').focus().) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 25 Sep 2016 06:00:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34436#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34436#comment:2/1474783229358389</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) closed</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 25 Sep 2016 04:34:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021#comment:17/1474778075008619</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38649" title="Customize: Opt to disable IE8 support via conditional comments instead ..."&gt;38649&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Customize: Opt to disable IE8 support via conditional comments instead of using unreliable &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; feature detection.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Deprecate/remove &lt;code&gt;WP_Customize_Manager::customize_preview_html5()&lt;/code&gt; and remove &lt;code&gt;document.head&lt;/code&gt; polyfill, both of which were only in place for IE8 support.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props ryankienstra, westonruter.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38021" title="#38021: enhancement: Customize: remove support for IE8 (closed: fixed)"&gt;#38021&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [38649]: Customize: Opt to disable IE8 support via conditional comments instead ...</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 25 Sep 2016 04:34:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38649</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38649/1474778074513561</guid>
      <description>&lt;p&gt;
Customize: Opt to disable IE8 support via conditional comments instead of using unreliable &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; feature detection.
&lt;/p&gt;
&lt;p&gt;
Deprecate/remove &lt;code&gt;WP_Customize_Manager::customize_preview_html5()&lt;/code&gt; and remove &lt;code&gt;document.head&lt;/code&gt; polyfill, both of which were only in place for IE8 support.
&lt;/p&gt;
&lt;p&gt;
Props ryankienstra, westonruter.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38021" title="#38021: enhancement: Customize: remove support for IE8 (closed: fixed)"&gt;#38021&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #32875 (Ellipses instead of ... in UI #2) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 25 Sep 2016 02:29:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32875#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32875#comment:29/1474770583701328</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by netweb. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1474770580002575"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #8714 (Ellipses instead of ... in UI) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 25 Sep 2016 02:29:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8714#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8714#comment:41/1474770583508899</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by netweb. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1474770580002575"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 25 Sep 2016 01:42:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:219</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:219/1474767729486224</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:218" title="Comment 218"&gt;TJNowell&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It's not wether autoloader X or autoloader Y is faster. It's wether autoloading vs no autoloading is faster.
We need to demonstrate with hard facts that an improvement is possible.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
100% agreed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I don't see why we need to rename our files, the part were we find the classes and their filenames is meant to happen at buildtime, it's just a PHP array &lt;code&gt;'class' =&amp;gt; 'filename'&lt;/code&gt;, why overcomplicate things?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Great question.  If we use a classmap autoloader there is absolutely no reason we would be required to rearrange files. We can get a working autoloader without rearranging files.
&lt;/p&gt;
&lt;p&gt;
The reason I have been thinking it would be good to rearrange files for the benefits I will mention next but maybe I jumped the gun with this idea. Maybe baby steps are better.
&lt;/p&gt;
&lt;p&gt;
So I fully admit that my interest in renaming them are based on assumed concerns and not valid benchmarks, and I agree we should benchmark it.
&lt;/p&gt;
&lt;p&gt;
So we can discuss after benchmarking my concern was adding to the memory footprint from loading the full classmap.  Loading the classmap is probably fine on 90+% of sites, but large traffic sites that can't cache everything might be negatively affected by loading a classmap on every page.
&lt;/p&gt;
&lt;p&gt;
How?  We could store a number instead of the actual class paths  where the number represents the root for the autoload directories, e.g.:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;1&lt;/code&gt; for &lt;code&gt;ABSPATH . 'wp-admin/autoload/'&lt;/code&gt; and
&lt;/li&gt;&lt;li&gt;&lt;code&gt;2&lt;/code&gt; for &lt;code&gt;ABSPATH . 'wp-includes/autoload/'&lt;/code&gt;.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
From there we could just:
&lt;/p&gt;
&lt;pre class="wiki"&gt;require "{$root_dir}/{$class_name}";
&lt;/pre&gt;&lt;p&gt;
This &lt;strong&gt;&lt;em&gt;might&lt;/em&gt;&lt;/strong&gt; make a tangible difference in memory usage for high traffic sites, but very admittedly it might not. I am&lt;em&gt;(/had?)&lt;/em&gt; planned to rework the autoloader and classmap generator so we can benchmark this.  Should I &lt;em&gt;(not)?&lt;/em&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I don't understand why we need to rearrange most of core, this sounds like a recipe for disaster and failed auto-updates. It screams fragile
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;I do not understand how this can cause failed updates. I do not mean that I debate you on this, I mean I honestly am not aware of how this might break things.  Can you elaborate?
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;One of the strategies I have been thinking about is for us to leave the files in place for all the classes we move to an autoload directory. Then in those files we change them to all include only one line, a &lt;code&gt;require()&lt;/code&gt; that would call &lt;code&gt;_deprecated_file()&lt;/code&gt;. That way I think there would be almost zero chance that we could break anything, but please check my logic on this.
&lt;/li&gt;&lt;/ol&gt;&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;There may be things we don't want to autoload that are always loaded, or too critical to let a plugin override
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
And there is no problem here as autoloading is orthogonal to explicit loading. Simply leave the hardcoded &lt;code&gt;require()&lt;/code&gt; in place for those files, they will be loaded exactly as before and having those files are in the classmap would have zero effect.
&lt;/p&gt;
&lt;p&gt;
I could even enhance the classmap generator to omit from the classmap any classes you explicitly blacklist, e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;// wp-classmap-generator.php
require __DIR__ . '/tools/classmap/class-classmap-generator.php';
$generator = new WP_Classmap_Generator( __DIR__ . '/src' );
$generator-&amp;gt;add_files( 'wp-admin' );
$generator-&amp;gt;add_files( 'wp-includes' );
$generator-&amp;gt;omit_classes( array(
	'WP',
	'WP_Query',
	'WP_Post',
	'WP_Rewrite',
	'wpdb',
));
$classmap = $generator-&amp;gt;get_classmap();
file_put_contents( __DIR__ . '/src/wp-classmap.php', $classmap );
&lt;/pre&gt;&lt;p&gt;
Matter of fact, I updated &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/pull/2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the PR&lt;/a&gt; to include a &lt;code&gt;omit_classes()&lt;/code&gt; method with the above listed classes omitted.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As for benchmarks, install Query Monitor and run a vanilla install with and without these changes, and measure 10 common page loads 10 times. That should give crude timings. Better yet use a cli tool
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Great suggestion.  I can't promise I will get these done immediately, but I will definitely tackle them once my priority client work is out of the way.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36984 (Customizer Menus: Show Pages at the top of the list, expanded) updated</title>
      
        <dc:creator>ryankienstra</dc:creator>

      <pubDate>Sun, 25 Sep 2016 00:09:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36984#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36984#comment:2/1474762183375159</guid>
      <description>&lt;p&gt;
&lt;strong&gt;Pull Request And Patch&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
This &lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/158"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GitHub pull request&lt;/a&gt; and &lt;a class="ext-link" href="https://patch-diff.githubusercontent.com/raw/xwp/wordpress-develop/pull/158.diff"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;identical patch&lt;/a&gt; move the "Pages" to the top of the order of new menu items (&lt;a class="ext-link" href="https://cldup.com/91azSDz3h9.png"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;screenshot&lt;/a&gt;). Before, when clicking to add a new item to a menu in the Customizer, pages were third in the order of available items (&lt;a class="ext-link" href="https://cldup.com/GQ8YeMMpd3.png"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;screenshot&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Also, the "Pages" section is now open by default. Please see the &lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/158"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;pull request&lt;/a&gt; for comments on the code.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37964 (Allow customizer controls to be encapsulated by accepting ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 23:20:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37964#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37964#comment:4/1474759247966888</guid>
      <description>&lt;p&gt;
The patch looks like an improvement to me, although I haven't dug into this code before.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 22:04:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:63</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:63/1474754668478649</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:60" title="Comment 60"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Not sure if we really have to be consistent with a naming which is semantically incorrect. But maybe we can provide both functions? &lt;code&gt;restore_current_locale()&lt;/code&gt; would empty the stack and set the locale to &lt;code&gt;$original_locale&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Added in the latest patch.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Can't we move it to &lt;code&gt;default-filters.php&lt;/code&gt; as &lt;code&gt;add_filter( 'locale', array( $GLOBALS['wp_locale_switcher'], 'filter_locale' );&lt;/code&gt;? Or a simple &lt;code&gt;init()&lt;/code&gt; method which gets called in &lt;code&gt;wp-settings.php&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;code&gt;default-filters.php&lt;/code&gt; is loaded in &lt;code&gt;wp-settings.php&lt;/code&gt; on line 113, while &lt;code&gt;$GLOBALS['wp_locale_switcher']&lt;/code&gt; is initialized on line 395, so that doesn't really work. Going with the &lt;code&gt;init()&lt;/code&gt; method for now.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:61" title="Comment 61"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Something I missed to mention earlier: There is an issue with functions like &lt;code&gt;get_post_type_labels()&lt;/code&gt;/&lt;code&gt;_get_custom_object_labels()&lt;/code&gt;. Post type labels are initially registered via &lt;code&gt;register_post_type()&lt;/code&gt; which means they don't change when calling &lt;code&gt;switch_to_locale()&lt;/code&gt;. You can see that with &lt;a href="https://core.trac.wordpress.org/attachment/ticket/29783/user-language-admin-toolbar.php"&gt;the example plugin&lt;/a&gt; in the Add New menu for the Post and Page items.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ugh, I experienced that once when testing but thought it was fixed eventually. Since post type labels are cached it's a bit hacky to reload them. The latest patch tries it anyway.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:62" title="Comment 62"&gt;tfrommen&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There are even more issues, for example, when you have a Custom Post Type or Custom Taxonomy registered by using a translated slug. When you switch to a different locale, the rewrite rules (and thus the generated permalinks) do &lt;strong&gt;not&lt;/strong&gt; get adapted.
&lt;/p&gt;
&lt;p&gt;
The question is if coping with these things should be handled by the locale switcher, or not.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We definitely can't accommodate for rewrite rules (especially as long as they are stored in the database, see &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/36292" title="#36292: feature request: Rewrites: Next Generation (assigned)"&gt;#36292&lt;/a&gt;) as we'd have no idea which part was translated.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>26511.6.diff attached to Ticket #26511</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 21:58:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/26511/26511.6.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/26511/26511.6.diff/1474754321630189</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38155 (get_page_of_comment filter can't be used in some cases because has not ...) created</title>
      
        <dc:creator>zhildzik</dc:creator>

      <pubDate>Sat, 24 Sep 2016 21:26:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38155</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38155/1474752385961847</guid>
      <description>&lt;p&gt;
In WP 4.6.1: wp-includes/comment.php line 969:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'get_page_of_comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$original_args&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
This filter has no parameter comment_ID so it's impossible to get comment and calculate page outside of Wordpress get_page_of_comment function. It's possible to pass comment_ID parameter in $args when calling get_page_of_comment function but when this function called from Wordpress core function, it's impossible to get current comment.
&lt;/p&gt;
&lt;p&gt;
For example, if we use get_comment_link() function, it's impossible to override result of get_page_of_comment() which called from get_comment_link().
&lt;/p&gt;
&lt;p&gt;
Example:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get_page_of_comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'theme_reverse_page_comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$recent_comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'orderby'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'comment_date'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'order'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'DESC'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'status'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'approve'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s1"&gt;'number'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$recent_comments&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$rc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_comment_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$recent_comment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;theme_reverse_page_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$original_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// hook triggered from get_page_of_comment() function called in get_comment_link()
&lt;/span&gt;
  &lt;span class="c1"&gt;// in this function - $recent_comment or ID of comment passed to get_comment_link() isn't available
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #37516 (Site title and tagline: allow ability to hide each independently) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 24 Sep 2016 20:05:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37516#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37516#comment:4/1474747501542237</guid>
      <description>&lt;p&gt;
My favorite thing is when I go to make a ticket and @karmatosed has already made it. :)
&lt;/p&gt;
&lt;p&gt;
I tried out both checkboxes and having a hide/show for each. Checkboxes are definitely more straightforward and intuitive, but the show/hide version isn't &lt;em&gt;terrible&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
Regardless, I love this idea — the introduction of logos means I often want a logo in place of a site title, but I still want a tagline.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>title-tagline-2.jpg attached to Ticket #37516</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 24 Sep 2016 20:02:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-2.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-2.jpg/1474747369324270</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>title-tagline-1.jpg attached to Ticket #37516</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sat, 24 Sep 2016 20:02:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-1.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37516/title-tagline-1.jpg/1474747323453702</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38154 (my wordpress platform is missing the editor : it only shows editor for css) updated</title>
      
        <dc:creator>rm2773</dc:creator>

      <pubDate>Sat, 24 Sep 2016 19:59:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38154#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38154#comment:1/1474747154804282</guid>
      <description>&lt;p&gt;
Hi Kimbert, I never like to leave a stone un-turned.
&lt;/p&gt;
&lt;p&gt;
Are you sure that you have administrator capability in your user profile?
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38154" title="#38154: defect (bug): my wordpress platform is missing the editor : it only shows editor for css (closed: invalid)"&gt;Kimbert&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
on my dashboard I cannot see the editor for my files.  It only says editor css.
&lt;/p&gt;
&lt;p&gt;
I have deactivated all plugins and reinstalled the latest wp but nothing changes this.
&lt;/p&gt;
&lt;p&gt;
is this the file I should be looking at?
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
includes/class-pclzip.php
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
to correct this bug?
&lt;/p&gt;
&lt;p&gt;
tx
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37276 (tax_query with field=name doesn't work if the term contains an apostrophe) updated</title>
      
        <dc:creator>elrae</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:38:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37276#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37276#comment:8/1474738699357408</guid>
      <description>&lt;p&gt;
Thanks for the reference boone. Unfortunately my schedule has been crazy packed the last few months. If I get some time in the next few weeks to add this test I definitely will, but if anyone else comes across this ticket and wants to hop in feel free.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38140 (Remove target="_blank" from help tab comment/comment-edit) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:29:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38140#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38140#comment:2/1474738182420614</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38141 (Remove target="_blank" from help tab custom-background/custom-header) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:29:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38141#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38141#comment:1/1474738155298306</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38143 (Remove target="_blank" from help tab option files for settings in the Admin) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:29:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38143#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38143#comment:1/1474738140069359</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38145 (Remove target="_blank" from help tab in several Admin screens) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 24 Sep 2016 17:28:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38145#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38145#comment:1/1474738127323129</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) updated</title>
      
        <dc:creator>ryankienstra</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:58:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021#comment:16/1474736293572691</guid>
      <description>&lt;p&gt;
&lt;strong&gt;New Pull Request To Avoid Merge Conflics&lt;/strong&gt;
&lt;em&gt;Also Removes IE8 Workarounds&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Development is now on a new &lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/157#discussion_r80343831"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;pull request&lt;/a&gt; and &lt;a class="ext-link" href="https://patch-diff.githubusercontent.com/raw/xwp/wordpress-develop/pull/157.diff"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;identical patch&lt;/a&gt;, to avoid merge conflicts.
&lt;/p&gt;
&lt;p&gt;
This also has commits to remove IE8 workarounds:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/157/commits/7448290e3df780337e1dfaddd0cb971e813750bf"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;74482&lt;/a&gt; : Customize - Deprecate function that's not needed without IE8 support.
Commit 2d583 removed Customizer support for IE8.
And this function is no longer needed.
So deprecate it, and remove the hook that calls it.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/xwp/wordpress-develop/pull/157/commits/76ea6b9d7a6588a21e770441ae9a015a8dc81679"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;76ea6&lt;/a&gt; : Customize - Remove IE8 polyfill in Selective Refresh.
The Customizer no longer supports IE8.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38017 (Add widget instance to remaining widget argument filters) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:25:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38017#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38017#comment:2/1474734323443925</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@Takahashi_Fumiki Thanks for the patch. Let's also add &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/php/#since-section-changelogs"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;changelog&lt;/a&gt; entries for the new parameters added to all of these hooks.
&lt;/p&gt;
&lt;p&gt;
Assigning to mark the &lt;em&gt;good-first-bug&lt;/em&gt; as "claimed".
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34335 (URL shorteners ( redirects) should to be supported by the embed ...) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:21:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34335#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34335#comment:14/1474734110873882</guid>
      <description>&lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22744 (Media search doesn't include file name) reopened</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 16:09:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22744#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22744#comment:49/1474733393554298</guid>
      <description>&lt;p&gt;
I noticed a bug introduced by the above changeset: The JOIN clause of the query is completely overridden by &lt;code&gt;_filter_query_attachment_filenames()&lt;/code&gt;, regardless of whether other joins were already included. This can break several queries. We need to make sure that original joins are preserved.
&lt;/p&gt;
&lt;p&gt;
I stumbled across this while querying attachment taxonomies. :)
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>TJNowell</dc:creator>

      <pubDate>Sat, 24 Sep 2016 15:26:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:218</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:218/1474730780788942</guid>
      <description>&lt;p&gt;
I believe I've been misinterpreted by both sides regarding performance. It's not wether autoloader X or autoloader Y is faster. It's wether autoloading vs no autoloading is faster.
&lt;/p&gt;
&lt;p&gt;
Right now, with no optimisations autoloading slows down WordPress due to the greater number of files being loaded. It's a small difference but we won't get an autoloader if it slows down core. We need to demonstrate with hard facts that an improvement is possible. Right now all we have is theoretical, and a number of senior developers have already chimed in with that's not good enough.
&lt;/p&gt;
&lt;p&gt;
I'd also like to raise some questions:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I don't understand why we need to rearrange most of core, this sounds like a recipe for disaster and failed auto-updates. It screams fragile
&lt;/li&gt;&lt;li&gt;I don't see why we need to rename our files, the part were we find the classes and their filenames is meant to happen at buildtime, it's just a PHP array &lt;code&gt;'class' =&amp;gt; 'filename'&lt;/code&gt;, why overcomplicate things?
&lt;/li&gt;&lt;li&gt;There may be things we don't want to autoload that are always loaded, or too critical to let a plugin override
&lt;/li&gt;&lt;li&gt;Nobody has ruled out the composer autoloader, discussion on wether it should be used is premature as the case for an autoloader has not been made
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
As for benchmarks, install Query Monitor and run a vanilla install with and without these changes, and measure 10 common page loads 10 times. That should give crude timings. Better yet use a cli tool
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37843 (`http_api_curl` hook no longer available for adding custom cURL options) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 24 Sep 2016 15:01:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37843#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37843#comment:14/1474729291569511</guid>
      <description>&lt;p&gt;
@jaredh123 Whoops, forgot to include that change in my patch. Updated in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37843/37843.2.diff" title="Attachment '37843.2.diff' in Ticket #37843"&gt;37843.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37843/37843.2.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37843.2.diff attached to Ticket #37843</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 24 Sep 2016 14:59:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37843/37843.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37843/37843.2.diff/1474729192079662</guid>
      <description>&lt;p&gt;
Updated instantiation with params
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Screen Shot 2016-09-24 at 4.41.30 PM.png attached to Ticket #38154</title>
      
        <dc:creator>Kimbert</dc:creator>

      <pubDate>Sat, 24 Sep 2016 14:44:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38154/Screen%20Shot%202016-09-24%20at%204.41.30%20PM.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38154/Screen%20Shot%202016-09-24%20at%204.41.30%20PM.png/1474728253410567</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38154 (my wordpress platform is missing the editor : it only shows editor for css) created</title>
      
        <dc:creator>Kimbert</dc:creator>

      <pubDate>Sat, 24 Sep 2016 14:43:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38154</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38154/1474728226788918</guid>
      <description>&lt;p&gt;
on my dashboard I cannot see the editor for my files.  It only says editor css.
&lt;/p&gt;
&lt;p&gt;
I have deactivated all plugins and reinstalled the latest wp but nothing changes this.
&lt;/p&gt;
&lt;p&gt;
is this the file I should be looking at?
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
includes/class-pclzip.php
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
to correct this bug?
&lt;/p&gt;
&lt;p&gt;
tx
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 13:58:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:217</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:217/1474725510502144</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:202" title="Comment 202"&gt;TJNowell&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm also concerned that the generation code relies on global variables and isn't very testable, it wouldn't be possible to write an easy unit test.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Since you mentioned this, you can see a more production ready version in &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/pull/2/commits/42684498b0fc17c3e4d2c7b8119661aba087c444"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this PR&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37772 (Not working "wp_default_styles" on PHP 7.1.0) updated</title>
      
        <dc:creator>hoang2016</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:45:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37772#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37772#comment:11/1474721100279708</guid>
      <description>&lt;p&gt;
WP 7 working fine on PHP 7.1.0 RC2 for me
&lt;/p&gt;
&lt;p&gt;
tip: just simply following the instruction "&lt;a class="ext-link" href="https://codex.wordpress.org/WordPress_Backups"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/WordPress_Backups&lt;/a&gt;" and "&lt;a class="ext-link" href="https://codex.wordpress.org/Updating_WordPress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/Updating_WordPress&lt;/a&gt;"
&lt;/p&gt;
&lt;p&gt;
then re-activate one by one plug in that you have. Deactivate the one which given an error
&lt;/p&gt;
&lt;p&gt;
have fun with new generation of innovative WP.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:26:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:46</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:46/1474719970347233</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:45" title="Comment 45"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think the naming can be improved. Maybe &lt;code&gt;WP_Scripts::add_json_localization()&lt;/code&gt; or &lt;code&gt;WP_Scripts::localize_with_json()&lt;/code&gt; for &lt;code&gt;WP_Scripts::load_translation_file()&lt;/code&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I had a hard time thinking of a good name, so +1. I'll move forward with &lt;code&gt;WP_Scripts::add_json_localization()&lt;/code&gt; for the time being, unless we come up with something better.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm not a fan of the loop in &lt;code&gt;get_js_i18n_data()&lt;/code&gt;. &lt;code&gt;WP_LANG_DIR &lt;/code&gt; should only be checked if &lt;code&gt;$domain&lt;/code&gt; is 'default'. Can we require that a path needs to be set: &lt;code&gt;get_js_i18n_data( $domain, $path )&lt;/code&gt;? Or a &lt;code&gt;$context&lt;/code&gt; which can be [core|theme|plugin]?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;code&gt;$context&lt;/code&gt; sounds interesting. The alternative is to make it more like &lt;code&gt;load_*_textdomain()&lt;/code&gt; with a different function per context.
&lt;/p&gt;
&lt;p&gt;
Idea that came to mind right now: Assuming the MO files are already loaded, we could probably get the path to the MO file from &lt;code&gt;$l10n[ $domain ]&lt;/code&gt; and derive the JSON file from there.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I noticed that &lt;code&gt;escape()&lt;/code&gt; still uses &lt;code&gt;_.keys()&lt;/code&gt; which is an Underscore function.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Good catch. I thought I had removed all underscore leftovers in the latest patch. Will fix in the next one.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Regarding &lt;code&gt;sprintf()&lt;/code&gt;, this patch also removes &lt;code&gt;wp.i18n.sprintf&lt;/code&gt; as Jed's implementation is really out of date. Jed even encourages removing it from its source code:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1, although it seems like Jed uses it at least once in line 147.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah I saw that too, although that line looks irrelevant for our use case. See &lt;a class="ext-link" href="https://github.com/SlexAxton/Jed/pull/46"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/SlexAxton/Jed/pull/46&lt;/a&gt; and &lt;a class="ext-link" href="https://github.com/SlexAxton/Jed/pull/47"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/SlexAxton/Jed/pull/47&lt;/a&gt; for more information about how Jed's version of &lt;code&gt;sprintf()&lt;/code&gt; is different. Keeping the &lt;code&gt;sprintf()&lt;/code&gt; part would make it easier to maintain.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:20:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:4/1474719600792297</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38014 (blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ...) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:18:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38014#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38014#comment:10/1474719530629495</guid>
      <description>&lt;p&gt;
Does someone have a test site with a clean install where the same error exists? I'd like to have a look, please DM me ("ocean90") on &lt;a class="ext-link" href="https://chat.wordpress.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:15:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:3/1474719352000140</guid>
      <description>&lt;p&gt;
For example, updates.js contains the following line:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;l10n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatingLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20491" title="#20491: enhancement: Introduce some JavaScript i18n functions (closed: fixed)"&gt;#20491&lt;/a&gt; allows us to improve this a bit:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Updating %s...'&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
However, this only really works well when there's a single placeholder to replace. It gets more complicated with additional placeholders and as soon as you want to deal with plurals in JavaScript (see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/22229" title="#22229: enhancement: Plurals in JavaScript (closed: duplicate)"&gt;#22229&lt;/a&gt;). Using &lt;code&gt;sprintf()&lt;/code&gt;, which WordPress devs are much more familiar with, would greatly improve readability and flexibility of the code, especially when dealing with translations.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/20491/20491-applied.diff" title="Attachment '20491-applied.diff' in Ticket #20491"&gt;20491-applied.diff:ticket:20491&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/20491/20491-applied.diff" title="Download"&gt;​&lt;/a&gt; is a proof-of-concept that shows various places where &lt;code&gt;sprintf()&lt;/code&gt; in JS could be used in core. For the above example, it would look like this:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Updating %s...'&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
With more and more plugins focusing on JavaScript-heavy admin interfaces, such utility functions become more important. By bundling this library with core, plugins do not have to enqueue it on their own — perhaps even multiple times — and core can benefit from it as well.
&lt;/p&gt;
&lt;p&gt;
It's worth noting that Jed.js, being suggested for inclusion in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20491" title="#20491: enhancement: Introduce some JavaScript i18n functions (closed: fixed)"&gt;#20491&lt;/a&gt;, bundles a modified version of sprintf.js inline, but it's woefully out of date and not used in the current patch and thus not exposed to the global scope.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #38014,​38153 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:13:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=38014%2C38153</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=38014%2C38153/1474719222728573</guid>
      <description>duplicate: &lt;p&gt;
Hello @mikeatdatafault, welcome to Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for your report, we're already tracking this issue in &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/38014" title="#38014: defect (bug): blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ... (reopened)"&gt;#38014&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #38153 (/wp-admin/index.php  wp 4.6.1 not displaying admin home page) created</title>
      
        <dc:creator>mikeatdatafault</dc:creator>

      <pubDate>Sat, 24 Sep 2016 12:05:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38153</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38153/1474718710093220</guid>
      <description>&lt;p&gt;
I am not able to access the page /wp-admin/index.php  -- resulting in only the "white screen of death"
&lt;/p&gt;
&lt;p&gt;
I have done the following to verify that this is not a local issue:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Increased memory limit
&lt;/li&gt;&lt;li&gt;Increased PCRE limits
&lt;/li&gt;&lt;li&gt;enabled error logging/verbose messages
&lt;/li&gt;&lt;li&gt;Installed a completely fresh version of wordpress with default theme/plugins on new Database in new directory under a new virtual host
&lt;/li&gt;&lt;li&gt;Installing an earlier version of wordpress (4.5.4) which solves the issue
&lt;/li&gt;&lt;li&gt;Testing from multiple devices
&lt;/li&gt;&lt;li&gt; Disabling mod_security for that vhost
&lt;/li&gt;&lt;/ol&gt;&lt;hr /&gt;
&lt;p&gt;
Steps to reproduce:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;from shell:
&lt;ul&gt;&lt;li&gt;adduser 'testuser'
&lt;/li&gt;&lt;li&gt;add entry into vhosts.conf  (apache configuration)
&lt;/li&gt;&lt;li&gt;update DNS server for new site
&lt;/li&gt;&lt;li&gt;download Wordpress 4.6.1 from the website
&lt;/li&gt;&lt;li&gt;upload to FTP
&lt;/li&gt;&lt;li&gt;unzip  to ~/wordpress/
&lt;/li&gt;&lt;li&gt;mv  ~/wordpress/* ~/
&lt;/li&gt;&lt;li&gt;copy the wp-config-sample.php to wp-config.php
&lt;/li&gt;&lt;li&gt;log into mysql create db/user/grant permissions
&lt;/li&gt;&lt;li&gt;enter necessary information into wp-config.php
&lt;/li&gt;&lt;li&gt;install wp successfully
&lt;/li&gt;&lt;li&gt;log in with  supplied username/password
&lt;/li&gt;&lt;li&gt; redirects to  /wp-admin/
&lt;/li&gt;&lt;li&gt;results in a blank page (no errors on any log files or on screen)
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Response from Server:
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
  "log": {
    "version": "1.1",
    "creator": {
      "name": "Firefox",
      "version": "47.0.1"
    },
    "browser": {
      "name": "Firefox",
      "version": "47.0.1"
    },
    "pages": [
      {
        "startedDateTime": "2016-09-24T04:55:20.515-07:00",
        "id": "page_1",
        "title": "http://td.datafault.net/wp-admin/",
        "pageTimings": {
          "onContentLoad": -1,
          "onLoad": -1
        }
      }
    ],
    "entries": [
      {
        "pageref": "page_1",
        "startedDateTime": "2016-09-24T04:55:20.515-07:00",
        "time": 331,
        "request": {
          "bodySize": 0,
          "method": "GET",
          "url": "http://td.datafault.net/wp-admin/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "td.datafault.net"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.5"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Referer",
              "value": "http://td.datafault.net/wp-login.php"
            },
            {
              "name": "Cookie",
              "value": ""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            }
          ],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.2.1381971762.1474703226"
            },
            {
              "name": "wordpress_4f17dc05329014159271b6238bf5fc89",
              "value": ""
            },
            {
              "name": "wordpress_logged_in_4f17dc05329014159271b6238bf5fc89",
              "value": ""
            },
            {
              "name": "wordpress_test_cookie",
              "value": "WP+Cookie+check"
            }
          ],
          "queryString": [],
          "postData": {
            "mimeType": "",
            "params": [],
            "text": ""
          },
          "headersSize": 857
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "no-cache, must-revalidate, max-age=0"
            },
            {
              "name": "Connection",
              "value": "Keep-Alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Content-Type",
              "value": "x-http-php"
            },
            {
              "name": "Date",
              "value": "Sat, 24 Sep 2016 11:46:13 GMT"
            },
            {
              "name": "Expires",
              "value": "Wed, 11 Jan 1984 05:00:00 GMT"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5, max=100"
            },
            {
              "name": "Server",
              "value": "Apache/2.4.12 (Unix) OpenSSL/1.0.1e"
            },
            {
              "name": "X-Frame-Options",
              "value": "SAMEORIGIN"
            }
          ],
          "cookies": [],
          "content": {
            "mimeType": "text/plain",
            "size": 0,
            "text": ""
          },
          "redirectURL": "",
          "headersSize": 324,
          "bodySize": -1
        },
        "cache": {},
        "timings": {
          "blocked": 0,
          "dns": 0,
          "connect": 5,
          "send": 0,
          "wait": 326,
          "receive": 0
        },
        "serverIPAddress": "10.0.0.4",
        "connection": "80"
      }
    ]
  }
}
&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;All other pages work fine as far as I can tell
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sat, 24 Sep 2016 11:05:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:10/1474715119143134</guid>
      <description>&lt;p&gt;
Indeed, and nothing stops you just writing the shortcode yourself: go to media library, identify object ID, insert shortcode manually in text editor.
&lt;/p&gt;
&lt;p&gt;
For images, I think this method would provide an even cleaner and more flexible method for dealing with image substitution (e.g. for responsive designs, use of CDN and so on).
&lt;/p&gt;
&lt;p&gt;
Only question for me is whether this should use a standard "shortcode" or whether a new/private facility should be created so that it is clearly a separate function.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Sat, 24 Sep 2016 11:01:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:9/1474714876646544</guid>
      <description>&lt;p&gt;
Oh, ok... Now I get what you're saying. I misunderstood your comment above.
But still... Not everyone uses TinyMCE. I know I don't... I just go to the media library, get the URL of the image I want to use, and then write my own markup in the text editor.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:56:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:8/1474714585900060</guid>
      <description>&lt;p&gt;
Why would you need to change the database schema?  Wouldn't the following work:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;New option in TinyMCE to "insert reference to internal content", perhaps showing a popup/filterable list of items; when selected insert shortcode to reference the appropriate database object.
&lt;/li&gt;&lt;li&gt;New shortcode to expand reference to database object to URL.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
No backwards compatibility issues. Current content is unaffected. Users can still insert and edit URLs if they want.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>aristath</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:45:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:7/1474713944389194</guid>
      <description>&lt;p&gt;
@mdgl that would require significantly refactoring parts of WordPress Core... and would most probably cause backwards-compatibility issues. You'd need a mechanism to store those object references, another one to retrieve them ,expand them and so on. There a re a bunch of plugins out there that query the database directly, so all those would probably break if we change the schema.
The current implementation is battle-tested and just works. All it needs in my opinion is just a couple of tweaks...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>mdgl</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:34:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:6/1474713250535813</guid>
      <description>&lt;p&gt;
Thinking more radically, why do we store explicit URLs that reference other WordPress managed content in any case? Shouldn't these be expanded dynamically as we generate the page, for example if we stored something like a shortcode in the database &lt;code&gt;[objref id="2392"]&lt;/code&gt;? This would allow us to deal with the http(s) issue, enable users to change slugs/permalinks as they wish and create great filtering opportunities for developers.  Of course you would still need to be able to insert absolute URLs if you want for references to external sites and other special cases.  In my view, a clear distinction between such "internal" and "external" links would be quite helpful.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37873 (Consolidate customizer CSS) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sat, 24 Sep 2016 10:22:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37873#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37873#comment:5/1474712552903850</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37873#comment:4" title="Comment 4"&gt;celloexpressions&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Thanks for volunteering to take this on @mrahmadawais!
I think the first step is to research duplication of styles and duplication of selectors, and to evaluate the potential areas where things could be consolidated. We're probably best off adding any new common classes as opposed to removing any, to avoid JS issues and minimize back-compat concerns.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Makes sense.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Any changes will have compatibility implications due to the ability to extend the core UI with custom panels, sections, and controls. In general, we should move away from the &lt;code&gt;accordion-&lt;/code&gt; classes as those are from UI that is no longer used.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Let me look into it.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I believe that &lt;code&gt;customize-nav-menus.css&lt;/code&gt; was largely duplicated from &lt;code&gt;customize-widgets.css&lt;/code&gt; and intended to all be merged into &lt;code&gt;customize-controls.css&lt;/code&gt; when the menu customizer plugin merged, but that didn't happen with all of the other work that was ongoing at that time.
There are also numerous pending patches that would be impacted by these changes. Depending on how much we want to clean up, it may be best to work on an actual patch during 4.7 RC and commit early for 4.8.
Also, previously and related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/30618" title="#30618: enhancement: Clean up Customizer Media Control CSS (closed: fixed)"&gt;#30618&lt;/a&gt;, &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/36733" title="#36733: enhancement: Use a custom customizer section for add-widgets and add-menu-items ... (new)"&gt;#36733&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/30713" title="#30713: enhancement: Customizer control subclasses (custom controls) should have all parent ... (closed: maybelater)"&gt;#30713&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think early 4.8 would make a lot more sense. But I will slowly start looking into it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>ThemeZee</dc:creator>

      <pubDate>Sat, 24 Sep 2016 09:35:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:39</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:39/1474709701694891</guid>
      <description>&lt;p&gt;
I would like to add my perspective as a theme author here.
&lt;/p&gt;
&lt;p&gt;
I agree that the Theme Editor is bad for users. I wish it would be removed. Users should not be able to edit PHP files, because they can easily break their sites.
&lt;/p&gt;
&lt;p&gt;
But I'm a really huge fan of adding a CSS Editor to the Customizer. I support my themes via email, wordpress.org forums and wordpress.com forums. I often provide CSS snippets as long as it is only some small visual customizations the user wants. I think WordPress users get in contact with CSS all the time, because we as developers often provide them with CSS code. Just look at the forums.
&lt;/p&gt;
&lt;p&gt;
Now a lot of themes include Custom CSS settings in their themes. There are also several very popular plugins for these. For me this only means that many users need this feature. A Core solution could improve the UI for users, because the CSS options are always at the same location. It will also handle sanitization and security much better than all the custom implementations in themes.
&lt;/p&gt;
&lt;p&gt;
WordPress.com gives users the possibility to add CSS code in the Customizer: &lt;a class="ext-link" href="https://en.support.wordpress.com/custom-design/editing-css/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://en.support.wordpress.com/custom-design/editing-css/&lt;/a&gt;
I think they should have some real user data that CSS options in the Customizer work well for users.
&lt;/p&gt;
&lt;p&gt;
I do not agree that users should not make CSS customizations. They can not break anything here like with the Theme Editor. The WordPress Backend will always work fine, and if they do not like their customizations they can always remove the CSS code.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>tfrommen</dc:creator>

      <pubDate>Sat, 24 Sep 2016 09:02:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:62</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:62/1474707775019151</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:61" title="Comment 61"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Something I missed to mention earlier: There is an issue with functions like &lt;code&gt;get_post_type_labels()&lt;/code&gt;/&lt;code&gt;_get_custom_object_labels()&lt;/code&gt;. Post type labels are initially registered via &lt;code&gt;register_post_type()&lt;/code&gt; which means they don't change when calling &lt;code&gt;switch_to_locale()&lt;/code&gt;. You can see that with &lt;a href="https://core.trac.wordpress.org/attachment/ticket/29783/user-language-admin-toolbar.php"&gt;the example plugin&lt;/a&gt; in the Add New menu for the Post and Page items.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There are even more issues, for example, when you have a Custom Post Type or Custom Taxonomy registered by using a translated slug. When you switch to a different locale, the rewrite rules (and thus the generated permalinks) do &lt;strong&gt;not&lt;/strong&gt; get adapted.
&lt;/p&gt;
&lt;p&gt;
The question is if coping with these things should be handled by the locale switcher, or not.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:51:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:61</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:61/1474707093444424</guid>
      <description>&lt;p&gt;
Something I missed to mention earlier: There is an issue with functions like &lt;code&gt;get_post_type_labels()&lt;/code&gt;/&lt;code&gt;_get_custom_object_labels()&lt;/code&gt;. Post type labels are initially registered via &lt;code&gt;register_post_type()&lt;/code&gt; which means they don't change when calling &lt;code&gt;switch_to_locale()&lt;/code&gt;. You can see that with &lt;a href="https://core.trac.wordpress.org/attachment/ticket/29783/user-language-admin-toolbar.php"&gt;the example plugin&lt;/a&gt; in the Add New menu for the Post and Page items.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:43:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:60</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:60/1474706614604457</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/26511#comment:58" title="Comment 58"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
No. I mainly created that ticket to keep discussions off from this one, but it's good to know where discussion is heading to make this class more future proof. The only thing I would rename at the moment is &lt;code&gt;restore_previous_locale()&lt;/code&gt; to &lt;code&gt;restore_current_locale()&lt;/code&gt; because of &lt;code&gt;restore_current_blog()&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not sure if we really have to be consistent with a naming which is semantically incorrect. But maybe we can provide both functions? &lt;code&gt;restore_current_locale()&lt;/code&gt; would empty the stack and set the locale to &lt;code&gt;$original_locale&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/26511/26511.5.diff" title="Attachment '26511.5.diff' in Ticket #26511"&gt;26511.5.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/26511/26511.5.diff" title="Download"&gt;​&lt;/a&gt; I removed the &lt;code&gt;get_user_locale()&lt;/code&gt; check (which had no test btw!) and improved the docs as well.
&lt;/p&gt;
&lt;p&gt;
I feel like the &lt;code&gt;add_filter()&lt;/code&gt; call should be moved outside the constructor. Any ideas?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Can't we move it to &lt;code&gt;default-filters.php&lt;/code&gt; as &lt;code&gt;add_filter( 'locale', array( $GLOBALS['wp_locale_switcher'], 'filter_locale' );&lt;/code&gt;? Or a simple &lt;code&gt;init()&lt;/code&gt; method which gets called in &lt;code&gt;wp-settings.php&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38150 (Stop using dashicons to show checked state of checkboxes) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:25:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38150#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38150#comment:1/1474705557236696</guid>
      <description>&lt;p&gt;
Context: &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design-dashicons/p1474658281000116"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.slack.com/archives/design-dashicons/p1474658281000116&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38152 (Clarify in the DocBlock that get_site_by_path() does not return exact ...) created</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:23:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38152</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38152/1474705422581622</guid>
      <description>&lt;p&gt;
Related Slack discussion: &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-multisite/p1474390310000390"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.slack.com/archives/core-multisite/p1474390310000390&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;get_site_by_path()&lt;/code&gt; does not return exact matches because it also searches sites with path = '/'. The same applies to &lt;code&gt;WP_Network::get_by_path()&lt;/code&gt;  but &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/class-wp-network.php?rev=37919&amp;amp;marks=253-258#L250"&gt;its DocBlock&lt;/a&gt; is much better. We should add a similar comment to &lt;code&gt;get_site_by_path()&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 08:02:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:216</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:216/1474704151265704</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:212" title="Comment 212"&gt;wonderboymusic&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
move any discussion to PRs over here - here is the present code diff:
&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you want to contribute code, send a PR with a novella of opinions. this ticket is losing its usefulness.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I would have added an issue to your Git repo but issues are turned off.  Sooo...
&lt;/p&gt;
&lt;p&gt;
How would you prefer to see a build script added to Grunt?  Can you call a PHP script, or does it need to be written in Javascript? &lt;em&gt;(I have not previously used Grunt as other people on our team handle front-end build.)&lt;/em&gt;  Any direction on your preferences would be appreciated.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:23:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:215</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:215/1474701793374323</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:210" title="Comment 210"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:207" title="Comment 207"&gt;schlessera&lt;/a&gt;:
&lt;strong&gt;Generating classmaps is trivial.&lt;/strong&gt;  My ~50 line classmap generator proof-of-concept that was included in my huge patch illustrates this.
So we can please refrain from using &lt;em&gt;"Composer can generate a classmap"&lt;/em&gt; as a reason to use Compser and instead move on to focus on any other potential benefits Composer can provide that I am evidently missing?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Well, you went ahead and renamed all of the class files just to make this possible (or better: to make coding your generator trivial).
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But not without having to using &lt;code&gt;is_file()&lt;/code&gt; a lot. Or are you suggesting that we go ahead and accept that it will &lt;strong&gt;always&lt;/strong&gt; be classmap based?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You can use whatever you want. The generated autoloader "is one or more arbitrary PHP file(s) that we let it generate". Whether you want to have &lt;code&gt;is_file()&lt;/code&gt; or not, whether you want to have unicorn ASCIIs in it, all possible!
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
My statement about staleness is now moot since nobody has taken any action on it.  So I have decide to move forward with a much more incremental approach, hence my numerous comments and additional planned comments today.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, exactly, but that is a very obvious and logical result. We are talking about a major paradigm shift here, this won't be done in a handful of days...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So that seems to me to be a very small benefit for all the intensity of debate.  Generating a classmap is almost trivial, as I have demonstrated.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, you demonstrated the contrary. You needed to refactor the entire codebase to get your generation working and your update went stale and useless in a matter of days.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But the autoloader generated by Composer will need to be modified as as Ryan McCue &lt;a href="https://core.trac.wordpress.org/ticket/36335?replyto=207#comment:180"&gt;points out&lt;/a&gt;.  Thus we really get no &lt;em&gt;"it just works"&lt;/em&gt; benefit from using the Composer autoloader and we get the overhead that it generates too.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, we modify the generator to generate the exact autoloader we need. That work is already done, btw (or at least the parts we could already agree on): &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/pull/1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/pull/1&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Then why don't we just debate the specific pros and cons of naming conventions -- as I was proposing we debate -- instead of getting back on the Composer soapbox right now?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because the ticket is about the autoloader, not about the coding standards.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
One of the benefits of having files named for their class is that it makes it performant to load the classmap dynamically, as would likely be the case for files in &lt;code&gt;/wp-content/&lt;/code&gt;.  Being able to scan a directory and grab the filenames as classnames means their is no potential breaking ambiguity in the conversion of the classname.
That said, I don't consider the file naming part critical, just a nice-to-have I would prefer that we adopt.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, totally agree, but completely irrelevant and unnecessary right now. We can generate whatever autoloader we need.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;What I do consider critical is that we stop having circular debates and move things forward&lt;/strong&gt; by finding things we can work on that do not require resolving the Composer debate, and that get us closer to seeing an autoloader included, no matter which autoloader it is.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We were already moving forward, and most of the work is done already in the GitHub repo for the feature project: &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/tree/autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/tree/autoloader&lt;/a&gt; . People agreed that it is too early to use Composer as a dependency manager, but they also agreed to use it as a build-time tool to simplify building an autoloader and keeping everything in sync. This is done in a feature project.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think you keep saying this has an advantage but from my vista is seems all those proposed advantages have turned out to not be real advantages.  If the main benefit is to save time then in the time we've debated this we could do that work you are trying to bypass three times over, and do a much better job.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We are actively working on this, in the GitHub repo. This was decided in a Slack meeting.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But even if we could, why work with a tool that writes code -- a tool that you have to work to tweak -- when the code is trivial to write by hand?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because you end up with a stale autoloader that does not notice that classes have changed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As an aside, you cannot generate this &lt;strong&gt;exact same&lt;/strong&gt; autoloader with Composer.  But I digress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, I can. Composer passes a list of classes, you then run it through whatever you want to generate a PHP file. Heck, you could even generate an animated GIF of your classes if you so want...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;And I don't see how Composer is preferable either, so let us first focus on what we can move forward, okay?&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, I'll just stop discussing here and continue working on the feature project. If you still want to try persuading people to move to something else, I'm fine with it, but I will (try to) not proceed further with this specific discussion.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:11:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:214</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:214/1474701062069851</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:07:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:213</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:213/1474700861520657</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:212" title="Comment 212"&gt;wonderboymusic&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
move any discussion to PRs over here - here is the present code diff:
&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you want to contribute code, send a PR with a novella of opinions. this ticket is losing its usefulness.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Perfect.
&lt;/p&gt;
&lt;p&gt;
To clarify; to which should we submit PRs to?
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress&lt;/a&gt; OR
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
And thanks.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>wonderboymusic</dc:creator>

      <pubDate>Sat, 24 Sep 2016 07:04:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:212</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:212/1474700666879598</guid>
      <description>&lt;p&gt;
move any discussion to PRs over here - here is the present code diff:
&lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/aaronjorbin/develop.wordpress/compare/master...staylor:autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you want to contribute code, send a PR with a novella of opinions. this ticket is losing its usefulness.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 06:46:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:211</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:211/1474699598254697</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:209" title="Comment 209"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
But if we ... start to discuss implementation details, file naming conventions, folder layout, etc... we will just end up with a "spaces-vs-tabs" debate and this will go nowhere.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Will we really?  My opinions will be driven by the factual benefits of any given approach. Hopefully others will do the same. Or said another way, I don't really care about what they are as long as they empower autoloading and ideally dynamic discovery.
&lt;/p&gt;
&lt;p&gt;
That said, the file naming conventions, folder layout are not super important &lt;strong&gt;other than that we have something&lt;/strong&gt; so that we can refactor the existing classes to make them autoloadable.  We can always change the file naming conventions folder layouts before code is shipped.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I have my own ideas about what layout and naming schemes would make sense for WordPress. But this ticket is complicated enough as it is, we don't need to add more factors.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Then please tell me what your proposal is to move things forward to address the things we all can agree on?
&lt;/p&gt;
&lt;p&gt;
Without a viable alternative or condemnation from the core contributors here the best thing to do is move forward and start creating patches because actual code is more actionable than circular debates.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 06:35:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:210</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:210/1474698931794940</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:207" title="Comment 207"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Composer Autoloader Generator parses the actual PHP in the files to discover the classes. It doesn't care about the filenames, it manages several classes in one file, etc...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Generating classmaps is trivial.&lt;/strong&gt;  My ~50 line classmap generator proof-of-concept that was included in my huge patch illustrates this.
&lt;/p&gt;
&lt;p&gt;
So we can please refrain from using &lt;em&gt;"Composer can generate a classmap"&lt;/em&gt; as a reason to use Compser and instead move on to focus on any other potential benefits Composer can provide that I am evidently missing?
&lt;/p&gt;
&lt;p&gt;
Wait. Strike that.  &lt;em&gt;Can we just table Composer-or-Not for now and work on moving anything else can we move foward?&lt;strong&gt;
&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The resulting autoloader that is built from that parse step can be completely customized to whatever we think is best. We can include any special WP cases, we can optimizie how we want, etc...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
But not without having to using &lt;code&gt;is_file()&lt;/code&gt; a lot. Or are you suggesting that we go ahead and accept that it will &lt;strong&gt;always&lt;/strong&gt; be classmap based?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...this is the exact reason why I initially proposed to use Composer as a build-time tool in the first place.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My statement about staleness is now moot since nobody has taken any action on it.  So I have decide to move forward with a much more incremental approach, hence my numerous comments and additional planned comments today.
&lt;/p&gt;
&lt;p&gt;
Instead I plan on offering patches that either won't be stale or will be generated via a shell script.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;We will not optimize the WordPress Core in one or two releases&lt;/strong&gt;, and I'm surprised you would think such a thing to be feasible.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And I am surprised that you think it is such an overwhelming job. Sure, to get it to 100% will take a while.  But based on the analysis I have been doing &lt;strong&gt;I see no reason why we can't get to 80% in short order.&lt;/strong&gt;  The only thing holding us back is will and needless bikeshedding.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The goal with using Composer Autoloader Generator as a build-time tool was always to just have a very quick, first step to make autoloading even possible, to get to the real problem: needing to shuffle classes, files and folders around for several releases to optimize the Core for autoloading.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So that seems to me to be a very small benefit for all the intensity of debate.  Generating a classmap is almost trivial, as I have demonstrated.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In the meantime, with every change, a simple re-run of the Grunt build will fix whatever you broke in the autoloader. And I've said it before: the actual autoloader that is generated by Composer can be freely adapted.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
But the autoloader generated by Composer will need to be modified as as Ryan McCue &lt;a href="https://core.trac.wordpress.org/ticket/36335?replyto=207#comment:180"&gt;points out&lt;/a&gt;.  Thus we really get no &lt;em&gt;"it just works"&lt;/em&gt; benefit from using the Composer autoloader and we get the overhead that it generates too.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So, that being said, I would be relieved if we could stop talking about how optimized a specific autoloader implementation is, as that is completely besides the point at this time. Also, we don't need to rename or move files at this point, Composer will just take care of it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Then why don't we just debate the specific pros and cons of naming conventions -- as I was proposing we debate -- instead of getting back on the Composer soapbox right now?
&lt;/p&gt;
&lt;p&gt;
One of the benefits of having files named for their class is that it makes it performant to load the classmap dynamically, as would likely be the case for files in &lt;code&gt;/wp-content/&lt;/code&gt;.  Being able to scan a directory and grab the filenames as classnames means their is no potential breaking ambiguity in the conversion of the classname.
&lt;/p&gt;
&lt;p&gt;
That said, I don't consider the file naming part critical, just a nice-to-have I would prefer that we adopt.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;What I do consider critical is that we stop having circular debates and move things forward&lt;/strong&gt; by finding things we can work on that do not require resolving the Composer debate, and that get us closer to seeing an autoloader included, no matter which autoloader it is.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/tree/autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/tree/autoloader&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is news to me, thanks.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;eliminates the advantage that initially brought us to Composer (hence your need to rename files and move stuff around),
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
I think you keep saying this has an advantage but from my vista is seems all those proposed advantages have turned out to not be real advantages.  If the main benefit is to save time then in the time we've debated this we could do that work you are trying to bypass three times over, and do a much better job.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Why debate a one-time process at the level of a fundamental architecture decision?&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;eliminates all other advantages that Composer would add in the future,
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Which is why I said &lt;strong&gt;let up bypass this Composer-or-Not and instead work on making core classes autoloadable&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
But since you bring it up again, as Ryan said I think this is a solution looking for a problem. So please detail your expected advantanges as they related to WordPress. This far all I have read is that Composer's advantages are &lt;em&gt;"because it is standard"&lt;/em&gt; and &lt;em&gt;"using is is a best practice"&lt;/em&gt;, but I have not read about any specific tangible benefits that using Composer with WordPress core would provide WordPress.
&lt;/p&gt;
&lt;p&gt;
No, wait.  That will only delay moving things forward.  But please do give those explanation later when the Composer-or-Not decision is back on the table.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;only seemingly adds one perceived advantage of its own (tightly optimized custom autoloader), which is not really an advantage, because you can generate this exact same autoloader with Composer Autoloader Generator.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
But even if we could, why work with a tool that writes code -- a tool that you have to work to tweak -- when the code is trivial to write by hand?
&lt;/p&gt;
&lt;p&gt;
As an aside, you cannot generate this &lt;strong&gt;exact same&lt;/strong&gt; autoloader with Composer.  But I digress.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Unless I'm missing something crucial, and don't see in what ways this solution would be preferable.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;And I don't see how Composer is preferable either, so let us first focus on what we can move forward, okay?&lt;/strong&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 24 Sep 2016 06:23:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:209</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:209/1474698194906141</guid>
      <description>&lt;p&gt;
@MikeSchinkel: I did not say that what you are discussing is not necessary. But if we now "side-step" the main question and start to discuss implementation details, file naming conventions, folder layout, etc... we will just end up with a "spaces-vs-tabs" debate and this will go nowhere.
&lt;/p&gt;
&lt;p&gt;
I have my own ideas about what layout and naming schemes would make sense for WordPress. But this ticket is complicated enough as it is, we don't need to add more factors.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:48:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:208</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:208/1474696123646070</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36335#comment:207" title="Comment 207"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@MikeSchinkel : I think you're completely derailing this ticket. If you want to discuss changing the WordPress Coding Style, or the WordPress folder layout, please do so in a new ticket.
Reading through the last handful of comments, it seems like I still wasn't able to fully communicate what Composer brings to the table.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Please re-read &lt;a href="http://core.trac.wordpress.org/ticket/36335?replyto=207#comment:204"&gt;comment #204&lt;/a&gt; where I said &lt;em&gt;(with added &lt;strong&gt;bold&lt;/strong&gt;):&lt;/em&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Thus far the big debate has been over "use a composer autoloader" vs. "use an autoloader optimized for WP" and that has been contentious.&lt;strong&gt; So let me suggest a different first step that I think that maybe all of us will see the need for&lt;/strong&gt; (or at least all of us that would like to see an autoloader built in to WP core.)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
Proposal: First discuss making core files autoloadable, and then divide and conquer to analyze the core files in need of changes? Some files will be very easy to make autoloadable whereas others will be require more finesse. &lt;em&gt;Because without making core files autoloadable the "which autoloader" question is moot.&lt;/em&gt; Why not go ahead and prepare patches to apply that are easy to apply and that we know will not break anything?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My latest tickets have tried to &lt;strong&gt;sidestep the debate&lt;/strong&gt; and work on things we'd need &lt;strong&gt;with or without&lt;/strong&gt; a Composer autoloader.  &lt;em&gt;So how is that derailing the ticket?!?&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:42:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:207</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:207/1474695736322726</guid>
      <description>&lt;p&gt;
@MikeSchinkel : I think you're completely derailing this ticket. If you want to discuss changing the WordPress Coding Style, or the WordPress folder layout, please do so in a new ticket.
&lt;/p&gt;
&lt;p&gt;
Reading through the last handful of comments, it seems like I still wasn't able to fully communicate what Composer brings to the table.
&lt;/p&gt;
&lt;p&gt;
When going with Composer, we don't buy into the Composer Autoloader, as the standard Composer Autoloader is unusable for WordPress. What we want is the &lt;strong&gt;Composer Autoloader Generator&lt;/strong&gt;. We want to add another tool to the build-time chain that let's us parse our current code base and create an autoloader adapted to our needs. The Composer Autoloader Generator parses the actual PHP in the files to discover the classes. It doesn't care about the filenames, it manages several classes in one file, etc...
&lt;/p&gt;
&lt;p&gt;
The resulting autoloader that is built from that parse step can be completely customized to whatever we think is best. We can include any special WP cases, we can optimizie how we want, etc...
&lt;/p&gt;
&lt;p&gt;
So, when you state above:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
but this patch will become stale pretty quickly so if we want to move forward with this we would be best to make a decision sooner than later otherwise most of the work I did will have to be redone again on a future version of WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
...this is the exact reason why I initially proposed to use Composer as a build-time tool in the first place. &lt;strong&gt;We will not optimize the WordPress Core in one or two releases&lt;/strong&gt;, and I'm surprised you would think such a thing to be feasible.
&lt;/p&gt;
&lt;p&gt;
The goal with using Composer Autoloader Generator as a build-time tool was always to just have a very quick, first step to make autoloading even possible, to get to the real problem: needing to shuffle classes, files and folders around for several releases to optimize the Core for autoloading. In the meantime, with every change, a simple re-run of the Grunt build will fix whatever you broke in the autoloader. And I've said it before: the actual autoloader that is generated by Composer can be freely adapted.
&lt;/p&gt;
&lt;p&gt;
So, that being said, I would be relieved if we could stop talking about how optimized a specific autoloader implementation is, as that is completely besides the point at this time. Also, we don't need to rename or move files at this point, Composer will just take care of it. The only thing that needs to be done is to remove global functions from files we want to have autoloaded, which has already ben done in the initial patch by @wonderboymusic and can currently be seen in the &lt;code&gt;autoloader&lt;/code&gt; branch on &lt;a class="ext-link" href="https://github.com/staylor/develop.wordpress/tree/autoloader"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/staylor/develop.wordpress/tree/autoloader&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
@MikeSchinkel the way I see it, the solution you propose:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;eliminates the advantage that initially brought us to Composer (hence your need to rename files and move stuff around),
&lt;/li&gt;&lt;li&gt;eliminates all other advantages that Composer would add in the future,
&lt;/li&gt;&lt;li&gt;only seemingly adds one perceived advantage of its own (tightly optimized custom autoloader), which is not really an advantage, because you can generate this exact same autoloader with Composer Autoloader Generator.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Unless I'm missing something crucial, I don't see in what ways this solution would be preferable.
&lt;/p&gt;
&lt;p&gt;
@TJNowell If anyone wants to play around with benchmarks, please go ahead. I personally will not waste time with benchmarks right now. If the goal is to see what autoloader &lt;strong&gt;implementation&lt;/strong&gt; is faster, then this has nothing to do with Composer/no-Composer. And if the goal is to see whether an autoloader even makes sense in the first place, then I'm baffled, and must admit that we will never find out, because first of all the benefits are not only about performance, and secondly, we would need to implement it and optimize Core for it first to get proof. So, in essence we're trying to benchmark the chicken and egg problem.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:40:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:38/1474695601780139</guid>
      <description>&lt;p&gt;
Has anyone thought about &lt;code&gt;&amp;lt;!--nextpage--&amp;gt;&lt;/code&gt;?
I think the issues of creating content and displaying it are too mixed together. A theme does impact content in terms of menu names, widget area names, and page templates. It seems like the main job of a theme is presentation, not creation. And the Customizer lives under the Appearance menu also. So the theme options specific to a page template logically go in the editor meta box. And anything about content logically goes in the editor itself, unless it's a widget area that can be positioned in different places.
&lt;/p&gt;
&lt;p&gt;
I wouldn't worry about discoverability as much as explainability. I've used WordPress a lot and don't understand what this thing is for. Why you can't just put the content of the page in the page? Then it works with every theme. I've made front pages with dynamic content by using a plugin called Shortcode Any Widget.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:39:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:206</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:206/1474695582255366</guid>
      <description>&lt;p&gt;
&lt;strong&gt;One Class Per File vs. Multiple Classes per File&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Next we consider classes that are contained in a file by themselves vs. files that contain multiple classes.
&lt;/p&gt;
&lt;p&gt;
There appear to be &lt;code&gt;57&lt;/code&gt; classes that are each contained in a file that contains at least one other class. These are all in the &lt;code&gt;wp-includes&lt;/code&gt; directory. Most of these come from externally included projects such as:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;IXR&lt;/code&gt; -  &lt;em&gt;The Incutio XML-RPC Library&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Text/Diff&lt;/code&gt; - &lt;em&gt;General API for generating and formatting diffs&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;pomo&lt;/code&gt; - &lt;em&gt;Translations&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;SimplePie&lt;/code&gt; - &lt;em&gt;RSS and Atom feed parsing&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;ID3&lt;/code&gt; - &lt;em&gt;Extracts information from MP3s &amp;amp; other multimedia files&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;MagpieRSS&lt;/code&gt; - &lt;em&gt;RSS and Atom parser (deprecated in WP)&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Services_JSON&lt;/code&gt; - &lt;em&gt;Converts to and from JSON format&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;AtomLib&lt;/code&gt; - &lt;em&gt;Atom Syndication Format PHP Library&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;PHPMailer&lt;/code&gt; - &lt;em&gt;PHP email creation and transport class&lt;/em&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Some of these include constant declarations inside the class files &lt;em&gt;(ugh!)&lt;/em&gt; including &lt;code&gt;MagpieRSS&lt;/code&gt;, &lt;code&gt;Test/Diff&lt;/code&gt;, &lt;code&gt;SimplePie&lt;/code&gt;, &lt;code&gt;ID3&lt;/code&gt;, and &lt;code&gt;pomo&lt;/code&gt;.  That means to autoload these we'd have to extract the defines and decide where and when to include them &lt;em&gt;(my huge patch from a last week moved them into &lt;code&gt;/wp-includes/constants&lt;/code&gt; and &lt;code&gt;/wp-admin/contstants&lt;/code&gt; and then loaded them from &lt;code&gt;/wp-settings.php&lt;/code&gt; and .&lt;code&gt;/wp-admin/includes/admin/php&lt;/code&gt;, respectively.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Some of these would be easy to break out since they do not perform any &lt;code&gt;require()/require_once()&lt;/code&gt; or &lt;code&gt;include()/include_once&lt;/code&gt; and are not loaded with dynamic name generation, such as &lt;code&gt;PHPMailer&lt;/code&gt;, &lt;code&gt;AtomLib&lt;/code&gt;, and &lt;code&gt;Services_JSON&lt;/code&gt;, but &lt;strong&gt;since they came from external code I don't know what the core team's opinion is on restructuring their code?&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Other files containing classes would be really easy to break out but since I analyzed WP &lt;code&gt;4.6.1&lt;/code&gt; as I write this I am discovering that someone already has done this in &lt;code&gt;trunk&lt;/code&gt;.  So no need for a patch for these as I had planned!
&lt;/p&gt;
&lt;p&gt;
As for the ones above that would not be easy I expect we will tackle them last, or maybe not at all, all depending on what the core team decides.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) reopened</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:23:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:54</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:54/1474694602912108</guid>
      <description>&lt;p&gt;
We need to render panels' content when the container isn't detached. This is fixed by the latest patch on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37661" title="#37661: feature request: A New Experience for Discovering, Installing, and Previewing Themes in ... (closed: fixed)"&gt;#37661&lt;/a&gt; and not worth breaking out separately and cross-coordinating with the other patch again since that's most likely the only instance where it will break currently in existence.
&lt;/p&gt;
&lt;p&gt;
However, I'm reopening this ticket for tracking so that we can ensure we pick it up regardless of the other ticket's status. We'd likely commit this fix separately from that feature, but it doesn't make sense to hinder testing on that project in the meantime by rushing this change in here.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:12:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:53</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:53/1474693967851850</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by westonruter. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474693964001112"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:11:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:43</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:43/1474693907955642</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by celloexpressions. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1474693904001110"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 05:11:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:42/1474693889649841</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37661/37661.4.diff" title="Attachment '37661.4.diff' in Ticket #37661"&gt;37661.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37661/37661.4.diff" title="Download"&gt;​&lt;/a&gt; is a refresh for &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38648" title="Customize: Re-architect and harden panel/section UI logic.
Removes ..."&gt;[38648]&lt;/a&gt;, which represents a significant refactoring of the way sections and panels work internally, see forthcoming Make/Core post.
&lt;/p&gt;
&lt;p&gt;
We still need feedback and testing. Please update to latest trunk, then apply this latest patch and hard refresh and empty the cache in your browser to test the patch directly.
&lt;/p&gt;
&lt;p&gt;
Also, please take a look at the user testing results: &lt;a class="ext-link" href="https://make.wordpress.org/design/2016/09/23/user-testing-the-new-customizer-themes-experience/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/design/2016/09/23/user-testing-the-new-customizer-themes-experience/&lt;/a&gt;. Please share your thoughts on how those go and potential improvements in the comments, then we can bring specific action items back to the ticket for implementation. Additional interpretations there are much appreciated, as I'm certainly biased at this point (and influenced parts of the tests to keep things moving since they were done in person).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37661.4.diff attached to Ticket #37661</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 04:59:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37661/37661.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37661/37661.4.diff/1474693176724691</guid>
      <description>&lt;p&gt;
Refresh for &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38648" title="Customize: Re-architect and harden panel/section UI logic.
Removes ..."&gt;[38648]&lt;/a&gt;. Please report any bugs with the panel and sections properly opening/closing if they come up.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 04:35:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:205</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:205/1474691702225260</guid>
      <description>&lt;p&gt;
Taking a look at the files in WordPress core 4.6.1 I found many different ways to group them that will help us decide how to move forward with patches:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Admin vs. includes&lt;/strong&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Classes declared in files found within &lt;code&gt;/wp-admin&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Classes declared in files found within &lt;code&gt;/wp-includes&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Ideally for classes found in those directories we would like to keep them within those directories, but if we need to anticipate an autoloader that will some day not use a classmap it will be more performant to have one root directory for files.
&lt;/p&gt;
&lt;p&gt;
So this distinction of admin vs. includes will not really matter unless we assume we will always use a classmap. If we can always assume a classmap then we could leave the files within the same top level directories where they are currently found.  But since so many people here want to have the option of moving away from a classmap I will assume we will have one autoloader root combining files from both of these sources.
&lt;/p&gt;
&lt;p&gt;
BTW, if we ever do have an autoloader that does not use a classmap the &lt;code&gt;is_file()&lt;/code&gt; calls used to validate if a file exits before an attempt to load it is made can add up and can be a significant performance hit. Or at least that was made clear to me when several of our projects were code-reviewed by 10up for an enterprise client. Their code sniffer, which I understand was the same code sniffer used for WordPress VIP flagged all calls to &lt;code&gt;is_file()&lt;/code&gt; as errors and would not allow us to use them if not cached in persistent cache.
&lt;/p&gt;
&lt;p&gt;
The above is one reason I have been so adamant that our autoloader needs to be classmap based.  But the patches I am currently working on to make WordPress core classes autoloadable will not require a classmap so there is no reason to halt progress waiting on a decision about this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36335 (Next generation: core autoloader proposal) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 24 Sep 2016 04:17:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36335#comment:204</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36335#comment:204/1474690625551065</guid>
      <description>&lt;p&gt;
Following up since it has been 4 days since last post and no comments on what was previously a very active ticket &lt;em&gt;(and it is Friday evening so I have time to!)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
Thus far the big debate has been over &lt;em&gt;"use a composer autoloader"&lt;/em&gt; vs. &lt;em&gt;"use an autoloader optimized for WP"&lt;/em&gt; and that has been contentious. So let me suggest a different first step that I think that maybe all of us will see the need for &lt;em&gt;(or at least all of us that would like to see an autoloader built in to WP core.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Proposal: First discuss making core files autoloadable, and then divide and conquer to analyze the core files in need of changes?&lt;/strong&gt;  Some files will be very easy to make autoloadable whereas others will be require more finesse. Because without making core files autoloadable the &lt;em&gt;"which autoloader"&lt;/em&gt; question is moot.  Why not go ahead and prepare patches to apply that are easy to apply and that we know will not break anything?
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If we use a classmap autoloader we can have great flexibility in how we organize files. In my prior patch I created two locations for autoload files: &lt;code&gt;wp-admin/autoload&lt;/code&gt; and &lt;code&gt;wp-includes/autoload&lt;/code&gt;, for hopefully obvious reasons. However if we want to plan for the potential to use a Composer autoloader &lt;strong&gt;so that we can move this ticket forward&lt;/strong&gt; then we will need to have one root location for autoload files. This could be &lt;code&gt;wp-autoload&lt;/code&gt; but based on some prior related comments on this thread I think some people might object to a new directory in the root?  Putting it in &lt;code&gt;wp-includes/autoload&lt;/code&gt; and then moving all files from within &lt;code&gt;wp-admin&lt;/code&gt; that need to be autoloaded just feels wrong.  &lt;strong&gt;So, can we discuss this point:  What should the autoloader's root directory be?&lt;/strong&gt;   In the interim I am going to use &lt;code&gt;wp-autoloader&lt;/code&gt; but that will be trivially easy to change if we so desire. &lt;em&gt;(if we do not need to leave the option open to use a Composer autoloader then we can easily just use &lt;code&gt;wp-admin/autoload&lt;/code&gt; and &lt;code&gt;wp-includes/autoload&lt;/code&gt;.)
&lt;/em&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;No matter which autoloader we ultimately choose the autoloader must derive the file name from the class name, so I propose we change the file naming convention for autoloaded classes to be their classname, e.g. &lt;code&gt;wp-autoloader/WP_Query.php&lt;/code&gt; vs. the current &lt;code&gt;wp-includes/query.php&lt;/code&gt;.  &lt;strong&gt;Can we get a thumbs-up or a thumbs-down for this approach?&lt;/strong&gt; And if a thumbs-down it will help if you provide a detailed reason why not along with a better alternate proposal including the benefits for the alternate approach?
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
I'll continue with details related to dividing an conquering on another ticket so these two questions do not get lost.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34690 (when user login is required to comment, there should be a link to ...) updated</title>
      
        <dc:creator>mark-k</dc:creator>

      <pubDate>Sat, 24 Sep 2016 03:55:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34690#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34690#comment:3/1474689340716523</guid>
      <description>&lt;p&gt;
@jignesh.nakrani yes, the flow exists for the user, but when a non registered user sees this message for the first time he do not have any idea that the login form will also enable him to register, and in any case it is a two steps thing that could have been made into one.
&lt;/p&gt;
&lt;p&gt;
@rachelbaker sorry for being lazy but it is early morning over here.... Is there any patch creation flow using the git repository, or does everything still needs to go via SVN?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sat, 24 Sep 2016 02:58:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:38/1474685938532351</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:36" title="Comment 36"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I am pretty firmly against introducing another way for adding "hacks" to WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My sentiments exactly. I spent 2 years as a moderator of a popular theme forum, and most of those users had no clue what CSS is or what to type in this new editor. Having yet another place to look for CSS will make it that much harder for support.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Apart from the above there are several other things that are pretty bad:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inadequate space for editing/writing. Try resizing your coding (text) editor to 275px width and edit something for 10-15 min. It's really bad.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
The editor space needs to be adjustable. And at the point of editing, it's best to be able to see the HTML of a page, not the rendering. How else will you know what selectors to use?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;"Deceiving" preview. CSS hacks affect the whole site but the user can see only one template in the preview. For example it is pretty easy to make a change that "looks good" on the front page but breaks the archive pages, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
And how do you preview/test the responsiveness of your CSS (desktop, mobile)?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In addition there is no good way to make the user entered CSS "secure".
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I addressed this issue earlier, but I don't know if anyone "got" it. If the CSS lives in a file, then anything not CSS in there is a CSS error instead of treated as HTML.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If it has to be theme specific, have you considered that the post type is like an attachment and the CSS is actually stored in a file? This way the storage is easier (CSS can be difficult to get into the database correctly), and the inclusion in the header is better (using the src attribute), and the browser can cache the file and it can be served zipped.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36534 (Media Upload Issue Since 4.5 Upgrade) updated</title>
      
        <dc:creator>megabulk2</dc:creator>

      <pubDate>Sat, 24 Sep 2016 02:28:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36534#comment:95</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36534#comment:95/1474684105552601</guid>
      <description>&lt;p&gt;
Affecting me on WestHost, WP version 4.6.1.
The two fixes to limit the ImageMagick threads (via .htaccess &lt;a href="https://core.trac.wordpress.org/ticket/36534#comment:11"&gt;https://core.trac.wordpress.org/ticket/36534#comment:11&lt;/a&gt; or patching class-wp-image-editor-imagick.php &lt;a href="https://core.trac.wordpress.org/ticket/36534#comment:10"&gt;https://core.trac.wordpress.org/ticket/36534#comment:10&lt;/a&gt;) didn't work, but adding the code to functions.php to switch the image engine to gd did the trick &lt;a href="https://core.trac.wordpress.org/ticket/36534#comment:25"&gt;https://core.trac.wordpress.org/ticket/36534#comment:25&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
And I filed a ticket with them and asked them to look into their configuration of OpenMP. I hope they deal with it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35395 (Provide a better gateway for code-based theme customizations with the ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:46:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35395#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35395#comment:37/1474677984460857</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35395#comment:36" title="Comment 36"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Theme Editor represents an important part of WordPress' mission to democratizing publishing
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, it doesn't. It has nothing to do with democratizing publishing. All it does is making it a bit easier for users to "shoot themselves in the foot".
&lt;/p&gt;
&lt;p&gt;
I'm actually thinking we should be discussing shipping WordPress with &lt;code&gt;define( 'DISALLOW_FILE_EDIT', true );&lt;/code&gt; in wp-config. The explanation in the codex makes a lot of sense:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I've pretty consistently heard from project leadership over the years that there is no chance that the theme/plugin editors will go away or be turned off in core, and serve an important purpose similar to what I've described here. Is this opinion shared by other lead developers or solely yours? Or am I recalling that incorrectly, and if so, why are these editors still on by default in core?
&lt;/p&gt;
&lt;p&gt;
In the future, this type of feedback from a lead developer should come sooner than nine months into a project if at all possible. I would also hope that this project could eventually lead to a compromise where the more dangerous, less user-friendly way to start customizing a site with code can be moved to a plugin. The purpose of this project is to make it harder for users to shoot themselves in the foot when they need to make code-based customizations.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In my opinion adding "theme hacks" through the customizer is plugin material, and the plugin should be able to provide adequate support to users that break their sites.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There's a big terminology difference between "hack" and customization. Being CSS, the focus is on visual adjustments, or customizations, and I wouldn't describe those types of changes as hacks, but maybe that's just me. This is also not unlike the way child themes are designed to extend and customize parent themes.
&lt;/p&gt;
&lt;p&gt;
As I mentioned above, there are easily enough plugin-based solutions (and even many in themes) to justify a core solution. I would also anticipate there being less of a support burden throughout the ecosystem with something like this, as support volunteers already using CSS as needed would no longer need to get the user set up with a plugin to add it, and those that previously suggested edits in the theme editor where the could have taken the site down may be able to suggest this feature instead.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Apart from the above there are several other things that are pretty bad:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inadequate space for editing/writing. Try resizing your coding (text) editor to 275px width and edit something for 10-15 min. It's really bad.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Line lengths are generally pretty short for CSS specifically. The width is also variable based on device size (potentially even more so with my proposal on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/32296" title="#32296: enhancement: Customize: Increase width of controls pane to give more room on high ... (closed: fixed)"&gt;#32296&lt;/a&gt;). We shouldn't make feature decisions based on the current customizer UI, which could always change; we could also bump the textarea out to be wider if we feel that that's more important than maximizing the size of the preview in this instance.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;"Deceiving" preview. CSS hacks affect the whole site but the user can see only one template in the preview. For example it is pretty easy to make a change that "looks good" on the front page but breaks the archive pages, etc.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Users can navigate to different pages on their site within the preview, and even preview different sized screens as they customize the CSS. Perhaps the help text associated with this feature should explicitly suggest doing that? By leveraging the customizer framework, we can provide a much better and less-likely-to-break-things environment for the user than other solutions.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In addition there is no good way to make the user entered CSS "secure". CSSTidy and similar tools can check/fix the syntax but cannot sanitize the CSS for security purposes. I'm not sure such tools exist. New versions of the browsers introduce support for new CSS features pretty much every month. Don't think it is feasible even trying to sanitize all of them. The only way would be to severely limit what is supported then parse the CSS and remove everything else.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I can't provide much input here, but surely this can't be worse in terms of security than being able to edit PHP files directly within the theme and plugin editors? We can decide what the appropriate capability is here, such as &lt;code&gt;edit_files&lt;/code&gt;, if that helps.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38144 (WP 4.6.1 getting an error in PHP 7.1) updated</title>
      
        <dc:creator>hoang2016</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:44:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38144#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38144#comment:3/1474677876120040</guid>
      <description>&lt;p&gt;
Thank you for your advice
&lt;/p&gt;
&lt;p&gt;
I tried install WP 4.7 (beta) as tester the problem had been solved
&lt;/p&gt;
&lt;p&gt;
Before all you guy try to install WP 4.7 or update it later
&lt;/p&gt;
&lt;p&gt;
I strong recommended that backup (fully),deactivate all plugins, and make a copy of wp-content foler
&lt;/p&gt;
&lt;p&gt;
sincerely,
&lt;/p&gt;
&lt;p&gt;
Hoang2016
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37980 (Don't attach events to customizer section headings with cannot-expand class) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:18:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37980#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37980#comment:7/1474676296531314</guid>
      <description>&lt;p&gt;
Cannot-expand headings should not be focusable; if there is a focusable element within them, it would be a distinct link or button element that's separate. Not applying the cannot-expand styling when the element is focusable is a good way to ensure that developers remember to remove the &lt;code&gt;tabindex=0&lt;/code&gt; from section markup that's copied from expandable core sections. On the other hand, it could look broken for users, but if we also unstyle it on focus, the accessible experience is even worse. Anyone else have thoughts here?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38128 (Twitter Embed - Enhancement change theme) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:12:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38128#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38128#comment:2/1474675923061451</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt;, &lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Unless this is something that Twitter exposes via their oEmbed API, this is a wontfix I'm afraid. Some links to docs would help assess this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38147 (Add sprintf.js library to WordPress) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:10:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38147#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38147#comment:2/1474675804565928</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
What are some example use cases of this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38148 (Do not store URL protocol in the database) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:09:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38148#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38148#comment:5/1474675740730531</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29158 (Customizer UI Design lacks contrast for visual hierarchy and does not ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:08:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29158#comment:80</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29158#comment:80/1474675701612722</guid>
      <description>&lt;p&gt;
I wouldn't be opposed to focusing the first control instead of the back arrow when opening a section, would that work @afercia? Or will the associated labels then be skipped?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37980 (Don't attach events to customizer section headings with cannot-expand class) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 24 Sep 2016 00:01:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37980#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37980#comment:6/1474675261436771</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@celloexpressions There seems to be a problem in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37980/37980.2.diff" title="Attachment '37980.2.diff' in Ticket #37980"&gt;37980.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37980/37980.2.diff" title="Download"&gt;​&lt;/a&gt; with regards to styling elements that are focused. See &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37980/37980.2-defect.mov" title="Attachment '37980.2-defect.mov' in Ticket #37980"&gt;37980.2-defect.mov&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37980/37980.2-defect.mov" title="Download"&gt;​&lt;/a&gt;. If the desire is to ensure there is a focus style for accessibility, even though it cannot be clicked, then I think the &lt;code&gt;:hover&lt;/code&gt; needs to be overridden by the &lt;code&gt;:focus&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>