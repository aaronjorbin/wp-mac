<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 23:19:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:25/1473635996650609</guid>
      <description>&lt;p&gt;
Took a look at what the current version of the theme does, and it should be able to be done as a PR if I can figure GitHub out. It'll be a simpler implementation that what the theme currently does, but more flexible. Does that sound like a good way to demo/test?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) updated</title>
      
        <dc:creator>mrahmadawais</dc:creator>

      <pubDate>Sun, 11 Sep 2016 22:37:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021#comment:3/1473633429337954</guid>
      <description>&lt;p&gt;
+1 about time!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 22:32:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:36/1473633176022627</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 22:18:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:24/1473632281416664</guid>
      <description>&lt;p&gt;
@melchoyce I have a very similar proposal that would leverage menus, based on the way &lt;a class="ext-link" href="http://annenbergdl.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;this theme's homepage&lt;/a&gt; is set up. I'd like to put together a visual demonstration alongside an outline of the code before attempting to explain further (it's hard to describe with words), but I could adapt the code from that theme as early as tonight. The approach would allow posts of any type to be added, and users could even add terms, such as a category, which could display a grid of recent posts there where the user wants it on the homepage. This way, content stay created where it is now via post objects and the front page is more a way to curate it.
&lt;/p&gt;
&lt;p&gt;
What would be the best way to make a testable demo of this? I can put something generic together or PR against the github repo although there's a lot of movement there at the moment. This would not require core changes, at least initially.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sun, 11 Sep 2016 21:56:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:23/1473630975925308</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37974#comment:22" title="Comment 22"&gt;westonruter&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37974#comment:19" title="Comment 19"&gt;karmatosed&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@westonruter unfortunately though child pages is a horrible experience from a user perspective. Both from functionality and discoverability.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think you may have misunderstood &lt;a href="https://core.trac.wordpress.org/ticket/37974#comment:18"&gt;my latest comment&lt;/a&gt;. In my latest comment I tried to explain that the user would never see the child pages with the theme active. The child theme would hide the existence of the child pages of any such multi-panel pages. The child pages would only be editable via the custom UI that is crafted for it, such as in the customizer. Nevertheless, the child pages can still be used as the storage mechanism that would both be still searchable and it would have a degree of cross-theme compatibility, as if a user switched to a different theme the panel content would still be available, though it would shown as traditional child pages in the non-twentyseventeen theme. Again, twentyseventeen could hide the fact that child pages are used as the storage mechanism for the panel content.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That sounds way, way overcomplicated. Customize posts isn't in core. We shouldn't rely on a feature that may or may not be merged into core to power another interface we'd ideally like to get in this cycle.
&lt;/p&gt;
&lt;p&gt;
Of the proposed ideas, the most intuitive so far to me feels like @babbardel's suggestion of using the menu interface. It's familiar and has the benefit of being able to add new pages from the setup, so you could quickly outline your page and then go back in after and fill in the content. How long would it take to create a testable prototype that works with either &lt;a class="ext-link" href="https://github.com/WordPress/twentyseventeen"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/twentyseventeen&lt;/a&gt; or a stripped down multi-page theme? Would be great to compare against the existing multi-panel interface, which has tested the best of everything we've tried so far on WordPress.com.
&lt;/p&gt;
&lt;p&gt;
How do existing themes handle interfaces like this? I know many are around that have rolled their own solution. What do those solutions look like? Can any themers chime in?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16379 (Better UI for doing "Page on Front") updated</title>
      
        <dc:creator>folletto</dc:creator>

      <pubDate>Sun, 11 Sep 2016 21:38:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16379#comment:147</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16379#comment:147/1473629904140536</guid>
      <description>&lt;p&gt;
@westonruter I think your proposal is a good iterative improvement on the current double-dropdown approach. However, the design proposed above goes in an entirely different direction, simplifying and avoiding the two dropdowns entirely (plus aligning the panel design to the other panels, and maybe simplifying its accessibility too).
&lt;/p&gt;
&lt;p&gt;
My suggestion here would be to either refine and implement the design concept i2 above – or another more radical simplification, if we have one – or if we want to go first to an improvement like the one in 'Customize Object Selector', then I'd split that out to a separate ticket to be worked on, in order to avoid burying the design that this discussion contains.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35937 (Visual improvements for the comment "pending status") updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Sun, 11 Sep 2016 21:35:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35937#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35937#comment:12/1473629754852395</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35937#comment:11" title="Comment 11"&gt;afercia&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35937#comment:8" title="Comment 8"&gt;melchoyce&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Do all pending comments have the orange background/border?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The ones below the post editor don't have the border, it would be great to consider to add it for consistency and accessibility.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1, that looks weird. Feels like a styling error.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35937 (Visual improvements for the comment "pending status") updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 11 Sep 2016 21:35:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35937#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35937#comment:11/1473629707343791</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35937#comment:8" title="Comment 8"&gt;melchoyce&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Do all pending comments have the orange background/border?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The ones below the post editor don't have the border, it would be great to consider to add it for consistency and accessibility.
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/0c807KER4x.png"&gt;&lt;img src="https://cldup.com/0c807KER4x.png" alt="https://cldup.com/0c807KER4x.png" crossorigin="anonymous" title="https://cldup.com/0c807KER4x.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 21:15:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:22/1473628525843025</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37974#comment:19" title="Comment 19"&gt;karmatosed&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@westonruter unfortunately though child pages is a horrible experience from a user perspective. Both from functionality and discoverability.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think you may have misunderstood &lt;a href="https://core.trac.wordpress.org/ticket/37974#comment:18"&gt;my latest comment&lt;/a&gt;. In my latest comment I tried to explain that the user would never see the child pages with the theme active. The child theme would hide the existence of the child pages of any such multi-panel pages. The child pages would only be editable via the custom UI that is crafted for it, such as in the customizer. Nevertheless, the child pages can still be used as the storage mechanism that would both be still searchable and it would have a degree of cross-theme compatibility, as if a user switched to a different theme the panel content would still be available, though it would shown as traditional child pages in the non-twentyseventeen theme. Again, twentyseventeen could hide the fact that child pages are used as the storage mechanism for the panel content.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>ThemeZee</dc:creator>

      <pubDate>Sun, 11 Sep 2016 21:10:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:21/1473628221465936</guid>
      <description>&lt;p&gt;
@karmatosed I totally agree that there are too many bad ways to achieve that. It would be great if there would be a Core solution.
&lt;/p&gt;
&lt;p&gt;
I just want the feature to be more flexible and for different use cases. I like the proposal of @babbardel based on the Menu UI for example.
&lt;/p&gt;
&lt;p&gt;
If a Core solution only allows to select some featured pages as multi-panel then I think we don't need it. As I said themes can easily add such settings using the already existing possibilities of the Customizer API. IMHO Theme Authors often use these muddled theme options or widgets to get more flexibility like ordering sections.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36612 (Add Ratings into the Add New Theme page) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:55:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36612#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36612#comment:8/1473627335515711</guid>
      <description>&lt;p&gt;
I think having the reviews collapsable and the description showing makes sense. Both collapsing feels a little too much.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33969 (Publish Now button for scheduled posts) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:51:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33969#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33969#comment:3/1473627095716373</guid>
      <description>&lt;p&gt;
I love the idea! I'm just not sure about placing the button how it is. Only last week I was frustrated by experience of publishing a scheduled post. This is the kind of small improvement that will be really nice to bring in.
&lt;/p&gt;
&lt;p&gt;
I do also think as we add more and more to this box, rethinking the approach is good. I'd be interested in seeing something explored that maybe breaks out of our current confines and sees how the entire thing could be improved. It could with some small adjustments help all flows in that box.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35937 (Visual improvements for the comment "pending status") updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:48:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35937#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35937#comment:10/1473626883784346</guid>
      <description>&lt;p&gt;
If all do have the background I'd +1 to removing the icon. My only thought is that other apps / experiences do use a !. I noticed a few that had to sync to Cloud do, for example when that's not possible. My concern is the ! in this case would get read as a failure over a pending. So in that case removing makes a lot of sense.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37806 (Attachment Details - Edit: uneven height between input field and ...) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:45:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37806#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37806#comment:6/1473626730084313</guid>
      <description>&lt;p&gt;
My concern here is there is a historical reason for the font-size rules. @hugobaeta do you know of any reason - adding you here as you may. If there is no reason and device testing is solid, I'm totally keen we get rid of extra things and go with the cleaner patch.
&lt;/p&gt;
&lt;p&gt;
Visually I am also very keen this gets in, it's awesome tidying up - thanks @eliorivero and @joemcgill for this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #25259 (Helper functions for mbstring.func_overload) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:44:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/25259#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/25259#comment:16/1473626656259001</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #forums by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/forums/p1473626654003708"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:21:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021#comment:2/1473625305793298</guid>
      <description>&lt;p&gt;
+1
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:16:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:20/1473624965592091</guid>
      <description>&lt;p&gt;
@babbardel I see what you're suggesting there but I don't think I feel instinctually that is a good use of the menu UI. I could be wrong and user testing will of course prove that. It feels like using an existing UI and a little forcing it on so that something could work. Again, would need user testing.
&lt;/p&gt;
&lt;p&gt;
@celloexpressions I think based on user testing we can rule out shortcodes and widgets. Although more testing in those would be interesting to add to the data pool.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 20:12:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:19/1473624735679668</guid>
      <description>&lt;p&gt;
@westonruter unfortunately though child pages is a horrible experience from a user perspective. Both from functionality and discoverability.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 19:40:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:18/1473622836232535</guid>
      <description>&lt;p&gt;
@karmatosed sorry, I probably got ahead of myself.
&lt;/p&gt;
&lt;p&gt;
@babbardel @karmatosed I like the idea of using child pages to store the content for the panels. This would ensure that they would still appear in search results, although the URL would need to redirect to the URL of the parent page, since these panel sub-pages would only used for content storage as opposed to showing the normal UI for pages. The theme could hide (by filtering) any such panel subpages from appearing in any page lists (either on the frontend, or in backend post list table or page dropdown lists), with the UI for managing these panel subpages taking the form of the customizer multi-panel sections as described above.
&lt;/p&gt;
&lt;p&gt;
A page could be designated a multi-panel page by assigning it to a multi-panel page template. The theme could come with various templates supporting the various panel configurations, and then opening such a page assigned to the page template in the customizer, the appropriate customizer sections could then be displayed to manage the contents of those page panels. This presumes that the number of panels on a page template and their ordering would be fixed.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19627 (Themes should be able to opt-in to a static front page) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:52:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19627#comment:78</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19627#comment:78/1473619931983797</guid>
      <description>&lt;p&gt;
As &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19627#comment:29" title="Comment 29"&gt;29&lt;/a&gt; mentions, all themes should support a static front page already, even if it uses the same template as other pages. What's the goal here? To make it more obvious that a static front page can be used? To change the user's static front page option automatically on a theme switch (it's an &lt;code&gt;option&lt;/code&gt;, not a &lt;code&gt;theme_mod&lt;/code&gt; for a reason)? To display text implying that the current theme supports a static front page in a specific way? To allow themes &lt;em&gt;not&lt;/em&gt; to support a static front page? The &lt;code&gt;Your theme supports a static front page&lt;/code&gt; text should probably go away regardless.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/16379" title="#16379: task (blessed): Better UI for doing &amp;#34;Page on Front&amp;#34; (closed: wontfix)"&gt;#16379&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38013" title="#38013: feature request: Static Front Page section/controls should be contextual and allow ... (closed: fixed)"&gt;#38013&lt;/a&gt; are probably more relevant projects for improving the way static front pages can be changed.
&lt;/p&gt;
&lt;p&gt;
We could do something like &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/19627#comment:62" title="Comment 62"&gt;62&lt;/a&gt;, but that assumes that a significant number of users would activate a theme without first previewing it in the customizer, where the ability to change the front page is a clear part of the flow. An admin notice probably isn't the best UX, because the user likely wants the blog index on the front if they left the option that way. Core could also start defaulting to a static front page if that would help, since that's a more common behavior. Perhaps renaming "Static Front Page" to "Front Page" for the customizer section title could also help.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #20714,​33742 batch updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:45:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=20714%2C33742</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=20714%2C33742/1473619559861814</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38588" title="Docs: Fix phpdoc and jsdoc typos introduced in [38584] and [38587], ..."&gt;38588&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Docs: Fix phpdoc and jsdoc typos introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38584" title="Menus: Prevent non-published posts/pages from being returned in search ..."&gt;[38584]&lt;/a&gt; and &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38587" title="Customize: Implement previewing of form submissions which use the GET ..."&gt;[38587]&lt;/a&gt;, respectively.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33742" title="#33742: defect (bug): Menu Customizer: Adding draft items? (closed: fixed)"&gt;#33742&lt;/a&gt;.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20714" title="#20714: enhancement: Theme customizer: Impossible to preview a search results page (closed: fixed)"&gt;#20714&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>batchmodify</category>
    </item><item>
      <title>Changeset [38588]: Docs: Fix phpdoc and jsdoc typos introduced in [38584] and [38587], ...</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:45:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38588</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38588/1473619559375237</guid>
      <description>&lt;p&gt;
Docs: Fix phpdoc and jsdoc typos introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38584" title="Menus: Prevent non-published posts/pages from being returned in search ..."&gt;[38584]&lt;/a&gt; and &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38587" title="Customize: Implement previewing of form submissions which use the GET ..."&gt;[38587]&lt;/a&gt;, respectively.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33742" title="#33742: defect (bug): Menu Customizer: Adding draft items? (closed: fixed)"&gt;#33742&lt;/a&gt;.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20714" title="#20714: enhancement: Theme customizer: Impossible to preview a search results page (closed: fixed)"&gt;#20714&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #35832 (Paste action in text field/area context menu in theme customizer ...) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:35:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35832#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35832#comment:9/1473618951292160</guid>
      <description>&lt;p&gt;
Proposed removal of IE8 support in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38021" title="#38021: enhancement: Customize: remove support for IE8 (closed: fixed)"&gt;#38021&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:35:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021#comment:1/1473618927076858</guid>
      <description>&lt;p&gt;
+1
&lt;/p&gt;
&lt;p&gt;
This would allow us to start using the &lt;code&gt;input&lt;/code&gt; event in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35832" title="#35832: defect (bug): Paste action in text field/area context menu in theme customizer ... (closed: fixed)"&gt;#35832&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38013 (Static Front Page section/controls should be contextual and allow ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:19:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38013#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38013#comment:3/1473617976407263</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
We should tackle this in 4.7 to build on the ability to make page stubs with menus. Ideally, we'd be able to use the same functions and primarily focus work here on integrating it with this particular UI. This is also important for Twenty Seventeen.
&lt;/p&gt;
&lt;p&gt;
It sounds like we can take &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/38013/38013.0.diff" title="Attachment '38013.0.diff' in Ticket #38013"&gt;38013.0.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/38013/38013.0.diff" title="Download"&gt;​&lt;/a&gt; and add an additional control to add a new page (perhaps matching the UI from menus with a visible input + button, with the button adding to the select element and hiding the input).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 18:11:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:17/1473617503894385</guid>
      <description>&lt;p&gt;
Relevant &lt;a href="https://core.trac.wordpress.org/ticket/16379#comment:142"&gt;prior work&lt;/a&gt; from @folletto here as well (scroll up on the link for screenshots). That also assumes the use of post (specifically page) objects for content.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37661 (A New Experience for Discovering, Installing, and Previewing Themes in ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 17:08:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37661#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37661#comment:28/1473613698043752</guid>
      <description>&lt;p&gt;
Thanks for the detailed feedback @afercia!
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;There are two customize buttons after the featured section has loaded, and the one in the current theme control is focused when re-opening. We need to update the selector for the initial focus in the panel to be unique to the top button.
&lt;/li&gt;&lt;li&gt;Does anyone else have feedback on "Customize" meaning to go back to customizing the current theme?
&lt;/li&gt;&lt;li&gt;Good idea. Maybe a link at the bottom of the panel, floated right, with the text "Back to customize"? This will also show up when there are no themes or themes are loading.
&lt;/li&gt;&lt;li&gt;Maybe we should remove the click handler for expanding the search section?
&lt;/li&gt;&lt;li&gt;The search handler needs to ensure the search section is expanded on keyup, which would also make 4. work.
&lt;/li&gt;&lt;li&gt;Search is debounced to 800 ms. We could bring it down to 500 to match elsewhere. It's so high because we start loading up to 100 themes as soon as it's called, so I want to make sure we minimize extra hits there.
&lt;/li&gt;&lt;li&gt;See 6.
&lt;/li&gt;&lt;li&gt;With &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38021" title="#38021: enhancement: Customize: remove support for IE8 (closed: fixed)"&gt;#38021&lt;/a&gt;, we should be able to standardize to only using &lt;code&gt;input&lt;/code&gt; here.
&lt;/li&gt;&lt;li&gt;Quick fix.
&lt;/li&gt;&lt;li&gt;Good idea.
&lt;/li&gt;&lt;li&gt;Good idea.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;&amp;lt;# if ( data.actions['delete'] ) { #&amp;gt;&lt;/code&gt; should check for &lt;code&gt;data.actions&lt;/code&gt; first in &lt;code&gt;tmpl-customize-themes-details-view&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;Fixed by 12.
&lt;/li&gt;&lt;li&gt;Escape is collapsing the section; we should have it collapse the panel directly.
&lt;/li&gt;&lt;li&gt;Escape is collapsing the section; if details are open it should collapse the details modal instead.
&lt;/li&gt;&lt;li&gt;Easy fix.
&lt;/li&gt;&lt;li&gt;It's because there's a larger tap target here. We could move the focus to &lt;code&gt;:before&lt;/code&gt; and make it smaller but wouldn't this also make it easier to see? Or is consistency better?
&lt;/li&gt;&lt;li&gt;For some reason this isn't happening within the custom panel. We'll need to migrate the logic from other sections and panels over.
&lt;/li&gt;&lt;li&gt;This is inherited from theme-install.php and, yes, could use some work. Does anyone have design ideas for the filter bar on mobile other than continuing the floated links approach?
&lt;/li&gt;&lt;li&gt;Quite the contrary :)
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
I can make those changes later this week unless anyone else is interested in tackling some of them sooner. Also need some design decisions as noted in the list above.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38021 (Customize: remove support for IE8) created</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 16:48:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38021</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38021/1473612498054805</guid>
      <description>&lt;p&gt;
It is difficult to maintain support for Internet Explorer 8, and we typically no longer notice issues until close to or even after a release. The customizer already doesn't support IE7, or IE8 or 9 with domain mapping, so we can build on the &lt;code&gt;no-customize-support&lt;/code&gt; class to actually make the customizer inaccessible on IE8.
&lt;/p&gt;
&lt;p&gt;
The relevant code is in &lt;code&gt;wp_customize_support()&lt;/code&gt; in &lt;code&gt;wp-includes/theme.php&lt;/code&gt;. It uses feature detection in JS; we should add a check for something that isn't supported by IE8 but is supported by IE9 and other browsers. Ideally it should be something we've broken in IE8 in the customizer before.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36514 (posting with custom taxes) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 16:26:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36514#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36514#comment:11/1473611215884837</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36514#comment:10" title="Comment 10"&gt;helen&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Related/possibly a duplicate: &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/14877" title="#14877: feature request: Ability to create exclusive custom taxonomies (accepted)"&gt;#14877&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I think it'd be perfectly reasonable to get what exists working with both IDs and slugs as appropriate in this ticket and then using that to model new callbacks after. And I'd love to see that happen.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If we're headed for a future where WP provides more than just two meta box callbacks for taxonomies, then we may want to opt for something a bit more sophisticated here than an if/else toggle. I'm thinking something like a &lt;code&gt;meta_box_save_cb&lt;/code&gt; alongside &lt;code&gt;meta_box_cb&lt;/code&gt;. We'll have an internal matrix that can be used to provide default mappings of &lt;code&gt;meta_box_cb&lt;/code&gt; to &lt;code&gt;meta_box_save_cb&lt;/code&gt;:
&lt;/p&gt;
&lt;pre class="wiki"&gt;// register_taxonomy()
if ( null === $args['meta_box_save_cb'] ) ) {
    switch ( $args['meta_box_cb'] ) {
        case 'post_categories_meta_box' :
            $args['meta_box_save_cb'] = 'meta_box_save_cb_checkboxes';
        break;
        case 'post_tags_meta_box' :
        default:
            $args['meta_box_save_cb'] = 'meta_box_save_cb_input';
        break;
    }
}
&lt;/pre&gt;&lt;p&gt;
The format of &lt;code&gt;tax_input&lt;/code&gt; and the corresponding validation required will look a bit different for &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;multiselect&lt;/code&gt;, &lt;code&gt;radio&lt;/code&gt;, so they should each probably get their own &lt;code&gt;meta_box_save_cb&lt;/code&gt;. This provides that framework. Thoughts?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37276 (tax_query with field=name doesn't work if the term contains an apostrophe) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 16:13:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37276#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37276#comment:7/1473610426917172</guid>
      <description>&lt;p&gt;
Thanks for the patch, @elrae. Here's an existing test you can copy for the purposes of testing with apostrophes and other slashed characters: &lt;a href="https://core.trac.wordpress.org/browser/trunk/tests/phpunit/tests/term/taxQuery.php#L170"&gt;https://core.trac.wordpress.org/browser/trunk/tests/phpunit/tests/term/taxQuery.php#L170&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37915 (Customize: allow terms to be created in nav menus) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 16:06:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37915#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37915#comment:6/1473609991799560</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, we'd have to register a _draft_ taxonomy for every show_in_nav_menus taxonomy, which could be a lot of taxonomies. The alternative is to create one draft taxonomy for each and store the actual taxonomy somewhere with each term, but that could also get messy.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, it could potentially be a fairly large number of taxonomies. But storing everything in a single taxonomy seems problematic: taxonomies act differently from each other in ways that will affect the way the Customizer interacts with them (&lt;code&gt;hierarchical&lt;/code&gt; comes to mind), and this will not be easy to model within a single draft taxonomy. And since the shadow taxonomies would only be registered when in the customizer view, it doesn't seem like too big a problem to have a large number of them.
&lt;/p&gt;
&lt;p&gt;
I have been thinking some more about &lt;code&gt;term_status&lt;/code&gt; and will leave some additional thoughts in the upcoming days on &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37914" title="#37914: enhancement: Taxonomy: Allow terms to be previewed before publishing (new)"&gt;#37914&lt;/a&gt;. I don't know that it's feasible for 4.7, but I do think there's a place in core for it beyond the Customizer, and it's worth fleshing out how that'd work.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 16:02:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:16/1473609720501412</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 16:01:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:15/1473609690596150</guid>
      <description>&lt;p&gt;
I think the first step is to define how the actual content should be managed. Once that's clearly defined, we can explore the best way to manage those pieces to actually show them in a single view on the front end with the theme having control over the presentation and exact implementation details.
&lt;/p&gt;
&lt;p&gt;
Presumably the implication is that themes don't have enough control over &lt;code&gt;the_content()&lt;/code&gt; to do what they'd like to with "multi-content" views, requiring separate objects to be pulled in. So far I've seen the following object types proposed on this ticket for managing the actual content:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Post objects (namely pages, but I wouldn't restrict to that at this point; child pages fall into this same category).
&lt;/li&gt;&lt;li&gt;Shortcodes; ie, the multi-content pieces are all stored within a page.
&lt;/li&gt;&lt;li&gt;Widgets
&lt;/li&gt;&lt;li&gt;Terms is one other I'll throw out, as there is precedent for using those for featured/homepage content in themes such as Twenty Fourteen.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
If we can agree on the storage mechanism for content (and it may involve multiple of the above), it'll be easier to evaluate how best to let users manage them. We should not assume that core changes will necessarily be required here, though. I also happen to have a proposal related to menus, but I'll wait until we can agree on how content should be stored before demonstrating that further.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37915 (Customize: allow terms to be created in nav menus) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:39:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37915#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37915#comment:5/1473608351474179</guid>
      <description>&lt;p&gt;
If we do go with a shadow taxonomy in 4.7, one benefit is that we'll only need to do it for &lt;em&gt;new&lt;/em&gt; terms added in menus, which would reduce the volume of drafted terms, at least. However, we'd have to register a &lt;code&gt;_draft_&lt;/code&gt; taxonomy for every &lt;code&gt;show_in_nav_menus&lt;/code&gt; taxonomy, which could be a lot of taxonomies. The alternative is to create one draft taxonomy for each and store the actual taxonomy somewhere with each term, but that could also get messy.
&lt;/p&gt;
&lt;p&gt;
It's sounding like we will need some sort of &lt;code&gt;term_status&lt;/code&gt; approach eventually, as that will (likely?) create less breakage than using shadow taxonomies for every taxonomy when we scale to allowing any term and its meta to be previewed in the customizer. If we're okay with going that route, we could look at an implementation here for 4.7 and save &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37914" title="#37914: enhancement: Taxonomy: Allow terms to be previewed before publishing (new)"&gt;#37914&lt;/a&gt; for a future release and broader exploration of &lt;code&gt;term_status&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/xwp/wp-customize-terms"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/xwp/wp-customize-terms&lt;/a&gt; could probably piggyback on the nav menus approach for now, with plugins not being able to hook in as described above.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #13239 (Filter locate_template template_names variable) updated</title>
      
        <dc:creator>Hrohh</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:26:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13239#comment:102</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13239#comment:102/1473607611912913</guid>
      <description>&lt;p&gt;
+ 1 too
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>babbardel</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:26:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:14/1473607561667086</guid>
      <description>&lt;p&gt;
@karmatosed agree — discoverability of child pages system as content panels is clearly lacking. I'm only concerned that the "multi-panels" section from Customizer would be truly useful only for one-page style websites.
&lt;/p&gt;
&lt;p&gt;
Once you want to go with the multi-panel concept further, to inner pages, the current proposal would not provide this kind of flexibility. Unless the "Multi-Panels" section would transform into some management system where you can dynamically add Pages and Panels, then make them available through the Menus system.
&lt;/p&gt;
&lt;p&gt;
Actually, the Menus UI would nicely fit this use case. I did a small prototype of how it might look:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cl.ly/0o1V2F3h1L1t/multi-pages--prototype.gif"&gt;&lt;img src="https://cl.ly/0o1V2F3h1L1t/multi-pages--prototype.gif" alt="https://cl.ly/0o1V2F3h1L1t/multi-pages--prototype.gif" crossorigin="anonymous" title="https://cl.ly/0o1V2F3h1L1t/multi-pages--prototype.gif" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37930 (Introduce a general `pre_option` filter in `get_option()`) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:21:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37930#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37930#comment:1/1473607314476265</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37930/37930.diff" title="Attachment '37930.diff' in Ticket #37930"&gt;37930.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37930/37930.diff" title="Download"&gt;​&lt;/a&gt; adds a filter &lt;code&gt;pre_get_option&lt;/code&gt;. It works similar like the new filters proposed in &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37928" title="#37928: enhancement: add `pre_add_option` filter (new)"&gt;#37928&lt;/a&gt; and &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37929" title="#37929: enhancement: Add `pre_delete_option` filter (new)"&gt;#37929&lt;/a&gt; respectively.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37930.diff attached to Ticket #37930</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:20:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37930/37930.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37930/37930.diff/1473607226687586</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37929 (Add `pre_delete_option` filter) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:14:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37929#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37929#comment:3/1473606893704488</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37929/37929.2.diff" title="Attachment '37929.2.diff' in Ticket #37929"&gt;37929.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37929/37929.2.diff" title="Download"&gt;​&lt;/a&gt; is an updated patch that gives parity with the latest patch on &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37928" title="#37928: enhancement: add `pre_add_option` filter (new)"&gt;#37928&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37929.2.diff attached to Ticket #37929</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:13:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37929/37929.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37929/37929.2.diff/1473606812552410</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37928 (add `pre_add_option` filter) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:09:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37928#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37928#comment:5/1473606560218627</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37928/37928.2.diff" title="Attachment '37928.2.diff' in Ticket #37928"&gt;37928.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37928/37928.2.diff" title="Download"&gt;​&lt;/a&gt; adds a dedicated filter to short-circuit the process of adding an option.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37928.2.diff attached to Ticket #37928</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 15:08:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37928/37928.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37928/37928.2.diff/1473606502336756</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>karmatosed</dc:creator>

      <pubDate>Sun, 11 Sep 2016 14:50:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:13/1473605410657626</guid>
      <description>&lt;p&gt;
@babbardel yes and the issue there was that child pages is a hard concept for people to. Initially we thought it would just make sense for people. Turns out actually it's a feature not many use. Now, if we actually looked at that interface as part of this, perhaps we could address the issues. I'm doubtful though. Child pages in every test I ran were a lot more of an issue.
&lt;/p&gt;
&lt;p&gt;
The big issue of everything is discoverability. We have to have a solution that users as much as can 'just get'. That's hard. We have to get out of our heads a bit and I know that's hard. What for us seems sensible, logical.. it's often not for users.
&lt;/p&gt;
&lt;p&gt;
@westonruter I'm going to have to be honest and say half of what you're saying is going a little over my comprehension here. I get this is potentially complex but we seem to be diving into implementation and hows before we work out whys. I also whilst don't understand everything seem to feel you are saying we need a lot of other things implemented first. I don't believe that. The solution I'm suggesting does work without all the pieces in place like that.
&lt;/p&gt;
&lt;p&gt;
Can we please at the idea stage try and keep things a little easier to make sense of? I really want to understand and not assume or make the wrong judgement this early. I know others do too. When we dive into deep complexity and technical spec this makes it really hard for some of those of us coming from a non-immersed development angle to find a key in. We should welcome at this stage those types of brains. We all have different skills so if we try and communication on a level we all can participate in, that will create some awesome ideas. I really don't want to not understand everything you are saying @westonruter.
&lt;/p&gt;
&lt;p&gt;
I really feel having a simpler but robust and user tested solution works. Shortcodes aren't user friendly. We can hope they are, they are 'us' friendly. But the majority of users do not find them a discoverable solution right now. I also don't feel other solutions which haven't been user tested should be wrapped up in this one that has.
&lt;/p&gt;
&lt;p&gt;
@ThemeZee why doesn't having one standardisation make sense? It feels like this absolutely is where it would make sense. You avoid the confusion for users, you show a good, solid approach to themers. Win win right? I have seen so many bad ways of doing this:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Muddled theme options: pretty much I think I've seen every combination
&lt;/li&gt;&lt;li&gt;Child pages: this as said earlier has a lot of issues
&lt;/li&gt;&lt;li&gt;Widgets: a disaster for discoverability, theme changing and expectations. Also often really ugly. Pages really shouldn't be built from widgets. That's using something which is designed for one thing as a sticky plaster content block.
&lt;/li&gt;&lt;li&gt;And many more 'interesting' takes on this.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I also have tried my own variations and within Automattic seen a lot too. We came to this one through extensive user testing and failures. I openly admit I've made the mistakes and seen the results myself getting to this point.
&lt;/p&gt;
&lt;p&gt;
Content blocks of course would be amazing but wow it's a long way off. Should we really not add something as simple and already solved as this? Should we not maybe even think around this to come up with a better solution - maybe there is one that also is user friendly (I'm not seeing one in comments unfortunately)? I think so.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37975 (Duplicate tag names aren't supported) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 14:09:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37975#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37975#comment:2/1473602962385799</guid>
      <description>&lt;p&gt;
@ivankk Thanks for the ticket, and welcome to WordPress Trac!
&lt;/p&gt;
&lt;p&gt;
It seems to me that this is a problem with the tag selection interface. The underlying API allows you to add/remove terms based on term slug or ID. It's only when using the tag selector on post.php that you're unable to distinguish between duplicate tags.
&lt;/p&gt;
&lt;p&gt;
One possible way forward is to show the tag slug in cases where there are duplicates. So, if you enter 'test' in the scenario described here, you'll see:
&lt;/p&gt;
&lt;pre class="wiki"&gt;test
test (test-1)
test (test-2)
test (test-3)
&lt;/pre&gt;&lt;p&gt;
This would require changing the behavior that prevents the selection of more than one tag, which may require changing the way that the post submission is handled.
&lt;/p&gt;
&lt;p&gt;
I fear that this suggestion is not very user-friendly, though. Knowing that one tag has slug &lt;code&gt;test-2&lt;/code&gt; and another &lt;code&gt;test-3&lt;/code&gt; doesn't provide any useful information about how to select between them.
&lt;/p&gt;
&lt;p&gt;
I'm surprised this has never come up before, but I can't find any related tickets. @SergeyBiryukov do any existing tickets come to mind? My Google skills are failing me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38020 (Images not showing depending on the name) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 11 Sep 2016 13:39:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38020#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38020#comment:3/1473601186732059</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>babbardel</dc:creator>

      <pubDate>Sun, 11 Sep 2016 13:13:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:12/1473599581986503</guid>
      <description>&lt;p&gt;
Have you explored the option of using the core &lt;strong&gt;Child Pages&lt;/strong&gt; system to act as Panels of the Parent Page?
&lt;/p&gt;
&lt;p&gt;
We have used this solution on one of our themes (&lt;a class="ext-link" href="http://pxg.to/2cnw4eT"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://pxg.to/2cnw4eT&lt;/a&gt;), and it works pretty well.
There is definitely room for UX improvements but considering the following things, it might be worth taking a look:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The child pages system is already in core, and it's rarely used for anything else
&lt;/li&gt;&lt;li&gt;It has the asked flexibility of multi-panels.
&lt;/li&gt;&lt;li&gt;And it has the extra flexibility of &lt;strong&gt;multi-pages&lt;/strong&gt; and &lt;strong&gt;unlimited panels&lt;/strong&gt; — which is quite important for many users.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37770 (Docs improvements for 4.7) updated</title>
      
        <dc:creator>ramiy</dc:creator>

      <pubDate>Sun, 11 Sep 2016 12:34:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37770#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37770#comment:13/1473597294356355</guid>
      <description>&lt;p&gt;
Suggestion: Improve the "&lt;strong&gt;&lt;a href="https://core.trac.wordpress.org/browser/tags/4.6/src/wp-includes/post.php#L948"&gt;menu_position&lt;/a&gt;&lt;/strong&gt;" argument documentation in &lt;a class="ext-link" href="https://developer.wordpress.org/reference/functions/register_post_type/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;register_post_type()&lt;/a&gt; functions.
&lt;/p&gt;
&lt;p&gt;
Seems like it can also accept null (default is null). Not mentioned in the docs.
&lt;/p&gt;
&lt;p&gt;
And, more important, add the position list from the &lt;a class="ext-link" href="https://codex.wordpress.org/Function_Reference/register_post_type"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;codex&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37997 (Increase in function calls to get_locale() because of ...) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 11 Sep 2016 12:27:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37997#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37997#comment:9/1473596839889853</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
If you instead change &lt;code&gt;get_translations_for_domain()&lt;/code&gt; as you suggested to return &lt;code&gt;$noop_translations&lt;/code&gt; upon first fail, wouldn't it still go through the &lt;code&gt;_load_textdomain_just_in_time()&lt;/code&gt; process each time anyway (within the if statement on line 875)?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not if the function was rewritten a bit. I should've explained it a bit further I guess.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Couldn't you just unload the textdomain where I explicitly added the domain to the &lt;code&gt;$l10n_unloaded&lt;/code&gt; array in &lt;code&gt;_load_textdomain_just_in_time()&lt;/code&gt;? That would also require a change to &lt;code&gt;unload_textdomain()&lt;/code&gt; to allow the domain to be added to the &lt;code&gt;$l10n_unloaded&lt;/code&gt; array regardless of whether &lt;code&gt;$plugin_override&lt;/code&gt; is true or if the domain exists within the &lt;code&gt;$l10n&lt;/code&gt; array (which in this case would not).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thinking more about it, it really makes more sense to go this route. Also, a &lt;code&gt;is_textdomain_unloaded()&lt;/code&gt; function is indeed handy.
&lt;/p&gt;
&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37997/37997.diff" title="Attachment '37997.diff' in Ticket #37997"&gt;37997.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37997/37997.diff" title="Download"&gt;​&lt;/a&gt; I turned your adjustments to the &lt;code&gt;l10n.php&lt;/code&gt; file into a proper patch. Makes it easier to discuss any changes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37997.diff attached to Ticket #37997</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 11 Sep 2016 12:22:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37997/37997.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37997/37997.diff/1473596550646207</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36934 (Use of get_the_excerpt($post) is broken if post has no excerpt and you ...) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 11 Sep 2016 12:01:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36934#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36934#comment:28/1473595311017078</guid>
      <description>&lt;p&gt;
@achbed The globals aren't going away completely with that patch, &lt;code&gt;get_the_content()&lt;/code&gt; just doesn't rely on them anymore. If anyone's doing &lt;code&gt;global $multipage&lt;/code&gt; or &lt;code&gt;global $pages&lt;/code&gt;, it will continue to work.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37825 (Introduce functions to check whether there are multiple taxonomy terms) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Sun, 11 Sep 2016 09:21:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37825#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37825#comment:4/1473585700804564</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37825#comment:3" title="Comment 3"&gt;boonebgorges&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Idea seems OK to me, if it is in fact true that theme authors would find it useful. I don't fully grasp the utility of it, but I also don't fully grasp the utility of &lt;code&gt;is_multi_author()&lt;/code&gt; :) Do you have examples of themes that are implementing this logic on their own?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Actually, most recent default themes did. See &lt;a class="ext-link" href="https://github.com/WordPress/twentysixteen/blob/master/inc/template-tags.php#L201"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/twentysixteen/blob/master/inc/template-tags.php#L201&lt;/a&gt; for example. They only do that for categories, but the above implementation would of course also cover that, and in addition also help theme developers that create custom themes for support of custom taxonomies.
&lt;/p&gt;
&lt;p&gt;
Regarding the naming conventions, good point with the &lt;code&gt;is_multi_taxonomy()&lt;/code&gt; name, your approach is certainly more clear. About the underscore prefix, when was this decided? It feels to me that if we don't do that anymore, the function won't be "marked" as private anymore (although of course it's technically not private anyway). I have always felt like the underscore-prefixed functions would indeed be treated as private so that we could theoretically remove them if they weren't used anymore (as that underscore should discourage plugin/theme developers to use it).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #16379 (Better UI for doing "Page on Front") updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 07:54:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/16379#comment:146</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/16379#comment:146/1473580474896636</guid>
      <description>&lt;p&gt;
(First time commenter on this ticket, and I've not read through all of the history, so please forgive my jumping in here.)
&lt;/p&gt;
&lt;p&gt;
I've been experimenting with using a Select2 dropdown to take the place of the &lt;code&gt;dropdown-pages&lt;/code&gt; controls for Page on Front and Page for Posts. Latest state of the &lt;a class="ext-link" href="https://github.com/xwp/wp-customize-object-selector"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Customize Object Selector&lt;/a&gt; feature plugin is to prevent the “page on front” and “page for posts” from being able to be set to each other to begin with by excluding each other from each other's queries. These Select2 dropdowns also integrate with Customize Posts to allow for new pages to be created in the customizer, removing a block that users would experience otherwise if the page hadn't been created already. This is similar to what was addressed in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34923" title="#34923: enhancement: Allow users to more seamlessly create page-based nav menus during ... (closed: fixed)"&gt;#34923&lt;/a&gt; for nav menu items, except it allows the page to be fully authored. Here's a short demo video: &lt;a class="ext-link" href="https://youtu.be/lDYN2cWczT8"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://youtu.be/lDYN2cWczT8&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
There are some more screenshots on the plugin's PR: &lt;a class="ext-link" href="https://github.com/xwp/wp-customize-object-selector/pull/22"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/xwp/wp-customize-object-selector/pull/22&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
(Accessibility concerns with Select2 notwithstanding.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 06:10:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:11/1473574251790489</guid>
      <description>&lt;p&gt;
It seems like the initial implementation on WordPress.com is limited to only configuring a single multi-panel page, and specifically here it is the homepage (I see the &lt;code&gt;is_front_page&lt;/code&gt; in there as the &lt;code&gt;active_callback&lt;/code&gt;). Is that right?
&lt;/p&gt;
&lt;p&gt;
If the intention is for there to be multiple pages that have this kind of multi-panel configuration, then rather than introducing a new &lt;code&gt;multipanel-page&lt;/code&gt; theme support flag, this could instead be indicated at the template level itself (template support?). For example, say there is a &lt;code&gt;multi-panel.php&lt;/code&gt; page template file which has a header:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;?php
/*
 * Template Name: Multi-Panel Page
 */
add_template_support( 'multi-panel', array(
    /* define panels here */
) );
&lt;/pre&gt;&lt;p&gt;
In this way, different page templates could have different panel configurations. When such a page is loaded in the customizer, the preview could then communicate up to the pane that it is previewing a multi-panel template and then dynamically create the required panel/section/controls as required to manage the content for that page.
&lt;/p&gt;
&lt;p&gt;
As for how the data gets stored, to me it seems @NateWr's suggestion to store the structured content in shortcodes embedded in the content is the most practical and it also aligns with what @jeremyfelt described. Having the panel (content block content) stored in &lt;code&gt;post_content&lt;/code&gt; will ensure it is searchable. If the content is encoded as shortcodes in &lt;code&gt;post_content&lt;/code&gt; then shortcodes can in fact be represented visually in the visual editor using TinyMCE views and could even adopt some of Shortcake. Since TinyMCE views can be drag and dropped now in core, these actually are content blocks. If there is then a lightbox that opens when clicking a TinyMCE view's toolbar (like the &lt;code&gt;gallery&lt;/code&gt; shortcodes) the  could then display controls for manipulating the shortcode's fields, and these controls could be the same controls that are displayed in the customizer sections (I have some &lt;a class="ext-link" href="https://github.com/xwp/standalone-customizer-controls"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;proof of concept code&lt;/a&gt; showing customizer controls being used outside the customizer entirely). As much as I would love to guide more users into the customizer to edit such multi-panel configurations (er, content) it seems that this could be implemented in the edit post screen as well via TinyMCE views representing shortcodes.
&lt;/p&gt;
&lt;p&gt;
Challenges I see with using shortcodes in this way is maybe they actually shouldn't be movable. The multi-panel idea is described here as though the content in each panel is displayed where the template defines, not where the user defines. So even if someone were to drag a shortcode up to the top of the content, maybe the template would still display it in the footer. So perhaps these multi-panel configurations that get encoded in shortcodes could have no visual representation at all? In an edit post screen context, maybe the interfaces for editing the panels would look like metaboxes that have the controls that read/write data from the content.
&lt;/p&gt;
&lt;p&gt;
Another problem with what I described here is that if the panel editing should also be doable from the edit post screen, a &lt;code&gt;add_template_support()&lt;/code&gt; wouldn't really work because the configurations would need to be declared in a way that doesn't require the template to be run. Consider switching out a page template in the edit post screen and how switching the page template there could cause the metaboxes available to change according to what panels the template supports.
&lt;/p&gt;
&lt;p&gt;
Last note: the &lt;a class="ext-link" href="https://wordpress.org/plugins/customize-posts/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Customize Posts&lt;/a&gt; plugin has a feature whereby the Preview button on the edit post screen will open the customizer to preview that post's preview URL. The customizer section that contains the fields for that post (title, content, author, etc) is autofocused and changes made to those fields are synced back to the edit post screen so that when you close the customizer you can then Update/Publish the post and at that point the changes go live. This kind of setup could bridge the gap between exposing the editing of the panel configurations in the customizer but providing a way to easily access them from the edit post screen. In this way, the editing experiences wouldn't have to be duplicated between the edit post screen and the customizer, and changing the page template on the edit post screen wouldn't then have to load up a different UI based on what the selected template supports (since the selected page template would be known up-front when the customizer loads).
&lt;/p&gt;
&lt;p&gt;
Sorry for the long comment.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20714 (Theme customizer: Impossible to preview a search results page) closed</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 05:04:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20714#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20714#comment:20/1473570280317323</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/38587" title="Customize: Implement previewing of form submissions which use the GET ..."&gt;38587&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Customize: Implement previewing of form submissions which use the GET method.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This finally allows the search results template to navigated to in the customizer preview.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20714" title="#20714: enhancement: Theme customizer: Impossible to preview a search results page (closed: fixed)"&gt;#20714&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [38587]: Customize: Implement previewing of form submissions which use the GET ...</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 11 Sep 2016 05:04:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/38587</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/38587/1473570279827730</guid>
      <description>&lt;p&gt;
Customize: Implement previewing of form submissions which use the GET method.
&lt;/p&gt;
&lt;p&gt;
This finally allows the search results template to navigated to in the customizer preview.
&lt;/p&gt;
&lt;p&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20714" title="#20714: enhancement: Theme customizer: Impossible to preview a search results page (closed: fixed)"&gt;#20714&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38020 (Images not showing depending on the name) updated</title>
      
        <dc:creator>w3r3k3</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:31:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38020#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38020#comment:2/1473568296632565</guid>
      <description>&lt;p&gt;
I am doing it directly to the media library and yes I know, but it is supossed to be fixed by the platform like any other site (automatically change spaces for - or _) and I don't remember having this issue before (I have been using WP in different sites for some years now).
&lt;/p&gt;
&lt;p&gt;
And like I said before, it will happen also if you put a name without spaces but using some numbers like img_160x160.jpg or .png
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38020 (Images not showing depending on the name) updated</title>
      
        <dc:creator>LindsayBSC</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:14:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38020#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38020#comment:1/1473567290334932</guid>
      <description>&lt;p&gt;
This is the nature of http and you can not / should not have spaces in your file names that are meant to be used on the internet. Spaces are filled by %20% when requested in the browser but not in the file request.
&lt;/p&gt;
&lt;p&gt;
Are you uploading the image via some plugin? Or directly to the media library?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38020 (Images not showing depending on the name) created</title>
      
        <dc:creator>w3r3k3</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:11:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38020</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38020/1473567075635669</guid>
      <description>&lt;p&gt;
Hello
&lt;/p&gt;
&lt;p&gt;
After many hours strugling with the image ads I was trying to put into my posts, I found something:
&lt;/p&gt;
&lt;p&gt;
If you upload an image that has spaces in the name (i.e. this pic.jpg) it is not going to show in the media library and neither in the post but if you try to open it directly you can see it is OK.
Also if you upload a picture with a name like banner-160x600.jpg it is not showing neither in the media library thumbnail nor the post.
&lt;/p&gt;
&lt;p&gt;
I already deactivated all my plugins and changed the theme to the default, and I don't use any cache plugin. If I change the name of the picture to something like bann-test.jpg the it uploads and show like normal so I don't understand what is happening.
&lt;/p&gt;
&lt;p&gt;
I am using es-MX language and of course latest public available version.
&lt;/p&gt;
&lt;p&gt;
Greetings
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #28053 (Fields with same name added to new media modal using ...) updated</title>
      
        <dc:creator>LindsayBSC</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:08:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28053#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28053#comment:17/1473566919617167</guid>
      <description>&lt;p&gt;
It works for any data sent as an array so it would completely depends on how you collect your form values. If you are using select boxes then are you using a selectbox javascript plugin for this?
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/28053#comment:16" title="Comment 16"&gt;drosendo&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/28053#comment:15" title="Comment 15"&gt;LindsayBSC&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I was asking why you felt the patch needed rewriting - which, even though you said you didn't want to discuss why, you actually did explain.
&lt;/p&gt;
&lt;p&gt;
So you feel your patch is more readable than the provided previous patch? I am asking for my own reference to understand if/when/how my code could be improved.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Hi,
&lt;/p&gt;
&lt;p&gt;
Actually I now recall why I did my patch, I believe your patch doesn't include multiple select fields, and only handles checkboxes.
Am I incorrect?
&lt;/p&gt;
&lt;p&gt;
Thanks,
David
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29785 (User count not correct) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:04:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29785#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29785#comment:11/1473566679176495</guid>
      <description>&lt;p&gt;
Hi @dots - Thanks for working on this ticket!
&lt;/p&gt;
&lt;p&gt;
Unless there's a reason to believe that the existing tests are *incorrect*, it would be best to add some new tests for the specific bug we're trying to fix. &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/29785/29785.2.diff" title="Attachment '29785.2.diff' in Ticket #29785"&gt;29785.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/29785/29785.2.diff" title="Download"&gt;​&lt;/a&gt; is an example of what such a test might look like.
&lt;/p&gt;
&lt;p&gt;
Regarding your proposed fix: Be sure to add a corresponding fix for the 'time' &lt;code&gt;$strategy&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>29785.2.diff attached to Ticket #29785</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:00:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29785/29785.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29785/29785.2.diff/1473566453235958</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>29785.diff attached to Ticket #29785</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 04:00:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29785/29785.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29785/29785.diff/1473566452731562</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #9757 (Allow Plugin/Theme updates from a uploaded .zip file.) updated</title>
      
        <dc:creator>bfintal</dc:creator>

      <pubDate>Sun, 11 Sep 2016 03:38:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/9757#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/9757#comment:29/1473565092508048</guid>
      <description>&lt;p&gt;
Perhaps we can merge parts of this plugin into core: &lt;a class="ext-link" href="https://wordpress.org/plugins/easy-theme-and-plugin-upgrades/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/plugins/easy-theme-and-plugin-upgrades/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #21760 (get_term_by() calls are not cached) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 11 Sep 2016 03:24:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21760#comment:93</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21760#comment:93/1473564261744144</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by boone. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1473564259001129"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #12955 (Add get_post filter) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:48:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/12955#comment:43</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/12955#comment:43/1473562115540175</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by boone. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1473562113001068"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #21309 (Introduce WP_Post class) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:41:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21309#comment:93</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21309#comment:93/1473561697925170</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by boone. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1473561694001064"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37867 (Document return types for create/create_and_get/create_many() methods ...) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:34:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37867#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37867#comment:9/1473561257584086</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37867#comment:8" title="Comment 8"&gt;boonebgorges&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@DrewAPicture Can you have a think about what @jdgrimes is proposing?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Using &lt;code&gt;@method&lt;/code&gt; annotations would definitely be the most efficient way to go, albeit copping out of doing it the "right" way, which would of course involve redefining and documenting all of the relevant superclass methods in each of the factories.
&lt;/p&gt;
&lt;p&gt;
Using &lt;code&gt;@method&lt;/code&gt; annotations in this way is a bit of a bastardization of their intent to be sure, but it gets the job done. I personally think in the specific context of our unit test factories, the level of potential confusion (in expecting magic methods) would be fairly low.
&lt;/p&gt;
&lt;p&gt;
FWIW, we just implemented custom test factories in a plugin I work on and this is actually the same method we used to indicate return types.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37825 (Introduce functions to check whether there are multiple taxonomy terms) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:29:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37825#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37825#comment:3/1473560975524315</guid>
      <description>&lt;p&gt;
Idea seems OK to me, if it is in fact true that theme authors would find it useful. I don't fully grasp the utility of it, but I also don't fully grasp the utility of &lt;code&gt;is_multi_author()&lt;/code&gt; :) Do you have examples of themes that are implementing this logic on their own?
&lt;/p&gt;
&lt;p&gt;
A couple notes on the patch:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;is_multi_taxonomy()&lt;/code&gt; does not feel like the right name for this proposed function. &lt;code&gt;is_multi_author()&lt;/code&gt; is checking to see whether the site has multiple authors. By extension, &lt;code&gt;is_multi_taxonomy()&lt;/code&gt; would check to see whether the site has multiple taxonomies. But this is not right. &lt;code&gt;wp_taxonomy_has_multiple_terms( $taxonomy )&lt;/code&gt; seems more semantically correct.
&lt;/li&gt;&lt;li&gt;I don't think we need to have the underscore prefix for &lt;code&gt;_clear_multi_taxonomy_cache()&lt;/code&gt;. We're moving away from this kind of naming convention.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37914 (Taxonomy: Allow terms to be previewed before publishing) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:14:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37914#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37914#comment:3/1473560087347385</guid>
      <description>&lt;p&gt;
Whoops, I just left some thoughts on &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/37915" title="#37915: enhancement: Customize: allow terms to be created in nav menus (assigned)"&gt;#37915&lt;/a&gt; that I probably should have left here instead. See &lt;a href="https://core.trac.wordpress.org/ticket/37915#comment:3"&gt;https://core.trac.wordpress.org/ticket/37915#comment:3&lt;/a&gt; and &lt;a href="https://core.trac.wordpress.org/ticket/37915#comment:4"&gt;https://core.trac.wordpress.org/ticket/37915#comment:4&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37915 (Customize: allow terms to be created in nav menus) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:13:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37915#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37915#comment:4/1473559992643859</guid>
      <description>&lt;p&gt;
A very brief follow-up, before I forget: Third-party integration into the term creation/deletion process is likely to be a point of friction here, both in the short and long term. Imagine you have a plugin that does something like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_action( 'create_term', function( $term_id, $tt_id, $taxonomy ) {
    if ( 'foo' === $taxonomy ) {
        do some stuff
    }
}, 10, 3 );
&lt;/pre&gt;&lt;p&gt;
If draft terms are in a "shadow" taxonomy, then they won't be identified properly by this logic. This might cause bugs in some cases. On the other hand, if and when we have a &lt;code&gt;term_status&lt;/code&gt; system, so that draft terms are actually created in the proper taxonomy, they *will* be identified as terms by this logic. And this might cause bugs of its own! There's probably no way to solve this without some change in expected behavior for plugins, and whatever we do, we should be sure to create documentation to explain the potential fallout to developers.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37915 (Customize: allow terms to be created in nav menus) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 02:07:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37915#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37915#comment:3/1473559650903636</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Previously: &lt;a href="https://core.trac.wordpress.org/ticket/34923#comment:46"&gt;https://core.trac.wordpress.org/ticket/34923#comment:46&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Having thought a bit more about this, I agree with my former self (good job, former self!) that the most feasible strategy for the time being is a "shadow" taxonomy for each affected taxonomy. Very roughly, here's what I'm imagining:
&lt;/p&gt;
&lt;pre class="wiki"&gt;if ( is_customize_preview() || this is customize.php ) {
    $menu_taxonomies = get_taxonomies( array( 'show_in_nav_menus' =&amp;gt; true ), 'objects' );
    foreach ( $menu_taxonomies as $menu_tax_name =&amp;gt; $menu_tax ) {
        $shadow_tax_name = '_draft_' . $menu_tax_name;
        $shadow_args = (array) $menu_tax;
        $shadow_args['public'] = false;
        $shadow_args['show_ui'] = false;
        $shadow_args['show_in_menu'] = false;
        $shadow_args['show_tagcloud'] = false;
        // etc
        register_taxonomy( $shadow_tax_name, $shadow_args['object_type'], $shadow_args );
    }
}
&lt;/pre&gt;&lt;p&gt;
When customizing, save terms as '_draft_post_tag' etc, and when changes are saved, delete the draft terms and publish them as actual terms.
&lt;/p&gt;
&lt;p&gt;
Does this strategy seem workable and sane to you? (Keeping in mind that "sane" is a relative term in this context.) Of the available options, it seems to me like the one with the smallest footprint and the least likelihood of interfering with (a) future improvements to the taxonomy system, and (b) the various ways in which taxonomy terms are used - and especially queried - in the wild.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37867 (Document return types for create/create_and_get/create_many() methods ...) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 01:48:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37867#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37867#comment:8/1473558507129524</guid>
      <description>&lt;p&gt;
@DrewAPicture Can you have a think about what @jdgrimes is proposing?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33372 (WP_Query may return incorrect results when using negative values with ...) updated</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 01:46:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33372#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33372#comment:34/1473558363063733</guid>
      <description>&lt;p&gt;
@kouratoras Thanks for the patch. But I'm wary of just dropping it in for what seems, at a glance, to be incorrect behavior on HHVM's part. Are you able to do more debugging into why &lt;code&gt;is_scalar()&lt;/code&gt; is returning true in these instances? Can you examine exactly what's being passed into &lt;code&gt;is_scalar()&lt;/code&gt; at this point? There are a lot of references being thrown around in WP_Query, and I wonder if HHVM might be choking on one of them.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18106 (get_terms of posts in a specific post_type) closed</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sun, 11 Sep 2016 01:13:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18106#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18106#comment:13/1473556413617156</guid>
      <description>wontfix: &lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/18106#comment:11" title="Comment 11"&gt;wordpresssites&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
How about adding a 'post_type' and 'category' argument to &lt;code&gt;get_tags()&lt;/code&gt; or &lt;code&gt;get _terms()&lt;/code&gt; or  &lt;code&gt;get_categories&lt;/code&gt; so tags can be listed for different post types or categories? The only way to do that now is to use the include or exclude parameters.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The technical explanation for 'post_type' can be found &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/18106#comment:7" title="Comment 7"&gt;in my comment above&lt;/a&gt;. I'm not sure what 'category' would mean in this context: show all tags that belong to posts that are also in a given category? That kind of query would be even *more* resource-intensive than the 'post_type' query - I think that about 7 database tables would be involved. That kind of use case is specific enough that I think that a custom implementation using 'include' is probably the most appropriate.
&lt;/p&gt;
&lt;p&gt;
I'm going to close this ticket again, as I think that the reasoning from comment 7 still stands. If anyone is able to work up a way of handling this so that it has a reasonable chance of scaling, please feel free to reopen with those details.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #37989 (Unexpected change to media title behavior in WP 4.6.1) updated</title>
      
        <dc:creator>folletti</dc:creator>

      <pubDate>Sat, 10 Sep 2016 23:53:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37989#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37989#comment:12/1473551623736218</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/37989#comment:11" title="Comment 11"&gt;SergeyBiryukov&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
A workaround:
&lt;/p&gt;
&lt;pre class="wiki"&gt;function wp37989_fix_encoded_attachment_titles( $data, $postarr ) {
	$basename = pathinfo( $postarr['file'], PATHINFO_BASENAME );
	$data['post_title'] = sanitize_text_field( $basename );
	return $data;
}
add_filter( 'wp_insert_attachment_data', 'wp37989_fix_encoded_attachment_titles', 10, 2 );
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
I have test but also imports the extension, was not there before with 4.6.0
ex. DSC_06060.jpg = with 4.6.0 is DSC_06060 and not DSC_06060.jpg
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38018 (WP post max size being used for Upload file size) updated</title>
      
        <dc:creator>Paulds11</dc:creator>

      <pubDate>Sat, 10 Sep 2016 23:38:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38018#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38018#comment:2/1473550713241848</guid>
      <description>&lt;p&gt;
ok I didn't know that. Seems odd to me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37989 (Unexpected change to media title behavior in WP 4.6.1) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 10 Sep 2016 23:09:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37989#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37989#comment:11/1473548949333065</guid>
      <description>&lt;p&gt;
A workaround:
&lt;/p&gt;
&lt;pre class="wiki"&gt;function wp37989_fix_encoded_attachment_titles( $data ) {
	if ( empty( $_FILES ) ) {
		return $data;
	}
	$file = current( $_FILES );
	$ext  = pathinfo( $file['name'], PATHINFO_EXTENSION );
	$name = wp_basename( $file['name'], ".$ext" );
	$data['post_title'] = sanitize_text_field( $name );
	return $data;
}
add_filter( 'wp_insert_attachment_data', 'wp37989_fix_encoded_attachment_titles' );
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38018 (WP post max size being used for Upload file size) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 10 Sep 2016 22:57:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38018#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38018#comment:1/1473548240517629</guid>
      <description>invalid: &lt;p&gt;
Hi @Paulds11, welcome to Trac! Thanks for the ticket.
&lt;/p&gt;
&lt;p&gt;
Both &lt;code&gt;post_max_size&lt;/code&gt; and &lt;code&gt;upload_max_filesize&lt;/code&gt; values affect uploads, as well as &lt;code&gt;memory_limit&lt;/code&gt;. To upload large files, &lt;code&gt;post_max_size&lt;/code&gt; must be larger than &lt;code&gt;upload_max_filesize&lt;/code&gt;, and &lt;code&gt;memory_limit&lt;/code&gt; should be larger than &lt;code&gt;post_max_size&lt;/code&gt;. This is how PHP uploads work in general, not just in WordPress.
&lt;/p&gt;
&lt;p&gt;
See these links for more info:
&lt;a class="ext-link" href="http://php.net/manual/en/ini.core.php#ini.post-max-size"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://php.net/manual/en/ini.core.php#ini.post-max-size&lt;/a&gt;
&lt;a class="ext-link" href="http://stackoverflow.com/questions/7754133/php-post-max-size-overrides-upload-max-filesize"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://stackoverflow.com/questions/7754133/php-post-max-size-overrides-upload-max-filesize&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #38019 (Notify site admin when domain or IP changes and Search Engine ...) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 10 Sep 2016 19:19:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38019#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38019#comment:1/1473535147287737</guid>
      <description>&lt;p&gt;
Related: &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/35288" title="#35288: defect (bug): Search Engines Discouraged message improvements (new)"&gt;#35288&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38019 (Notify site admin when domain or IP changes and Search Engine ...) created</title>
      
        <dc:creator>vaniivan</dc:creator>

      <pubDate>Sat, 10 Sep 2016 19:13:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38019</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38019/1473534803157601</guid>
      <description>&lt;p&gt;
It would be very valuable to me (and some other wp folks too) if I could get an &lt;strong&gt;email notification&lt;/strong&gt; when a site is moved from &lt;strong&gt;localhost&lt;/strong&gt; or &lt;strong&gt;staging&lt;/strong&gt; to &lt;strong&gt;production&lt;/strong&gt; site and &lt;strong&gt;Search Engine Visibility&lt;/strong&gt; is set to &lt;strong&gt;Discourage&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
It could be as easy as setting two options, domain and ip and checking them in some hook. If not matching and SEO off - send email.
&lt;/p&gt;
&lt;p&gt;
The possibility of a misfire and an occasional nag is well worth the SEO points, or so the SEO guys say.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 10 Sep 2016 19:13:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:34/1473534780046556</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/20491#comment:32" title="Comment 32"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Anything I'm missing?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
🍷
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38013 (Static Front Page section/controls should be contextual and allow ...) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 10 Sep 2016 18:55:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38013#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38013#comment:2/1473533731427531</guid>
      <description>&lt;p&gt;
Polyfill added to the Customize Posts plugin in &lt;a class="ext-link" href="https://github.com/xwp/wp-customize-posts/pull/254/files"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/xwp/wp-customize-posts/pull/254/files&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36934 (Use of get_the_excerpt($post) is broken if post has no excerpt and you ...) updated</title>
      
        <dc:creator>achbed</dc:creator>

      <pubDate>Sat, 10 Sep 2016 18:06:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36934#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36934#comment:27/1473530786307175</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36934#comment:26" title="Comment 26"&gt;swissspidy&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Gets rid of the &lt;code&gt;$pages&lt;/code&gt; and &lt;code&gt;$multipage&lt;/code&gt; globals by moving logic to &lt;code&gt;WP_Post&lt;/code&gt;.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Should we have a quick scan done of the theme and plugin repository to see if this affects anyone &lt;code&gt;doing_it_wrong()&lt;/code&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38018 (WP post max size being used for Upload file size) created</title>
      
        <dc:creator>Paulds11</dc:creator>

      <pubDate>Sat, 10 Sep 2016 17:17:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38018</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38018/1473527822880435</guid>
      <description>&lt;p&gt;
i guys just to let you know
Centos LAMP server &amp;gt;PHP config editor. I couldnt upload a plug-in but my PHP server settings had upload_max_filesize=90M for a 55m file should be ok right?
well, turns out post_max_size = WordPress “Maximum upload file size” which seems odd to me, i think the directive is incorrect.
&lt;/p&gt;
&lt;p&gt;
So it seems WordPress is using post max size directive as its measure of Üpload file size instead of upload_max_filesize ?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38017 (Add widget instance to remaining widget argument filters) created</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 10 Sep 2016 13:38:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38017</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38017/1473514708307678</guid>
      <description>&lt;p&gt;
In &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/20788" title="#20788: enhancement: Add widget instance argument to widget_links_args filter (closed: fixed)"&gt;#20788&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33944" title="#33944: enhancement: Add parameters to widget_nav_menu_args filter (closed: fixed)"&gt;#33944&lt;/a&gt;, the &lt;code&gt;$instance&lt;/code&gt; argument was added to these filters:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;widget_nav_menu_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_links_args&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
For consistency, other widget argument filters should have it too:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;widget_archives_dropdown_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_archives_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_categories_dropdown_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_categories_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_pages_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_comments_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_posts_args&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;widget_tag_cloud_args&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #34657 (WordPress doesn't set object terms for menu items so pending items not ...) updated</title>
      
        <dc:creator>rss_samuel</dc:creator>

      <pubDate>Sat, 10 Sep 2016 11:30:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34657#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34657#comment:4/1473507013548700</guid>
      <description>&lt;p&gt;
After changes it works for me.
&lt;a style="padding:0; border:none" href="https://i.imgsafe.org/3ee6fa389a.png"&gt;&lt;img src="https://i.imgsafe.org/3ee6fa389a.png" alt="https://i.imgsafe.org/3ee6fa389a.png" crossorigin="anonymous" title="https://i.imgsafe.org/3ee6fa389a.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #37989,​38016 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sat, 10 Sep 2016 11:16:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=37989%2C38016</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=37989%2C38016/1473506168524060</guid>
      <description>duplicate: &lt;p&gt;
Hello @folletti, welcome to our Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for your report, we're already tracking this issue in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37989" title="#37989: defect (bug): Unexpected change to media title behavior in WP 4.6.1 (closed: fixed)"&gt;#37989&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #38016 (Title of image change with 4.6.1 problem) created</title>
      
        <dc:creator>folletti</dc:creator>

      <pubDate>Sat, 10 Sep 2016 11:14:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38016</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38016/1473506042896905</guid>
      <description>&lt;p&gt;
With the update 4.6.1 the image imported in media the file name is with uppuercase is imported in lowcase. Ex. DSC_0303.jpg = dsc_0303 or "Image Test.jpg" = image-test.
Is possible resolution?
&lt;/p&gt;
&lt;p&gt;
thanks
Emanuele
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>34657.patch attached to Ticket #34657</title>
      
        <dc:creator>rss_samuel</dc:creator>

      <pubDate>Sat, 10 Sep 2016 11:01:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/34657/34657.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/34657/34657.patch/1473505295115459</guid>
      <description>&lt;p&gt;
I change &lt;code&gt;/wp-admin/includes/ajax-actions.php&lt;/code&gt; file.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>ThemeZee</dc:creator>

      <pubDate>Sat, 10 Sep 2016 09:57:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:10/1473501437236683</guid>
      <description>&lt;p&gt;
I would really like to see a Core solution for multi-panel pages, we need this :)
&lt;/p&gt;
&lt;p&gt;
However, I am not in favor of implementing this by just adding Multi Panel settings to Core. I do not see the benefit in standardization here. It made sense to add the custom logo feature since all themes can use the same setting now.
&lt;/p&gt;
&lt;p&gt;
But IMHO static front pages are far to different between themes to have standard Core settings. The screenshot shows layout/column settings for example, which could be totally different in the next theme. Or think of magazine themes which would more likely use category sections instead of pages for their front page.
&lt;/p&gt;
&lt;p&gt;
A few simple settings to select featured pages for the front page can be easily added by themes. It is more flexible than Core defining standard settings.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I wonder whether we might be able to accomplish something similar with a more straightforward UI if it were based on widgets, and new core widgets that supported this type of functionality were introduced. That way we'd be able to leverage the existing core UI for adding/reordering/number of items/etc, and on a technical level things like selective refresh and the work on storing widgets as post objects. This idea is generally related to widgets as "content blocks".
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1 for Content Blocks. I would really like a Content Block API on top of the Widget API, or simply a new type of Widget for these. Just some way of separating them from normal widgets.
&lt;/p&gt;
&lt;p&gt;
I see serveral advantages over static settings:
&lt;/p&gt;
&lt;p&gt;
1) Flexibility: Think of plugins registering content blocks for displaying custom post types. Think of magazine themes adding category blocks. Or Core adding adding a Image Gallery block. And there can be a "Featured Page" content block as well.
&lt;/p&gt;
&lt;p&gt;
2) Usage: Content Blocks could be used on multiple pages, not just a front page.
&lt;/p&gt;
&lt;p&gt;
3) Order: Re-ordering Content Blocks like Widgets is powerful.
&lt;/p&gt;
&lt;p&gt;
4) Data Storage: Sometimes users just want to add a Text Block on their front page, but don't want a new page with its own URL for it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Sat, 10 Sep 2016 08:49:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:9/1473497394297967</guid>
      <description>&lt;p&gt;
I look forward to some very fruitful UI and implementation discussions!
Multi panels feature is an area that really needs some good exploration.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35817 (Force users to set strong passwords) updated</title>
      
        <dc:creator>lovingboth</dc:creator>

      <pubDate>Sat, 10 Sep 2016 08:39:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35817#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35817#comment:13/1473496773409840</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35817#comment:10" title="Comment 10"&gt;ericlewis&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;This may or may not align with project goals.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
I hadn't realised that there are still people who prioritise 'user friendliness' over security as a project goal.
&lt;/p&gt;
&lt;p&gt;
WordPress has gotten better about this, but it's been a long road and there's still some way to go before aspects aren't embarrassing. The result can be seen in the millions and millions of hacked WP sites out there.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/35817#comment:12" title="Comment 12"&gt;ericlewis&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I would say that security is a feature, and protecting sites from basic brute-force attacks make WordPress a better experience out-of-the-box.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes. Other examples would be stopping attackers from trying as many username/password combos as they like before being slowed down, and removing the ability to do hundreds of them at a time from xmlrpc.php - see other tickets.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>20491.5.diff attached to Ticket #20491</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sat, 10 Sep 2016 08:29:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/20491/20491.5.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/20491/20491.5.diff/1473496183311851</guid>
      <description>&lt;p&gt;
Update Jed.js
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #4539 (Abbreviated year followed by punctuation or markup doesn't texturize) updated</title>
      
        <dc:creator>gitlost</dc:creator>

      <pubDate>Sat, 10 Sep 2016 08:07:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4539#comment:70</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4539#comment:70/1473494850893540</guid>
      <description>&lt;p&gt;
Note that the quotations around links issue got moved to &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/18549" title="#18549: defect (bug): wp_texturize incorrectly curls closing quotes after inline HTML end tags (assigned)"&gt;#18549&lt;/a&gt;. Re the tests, the failing ones were commented out. They're tested in the latest patch on &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/18549" title="#18549: defect (bug): wp_texturize incorrectly curls closing quotes after inline HTML end tags (assigned)"&gt;#18549&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18549 (wp_texturize incorrectly curls closing quotes after inline HTML end tags) updated</title>
      
        <dc:creator>gitlost</dc:creator>

      <pubDate>Sat, 10 Sep 2016 08:03:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18549#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18549#comment:31/1473494638250998</guid>
      <description>&lt;p&gt;
Refresh for WP 4.7. Includes the unit tests as well. The patch is also available as a plugin at &lt;a class="ext-link" href="https://github.com/gitlost/pap-texturize"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;pap-texturize&lt;/a&gt;, the download link is &lt;a class="ext-link" href="https://github.com/gitlost/pap-texturize/raw/master/dist/pap-texturize-1.0.0.zip"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;pap-texturize-1.0.0.zip&lt;/a&gt;. The plugin version also includes a fix for &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/29882" title="#29882: defect (bug): wptexturize: quotes inside quotes curling incorrectly (new)"&gt;#29882&lt;/a&gt; (quotes inside quotes curling incorrectly).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>18549_wptexturize.4.diff attached to Ticket #18549</title>
      
        <dc:creator>gitlost</dc:creator>

      <pubDate>Sat, 10 Sep 2016 08:00:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/18549/18549_wptexturize.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/18549/18549_wptexturize.4.diff/1473494407756085</guid>
      <description>&lt;p&gt;
Refresh for 4.7. Includes unit tests.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38015 (Customize: Nav menu items should preview using original object title ...) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 10 Sep 2016 07:50:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38015#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38015#comment:1/1473493830063109</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>38015.0.diff attached to Ticket #38015</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 10 Sep 2016 07:50:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38015/38015.0.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38015/38015.0.diff/1473493818889932</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #38015 (Customize: Nav menu items should preview using original object title ...) created</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 10 Sep 2016 07:49:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38015</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38015/1473493794202912</guid>
      <description>&lt;p&gt;
In &lt;code&gt;wp_setup_nav_menu_item()&lt;/code&gt; there is logic to set the nav menu item's &lt;code&gt;title&lt;/code&gt; to be the original post or term's title if no title is supplied. This logic is not getting applied when previewing in the customizer, however.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36534 (Media Upload Issue Since 4.5 Upgrade) updated</title>
      
        <dc:creator>aldon</dc:creator>

      <pubDate>Sat, 10 Sep 2016 06:59:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36534#comment:92</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36534#comment:92/1473490771650294</guid>
      <description>&lt;p&gt;
i add the fix code on fuctions.php, and now image uploaded but doesn’t create thumbs (wordpress 4.6.1)
&lt;/p&gt;
&lt;p&gt;
any help?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37978 (Warning: posix_getpwuid() has been disabled for security reasons) updated</title>
      
        <dc:creator>dd32</dc:creator>

      <pubDate>Sat, 10 Sep 2016 05:15:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37978#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37978#comment:4/1473484528799574</guid>
      <description>&lt;p&gt;
I'm not against a &lt;code&gt;wp_function_exists()&lt;/code&gt; which wraps all that logic up.. as much as I hate having to.. something like..
&lt;/p&gt;
&lt;pre class="wiki"&gt;function wp_function_exists( $func ) {
    static $disabled_funcs;
    if ( ! function_exists( $func ) ) {
        return false;
    }
    return $func NOT in statically-cached ini_get( 'disable_functions' );
}
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38014 (blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ...) closed</title>
      
        <dc:creator>dd32</dc:creator>

      <pubDate>Sat, 10 Sep 2016 04:16:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38014#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38014#comment:3/1473481019583618</guid>
      <description>invalid: &lt;p&gt;
Unfortunately nothing I can suggest, you'll need to figure out where and why PHP is failing by triple checking your logs. You may wish to attempt to re-apply all the WordPress files to ensure your issue isn't from a partial upgrade (But that should be obvious from PHP logs indicating the fatal error).
&lt;/p&gt;
&lt;p&gt;
If you're using suhosin you may wish to disable that and/or check it's log files, but without further detail here there's nothing we can go on, and nothing to suggest it's a bug within WordPress 4.6 (which is in use by many millions of others already without similar reports).
&lt;/p&gt;
&lt;p&gt;
Trac is not for support, instead we have the &lt;a class="ext-link" href="https://wordpress.org/support/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Support Forums&lt;/a&gt; for helping diagnose site problems.
I'm marking this as invalid, pending information which can be used to actually pinpoint a bug - at which time we can re-open it.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #37974 (Add multi-panel feature to pages through add_theme_support) updated</title>
      
        <dc:creator>NateWr</dc:creator>

      <pubDate>Sat, 10 Sep 2016 02:55:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37974#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37974#comment:8/1473476138059352</guid>
      <description>&lt;p&gt;
I'm excited to see this proposal and I'd love to see core take a stab at some form of opt-in content panels.
&lt;/p&gt;
&lt;p&gt;
I am a little bit concerned about using core post types as the source of content for these panels. Will posts/pages that are part of a panel still receive their own URL? How does WordPress' search feature handle content like this? Is it excluded or included? Does it point to its own URL or back to the page on which it resides? Will users be in charge of switching visibility of these pages on/off?
&lt;/p&gt;
&lt;p&gt;
Using widget content offers one solution to this problem, though it probably introduces it's own user experience concerns.
&lt;/p&gt;
&lt;p&gt;
Another approach would be to allow content to be drafted in the Customizer and saved to &lt;code&gt;the_content&lt;/code&gt; of the page itself. This is actually pretty easy with all of the work that's been done with the Customizer in the last few releases. The challenge is the user experience, and I appreciate that you're bringing a battle-tested solution to the table here.
&lt;/p&gt;
&lt;p&gt;
Still, I'd love to see core aspire to solving the data storage issue, which I feel is the deepest and most persistent issue that plagues content blocks, whether we're talking about page builders or theme lock-in. Maybe that won't be done with this ticket, but I wanted to at least bring it up for discussion.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38014 (blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ...) updated</title>
      
        <dc:creator>scaturan</dc:creator>

      <pubDate>Sat, 10 Sep 2016 02:29:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38014#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38014#comment:2/1473474584903216</guid>
      <description>&lt;p&gt;
I did those two things already (change to php.ini error_reporting options &amp;amp; setting WP_Debug to "true" - but no error messages are being shown.
&lt;/p&gt;
&lt;p&gt;
the Source with /wp-admin/options-general.php is blank after this line.
&lt;/p&gt;
&lt;p&gt;
"&amp;lt;option value='6' &amp;gt;Saturday&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;"
&lt;/p&gt;
&lt;p&gt;
the Source for /wp-admin/index.php is always empty.
&lt;/p&gt;
&lt;p&gt;
Any other options I can explore?
&lt;/p&gt;
&lt;p&gt;
Please advise, thank you!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34657 (WordPress doesn't set object terms for menu items so pending items not ...) updated</title>
      
        <dc:creator>welcher</dc:creator>

      <pubDate>Sat, 10 Sep 2016 00:56:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34657#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34657#comment:3/1473468979845150</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34657 (WordPress doesn't set object terms for menu items so pending items not ...) updated</title>
      
        <dc:creator>welcher</dc:creator>

      <pubDate>Sat, 10 Sep 2016 00:56:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34657#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34657#comment:2/1473468968676240</guid>
      <description>&lt;p&gt;
Hi!
&lt;/p&gt;
&lt;p&gt;
Thanks for the ticket! It looks like you have an idea of how to address this - did you want to submit a patch?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38014 (blank /wp-admin/index.php after upgrade from 4.5.x, missing Save ...) updated</title>
      
        <dc:creator>dd32</dc:creator>

      <pubDate>Sat, 10 Sep 2016 00:34:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38014#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38014#comment:1/1473467642892017</guid>
      <description>&lt;p&gt;
Hi @scaturan and welcome back to Trac.
&lt;/p&gt;
&lt;p&gt;
A blank render of the page, and output halting at the language sections, suggests that you may be hitting a PHP Fatal error during the page load for some reason, or perhaps a permissions error which is being hidden by PHP.
&lt;/p&gt;
&lt;p&gt;
Can you check your PHP error logs for any fatal errors, and/or attempt defining &lt;a class="ext-link" href="https://codex.wordpress.org/WP_DEBUG"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;`WP_DEBUG`&lt;/a&gt; to see if that'll allow for the error messages to be shown?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34391 (Harden panel/section UI code by removing contents from being logically ...) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sat, 10 Sep 2016 00:01:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34391#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34391#comment:35/1473465663964889</guid>
      <description>&lt;p&gt;
I tested the patch and it works well for me. I've done an initial pass through the code but want to dig in deeper to make sure I fully understand the scope of the changes.
&lt;/p&gt;
&lt;p&gt;
The biggest backwards compatibility red flag is that [object]&lt;code&gt;.container&lt;/code&gt; will work much differently, and in most cases should be changed to &lt;code&gt;.content&lt;/code&gt;. We'll need to do everything we can to alert theme and plugin developers of this change, and should search the theme and plugin repos for &lt;code&gt;extends WP_Customize_Section&lt;/code&gt; and &lt;code&gt;extends WP_Customize_Panel&lt;/code&gt; to alert specific authors, in addition to a make/core post.
&lt;/p&gt;
&lt;p&gt;
@delawski could you take a look at the patch on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/37661" title="#37661: feature request: A New Experience for Discovering, Installing, and Previewing Themes in ... (closed: fixed)"&gt;#37661&lt;/a&gt; and gauge how drastically that custom panel and section would need to change to account for the changes here? The sections need to be nested within the panel markup, but section headings are separated from content there. I don't think any 3rd parties will have changes this drastic, but I want  to make sure it's feasible to update if there are any.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>