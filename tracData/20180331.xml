<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #43670 (cannot login as Admin with 404 error) created</title>
      
        <dc:creator>serros88</dc:creator>

      <pubDate>Sat, 31 Mar 2018 22:58:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43670</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43670/1522537129738487</guid>
      <description>&lt;p&gt;
Hi,
&lt;/p&gt;
&lt;p&gt;
Actually I noticed that many folks have this error as mentioned (or so).
Impossible today to login as Admin on my website, on which I just did some changes (under win10). I tried many ways for hours but no success, really annoying!!!
&lt;/p&gt;
&lt;p&gt;
Maybe the BUG:
Suddenly I tried to login with my mobile phone (huawai p8 android) and I could immediately access my website with Admin login. Then, I could also do it immediately on my 2 PC win10.... ;-)
&lt;/p&gt;
&lt;p&gt;
Am sure you agree that it is very strange and I have no idea how it could work that way.
&lt;/p&gt;
&lt;p&gt;
Maybe a......BUG! :-)
&lt;/p&gt;
&lt;p&gt;
Cheers
Serge
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>joehoyle</dc:creator>

      <pubDate>Sat, 31 Mar 2018 15:46:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:31/1522511182687532</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Exactly this. However, show_in_rest has historically meant "reveal in REST" (whether or not the data is exposed), so I don't think it makes sense to change this on a whim. Possibly, the intermediate implementation could be editable_in_rest and default to true.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't think this is the right approach, and also I don't think anything is changing on a whim. Forget any "REST" based flag, we should be saying what is public, and what isn't, and for not-public things, who has access to read them. We have to deal with the backwards compat of &lt;code&gt;show_in_rest&lt;/code&gt; (hence this ticket), but introducing more technology specific flags has to be the wrong direction.
&lt;/p&gt;
&lt;p&gt;
This is precisely what I've proposed in this ticket:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
I propose we default show_in_rest to true in the following scenarios:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Object types registered with public =&amp;gt; true (only).
Object types registered with publicly_queryable =&amp;gt; true.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Because those &lt;em&gt;are&lt;/em&gt; already public. I think there are more cases to open up more "private" post types to the REST API, however I'm not trying to boil the ocean with this ticket. Even if we think that &lt;code&gt;public =&amp;gt; true&lt;/code&gt; is too broad, there has to be a case for &lt;code&gt;publicly_queryable =&amp;gt; true&lt;/code&gt;, as I can get that data from any WordPress site by adding a query var to the URL.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Correct. But these aren't present in 42785.4.diff. That patch, for instance, would give me (a WordPress.com user) access to every CPT registered on every CPT site. Not only that, but it also incorrectly overrides the value passed by the developer.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, I think 42785.4.diff is a very bad hack and should not be committed - &lt;code&gt;is_user_logged_in&lt;/code&gt; means next to nothing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Sat, 31 Mar 2018 14:49:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:58</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:58/1522507798562788</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Sorry I'm going to repeat myself but autosaving is "trigger saving a post". It is the same concept of "saving a post", uses the same data shape, form, and size, and performs the same action as a result of the same intent by the client.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Please note that you're talking about integrating a "switch" to distinguish between them so that you can have differing behavior between the two.
&lt;/p&gt;
&lt;p&gt;
But, yes, I agree, the discussion has taken place. I'm indeed +1 on an &lt;code&gt;/autosaves/&lt;/code&gt; endpoint.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42937 (Success Message should display on insertion of new category in ...) updated</title>
      
        <dc:creator>manishamakhija</dc:creator>

      <pubDate>Sat, 31 Mar 2018 13:45:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42937#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42937#comment:7/1522503918893524</guid>
      <description>&lt;p&gt;
Need for this new enhancement:
In one of my project when I was entering new term in category, it doesn't show at the top/first position though it is added in the backend which displays after page refresh. For more clarification see video I've attached in it. So it's better if we can add success message too.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>error-in-UI-in-add-term.webm attached to Ticket #42937</title>
      
        <dc:creator>manishamakhija</dc:creator>

      <pubDate>Sat, 31 Mar 2018 13:44:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/42937/error-in-UI-in-add-term.webm</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/42937/error-in-UI-in-add-term.webm/1522503853881939</guid>
      <description>&lt;p&gt;
New term not append in term list after successful insertion
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #42814 (PHP 7.2 Warning: ...wp-includes/post-template.php on line 284) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 31 Mar 2018 10:49:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42814#comment:43</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42814#comment:43/1522493362438739</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/42814#comment:42" title="Comment 42"&gt;FPCSJames&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This also occurs when calling wp_calculate_image_srcset().
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That one's already fixed in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43201" title="#43201: defect (bug): PHP Warning:  count(): Parameter must be an array or an object that ... (closed: fixed)"&gt;#43201&lt;/a&gt;, the fix will ship with 4.9.5.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43372 ($wp_query-&gt;max_num_pages return value as float) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sat, 31 Mar 2018 09:52:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43372#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43372#comment:2/1522489973177780</guid>
      <description>&lt;p&gt;
@ironghost63 Welcome to WordPress Trac and thank you for the report.
&lt;/p&gt;
&lt;p&gt;
But there is more!
&lt;/p&gt;
&lt;p&gt;
The example:
&lt;/p&gt;
&lt;pre class="wiki"&gt;$q = new WP_Query( ['posts_per_page' =&amp;gt; 2 ] );
var_dump( $q-&amp;gt;post_count );
var_dump( $q-&amp;gt;found_posts );
var_dump( $q-&amp;gt;max_num_pages );
&lt;/pre&gt;&lt;p&gt;
displays:
&lt;/p&gt;
&lt;pre class="wiki"&gt;int(2)
string(1) "2"
double(1)
&lt;/pre&gt;&lt;p&gt;
So these counting properties of &lt;code&gt;WP_Query&lt;/code&gt; have three different types!
&lt;/p&gt;
&lt;p&gt;
Within the &lt;code&gt;WP_Query&lt;/code&gt; class, the inline docs says it's an integer:
&lt;/p&gt;
&lt;pre class="wiki"&gt;/**
 * The amount of pages.
 *
 * @since 2.1.0
 * @var int
 */
public $max_num_pages = 0;
&lt;/pre&gt;&lt;p&gt;
The calculated value comes from:
&lt;/p&gt;
&lt;pre class="wiki"&gt;$this-&amp;gt;max_num_pages = ceil( $this-&amp;gt;found_posts / $q['posts_per_page'] );
&lt;/pre&gt;&lt;p&gt;
but from the &lt;a class="ext-link" href="http://php.net/manual/en/function.ceil.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PHP docs&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The return value of &lt;code&gt;ceil()&lt;/code&gt; is still of type float as the value range of float is usually bigger than that of integer.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The inline docs for &lt;code&gt;found_posts&lt;/code&gt; also says:
&lt;/p&gt;
&lt;pre class="wiki"&gt;/**
 * The amount of found posts for the current query.
 *
 * If limit clause was not used, equals $post_count.
 *
 * @since 2.1.0
 * @var int
 */
public $found_posts = 0;
&lt;/pre&gt;&lt;p&gt;
but the data query
&lt;/p&gt;
&lt;pre class="wiki"&gt;$this-&amp;gt;found_posts = $wpdb-&amp;gt;get_var(...);
&lt;/pre&gt;&lt;p&gt;
returns a string.
&lt;/p&gt;
&lt;p&gt;
So it looks like either we need to adjust the inline docs or adjust the return types.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43669 (Menu Item should have remove button near to accordion title) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Sat, 31 Mar 2018 06:36:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43669#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43669#comment:1/1522478196083081</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43310 (Generic "HTTP Error" when uploading PDFs via Media area) updated</title>
      
        <dc:creator>BearlyDoug</dc:creator>

      <pubDate>Fri, 30 Mar 2018 23:38:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43310#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43310#comment:7/1522453088666081</guid>
      <description>&lt;p&gt;
FYI, tomorrow morning, I will have a barebones WP installation running on one of our PHP7 boxes. I'll be happy to set up an account for you, @johnbillion, and get you FTP access, as well. Found you on Twitter and gave you a follow there... that way I can get you access details directly, as needed. :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42814 (PHP 7.2 Warning: ...wp-includes/post-template.php on line 284) updated</title>
      
        <dc:creator>FPCSJames</dc:creator>

      <pubDate>Fri, 30 Mar 2018 22:47:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42814#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42814#comment:42/1522450049829151</guid>
      <description>&lt;p&gt;
This also occurs when calling wp_calculate_image_srcset(). Changing line 1206 to:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;if ( ! $src_matched || ! is_array( $sources ) || count( $sources ) &amp;lt; 2 ) {&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
fixes the issue.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #30876 (Paste an image into the Media Library) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 30 Mar 2018 22:44:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/30876#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/30876#comment:5/1522449859057734</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by danielbachhuber. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1522449856000208"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43310 (Generic "HTTP Error" when uploading PDFs via Media area) updated</title>
      
        <dc:creator>BearlyDoug</dc:creator>

      <pubDate>Fri, 30 Mar 2018 21:27:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43310#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43310#comment:6/1522445248074108</guid>
      <description>&lt;p&gt;
@johnbillion, apologies for the delay.
&lt;/p&gt;
&lt;p&gt;
Media Debugging Info
Active Editor         WP_Image_Editor_GD
Imagick Module Number         1687
ImageMagick Version         ImageMagick 6.9.7-4 Q16 i686 20170114 &lt;a class="ext-link" href="http://www.imagemagick.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.imagemagick.org&lt;/a&gt;
GD Version         2.2.4
Ghostscript Version         9.20
Memory Limit         300M
Max Execution Time         90
Max Input Time         20
Upload Max Filesize         80M
Post Max Size         80M
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43481 (Add tabs and placeholders to privacy tools page in wp-admin) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Fri, 30 Mar 2018 20:57:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43481#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43481#comment:32/1522443446929008</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43481#comment:30" title="Comment 30"&gt;allendav&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43481#comment:29" title="Comment 29"&gt;melchoyce&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hey @allendav, looking at &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43481/43481-unified-ux-idea.gif" title="Attachment '43481-unified-ux-idea.gif' in Ticket #43481"&gt;43481-unified-ux-idea.gif&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43481/43481-unified-ux-idea.gif" title="Download"&gt;​&lt;/a&gt;, it looks like you could accidentally delete requests for data export? In general, I'm finding this idea very confusing.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In what way? Because of the bulk action? We don't need to have the bulk action for delete.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
All this new stuff is really confusing and complicated. It kind of has to be — issues around privacy and data retention &lt;em&gt;are&lt;/em&gt; complicated. But that means we need to make sure the tools we're providing are as clear and uncomplicated as we can make them.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The idea behind deleting a request is if a request goes months and months without the user confirming the request - to give the site owner a way of "tidying things up."
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn't clear from the interface — when I see that "delete" bulk action, I think, "okay, yes, I am deleting this person's data." I had no idea that you're removing the request, not deleting the data itself. We need to be really careful about how we present this option, because it can go a couple ways:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Site owner goes, "Okay, I'll delete their data. Done!" and then they delete the request, but not the data.
&lt;/li&gt;&lt;li&gt;Site owner goes, "I'll delete all of the peoples' data. Done! Wait, did I also just delete the export requests?? Oh no, oh no, how do I fix this??"
&lt;/li&gt;&lt;li&gt;Site owner looks at this interface, goes "I have no idea what this is," and nopes out.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
We could add a prompt when deleting an individual request, i.e. an "You are about to delete a request. Are you sure?"  If we keep bulk delete we could do that as well, i.e. an "You are about to delete 5 requests. Are you sure?"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't think that clarifies what exactly you're deleting, since it could be perceived as "deleting the data this person asked me to delete."
&lt;/p&gt;
&lt;p&gt;
I need to clarify — is this replacing, or in addition to, the list of folks who have already requested either data export or anonymization? The more I look at this the more I'm starting to think it's in addition to, as in — this is the manual list, versus an automatic list that comes in somewhere that you then need to act upon. Am I correct or incorrect here?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 30 Mar 2018 20:56:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:4/1522443369099109</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@mattkeys great, thanks for the testing.
&lt;/p&gt;
&lt;p&gt;
ps:
&lt;/p&gt;
&lt;p&gt;
There is ticket &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/30206" title="#30206: defect (bug): get_stylesheet_directory_uri() includes space (closed: invalid)"&gt;#30206&lt;/a&gt; but I don't think it's the same issue though.
&lt;/p&gt;
&lt;p&gt;
Then one can wonder about the edge case, when the full directory path is returned, if that should be handled to support spaces?
&lt;/p&gt;
&lt;p&gt;
But I just stumbled up on &lt;a href="https://core.trac.wordpress.org/ticket/23661#comment:1"&gt;this comment&lt;/a&gt; by &lt;code&gt;@nacin&lt;/code&gt;, an interesting idea to add a second URL argument to &lt;code&gt;register_theme_directory()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
That would be one way to avoid the above edge case.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 20:04:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:30/1522440285908579</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
So, it's better we start planning for this now. I propose we define for each entity what's public, what's not, what capability is needed to see any field.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, +1 to this. I think this ticket needs to be a research project first, and implementation details later. Personally, I'd suggest tracking down a couple dozen real implementations of CPTs, and then begin evaluating from there.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There's undoubtedly some work to do to define exactly what post types can be read be unauthenticated users, and logged in ones. However, &lt;code&gt;show_in_rest&lt;/code&gt; should not be this, and we should start to phase it's existence out.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Exactly this. However, &lt;code&gt;show_in_rest&lt;/code&gt; has historically meant "reveal in REST" (whether or not the data is exposed), so I don't think it makes sense to change this on a whim. Possibly, the intermediate implementation could be &lt;code&gt;editable_in_rest&lt;/code&gt; and default to &lt;code&gt;true&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The key distinction (based on my understanding of the ticket description):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;show_in_rest&lt;/code&gt; defaulting to &lt;code&gt;true&lt;/code&gt; would mean the existence of the CPT is exposed to the world (and possibly have some unexpected information disclosure issues).
&lt;/li&gt;&lt;li&gt;&lt;code&gt;editable_in_rest&lt;/code&gt; would meant the CPT could be editable in the backend with appropriate authorization, but would expose no existence to the unauthorized world.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
With the &lt;em&gt;right access controls&lt;/em&gt;, there should be no reason &lt;em&gt;by default&lt;/em&gt; not to expose the data over the REST API.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Correct. But these aren't present in 42785.4.diff. That patch, for instance, would give me (a WordPress.com user) access to every CPT registered on every CPT site. Not only that, but it also incorrectly overrides the value passed by the developer.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43669 (Menu Item should have remove button near to accordion title) created</title>
      
        <dc:creator>1naveengiri</dc:creator>

      <pubDate>Fri, 30 Mar 2018 19:48:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43669</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43669/1522439289384164</guid>
      <description>&lt;p&gt;
When someone has more menu item and he decided to remove few of those menu items.
&lt;/p&gt;
&lt;p&gt;
Each time to remove a menu item we have to open the menu item accordion and then find remove link and click on that,
The process becoming irritating and time-consuming when there are lots of menu item to remove.
&lt;/p&gt;
&lt;p&gt;
I have tried to show the problem below
&lt;a class="ext-link" href="https://drive.google.com/file/d/1UkacVP9w7hoIEDDLi0VOj1on1X9JIoF4/view"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://drive.google.com/file/d/1UkacVP9w7hoIEDDLi0VOj1on1X9JIoF4/view&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
can we have the remove menu item option somewhere on the accordion title?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Fri, 30 Mar 2018 19:16:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:3/1522437410835857</guid>
      <description>&lt;p&gt;
Thanks @birgire, I just tested out your patch and I can confirm that it fixes the issues I was seeing. Here is output from testing the themeFile.php tests:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Matts-MacBook-Pro:WordPress Unit Tests mattkeys$ phpunit tests/phpunit/tests/link/themeFile.php
Installing...
Running as single site... To run multisite, use -c tests/phpunit/multisite.xml
Not running ajax tests. To execute these, use --group ajax.
Not running ms-files tests. To execute these, use --group ms-files.
Not running external-http tests. To execute these, use --group external-http.
PHPUnit 6.5.7 by Sebastian Bergmann and contributors.
........................                                          24 / 24 (100%)
Time: 1.28 seconds, Memory: 28.00MB
OK (24 tests, 48 assertions)
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>joehoyle</dc:creator>

      <pubDate>Fri, 30 Mar 2018 19:08:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:29/1522436902230117</guid>
      <description>&lt;p&gt;
To justify the creation of this ticket a little more - let me spell out why I think we need to do this.
&lt;/p&gt;
&lt;p&gt;
I think primarily we should be focusing on the semantics of what data is readable, by who, what is public etc. Unfortunately the definitions of &lt;code&gt;public&lt;/code&gt; in a post type is pretty fraught with exceptions, there's multiple ways in interpret &lt;code&gt;show_ui&lt;/code&gt;, &lt;code&gt;publically_queryable&lt;/code&gt; etc - for this reason, in the introduction of the REST API we put up a simple wall "show_in_rest" to just be simple about what data is included in the REST API. The obvious issues with this approach is that we 1: defaulted to true, and 2: divorced it of any association with what the user-access is on the data; it encourages the wrong approach.
&lt;/p&gt;
&lt;p&gt;
Perhaps it made sense at the time, given the REST API was a new thing where we wanted to be conservative - but now it's considered (for Gutenberg at least) the source of the data on the WordPress site. It doesn't make sense to have a technology-enabled flag anymore. There's  undoubtedly some work to do to define exactly what post types can be read be unauthenticated users, and logged in ones. However, &lt;code&gt;show_in_rest&lt;/code&gt; should not be this, and we should start to phase it's existence out. The REST API is no longer a new technology that is relegated to optional activation per cpt - it's a core part of the technology stack of WordPress, which is demonstrated more than ever in the building of Gutenberg.
&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;With the right access controls&lt;/em&gt;, there should be no reason &lt;em&gt;by default&lt;/em&gt; not to expose the data over the REST API. If you're a developer that's building a shadow post type, then sure - we have a way to opt out, but that's not the norm. The REST API should not be a myopic view into your whole WordPress data, on a developer-only opt-in basis, it should by default, contain access to as much of it as possible (assuming we of course have sane publicity defaults, which I think we pretty much already to).
&lt;/p&gt;
&lt;p&gt;
That all being said, its time to focus on specifics that &lt;code&gt;show_in_rest = true&lt;/code&gt; is adversely cause.
&lt;/p&gt;
&lt;p&gt;
---
&lt;/p&gt;
&lt;p&gt;
Random replies:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
The nut of it is that we can't expose information publicly unless we can prove that it can be public. For instance, a registered CPT could be using post_excerpt for some secret notes. Because they're secret, the developer hasn't exposed the field in the theme templates. And there's no way for us to declaratively know whether this custom use of data is safe to reveal unless the developer has explicitly marked show_in_rest=true.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn't true - this data could, and I think _would_ be in the RSS Feeds, for one thing. If a post type is registered as &lt;code&gt;public&lt;/code&gt;, that's the closest we are ever going to get to say something is public.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
To the point above, I think it's important that we follow-up with another patch to force show_in_rest to true (for public CPTs and taxonomies) for loggedin users (other than subscribers) and not being only a default value, because people will expect to be able to use Gutenberg for all CPTs in the backend no matter the value set for show_in_rest.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We should be thinking only in capabilities, not roles - or logged in state. Also, nit-pick "all CPTs in the backend no matter the value set for show_in_rest" this isn't true, users will expect to see any CPTs they &lt;em&gt;know about&lt;/em&gt;. Just like the rest of the admin, there's no such thing as "show all CTPs" (menus being one example).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:44:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:28/1522435481840894</guid>
      <description>&lt;p&gt;
Awesome thanks @danielbachhuber These links are indeed very helpful to understand the whole picture and I agree with the compromises made at that time.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If we want to transition WordPress to an API-driven world, we need a better plan than default show_in_rest=true and hope there's no impact.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think it's not "if we want" anymore, WordPress is transitioning to an API-driven world with Gutenberg.
&lt;/p&gt;
&lt;p&gt;
So, it's better we start planning for this now. I propose we define for each entity what's public, what's not, what capability is needed to see any field. Once done we can add ways for people to force capabilities/roles by fields if possible (for example we can't force the post title, content to be private in APIs for public CPTs), include deprecation warnings and clarify these changes, leave them for some releases and start updating. I also think this is not specific to the REST API, the REST API is just one API, the same considerations concern any other type of API. Imagine we add GraphQL, how do we define which property needs which capability since we can't use a global &lt;code&gt;show_in_rest&lt;/code&gt;, GraphQL requests being per field...
&lt;/p&gt;
&lt;p&gt;
I guess we could discuss these things in the weekly meetings unless you think this is set in stone.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43555 (Keep Hello Dolly from displaying sexist text in the admin) updated</title>
      
        <dc:creator>kalich5</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:20:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43555#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43555#comment:35/1522434020175106</guid>
      <description>&lt;p&gt;
I would delete all Hello Dolly content! It is a relic!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:17:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:27/1522433825925269</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Do you have any link to discussions explaining the need for &lt;code&gt;show_in_rest&lt;/code&gt;, I'd love to learn more about those compromises?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sure, here's some of the genesis (with links to corresponding Slack conversations):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/WP-API/WP-API/issues/136"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Add register_post_type argument for API exposure&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/WP-API/WP-API/issues/710"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Clarify expectations and impact of the 'show_in_json' Post Type flag&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/WP-API/WP-API/issues/419"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Private taxonomy data shouldn't be exposed without appropriate capabilities&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The nut of it is that we can't expose information publicly unless we can &lt;em&gt;prove&lt;/em&gt; that it can be public. For instance, a registered CPT could be using &lt;code&gt;post_excerpt&lt;/code&gt; for some secret notes. Because they're secret, the developer hasn't exposed the field in the theme templates. And there's no way for us to declaratively know whether this custom use of data is safe to reveal unless the developer has explicitly marked &lt;code&gt;show_in_rest=true&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
If we want to transition WordPress to an API-driven world, we need a better plan than default &lt;code&gt;show_in_rest=true&lt;/code&gt; and hope there's no impact.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43621 (Introduce `add_action_once` and `add_filter_once` sugar.) updated</title>
      
        <dc:creator>vortfu</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:02:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43621#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43621#comment:4/1522432977254517</guid>
      <description>&lt;p&gt;
I'm not the biggest fan of implementing something like this in the first place over explicitly add/removing callbacks as needed, but as is this patch only supports the use of one "once" callback (per priority), e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_filter_once( 'test_filter', '__return_false' );
add_filter_once( 'test_filter', '__return_true' );
// $wp_filter['test_filter']-&amp;gt;callbacks
//
// array(1) {
//   [10]=&amp;gt;
//   array(3) {
//     ["__return_false"]=&amp;gt;...
//     ["_remove_filter_once"]=&amp;gt;...
//     ["__return_true"]=&amp;gt;...
//   }
// }
apply_filters( 'test_filter', null ); // true
apply_filters( 'test_filter', null ); // true
// ...
apply_filters( 'test_filter', null ); // true
// etc
&lt;/pre&gt;&lt;p&gt;
&lt;code&gt;_remove_filter_once()&lt;/code&gt; could be re-implemented as an anonymous func to ensure it's always added, but then you'd also have to check that the callback was actually added as well so other, non-once callbacks aren't accidentally removed ...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 17:54:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:26/1522432485912282</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
You're working with 15+ years of code, not a shiny brand new project.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I understand that, and these compromises are necessary. But that's not a reason to not change anything. We could plan these more difficult changes iteratively. Deprecate things for several versions... Inform the users to force a property to &lt;code&gt;true&lt;/code&gt; even if it's its default value and then after some releases, switch it to default &lt;code&gt;false&lt;/code&gt;...
&lt;/p&gt;
&lt;p&gt;
Do you have any link to discussions explaining the need for &lt;code&gt;show_in_rest&lt;/code&gt;, I'd love to learn more about those compromises?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43481 (Add tabs and placeholders to privacy tools page in wp-admin) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Fri, 30 Mar 2018 17:49:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43481#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43481#comment:31/1522432157970743</guid>
      <description>&lt;p&gt;
Does &lt;a href="https://core.trac.wordpress.org/ticket/43442#comment:6"&gt;https://core.trac.wordpress.org/ticket/43442#comment:6&lt;/a&gt; now supersede &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43481/43481.7.gif" title="Attachment '43481.7.gif' in Ticket #43481"&gt;43481.7.gif&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43481/43481.7.gif" title="Download"&gt;​&lt;/a&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43435 (Add settings screen for creating a privacy policy) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Fri, 30 Mar 2018 17:31:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43435#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43435#comment:41/1522431092284240</guid>
      <description>&lt;p&gt;
Working on updating the design for this screen, and wanted to check on something:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When you first go to select a Privacy Policy page, you have the option of using an existing page, or creating a new page.
&lt;/li&gt;&lt;li&gt;After selecting or creating a page, you have the option of changing the page you're using for your Privacy Policy.
&lt;/li&gt;&lt;li&gt;However, you can only switch it to using an existing page — you can't create a new page at this point.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Can someone clarify why you can't create a new page afterwards?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 16:30:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:57</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:57/1522427456516511</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:56" title="Comment 56"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What matters are the endpoints. I think that a &lt;code&gt;POST /posts/&lt;/code&gt; is a different concept than a &lt;code&gt;POST /autosaves/&lt;/code&gt;.
...
When we now split up &lt;code&gt;/posts/&lt;/code&gt; to mean "trigger saving a post" AND "trigger saving an autosave"...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sorry I'm going to repeat myself but &lt;strong&gt;autosaving is&lt;/strong&gt; "trigger saving a post". It is the same concept of "saving a post", uses the same data shape, form, and size, and performs the same action as a result of the same intent by the client.
&lt;/p&gt;
&lt;p&gt;
The logical problem in having &lt;code&gt;POST /autosaves/&lt;/code&gt; endpoint is that it is "superficial". Autosaves don't exist outside posts and revisions.
&lt;/p&gt;
&lt;p&gt;
Anyway, think we delved into very "philosophical" discussion here :)
&lt;/p&gt;
&lt;p&gt;
I'm assuming that:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You are +1 on the patch that introduces an &lt;code&gt;autosaves&lt;/code&gt; end point.
&lt;/li&gt;&lt;li&gt;Daniel is a +1 on the patch that adds autosave support to the &lt;code&gt;posts&lt;/code&gt; endpoint.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Anybody else?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 16:30:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:25/1522427454293380</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Aside, In an API world (which is where we're heading), a &lt;code&gt;show_in_rest&lt;/code&gt; config doesn't make sense at all.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We've had to make many, many, many design compromises (cough cough, sticky posts) because of WordPress' historical application architecture. You're working with 15+ years of code, not a shiny brand new project.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43668 (Image cropping fails for many PHP locales, if set) created</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Fri, 30 Mar 2018 16:12:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43668</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43668/1522426330626204</guid>
      <description>&lt;p&gt;
If{{{#!php
&amp;lt;?php
setlocale( LC_NUMERIC /*or LC_ALL */, 'nb_NO' );
}}}
&lt;/p&gt;
&lt;p&gt;
is used then Media image cropping fails and selection input fields show &lt;code&gt;Infinity&lt;/code&gt;. It works fine with 'en_US', btw.
&lt;/p&gt;
&lt;p&gt;
If &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/17268" title="#17268: enhancement: Use native gettext library when available (new)"&gt;#17268&lt;/a&gt; is implemented, I guess it includes use of `setlocale'.
&lt;/p&gt;
&lt;p&gt;
Anyway, image cropping, and other internal passing of numeric data insede an application, should work independently of how numbers are to displayed according to a locale.
&lt;/p&gt;
&lt;p&gt;
I don't know which file or script to look into, to suggest a patch. Any help appreciated.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:35:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:24/1522424155952920</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
I should've been more clear: for the purposes of shipping Gutenberg in WordPress 5.0.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
👍While this could be fine, my concern is that people new to WordPress would have to deal with two editors while it shouldn't be that hard to update &lt;code&gt;show_in_rest&lt;/code&gt; to be opt-out for logged-in users.
&lt;/p&gt;
&lt;p&gt;
Aside, In an API world (which is where we're heading), a &lt;code&gt;show_in_rest&lt;/code&gt; config doesn't make sense at all. I understand it's here to mitigate the fact that we can unintentionally expose data but from my point of view, exposing data should be a security/access/role/capability concern and not a global config but that's another question obviously.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:09:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:23/1522422576480529</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/42785#comment:22" title="Comment 22"&gt;youknowriad&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For the purposes of Gutenberg, loading the Classic Editor for post types with show_in_rest=false seems sufficient to me.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I strongly disagree with this. The classic editor is there only for backwards compatibility concerns, at some point (probably not soon) its code will be removed from Core, so conceptually, Gutenberg should be able to edit all Post Types with &lt;code&gt;show_ui&lt;/code&gt; true. Without this we won't be able to edit these post types at all.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I should've been more clear: for the purposes of shipping Gutenberg in WordPress 5.0.
&lt;/p&gt;
&lt;p&gt;
In the short-term, I think we need to keep the Classic Edit for custom post types with &lt;code&gt;show_in_rest=true&lt;/code&gt;. In the long-term, we do need to figure out some solution.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:06:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:22/1522422419134634</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
For the purposes of Gutenberg, loading the Classic Editor for post types with show_in_rest=false seems sufficient to me.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I strongly disagree with this. The classic editor is there only for backwards compatibility concerns, at some point (probably not soon) its code will be removed from Core, so conceptually, Gutenberg should be able to edit all public post types. Without this we won't be able to edit these post types at all.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:06:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:56/1522422408010894</guid>
      <description>&lt;p&gt;
Just want to add the distinction that I wasn't talking about controllers above. It is pretty irrelevant how we split up controllers and where we put them. That's a technical detail in the REST API black box and can be changed at will.
&lt;/p&gt;
&lt;p&gt;
What matters are the endpoints. I think that a &lt;code&gt;POST /posts/&lt;/code&gt; is a different concept than a &lt;code&gt;POST /autosaves/&lt;/code&gt;. Yes, they share the same code and data model, and yes, they can happily use the same controller (for now). The thing is that the action that the client requests is a different one, and should be expressed in that way. All the other discussions are details that the client does not need to know.
&lt;/p&gt;
&lt;p&gt;
When we now split up &lt;code&gt;/posts/&lt;/code&gt; to mean "trigger saving a post" AND "trigger saving an autosave", that is just immediate technical debt and raises the complexity in an unneeded way. And yes, adding a separate endpoint means having a bit more code, but the complexity actually gets lowered, because we have less branching in one individual code path. Most importantly, though, it doesn't need a rewrite of the client in case the handling of "trigger saving a post" and "trigger saving an autosave" should later diverge.
&lt;/p&gt;
&lt;p&gt;
The above being said, I'm not the one in a position to decide here, I just wanted to make sure my concerns are heard. I thought that we had already previously agreed to go with a separate &lt;code&gt;/autosaves/&lt;/code&gt; endpoint (as it seems the more future-safe approach, regardless of any other factors), but I'm happy to help refine whatever approach you finally plan to commit.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:43:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667#comment:3/1522421004472644</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:38:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:21/1522420692637797</guid>
      <description>&lt;p&gt;
I'm unconvinced that &lt;code&gt;show_in_rest&lt;/code&gt; should become opt-out instead of opt-in.
&lt;/p&gt;
&lt;p&gt;
Given custom post types probably have custom editor UI (metaboxes and otherwise), it seems unlikely that Gutenberg will be a drop-in replacement for the existing UI. Also, I'm concerned we'd unintentionally expose data we don't mean to expose.
&lt;/p&gt;
&lt;p&gt;
Lastly, such a significant change &lt;em&gt;certainly&lt;/em&gt; shouldn't be in a minor release.
&lt;/p&gt;
&lt;p&gt;
For the purposes of Gutenberg, loading the Classic Editor for post types with &lt;code&gt;show_in_rest=false&lt;/code&gt; seems sufficient to me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42919 (Unable to upload files with the AAC extension) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:37:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42919#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42919#comment:12/1522420624557407</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:29:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:2/1522420153376068</guid>
      <description>&lt;p&gt;
@mattkeys thanks for the report and the patch.
&lt;/p&gt;
&lt;p&gt;
It looks to me that the problem with the &lt;code&gt;test_theme_file_uri_returns_valid_uri()&lt;/code&gt; is that the current active theme is the one from: &lt;code&gt;/full/path/to/tests/phpunit/includes/../data/themedir1/default&lt;/code&gt;. The themes from the test method's data provider haven't been activated. So we are dealing with a special case when &lt;code&gt;get_theme_root_uri()&lt;/code&gt; can't determine the theme's URL and it returns the full directory path instead, namely this part:
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://core.trac.wordpress.org/browser/tags/4.9/src/wp-includes/theme.php#L595"&gt;https://core.trac.wordpress.org/browser/tags/4.9/src/wp-includes/theme.php#L595&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If we activate the themes from the data provider with:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;switch_theme( $expected_theme );&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
before the code in &lt;code&gt;test_theme_file_uri_returns_valid_uri()&lt;/code&gt; then we are avoiding the above edge case and the spaces in the path are not involved.
&lt;/p&gt;
&lt;p&gt;
That's the case with &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43663/43636.3.diff" title="Attachment '43636.3.diff' in Ticket #43663"&gt;43636.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43663/43636.3.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43636.3.diff attached to Ticket #43663</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:27:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43663/43636.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43663/43636.3.diff/1522420025136038</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) updated</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:20:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667#comment:2/1522419648415079</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) updated</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:20:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667#comment:1/1522419633349822</guid>
      <description>&lt;p&gt;
I've added a patch which uses the &lt;code&gt;wp_verify_nonce&lt;/code&gt; function and expands the error message to include a link to the signup form. Clicking this link will make a new request which will generate a new nonce.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>signup_nonce_check.patch attached to Ticket #43667</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:18:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43667/signup_nonce_check.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43667/signup_nonce_check.patch/1522419512428616</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) created</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:18:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667/1522419493689231</guid>
      <description>&lt;p&gt;
Currently in multisite setups a nonce check is added to the singup form.
&lt;/p&gt;
&lt;p&gt;
This check does not use the &lt;code&gt;wp_verify_nonce&lt;/code&gt; function but instead creates a new nonce and expects an exact match. Due to the nature of &lt;code&gt;wp_nonce_tick&lt;/code&gt; this means it's possible to generate nonces that are valid for only a few seconds twice a day.
&lt;/p&gt;
&lt;p&gt;
The error message to try again could also use improvement. Most users will simply click the back button to try again, which will not generate a new nonce but simply restore the old form with the old nonce from browser memory.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:13:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:55</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:55/1522419232627391</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:54" title="Comment 54"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I still recommend looking at the &lt;strong&gt;concept&lt;/strong&gt; you want to model, not how its data happens to be stored.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree. The concept is that a post is being saved and a revision is being (auto)created. The only difference between a &lt;code&gt;save&lt;/code&gt; and an &lt;code&gt;autosave&lt;/code&gt; is that the latter employs additional server logic when creating the revision.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Putting two models into the same endpoint because their data happens to be saved in the same way...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
These are not different models. It is the same model with the same data performing the same action of saving a post to the database.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As soon as they need to diverge again (posts needing to do something autosaves shouldn't, or vice-versa) you're facing a big problem again. You could for example imagine autosaves being stored as incremental diffs in a separate table through a later optimization.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Wouldn't that depend on the server's "business logic"? It depends on it now. We auto-create revisions on each save. If these revisions are to be moved to a different method of saving, should we deprecate the revisions controller and stop auto-creating them? :)
&lt;/p&gt;
&lt;p&gt;
It doesn't seem likely for revisions to be stored as incremental diffs in a different table, unless perhaps we drop MySQL and move to git for storage :) Then we will drop the concept of revisions altogether and won't need to flag the autosave revisions.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That's why I recommend a separate &lt;code&gt;autosaves&lt;/code&gt; endpoint, not some trickery with posts or revisions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The problem we seem to be stuck on is that &lt;strong&gt;autosaves do not exist&lt;/strong&gt; outside of posts and revisions. Frankly I don't care much how DRY or non-DRY another controller may be, as long as it is logical, and easy to understand how it works and why.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...but the actual public API should cleanly separate the concepts, not let the current technical implementation bleed through.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's exactly my point too :) The concept is that a post is being saved and a revision is being auto-created. There is a different server logic when this is done directly by the user or is triggered automatically by the client.
&lt;/p&gt;
&lt;p&gt;
I'm not sure how to stress this more: &lt;strong&gt;autosaves are not a different concept of saving&lt;/strong&gt;. They are &lt;strong&gt;identical to "standard" saves&lt;/strong&gt;. The difference is in the logic that auto-creates the post revisions.
&lt;/p&gt;
&lt;p&gt;
In any case, we have two patches that work well here:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;One adds the specialized revision logic to the existing posts and revisions controllers.
&lt;/li&gt;&lt;li&gt;The other introduces a new controller that partially duplicates the posts and revisions controllers and performs identical actions, but introduces different end points.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
This ticket has been "simmering" for over a month now and is urgent. Can we please get on the same boat, pick a patch and commit it already? :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40510 (REST API: Post Revisions: Adding support for pagination) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:03:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40510#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40510#comment:5/1522418617445730</guid>
      <description>&lt;p&gt;
This looks good @flixos90! Tested with the JS client and I see all of the expected headers and pagination functionality.
&lt;/p&gt;
&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/40510/40510.2.diff" title="Attachment '40510.2.diff' in Ticket #40510"&gt;40510.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/40510/40510.2.diff" title="Download"&gt;​&lt;/a&gt; I added a cast to (int) for &lt;code&gt;$request['page'];&lt;/code&gt;use and update the fixtures. (&lt;code&gt;phpunit --group=restapi-jsclient&lt;/code&gt; or &lt;code&gt;grunt precommit&lt;/code&gt; generates this file). Some tests to validate all of the new features would be nice.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>40510.2.diff attached to Ticket #40510</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:58:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40510/40510.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40510/40510.2.diff/1522418320337347</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:13:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:54</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:54/1522415605716392</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If the shape of the data is the exact same, then we could co-opt the status attribute to trigger an auto-save (i.e. status=auto-save).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The shape of the data is identical - its a post thats being saved, both for posts and for autosaves. The problem with status is an autosave can have a published or draft status, we need to store the status. In &lt;a href="https://core.trac.wordpress.org/ticket/43316#comment:10"&gt;https://core.trac.wordpress.org/ticket/43316#comment:10&lt;/a&gt; @azaozz proposed using post type as the 'flag' that triggers an autosave. see 43316.1.diff
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I still recommend looking at the &lt;strong&gt;concept&lt;/strong&gt; you want to model, not how its data happens to be stored. Putting two models into the same endpoint because their data happens to be saved in the same way is the wrong way of doing DRY. As soon as they need to diverge again (posts needing to do something autosaves shouldn't, or vice-versa) you're facing a big problem again. You could for example imagine autosaves being stored as incremental diffs in a separate table through a later optimization.
&lt;/p&gt;
&lt;p&gt;
That's why I recommend a separate &lt;code&gt;autosaves&lt;/code&gt; endpoint, not some trickery with posts or revisions. Yes, it can just extend one of the existing controllers, but the actual public API should cleanly separate the concepts, not let the current technical implementation bleed through.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:05:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:53</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:53/1522415141186950</guid>
      <description>&lt;p&gt;
Sure! Good idea :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:03:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:52</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:52/1522414992964164</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by azaozz. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1522414991000027"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:00:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:51</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:51/1522414822603405</guid>
      <description>&lt;p&gt;
One last suggestion :) Would it make sense to change &lt;code&gt;is_autosave&lt;/code&gt; to something like &lt;code&gt;save_type&lt;/code&gt; to leave the door open for other save types in the future?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 12:56:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:50</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:50/1522414582396910</guid>
      <description>&lt;p&gt;
@danielbachhuber thanks for the review! :)
&lt;/p&gt;
&lt;p&gt;
Yes, as @adamsilverstein points out above the shape of the data is identical - it is a post that is being saved (hence my idea to use the same controller/endpoint). That includes all of the post "properties", post_type, post_status, post_parent, etc.
&lt;/p&gt;
&lt;p&gt;
If we are using &lt;code&gt;WP_REST_Posts_Controller::update_item()&lt;/code&gt; to do both saves and autosaves, we need some sort of a flag that is different than the post properties, see 43316.1.patch that uses &lt;code&gt;is_autosave&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally, in thinking about this more, I'd be leaning closer to one revisions endpoint that covers past and future revisions. We could handle write operations through /wp/v2/posts with special status attribute handling.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, thinking the same.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even taking a step back from this, it seems like it might make sense to produce a design document capturing all of the detail on how the endpoint(s) should behave, and write code once that's determined.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's a bit too late for this :) The REST API is actively being used now, and the lack of autosave support means it is creating tens or even hundreds of revisions when it shouldn't. It's not uncommon to see 120-150 revisions for an average length post :(
&lt;/p&gt;
&lt;p&gt;
Generally autosaves are "real" saves but the "business logic" on the server is a bit different. It depends on post_status, post_author vs. current_user, and post_lock (not implemented in the API yet!). It also depends on decisions in some plugins.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Has this idea (auto-creating a revision when an autosave is significantly different) been validated as useful in the real world? Given the tendency of revisions to bloat the database...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, it has. It protects the users in a rare edge case when post_content may "disappear" as a result of a user (or plugin/network?) error. Was planning to add that to the non-API autosave too, have heard of many disastrous cases over the years.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What if you want to save your work in progress when updating an already published post?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We need future revisions! But yeah, interesting question.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Perhaps we can even look at reducing the size diff that will trigger creating a revision when autosaving a published post. But that is not super urgent. We can adjust how this works when we have more "real life" data.
&lt;/p&gt;
&lt;p&gt;
@adamsilverstein @aduth @danielbachhuber @flixos90 @schlessera I'm going to refresh 43316.1.patch over the weekend (yeah, I know it's a holiday, but this cannot wait any longer) and then commit it, if no other objections.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 12:38:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:98</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:98/1522413533397528</guid>
      <description>&lt;p&gt;
I agree with &lt;a class="ext-link" href="https://wptavern.com/my-gutenberg-experience-thus-far"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Jeff's post&lt;/a&gt; — there's a good amount of fit and finish to be desired before rolling out to a large number of unacquainted users. We're not quite over the hump on the issues we do already know about. There's not a ton of sense in having 10,000 users re-report them.
&lt;/p&gt;
&lt;p&gt;
Are there alternative mechanisms we could employ to do a larger rollout (e.g. hosting companies promoting to end users or similar)? Or, if &lt;code&gt;Try Gutenberg&lt;/code&gt; is destined for core, could we only make it visible for something like 10% of installs to start?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43666 (Check update post meta before add new post meta in WordPress Importer) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Fri, 30 Mar 2018 12:00:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43666#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43666#comment:1/1522411220588312</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>43666.patch attached to Ticket #43666</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Fri, 30 Mar 2018 11:59:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43666/43666.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43666/43666.patch/1522411196349622</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43666 (Check update post meta before add new post meta in WordPress Importer) created</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Fri, 30 Mar 2018 11:59:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43666</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43666/1522411160876820</guid>
      <description>&lt;p&gt;
When we import any post/page content XML multiple time new post meta import multiple time so before import any post meta import we have to check if same post with meta key is exist or not if not exist then we have to add new post meta using add_post_meta function or update that post meta using update_post_meta function.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43664 ($wpdb-&gt;get_results fails in specific cases with non-latin charaters in ...) updated</title>
      
        <dc:creator>altert</dc:creator>

      <pubDate>Fri, 30 Mar 2018 10:56:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43664#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43664#comment:1/1522407410418265</guid>
      <description>&lt;p&gt;
most likely the culprit is regexp in &lt;code&gt;get_table_from_query&lt;/code&gt; function in &lt;code&gt;wp-includes/wp-db.php&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
It is called from &lt;code&gt;check_safe_collation&lt;/code&gt; on non-asciii queries.
&lt;/p&gt;
&lt;p&gt;
Possible solution would be to assume that last 'from' in query should be used and therefore non-greedy modifier should be dropped from select-from matching, so &lt;code&gt;SELECT.*?\s+FROM&lt;/code&gt; should be  &lt;code&gt;SELECT.*\s+FROM&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43665 (XHR requests disregard the WP_DEBUG_DISPLAY flag) updated</title>
      
        <dc:creator>OwenMelbz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 10:41:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43665#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43665#comment:2/1522406477107683</guid>
      <description>&lt;p&gt;
Id say that the fact there is a simple solution to the problem, would it really that bad to include it if it can help enhance the development experience? Wondering what the downside actually is?
&lt;/p&gt;
&lt;p&gt;
Regards to being problematic I feel it should still definitely be considered as this, especially as it creates a peculiar dynamic between debugging ajax work and everything else - why is there a difference? Why can't it be consistent?
&lt;/p&gt;
&lt;p&gt;
Regards to constantly referring back to an error log, this adds an additional overhead to the developer during development, making them refer to other files to simply understand whats in front of them.
&lt;/p&gt;
&lt;p&gt;
It also adds an initial understanding barrier - as somebody will be setting up their configuration, e.g in their configs for example, then they're blindly getting overwritten, without explanation - which can affect deadlines and stress for developers trying to track down whats going on.
&lt;/p&gt;
&lt;p&gt;
Yes as you say theres "alternatives" but why should people have to find alternatives? This doesn't seem a very user-centric approach to the issue, if there is something that can be done, fairly easily, why not?
&lt;/p&gt;
&lt;p&gt;
If this is something that the core will consider, I'd happily submit the PR myself.
&lt;/p&gt;
&lt;p&gt;
Everybody wants to create the best product possible for all those involved, so I think making small decisions like this to enhance  the development experience can be really important.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43665 (XHR requests disregard the WP_DEBUG_DISPLAY flag) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 30 Mar 2018 09:48:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43665#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43665#comment:1/1522403316391719</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello @OwenMelbz, welcome to WordPress Trac!
&lt;/p&gt;
&lt;p&gt;
I don't see this as "very problematic" since there are at least two alternatives mentioned in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26262#comment:17" title="Comment 17 for #26262: defect (bug): Ajax requests shouldn't display errors (closed: fixed)"&gt;ticket:26262:17&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26262#comment:18" title="Comment 18 for #26262: defect (bug): Ajax requests shouldn't display errors (closed: fixed)"&gt;ticket:26262:18&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43665 (XHR requests disregard the WP_DEBUG_DISPLAY flag) created</title>
      
        <dc:creator>OwenMelbz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 09:34:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43665</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43665/1522402441695253</guid>
      <description>&lt;p&gt;
Within &lt;code&gt;wp-includes/load.php&lt;/code&gt; and the &lt;code&gt;wp_debug_mode()&lt;/code&gt; method it does
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'XMLRPC_REQUEST'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'REST_REQUEST'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'WP_INSTALLING'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;WP_INSTALLING&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;wp_doing_ajax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'display_errors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
This then turns off the rendering of PHP issues.
&lt;/p&gt;
&lt;p&gt;
This makes it very problematic when actively developing ajax endpoints via &lt;code&gt;admin-ajax.php&lt;/code&gt; as you have to keep turning them back on.
&lt;/p&gt;
&lt;p&gt;
It seems that it should at least appreciate the &lt;code&gt;WP_DEBUG_DISPLAY&lt;/code&gt; constant
&lt;/p&gt;
&lt;p&gt;
Is this something we could look at getting addressed?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43664 ($wpdb-&gt;get_results fails in specific cases with non-latin charaters in ...) created</title>
      
        <dc:creator>altert</dc:creator>

      <pubDate>Fri, 30 Mar 2018 08:37:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43664</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43664/1522399067299388</guid>
      <description>&lt;p&gt;
Let's say we have user with display name 'Алексей';
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;$wpdb-&amp;gt;get_results("SELECT user_login FROM $wpdb-&amp;gt;users where `display_name`='Алексей' ", ARRAY_A);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
executes normally
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;$wpdb-&amp;gt;get_results("SELECT user_login AS 'russian person' FROM $wpdb-&amp;gt;users where `display_name`='Алексей' ", ARRAY_A);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
executes normally as well
&lt;/p&gt;
&lt;p&gt;
but
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;$wpdb-&amp;gt;get_results("SELECT user_login AS 'person from Russia' FROM $wpdb-&amp;gt;users where `display_name`='Алексей' ", ARRAY_A);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
returns empty array and results in error:
[table &amp;lt;table_prefix&amp;gt; Russia.doesn't exist]
SHOW FULL COLUMNS FROM &lt;code&gt;Russia&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
That means 'from' in 'person from Russia' somehow gets in sql
&lt;/p&gt;
&lt;p&gt;
It's an obscure enough situation, but might signify that something is wrong with wpdb query handling
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>philclothier</dc:creator>

      <pubDate>Fri, 30 Mar 2018 07:51:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:97</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:97/1522396307213283</guid>
      <description>&lt;p&gt;
I agree with the points being made by @bph and @brianhogg. I think at the very least, there should be more guidance on what this all really means to the user. Currently it is far too easy to to install the plugin via the prompt without any formal introduction to what Gutenberg is and is going to change on the site.
&lt;/p&gt;
&lt;p&gt;
I'm left wondering what the goal of this callout is. If it is to get more "eyes on" Gutenberg for testing, then this is not a good method of gathering suitable candidates. All this will cause is further [backlash](&lt;a class="ext-link" href="https://wordpress.org/support/plugin/gutenberg/reviews/?filter=1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/plugin/gutenberg/reviews/?filter=1&lt;/a&gt;) against Gutenberg from "normal" users who may have a negative experience. There needs to be far more hand-holding throughout this process, such as on screen popups and pointers to each section when the plugin is activated. Much like when WooCommerce is activated and you add your first product, each section of the product editing screen is described and shown via on screen popups.
&lt;/p&gt;
&lt;p&gt;
Currently, it feels like we're just throwing a callout with the idea of "This will get more people to look at Gutenberg and give it a try, which is cool". I feel like we're sleep walking into a nightmare for the support forums.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43587 (UI adjustments to the Status box in the Edit Comment screen) updated</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 06:24:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43587#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43587#comment:8/1522391096765488</guid>
      <description>&lt;p&gt;
Please consider reviewing &lt;strong&gt;43587.2.diff&lt;/strong&gt; over &lt;strong&gt;43587.diff&lt;/strong&gt; as it contains slight changes regarding coding standards.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43587.2.diff attached to Ticket #43587</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 06:23:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43587/43587.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43587/43587.2.diff/1522391005613681</guid>
      <description>&lt;p&gt;
Changes regarding coding standards
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43587 (UI adjustments to the Status box in the Edit Comment screen) updated</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 06:08:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43587#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43587#comment:7/1522390136031915</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The &lt;strong&gt;435687.diff&lt;/strong&gt; addresses all the enhancements mentioned in this ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43587.diff attached to Ticket #43587</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 05:58:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43587/43587.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43587/43587.diff/1522389530066151</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>bph</dc:creator>

      <pubDate>Fri, 30 Mar 2018 03:50:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:96</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:96/1522381829935619</guid>
      <description>&lt;p&gt;
After reading through [Jeff Chandlers tale]&lt;a class="ext-link" href="https://wptavern.com/my-gutenberg-experience-thus-far"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wptavern.com/my-gutenberg-experience-thus-far&lt;/a&gt; I have to admit, among us friends, the "Try Gutenberg prompt" has me a little worried.
&lt;/p&gt;
&lt;p&gt;
Most content creators just want to get their work done. And even if they are brave and go and try out things. They will get mad, when we let users install and activate Gutenberg, on live sites, when we &lt;strong&gt;know&lt;/strong&gt; some of the plugins installed won't work and they won't get their work done.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;"People may not remember exactly what you did, or what you said, but they will always remember how you made them feel." --&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Is there are way to warn a person before they install and activate Gutenberg, when they have plugins installed we &lt;strong&gt;know&lt;/strong&gt; won't work (Publish Post Preview, or Switch Post Type)?
&lt;/p&gt;
&lt;p&gt;
Can we have a warning on the prompt, stating 1) it's still in beta, and they are part of a test.  Things might break and 2) if they are brave enough to try it, here are things that WILL NOT work? And make it individual to their own installation.
&lt;/p&gt;
&lt;p&gt;
I started a list of known Themes and Plugins that bomb, its rudimentary right now from various sources, with maybe a 14 - 16 items on it. I can certainly use the next couple of weeks to add to it, and maintain it also in machine readable form (json, csv, txt, whatever) so it can be polled by a script, that comes with the "Try Gutenberg" prompt.
In essence, all you would need is the plugins' slugs in a list, I'd be happy to augment it with export of Daniels data.
&lt;/p&gt;
&lt;p&gt;
And this list gets better and better the more people try it and report. That way, we can warn the people of the potholes along the way regardless how fast the hick-ups can be fixed. The list of known plugins can be updated with every Gutenberg update.
&lt;/p&gt;
&lt;p&gt;
If the 'hard-hat-zone" searcher finds plugins installed from the list, the prompt could also just not appear.
&lt;/p&gt;
&lt;p&gt;
The goal of the prompt, as I understand is to find out how 'real users' (not experts) work with Gutenberg. It should give information about the use of editor itself. It would be a shame when we want to get users working with Gutenberg, yet some users, ready to help-out get discouraged just because we didn't warn them even if we could. And instead getting more user to help debugg the Gutenberg editors, we primarily collect tickets on incompatibilities. It has its own value, admitted, but do we need 'normal users' to get to this pain to discover them?
&lt;/p&gt;
&lt;p&gt;
I have a lot of empathy for users that can't get their work done because they didn't think twice and clicked on a nice blue button.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 30 Mar 2018 02:43:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:49/1522377812984922</guid>
      <description>&lt;p&gt;
@danielbachhuber thanks...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If the shape of the data is the exact same, then we could co-opt the status attribute to trigger an auto-save (i.e. status=auto-save).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The shape of the data is identical - its a post thats being saved, both for posts and for autosaves. The problem with status is an autosave can have a published or draft status, we need to store the status. In &lt;a href="https://core.trac.wordpress.org/ticket/43316#comment:10"&gt;https://core.trac.wordpress.org/ticket/43316#comment:10&lt;/a&gt; @azaozz proposed using post type as the 'flag' that triggers an autosave. see &lt;a class="missing attachment"&gt;43316.1.diff&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally, in thinking about this more, I'd be leaning closer to one revisions endpoint that covers past and future revisions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So, add the ability to explicitly create revisions?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right now, it's difficult to understand the decisions and consensus through all of the Trac comments and patches.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree - and there was additional discussion in &lt;a class="ext-link" href="https://wordpress.slack.com/archives/C02RQC26G/p1520345228000158"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;slack&lt;/a&gt; around this ticket as well.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41035 (Don't return if WP_Error object return by wp_insert_term() from ...) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Fri, 30 Mar 2018 01:31:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41035#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41035#comment:3/1522373511716085</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/41035#comment:2" title="Comment 2"&gt;boonebgorges&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
We currently don't have a great way of handling return values in mixed-success situations. We can only return one thing: in this case, it's either an array of &lt;code&gt;$tt_ids&lt;/code&gt; or a &lt;code&gt;WP_Error&lt;/code&gt; object. If we allowed the function to process partially, it's not clear to me how we would provide this information to developers. I think this is probably the main reason why we ought to keep something like the current (imperfect) behavior. Do you have ideas about how this error reporting can be improved without losing important feedback for developers?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I just bumped into this problem today, altho for a slightly different reason than the OP.
&lt;/p&gt;
&lt;p&gt;
In my case, &lt;code&gt;term_exists()&lt;/code&gt; (&lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-includes/taxonomy.php#L2286"&gt; on line 2286&lt;/a&gt;) was returning false but the &lt;code&gt;wp_insert_term()&lt;/code&gt; (&lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-includes/taxonomy.php#L2290"&gt;on line 2290&lt;/a&gt;) was returning a &lt;code&gt;WP_Error&lt;/code&gt; that the term already existed...because the new &lt;code&gt;$term-&amp;gt;name&lt;/code&gt; was getting "santizied" into a string that was the same as an existing &lt;code&gt;$term-&amp;gt;name&lt;/code&gt; (due to illegal UTF-8 encoding of the string).
&lt;/p&gt;
&lt;p&gt;
The following is just off the top of my head (i.e., I have't thought thru all of the implications), but...
&lt;/p&gt;
&lt;p&gt;
Since a single &lt;code&gt;WP_Error&lt;/code&gt; object can contain more than 1 error (via &lt;code&gt;WP_Error:add()&lt;/code&gt;), how about &lt;code&gt;WP_Error::add()&lt;/code&gt;'ing error that occurs in the loop...and then doing 1 final &lt;code&gt;WP_Error::add()&lt;/code&gt; with the &lt;code&gt;$tt_ids&lt;/code&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19278 (Allow WP_List_Table ::get_bulk_items() to receive a nested array and ...) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Fri, 30 Mar 2018 00:57:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19278#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19278#comment:6/1522371431695808</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Going to play necromancer here a bit and submit a patch for this. I work with WP List Table often and I know many other developers use it in their plugins/themes (&lt;a class="ext-link" href="https://codex.wordpress.org/Class_Reference/WP_List_Table"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;despite the codex warning&lt;/a&gt;). Optgroup's would be a nice way to organize bulk actions.
&lt;/p&gt;
&lt;p&gt;
The patch I submitted just checks if the current value from the existing bulk actions foreach is an array. If it is, the key becomes the optgroup label, and a new foreach is used to loop over the optgroup's children. Otherwise it proceeds as usual. I also modified a couple variable names to semantic reasons.
&lt;/p&gt;
&lt;p&gt;
I would love to hear back from others about any unforeseen impacts that this change might have.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19278.diff attached to Ticket #19278</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Fri, 30 Mar 2018 00:48:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19278/19278.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19278/19278.diff/1522370883710939</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 00:21:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:48</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:48/1522369306318708</guid>
      <description>&lt;p&gt;
Thanks @azaozz, @adamsilverstein. I'll reply to the few points I can easily comment on:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Here we are proposing that revisions are created whenever an autosave occurs and the content has changed not insignificantly. This expands the definition of autosaves and lets WordPress automatically track your changes over time versus keeping only a single backup (especially for published posts). This protects users by capturing a history of changes. A filter is provided to disable this behavior.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Has this idea been validated as useful in the real world? Given the tendency of revisions to bloat the database, it seems like it might be worthwhile to verify this is a valuable feature for end users.
&lt;/p&gt;
&lt;p&gt;
Another way of considering: if autosaves create new revisions by some multiple (e.g. 5x), then it will change the UX of working back through the revision history.
&lt;/p&gt;
&lt;p&gt;
Other ideas: only keep the most recent five auto-saves as revisions, only create an auto-save revision every five minutes, etc.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What if you want to save your work in progress when updating an already published post?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We need future revisions! But yeah, interesting question.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm not sure which makes more sense from pure "RESTfull" point of view: having a flag or having a separate controller that partially duplicates the &lt;code&gt;WP_REST_Posts_Controller&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If the shape of the data is the exact same, then we could co-opt the &lt;code&gt;status&lt;/code&gt; attribute to trigger an auto-save (i.e. &lt;code&gt;status=auto-save&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
If the shape of the data is different, then we need a different REST endpoint.
&lt;/p&gt;
&lt;p&gt;
REST is all about the resources: Posts, Users, Terms, etc. A Post has &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt;, whereas a user has &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Because the data is shaped differently, they exist at different endpoints.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Generally, in thinking about this more, I'd be leaning closer to one revisions endpoint that covers past and future revisions. We could handle write operations through &lt;code&gt;/wp/v2/posts&lt;/code&gt; with special &lt;code&gt;status&lt;/code&gt; attribute handling.
&lt;/p&gt;
&lt;p&gt;
Even taking a step back from this, it seems like it might make sense to produce a design document capturing all of the detail on how the endpoint(s) should behave, and write code once that's determined. Right now, it's difficult to understand the decisions and consensus through all of the Trac comments and patches.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>