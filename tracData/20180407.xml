<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #41092 (PHP Fatal error:  Uncaught Error: Call to undefined function get_bloginfo) updated</title>
      
        <dc:creator>ateya3d</dc:creator>

      <pubDate>Sat, 07 Apr 2018 23:05:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41092#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41092#comment:2/1523142333004801</guid>
      <description>&lt;pre class="wiki"&gt;PHP Fatal error:  Uncaught Error: Call to undefined function get_bloginfo() in /home/username/public_html/wp-includes/class-wp-locale.php:231
Stack trace:
#0 /home/username/public_html/wp-includes/class-wp-locale.php(112): WP_Locale-&amp;gt;init()
#1 /home/username/public_html/wp-includes/load.php(927): WP_Locale-&amp;gt;__construct()
#2 /home/username/public_html/wp-includes/load.php(208): wp_load_translations_early()
#3 /home/username/public_html/wp-settings.php(63): wp_maintenance()
#4 /home/username/public_html/wp-config.php(110): require_once('/home/cgway/pub...')
#5 /home/username/public_html/wp-load.php(37): require_once('/home/cgway/pub...')
#6 /home/username/public_html/wp-blog-header.php(13): require_once('/home/cgway/pub...')
#7 /home/username/public_html/index.php(17): require('/home/cgway/pub...')
#8 {main}
  thrown in /home/username/public_html/wp-includes/class-wp-locale.php on line 231
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41092 (PHP Fatal error:  Uncaught Error: Call to undefined function get_bloginfo) updated</title>
      
        <dc:creator>ateya3d</dc:creator>

      <pubDate>Sat, 07 Apr 2018 23:04:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41092#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41092#comment:1/1523142272071843</guid>
      <description>&lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello
&lt;/p&gt;
&lt;p&gt;
i face the same problem in my website
&lt;/p&gt;
&lt;p&gt;
also rtl website
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Screen Shot 2018-04-07 at 12.56.59 PM.jpg attached to Ticket #43718</title>
      
        <dc:creator>mtibesar</dc:creator>

      <pubDate>Sat, 07 Apr 2018 20:00:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43718/Screen%20Shot%202018-04-07%20at%2012.56.59%20PM.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43718/Screen%20Shot%202018-04-07%20at%2012.56.59%20PM.jpg/1523131226020159</guid>
      <description>&lt;p&gt;
Audio block on front end
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Screen Shot 2018-04-07 at 12.56.24 PM.jpg attached to Ticket #43718</title>
      
        <dc:creator>mtibesar</dc:creator>

      <pubDate>Sat, 07 Apr 2018 20:00:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43718/Screen%20Shot%202018-04-07%20at%2012.56.24%20PM.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43718/Screen%20Shot%202018-04-07%20at%2012.56.24%20PM.jpg/1523131200304218</guid>
      <description>&lt;p&gt;
Audio block on back end
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43718 (Audio block back-end looks great but front-end does not) created</title>
      
        <dc:creator>mtibesar</dc:creator>

      <pubDate>Sat, 07 Apr 2018 19:57:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43718</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43718/1523131074966966</guid>
      <description>&lt;p&gt;
When creating an audio block the progress bar takes up the width of the block. However when looking at the audio on the front-end the progress bar is on the far left and it can't be centered.
&lt;/p&gt;
&lt;p&gt;
I would like it to appear the same as the back-end please.
&lt;/p&gt;
&lt;p&gt;
Thank you for all your hard work on Gutenberg!
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43695 ($depth and $args are switched when using custom callback in ...) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Sat, 07 Apr 2018 19:25:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43695#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43695#comment:1/1523129106868906</guid>
      <description>&lt;p&gt;
Welcome to Trac!
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The fix is easy, just switch those variables
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
For back-compatibility reasons this would be a bad idea.
&lt;/p&gt;
&lt;p&gt;
Docs? Probably a good idea.
&lt;/p&gt;
&lt;p&gt;
Although &lt;a class="ext-link" href="https://codex.wordpress.org/Function_Reference/wp_list_comments"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/Function_Reference/wp_list_comments&lt;/a&gt; lists an example (&lt;code&gt;mytheme_comment&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
Either way: &lt;a class="ext-link" href="https://codex.wordpress.org/Codex:Contributing"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/Codex:Contributing&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43704 (pre_option_{$option} filter is case sensitive although options are not.) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Sat, 07 Apr 2018 19:06:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43704#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43704#comment:1/1523127987057786</guid>
      <description>&lt;p&gt;
This stems from MySQL.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;select * from wp_options where option_name = 'siteUrl';&lt;/code&gt;
is equal to &lt;code&gt;select * from wp_options where option_name = 'siteurl';&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;select * from wp_options where binary(option_name) = 'siteUrl';&lt;/code&gt;
is not equal to &lt;code&gt;select * from wp_options where binary(option_name) = 'siteurl';&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
The former is used in the Options API. This is expected.
&lt;/p&gt;
&lt;p&gt;
As for your suggestion to do &lt;code&gt;pre_option_(strtolower($option))&lt;/code&gt;, please note that:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;add_filter( 'pre_option_MyOption' )&lt;/code&gt; != &lt;code&gt;add_filter( 'pre_option_myoption' )&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
You would need to make filter and action tags case-insensitive. This might break a lot of things out there.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43717 (Ping back URL display with out escaping.) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Sat, 07 Apr 2018 18:46:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43717#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43717#comment:2/1523126795629464</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Welcome to Trac! Thanks for your report. While not a security issue (well, not less secure than &lt;code&gt;the_title()&lt;/code&gt;), using &lt;code&gt;esc_url&lt;/code&gt; should be done, of course.
&lt;/p&gt;
&lt;p&gt;
43717.diff fixes all 7 themes in this regard.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43717.diff attached to Ticket #43717</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Sat, 07 Apr 2018 18:44:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43717/43717.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43717/43717.diff/1523126697512920</guid>
      <description>&lt;p&gt;
esc_url on bloginfo pingback URL
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40436 (Custom taxonomy terms order lost under wp-admin/post.php edit action ...) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Sat, 07 Apr 2018 18:08:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40436#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40436#comment:3/1523124515704717</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Wow this was a tough one! Adding default sort order for taxonomies with the set sort flag was straightforward. But then &lt;code&gt;update_object_term_cache&lt;/code&gt; popped up. What it did was fetch all the taxonomy terms for an object ordering them by name. Had to split this logic into two parts, one for fetching name-sorted taxonomies, one for fetching term_order-sorted taxonomies.
&lt;/p&gt;
&lt;p&gt;
Distantly related to &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/41679" title="#41679: defect (bug): get_the_terms does not return expected results (new)"&gt;#41679&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>40436.1.diff attached to Ticket #40436</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Sat, 07 Apr 2018 18:08:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40436/40436.1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40436/40436.1.diff/1523124491248322</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43700 (Language switcher on the login screen) updated</title>
      
        <dc:creator>Nikschavan</dc:creator>

      <pubDate>Sat, 07 Apr 2018 16:03:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43700#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43700#comment:5/1523117032504005</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Patch &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43700/43700.1.diff" title="Attachment '43700.1.diff' in Ticket #43700"&gt;43700.1.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43700/43700.1.diff" title="Download"&gt;​&lt;/a&gt; is the first pass at adding the language switcher to the login window.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
One thing that needs to be considered is how the language persists between screens, how to persist POSTed values such as redirect_to, and whether it should persist in user meta once the user successfully logs in. Suggestions welcome.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This attached patch adds the $_GET parameters to hidden variables so that they are retained after the page is reloaded.
Currently three $_GET parameters are handled &lt;code&gt;interim-login&lt;/code&gt;, &lt;code&gt;redirect_to&lt;/code&gt;, &lt;code&gt;action&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43700.1.diff attached to Ticket #43700</title>
      
        <dc:creator>Nikschavan</dc:creator>

      <pubDate>Sat, 07 Apr 2018 15:55:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43700/43700.1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43700/43700.1.diff/1523116536258814</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43708 (Since the latest release 4.9.5 I can't see my images in my media library) closed</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Sat, 07 Apr 2018 14:44:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43708#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43708#comment:3/1523112254746096</guid>
      <description>invalid: &lt;p&gt;
Hi @chrissy59. It looks like this not a WordPress bug and is being handled in a support request, so I'm closing for now. If you do find out that there is indeed a WP bug, please feel free to reopen with steps for reproducing.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #43715 (Add Privacy Policy link to bundled theme footers) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 07 Apr 2018 13:18:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43715#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43715#comment:5/1523107084948412</guid>
      <description>&lt;p&gt;
Yep, that's a good idea. The only thing I'm a bit worried about is that the regulations require consent before anything happens, cookies being set, data is send to third parties, etc.
&lt;/p&gt;
&lt;p&gt;
Sounds like it will have to be a blocking modal that stops the site from loading? Or perhaps a whole landing page (for no-js?) :(
&lt;/p&gt;
&lt;p&gt;
Of course we can keep it a "simple" message linking to the privacy policy that sets a cookie when accepted (so it goes away). Will also be interesting to see how some big sites handle that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #23983 (Add filter to get_post_thumbnail_id to override default thumbnail use) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 07 Apr 2018 13:14:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23983#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23983#comment:10/1523106869230172</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39120 (Add get/set methods to remaining main query classes (comments and terms)) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sat, 07 Apr 2018 12:08:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39120#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39120#comment:2/1523102899020874</guid>
      <description>&lt;p&gt;
The &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39120/39120.diff" title="Attachment '39120.diff' in Ticket #39120"&gt;39120.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39120/39120.diff" title="Download"&gt;​&lt;/a&gt; patch:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;combines all the above patches + tests into a single patch.
&lt;/li&gt;&lt;li&gt;removes &lt;code&gt;@access public&lt;/code&gt; from the docBlocks.
&lt;/li&gt;&lt;li&gt;Adds comments to tests.
&lt;/li&gt;&lt;li&gt;Adjustments according to the &lt;em&gt;Coding Standard&lt;/em&gt;.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43492 (Core Telemetry and Updates) updated</title>
      
        <dc:creator>idea15</dc:creator>

      <pubDate>Sat, 07 Apr 2018 12:05:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43492#comment:48</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43492#comment:48/1523102716356917</guid>
      <description>&lt;p&gt;
You don't need to explain how it works in the UK to someone who's been working nearly full time on GDPR in the UK for two years.
&lt;/p&gt;
&lt;p&gt;
The trac tickets are getting bogged down in some of the same discussions we had at the beginning of the Slack channel where people are discussing what things are and how they work rather than what actual work needs to be done on the code level. I'd suggest, as we did in the Slack channel, that those discussions be held elsewhere.
&lt;/p&gt;
&lt;p&gt;
I'd also respectfully suggest that anyone still getting to grips with the fundamentals of data protection, 48 days until the compliance deadline, find an alternate way of contributing. There is simply not the time to run tutorials to contributors at this stage.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>39120.diff attached to Ticket #39120</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Sat, 07 Apr 2018 12:01:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39120/39120.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39120/39120.diff/1523102504065731</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43492 (Core Telemetry and Updates) updated</title>
      
        <dc:creator>DavidAnderson</dc:creator>

      <pubDate>Sat, 07 Apr 2018 11:59:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43492#comment:47</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43492#comment:47/1523102367959285</guid>
      <description>&lt;p&gt;
@idea15, Rob was talking about the data processed by the WordPress foundation when it receives incoming HTTP requests for updates information - he wasn't talking about end-users of WP self-install getting data out of the those individual installs. There has to be something on wordpress.org, so that people can request PII that is still stored after individual installs are wiped.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Also, remember the RTBF is the right to request it. It is not an automatic, universal right to have it done.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's true that GDPR does not grant an absolute, limitless right - for example, if someone requests deletion of all their PII, then potentially a) it could instead be anonymized (under the GDPR, that requires that there's no way to reverse the anonymization, however difficult the procedure to do so) or b) another law might require retaining it (e.g. tax records). In the case of the sort of stuff wordpress.org is storing - quite a bit of information on the details of each site install, indexed by URL (certainly PII in many cases) and also IP (which would allow identification in a lot of cases using "what site is hosted on this IP? tools combined with simple scans of installed plugins/themes) - in the case of this info, anonymization or complete deletion would be the only possibilities. There's no general exception to arbitrarily say "no, I don't want to delete or anonymize your PII, so I'm not going to."
&lt;/p&gt;
&lt;p&gt;
In the UK, the authoritative state body for implementation of the GDPR is the ICO. Their guide is here: &lt;a class="ext-link" href="https://ico.org.uk/for-organisations/guide-to-the-general-data-protection-regulation-gdpr/individual-rights/right-to-erasure/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://ico.org.uk/for-organisations/guide-to-the-general-data-protection-regulation-gdpr/individual-rights/right-to-erasure/&lt;/a&gt; . There, the permitted grounds for refusing a deletion request because you still need to process the data for a legitimate reason are given as:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;to exercise the right of freedom of expression and information;
&lt;/li&gt;&lt;li&gt;to comply with a legal obligation;
&lt;/li&gt;&lt;li&gt;for the performance of a task carried out in the public interest or in the exercise of official authority;
&lt;/li&gt;&lt;li&gt;for archiving purposes in the public interest, scientific research historical research or statistical purposes where erasure is likely to render impossible or seriously impair the achievement of that processing; or
&lt;/li&gt;&lt;li&gt;for the establishment, exercise or defence of legal claims.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43492 (Core Telemetry and Updates) updated</title>
      
        <dc:creator>idea15</dc:creator>

      <pubDate>Sat, 07 Apr 2018 11:16:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43492#comment:46</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43492#comment:46/1523099762452000</guid>
      <description>&lt;p&gt;
All four of those questions should be answered in the site's privacy notice - so if it's a concern, carry it over to one of the trac tickets pertaining to that tool.
&lt;/p&gt;
&lt;p&gt;
Also, remember the RTBF is the right to request it. It is not an automatic, universal right to have it done.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43717 (Ping back URL display with out escaping.) updated</title>
      
        <dc:creator>sharaz</dc:creator>

      <pubDate>Sat, 07 Apr 2018 09:40:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43717#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43717#comment:1/1523094040818162</guid>
      <description>&lt;p&gt;
I found this issue in twenty seventeen functions.php
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43717 (Ping back URL display with out escaping.) created</title>
      
        <dc:creator>sharaz</dc:creator>

      <pubDate>Sat, 07 Apr 2018 09:35:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43717</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43717/1523093728488119</guid>
      <description>&lt;p&gt;
functions.php
Line no 401 :         printf( '&amp;lt;link rel="pingback" href="%s"&amp;gt;' . "\n", get_bloginfo( 'pingback_url' ) );
According to theme review hand book &lt;a class="ext-link" href="https://make.wordpress.org/themes/handbook/review/required/#code"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Ref&lt;/a&gt; data should be escaped before output.
So the right way.
printf( '&amp;lt;link rel="pingback" href="%s"&amp;gt;' . "\n", esc_url( get_bloginfo( 'pingback_url' ) ) );
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43716 (Not work "option_active_plugins" filter in front-end) created</title>
      
        <dc:creator>hamedmoodi</dc:creator>

      <pubDate>Sat, 07 Apr 2018 07:46:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43716</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43716/1523087182608946</guid>
      <description>&lt;p&gt;
The "option_active_plugins" filter work just in admin and not work in front-end.
i test wp_get_active_and_valid_plugins function in wp-includes/load.php#L598
the "$active_plugins" correct and work in front-end but related filter not work and i have to use "alloptions" filter for work
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43481 (Add tabs and placeholders to privacy tools page in wp-admin) updated</title>
      
        <dc:creator>xkon</dc:creator>

      <pubDate>Sat, 07 Apr 2018 05:21:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43481#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43481#comment:33/1523078495532346</guid>
      <description>&lt;p&gt;
So as I figured from &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43546" title="#43546: enhancement: Add to the privacy tools UX a means to export personal data by ... (closed: fixed)"&gt;#43546&lt;/a&gt; since new designs where added, we're splitting up the tools into different screens as well? ( I got confused a bit .. again :D ).
&lt;/p&gt;
&lt;p&gt;
Either way, shall we close this? I don't see a point of this being open anymore if everything will be handled 'with' the patches and not as a UI first.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43709 (Fix or remove the "delete revision" endpoint) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Sat, 07 Apr 2018 03:27:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43709#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43709#comment:2/1523071657851373</guid>
      <description>&lt;p&gt;
We could handle this in &lt;code&gt;map_meta_cap&lt;/code&gt;: if the cap is &lt;code&gt;delete_post&lt;/code&gt; and the post is a revision, return &lt;code&gt;do_not_allow&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43558 (Add `composer.json` file for development dependencies) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Fri, 06 Apr 2018 23:32:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43558#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43558#comment:10/1523057558132466</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43558#comment:4" title="Comment 4"&gt;netweb&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Copying in @GaryJ's &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/23912#comment:98" title="#23912: enhancement: Add Composer package description (new)"&gt;ticket:23912#comment:98&lt;/a&gt; for further context:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The &lt;code&gt;.travis.yml&lt;/code&gt; files shows PHPUnit can be used at version 4, 5 or 6, depending on the PHP version available - and that's great, but get it down in a &lt;code&gt;composer.json&lt;/code&gt;, and a &lt;code&gt;composer install&lt;/code&gt; means that the switch statement can be dropped, and developers working locally can get the right version too.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
A note for anyone who tries to tackle this: The concept of conditional dependencies does not exist in Composer, which is why this logic is in &lt;code&gt;.travis.yml&lt;/code&gt; and why (AFAIK) we can't add PHPUnit as a Composer dependency.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43546 (Add to the privacy tools UX a means to export personal data by ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 23:32:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43546#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43546#comment:6/1523057527513540</guid>
      <description>&lt;p&gt;
@melchoyce thank you, thank you, thank you. @mikejolley and I will get this rolled into our little side repo and then return here with a patch pronto
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42807 (Add filter to modfiy wp.api versionString) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Fri, 06 Apr 2018 23:24:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42807#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42807#comment:13/1523057063892664</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43707 (Why Using Un-nacessory file(JS &amp; CSS)) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Fri, 06 Apr 2018 23:18:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43707#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43707#comment:2/1523056734649572</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37392 (Multisite "Sites" screen: Add links to filter websites by status) updated</title>
      
        <dc:creator>mnelson4</dc:creator>

      <pubDate>Fri, 06 Apr 2018 23:02:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37392#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37392#comment:21/1523055740018348</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
all should probably not be part of the $slug_to_label array, as it's not a status and its link should have a different structure (it shouldn't do ?status=all, but instead should not add any status query arg). See how &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/class-wp-posts-list-table.php#L323"&gt;https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/class-wp-posts-list-table.php#L323&lt;/a&gt; does that.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I hear you that there shouldn't be a link with &lt;code&gt;?status=all&lt;/code&gt;, so I made an adjustment that avoids that, but I do prefer how having &lt;code&gt;all&lt;/code&gt; be in the array is avoids quite a bit of repeated code. If you still prefer not having &lt;code&gt;all&lt;/code&gt; in the array, I can make another patch that does that.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
here are a number of missing blank lines there
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm not sure where there should be blank lines. I double-checked the WP coding standards and don't see anything about where there should be blank lines. Could you point me to some documentation or help me see where blank lines are needed?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
some parts are incorrectly indented.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I double-checked that it's using real tabs instead of spaces for indentation and don't see where the indentation is wrong, sorry!
&lt;/p&gt;
&lt;p&gt;
I hope this is a bit better though
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37392.5.patch attached to Ticket #37392</title>
      
        <dc:creator>mnelson4</dc:creator>

      <pubDate>Fri, 06 Apr 2018 22:54:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37392/37392.5.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37392/37392.5.patch/1523055287459791</guid>
      <description>&lt;p&gt;
Patch uploaded in response to &lt;a href="https://core.trac.wordpress.org/ticket/37392#comment:16"&gt;https://core.trac.wordpress.org/ticket/37392#comment:16&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #42807 (Add filter to modfiy wp.api versionString) closed</title>
      
        <dc:creator>mkaz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 22:29:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42807#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42807#comment:12/1523053798547780</guid>
      <description>maybelater: &lt;p&gt;
I'm solving this issue in a different way which doesn't require this change, I'll close out this ticket.
&lt;/p&gt;
&lt;p&gt;
I still think a filter to be able to modify the version string would be useful, but understand it could be a bit dangerous.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #10653 (Update comment_author when display_name changes) updated</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 22:00:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10653#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10653#comment:20/1523052055238468</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10653 (Update comment_author when display_name changes) updated</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 22:00:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10653#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10653#comment:19/1523052017951178</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've just added a patch working on WP 5.0.0 with the missing tests.
&lt;/p&gt;
&lt;p&gt;
I've written the tests first on the current function and then updated with the one in the patch. This showed a different behaviour that I've now fixed, but please let me know if you agree with my refactoring.
&lt;/p&gt;
&lt;p&gt;
Plus I was wondering if we should pass the &lt;code&gt;$before_alias&lt;/code&gt; and &lt;code&gt;$after_alias&lt;/code&gt; also in the &lt;code&gt;comment_author&lt;/code&gt; function.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>10653.diff attached to Ticket #10653</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 21:57:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/10653/10653.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/10653/10653.diff/1523051833234129</guid>
      <description>&lt;p&gt;
Added unit tests and fixed different behaviour from current one
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43492 (Core Telemetry and Updates) updated</title>
      
        <dc:creator>robscott</dc:creator>

      <pubDate>Fri, 06 Apr 2018 21:38:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43492#comment:45</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43492#comment:45/1523050706298506</guid>
      <description>&lt;p&gt;
So today I was chatting about this ticket with some colleagues and one of them said the following:
&lt;/p&gt;
&lt;p&gt;
What if for one of my old WordPress sites, the URL was myname.com and I went to WordPress.org under GDPR Right To Be Forgotten asking them to delete their entire record of me?
&lt;/p&gt;
&lt;p&gt;
Thoughts on this?
&lt;/p&gt;
&lt;p&gt;
Further, this user would be entitled to download a copy or his or her data, too.
&lt;/p&gt;
&lt;p&gt;
In this light - some more info would be helpful:
&lt;/p&gt;
&lt;p&gt;
1) who controls the data?
2) where is the data stored?
3) who has access to the data?
4) when is the data destroyed?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>nerrad</dc:creator>

      <pubDate>Fri, 06 Apr 2018 21:34:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:88</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:88/1523050459977132</guid>
      <description>&lt;p&gt;
Just making note of this pull request I've added to the gutenberg project: &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/pull/6051"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/gutenberg/pull/6051&lt;/a&gt; (and the corresponding issue: &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/issues/6015"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/gutenberg/issues/6015&lt;/a&gt;)
&lt;/p&gt;
&lt;p&gt;
I think it provides a good path forward for handling getting the subset of strings needed for any js files loaded on the fly.
&lt;/p&gt;
&lt;p&gt;
I'm still uncertain how the php part of this piece will go but at a minimum it would require:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;An api for registering a json map file that provides a map of js "chunk" to strings in that chunk (or maybe that would be auto-detected from a standard "map" file name).
&lt;/li&gt;&lt;li&gt;An api for plugins to register scripts to that map (either an additional arg on &lt;code&gt;wp_register_script&lt;/code&gt; or &lt;code&gt;wp_enqueue_script&lt;/code&gt; or as I suggested in the issue a standalone method &lt;code&gt;wp_register_script_i18($script_handle, $chunk_name, $domain)&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;On printing enqueued scripts, &lt;code&gt;WP_Scripts&lt;/code&gt; would grab the list of registered "i18n chunks" and using that grab the strings from $translations to pass to &lt;code&gt;wpi18n.setLocale&lt;/code&gt; (assuming the wpi18n package is what lands in core).
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43715 (Add Privacy Policy link to bundled theme footers) updated</title>
      
        <dc:creator>nickwuk</dc:creator>

      <pubDate>Fri, 06 Apr 2018 21:06:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43715#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43715#comment:4/1523048812000820</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43715" title="#43715: enhancement: Add Privacy Policy link to bundled theme footers (closed: fixed)"&gt;xkon&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
Great idea. However does the popup notification not need to give granular information about and control over the different classes of cookies like the OneTrust or CookieBot notifications? Also to provide a facility to revoke consent as well as accepting, and to record the user's id and date of acceptance for each class(and maybe even the Privacy Policy version)?
&lt;/p&gt;
&lt;p&gt;
I'm NOT a lawyer, I'm just interested in following WP developments with regards GDPR.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43715 (Add Privacy Policy link to bundled theme footers) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 06 Apr 2018 20:45:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43715#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43715#comment:3/1523047555837376</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #gdpr-compliance by xkon. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/gdpr-compliance/p1523047553000392"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43715 (Add Privacy Policy link to bundled theme footers) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 20:42:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43715#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43715#comment:2/1523047339109970</guid>
      <description>&lt;p&gt;
+100 - i especially like the idea of automatically linking the privacy policy page if one exists - now that we have that as a dedicated option
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43715 (Add Privacy Policy link to bundled theme footers) updated</title>
      
        <dc:creator>xkon</dc:creator>

      <pubDate>Fri, 06 Apr 2018 20:39:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43715#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43715#comment:1/1523047192510516</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43715 (Add Privacy Policy link to bundled theme footers) created</title>
      
        <dc:creator>xkon</dc:creator>

      <pubDate>Fri, 06 Apr 2018 20:39:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43715</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43715/1523047164050353</guid>
      <description>&lt;p&gt;
We are probably all using some kind of plugin that throws a little notification ( popup box / bar you name it ) in our front-end to inform visitors about having Cookies &amp;amp; a Privacy Policy page / Terms &amp;amp; Conditions and anything else you can probably have for users that is mandatory to read.
&lt;/p&gt;
&lt;p&gt;
At least it's mandatory in the EU for quite some time now as well pre-GDPR.
&lt;/p&gt;
&lt;p&gt;
One fine example is the &lt;a class="ext-link" href="https://wordpress.org/plugins/uk-cookie-consent/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/plugins/uk-cookie-consent/&lt;/a&gt; ( I just use that but there are plenty others as well in the repo ).
&lt;/p&gt;
&lt;p&gt;
I'd say it's time to bundle something like this with core just to be 100%  sure that it will keep everybody on the 'safe' side:
&lt;/p&gt;
&lt;p&gt;
Since we are helping the website owners create their Privacy Policy page and also help them include all information needed / possible about the cookies etc that they will be using, why not throw a notification as well in the front end that users could customize with some simple css ?
&lt;/p&gt;
&lt;p&gt;
My thinking is this to be more precise:
&lt;/p&gt;
&lt;p&gt;
If you have selected a Privacy Policy page from the new Tools that we are adding + that page gets a 'published' status, the popup is going to be automatically enabled in the front end for you as well pointing  to that page. This way there's no way of 'forgetting' it and the users are automatically informed.
&lt;/p&gt;
&lt;p&gt;
Of course there can be an option to disable it if the Admin wants to use any other plugin or create any custom notification etc.
&lt;/p&gt;
&lt;p&gt;
What do you think, can we go for this as well since it won't be intrusive in any way if Admins can easily 'disable' it ? I'd personally prefer to have it built in corewise than depend on a plugin.
&lt;/p&gt;
&lt;p&gt;
If you want a full scope of this it should be something like this (fairly simple):
&lt;/p&gt;
&lt;p&gt;
Title: Privacy Policy
Text: Read about the privacy policy and the cookies we use.
Button: I Accept.
&lt;/p&gt;
&lt;p&gt;
When clicking the button 1 extra cookie drops that the user has accepted so it won't popup again. We could also provide a UX in the admin so the site owner can select what the title/text/button  would write ofc.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43714 (remove_menu_page(): E_WARNING: Invalid argument supplied for foreach()) created</title>
      
        <dc:creator>conner_bw</dc:creator>

      <pubDate>Fri, 06 Apr 2018 20:35:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43714</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43714/1523046939468068</guid>
      <description>&lt;p&gt;
&lt;code&gt;remove_menu_page()&lt;/code&gt; sometimes logs: E_WARNING: Invalid argument supplied for foreach()
&lt;/p&gt;
&lt;p&gt;
Problematic code:
&lt;/p&gt;
&lt;pre class="wiki"&gt;
function remove_menu_page( $menu_slug ) {
  global $menu;
  foreach ( $menu as $i =&amp;gt; $item ) {
  // ...
&lt;/pre&gt;&lt;p&gt;
URL        /wp/wp-admin/admin-ajax.php
HTTP referrer        &lt;a class="ext-link" href="https://_SOME_SITE_/wp/wp-admin/network/users.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://_SOME_SITE_/wp/wp-admin/network/users.php&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Stack trace
&lt;/p&gt;
&lt;pre class="wiki"&gt;/vendor/soberwp/intervention/src/Module/RemoveMenuItems.php (121)
/web/wp/wp-includes/class-wp-hook.php (286)
/web/wp/wp-includes/class-wp-hook.php (310)
/web/wp/wp-includes/plugin.php (453)
/web/wp/wp-admin/admin-ajax.php (44)
&lt;/pre&gt;&lt;p&gt;
Offending line:
&lt;a class="ext-link" href="https://github.com/soberwp/intervention/blob/7d69c58b32fce29aad08e4ff9c9de43963122610/src/Module/RemoveMenuItems.php#L121"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/soberwp/intervention/blob/7d69c58b32fce29aad08e4ff9c9de43963122610/src/Module/RemoveMenuItems.php#L121&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Possible reason: &lt;code&gt;global $menu&lt;/code&gt; not defined?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 06 Apr 2018 19:54:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:74</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:74/1523044488467434</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
One other question here: how does the autosave actually get applied to the post?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
When the post edit screen loads, if an autosave is present and belongs to the current user and is newer than and different from the current save, a notice is displayed at the top of the screen informing the user that a newer autosave is available, with a link to "View the autosave".
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cl.ly/3K0g2U3I293i/Image%202018-04-06%20at%203.51.16%20PM.png"&gt;&lt;img src="https://cl.ly/3K0g2U3I293i/Image%202018-04-06%20at%203.51.16%20PM.png" alt="https://cl.ly/3K0g2U3I293i/Image%202018-04-06%20at%203.51.16%20PM.png" crossorigin="anonymous" title="https://cl.ly/3K0g2U3I293i/Image%202018-04-06%20at%203.51.16%20PM.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Clicking the link takes the user into the revisions interface, viewing the autosave. Clicking 'Restore This Autosave' restores this autosave as the post content.
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cl.ly/1e2C260J2x3L/Image%202018-04-06%20at%203.51.58%20PM.png"&gt;&lt;img src="https://cl.ly/1e2C260J2x3L/Image%202018-04-06%20at%203.51.58%20PM.png" alt="https://cl.ly/1e2C260J2x3L/Image%202018-04-06%20at%203.51.58%20PM.png" crossorigin="anonymous" title="https://cl.ly/1e2C260J2x3L/Image%202018-04-06%20at%203.51.58%20PM.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Aside: if the author's autosave is older than the currently saved post when the post edit screen loads, it is deleted.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>40436.docs.diff attached to Ticket #40436</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 19:16:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40436/40436.docs.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40436/40436.docs.diff/1523042204440916</guid>
      <description>&lt;p&gt;
Add missing documentation for 'sort' parameter
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Tickets #37110,​43694 batch updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 06 Apr 2018 19:10:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=37110%2C43694</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=37110%2C43694/1523041841931992</guid>
      <description>duplicate: &lt;p&gt;
Hi @joellisenby thanks for the report. This is a concern, and we are already tracking this issue in &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/37110" title="#37110: task (blessed): Update to jQuery 3.* (new)"&gt;#37110&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #43443 (Add a method for confirmation of requests for deleting or anonymizing ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 19:09:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43443#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43443#comment:27/1523041794372887</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/42964" title="Privacy: fixes and updates for the method to confirm user requests by ..."&gt;42964&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Privacy: fixes and updates for the method to confirm user requests by email.&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Improve function and variable names.
&lt;/li&gt;&lt;li&gt;Allow extra data to be passed with the request.
&lt;/li&gt;&lt;li&gt;Make the option/user meta names more consistent.
&lt;/li&gt;&lt;li&gt;Adds an inline comment explaining use of hash.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Props mikejolley.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43443" title="#43443: enhancement: Add a method for confirmation of requests for deleting or anonymizing ... (closed: fixed)"&gt;#43443&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [42964]: Privacy: fixes and updates for the method to confirm user requests by ...</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 19:09:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/42964</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/42964/1523041793898047</guid>
      <description>&lt;p&gt;
Privacy: fixes and updates for the method to confirm user requests by email.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Improve function and variable names.
&lt;/li&gt;&lt;li&gt;Allow extra data to be passed with the request.
&lt;/li&gt;&lt;li&gt;Make the option/user meta names more consistent.
&lt;/li&gt;&lt;li&gt;Adds an inline comment explaining use of hash.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Props mikejolley.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43443" title="#43443: enhancement: Add a method for confirmation of requests for deleting or anonymizing ... (closed: fixed)"&gt;#43443&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #43708 (Since the latest release 4.9.5 I can't see my images in my media library) updated</title>
      
        <dc:creator>chrissy59</dc:creator>

      <pubDate>Fri, 06 Apr 2018 18:41:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43708#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43708#comment:2/1523040075665806</guid>
      <description>&lt;p&gt;
If I can't debug this via the support forum (I am trying now - see: &lt;a class="ext-link" href="https://wordpress.org/support/topic/media-library-63/?view=all#post-10154002"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/media-library-63/?view=all#post-10154002&lt;/a&gt;) can I get back to you for help?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #40436,​43705 batch updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 18:37:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=40436%2C43705</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=40436%2C43705/1523039830663310</guid>
      <description>duplicate: &lt;p&gt;
Hey, welcome back to Trac! There is not need to open duplicate tickets just because old ones seem abandoned :) feel free to star it, and continue (bump) the discussion there.
&lt;/p&gt;
&lt;p&gt;
Closing as duplicate of &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/40436" title="#40436: defect (bug): Custom taxonomy terms order lost under wp-admin/post.php edit action ... (new)"&gt;#40436&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #40436 (Custom taxonomy terms order lost under wp-admin/post.php edit action ...) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 18:35:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40436#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40436#comment:1/1523039723461023</guid>
      <description>&lt;p&gt;
Duplicate &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43705" title="#43705: defect (bug): Respect custom taxonomy term order on admin edit page when show_ui and ... (closed: duplicate)"&gt;#43705&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 18:35:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:8/1523039701927553</guid>
      <description>&lt;p&gt;
That's a very good point. A site owner is ultimately responsible for what their authors do. I still think allowing admins to limit what embeds are rendered is appropriate step.
&lt;/p&gt;
&lt;p&gt;
A separate ticket perhaps for adding a writing setting that disallows/strips 3rd party script, iframe and img tags from posts?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43706 (Email with link to change admin email does not include proposed new ...) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 18:34:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43706#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43706#comment:2/1523039661673726</guid>
      <description>&lt;p&gt;
Hey, @sshanky! Welcome to Trac :)
&lt;/p&gt;
&lt;p&gt;
The email you mention does contain the "proposed new email address".
&lt;/p&gt;
&lt;pre class="wiki"&gt;	$email_text = __(
		'Howdy ###USERNAME###,
You recently requested to have the administration email address on
your site changed.
If this is correct, please click on the following link to change it:
###ADMIN_URL###
You can safely ignore and delete this email if you do not want to
take this action.
This email has been sent to ###EMAIL###
Regards,
All at ###SITENAME###
###SITEURL###'
	);
&lt;/pre&gt;&lt;p&gt;
&lt;code&gt;###EMAIL###&lt;/code&gt; is, in fact, the proposed new email.
&lt;/p&gt;
&lt;p&gt;
Quoting the help block in the User Edit screen:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If you change this we will send you an email at your new address to confirm it. The new address will not become active until confirmed.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
What appears to be happening, is your old administrator registered as a regular user, and is trying to change his email to the address you're receiving the notification on. Would this make sense?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43708 (Since the latest release 4.9.5 I can't see my images in my media library) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 18:21:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43708#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43708#comment:1/1523038893890853</guid>
      <description>&lt;p&gt;
Hi, @chrissy59! Welcome to Trac. This bug tracker is used for WordPress core bugs. It seems that your issue stems from a faulty configuration, rather than core itself. I would suggest heading over to the Support Forums &lt;a class="ext-link" href="https://wordpress.org/support/forum/how-to-and-troubleshooting/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/forum/how-to-and-troubleshooting/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
A swarm of friendly volunteers will be glad to help you debug the issue and resolve it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:55:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:7/1523037359952842</guid>
      <description>&lt;p&gt;
Thinking more about this: if an author "hotlinks" an image from another site, that site will still get the visitor's IP, browser UA, etc. Not sure how that affects the privacy policy...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:38:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:6/1523036282466218</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Enforcing what can be embedded seems like good idea for sites with multiple authors and editors. This can be the beginning of a "content creation policy". However it's not as easy: editors can simply paste the embed code copied from source sites as they can post &lt;code&gt;unfiltered_html&lt;/code&gt;. In addition to the above list of oEmbed providers, content can also be embedded form any WordPress site.
&lt;/p&gt;
&lt;p&gt;
To do this right we'll need more stringent HTML filtering capabilities, and start filtering the HTML for admins and editors too (more specifically &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;). This is a big change that needs to be weighted from all possible angles.
&lt;/p&gt;
&lt;p&gt;
For GDPR compliance purposes it would probably be enough to explain to the site owners that the privacy policy should cover all possible embeds. That's the case for existing content too, it won't be enough to just block embeds from some oEmbed providers.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43621 (Introduce `add_action_once` and `add_filter_once` sugar.) updated</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:12:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43621#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43621#comment:5/1523034749284068</guid>
      <description>&lt;p&gt;
@vortfu Thanks for looking at this. Indeed, the bug stems from the fact that adding a callback with the same name is not possible. &lt;code&gt;_wp_filter_build_unique_id&lt;/code&gt; returns the same ID for it, so &lt;code&gt;_remove_filter_once&lt;/code&gt; is not actually added a second time.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
could be re-implemented as an anonymous func
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
PHP 5.2 does not support anonymous functions, unfortunately. Thus the crazy hacking :) (and bugs).
&lt;/p&gt;
&lt;p&gt;
43621.2.diff contains both the 43621.wp_hook.diff patch and fixes on 43621.once.diff.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43621.2.diff attached to Ticket #43621</title>
      
        <dc:creator>soulseekah</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:12:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43621/43621.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43621/43621.2.diff/1523034737827656</guid>
      <description>&lt;p&gt;
Refresh
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #20578 (Allow users to delete a plugin without uninstalling) updated</title>
      
        <dc:creator>alexsanford1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:08:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20578#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20578#comment:49/1523034482600768</guid>
      <description>&lt;p&gt;
Given the upcoming enforceability of the GDPR, it is very important for plugins to give site owners the ability to delete all of the plugin's data in a safe way that is not prone to accidental deletion.
&lt;/p&gt;
&lt;p&gt;
With that in mind, I think the proposed solution here (adding a checkbox to the dialog) provides a great balance between data deletion requirements and safety (so users don't delete data accidentally when trying to fix an issue with their installation, for example).
&lt;/p&gt;
&lt;p&gt;
There are workarounds that plugin authors can use currently, but this should really be functionality provided by core (see some discussion for one specific plugin here: &lt;a class="ext-link" href="https://github.com/Automattic/sensei/issues/2116"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/Automattic/sensei/issues/2116&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Any chance this could get some attention soon?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:05:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:5/1523034342296352</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Sorry @swissspidy - our edits collided :P
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:04:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:4/1523034291906889</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Idea: maybe it could go on the Tools &amp;gt; Privacy page we added recently with the privacy policy page setting
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Fri, 06 Apr 2018 17:03:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:3/1523034230487071</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 06 Apr 2018 16:29:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:2/1523032172098596</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #gdpr-compliance by allendav. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/gdpr-compliance/p1523032169000397"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 16:29:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713#comment:1/1523032155190791</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43713 (Privacy: Add a UI to allow administrators to disable individual embeds ...) created</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Fri, 06 Apr 2018 16:28:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43713</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43713/1523032113578755</guid>
      <description>&lt;p&gt;
Builds on protecting our users from tracking that was introduced in &lt;a href="https://core.trac.wordpress.org/ticket/41784"&gt;https://core.trac.wordpress.org/ticket/41784&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Embedded iframes allow 3rd parties to collect user's IP addresses and User Agents, to store and retrieve cookies on their browsers, to embed additional third party tracking, and monitor their interaction with that embedded content, including correlating your interaction with the content with their account with that service, if they are logged in to that service.
&lt;/p&gt;
&lt;p&gt;
That means, especially when EU residents are visitors, that all that needs to be disclosed in the site's privacy policy.
&lt;/p&gt;
&lt;p&gt;
To further improve site's users privacy, and give site owners more control over how their user's privacy is impacted (and how many 3rd party services they would need to disclose in their site's privacy policy) we should allow administrators to disable any/all embeds on their site.
&lt;/p&gt;
&lt;p&gt;
This UI could live alongside the privacy page setting controls recently added to core.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 15:52:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:73</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:73/1523029951988484</guid>
      <description>&lt;p&gt;
Looking at 43316.13.diff, it introduces quite a few inconsistencies. It kind of treats autosaves as different post_type, but still keeps them as revisions. It also moves all auto-saving logic to the client and requires the client to manipulate the data to be able to save. There are also few regressions when comparing with the current logic.
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The client cannot do &lt;code&gt;autoSavePost( postContent )&lt;/code&gt; the same way it does &lt;code&gt;savePost( postContent )&lt;/code&gt;. There are quite a few differences in the data. This is a departure from the post saving logic that may be seen as a regression.
&lt;ul&gt;&lt;li&gt;It has to set &lt;code&gt;parent&lt;/code&gt; to be the same as post_ID. That's somewhat weird as an item cannot be a parent of itself :) That's even worse for pages where there may be an actual &lt;code&gt;post_parent&lt;/code&gt; which will have to be overwritten with the post_ID...
&lt;/li&gt;&lt;li&gt;Actually a client cannot do &lt;code&gt;autoSavePost( postContent )&lt;/code&gt;. It will have to check whether an autosave exists (an extra trip to the server), then manipulate the post data to match the endpoint requirements. It seems the client will have to always do two requests to be able to auto-save.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Autosaves on draft posts are explicitly forbidden. This is a regression. It means that:
&lt;ul&gt;&lt;li&gt;We will not be able to ever do server-side post locking, as we will loose any data a second client tries to autosave.
&lt;/li&gt;&lt;li&gt;When two clients try to edit the same draft, they will automatically stomp on each other's changes (without knowing) and there will be no server backup. That's not acceptable imho.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
There also seem to be few bugs (and typos) in update_item() and update_item_permissions_check() but before looking at them I'd like to look at the proposed functionality from a clien't point of view.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The difference between saving and auto-saving is quite large.
&lt;/li&gt;&lt;li&gt;Auto-saving seems needlessly complex and that's not warranted.
&lt;/li&gt;&lt;li&gt;The server logic is completely overridden/ignored and the (untrusted) client has access to making some low-level decision which seems to be a regression.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43711 (Let's create a standard development setup for WordPress core.) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 06 Apr 2018 14:53:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43711#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43711#comment:1/1523026418991949</guid>
      <description>&lt;p&gt;
Thanks for opening this issue
&lt;/p&gt;
&lt;p&gt;
Two things that I think are important to address as part of this:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ideally, the integration and e2e tests (even unit tests since PHP unit tests require a full setup) should use the same environment
&lt;/li&gt;&lt;li&gt;A dev environment even if it's hidden behind magical scripts should stay simple. When bugs happen developers of any level should be able to understand, debug and tweak how the environment works.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I admit having a preference for docker setups because it's light compared to a real Virtual Machine.
I think the current docker setup is Gutenberg has grown to be slightly more complex to what I want it to be. (two many scripts calling each other), I believe we can achieve the same goals using a simple docker-compose file.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #8973 (Function get_page_of_comment() returns incorrect page numbers) updated</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 14:52:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8973#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8973#comment:26/1523026358419195</guid>
      <description>&lt;p&gt;
Not sure if helpful, but I've run this patch on Travis: &lt;a class="ext-link" href="https://travis-ci.org/matjack1/wordpress-develop/builds/363134316"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://travis-ci.org/matjack1/wordpress-develop/builds/363134316&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Maybe it's a bit easier for you to check.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43712 (Improve the user experience when a fatal error or uncaught exception occurs) created</title>
      
        <dc:creator>David_Rothstein</dc:creator>

      <pubDate>Fri, 06 Apr 2018 14:43:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43712</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43712/1523025823932531</guid>
      <description>&lt;p&gt;
If a WordPress page request dies with a catchable fatal error or uncaught exception, WordPress just falls back on PHP's default error handling behavior.  What this typically means is:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The page HTML gets cut off at a random point (wherever the error occurred), so the page looks broken but with no indication to the user that anything went wrong.
&lt;/li&gt;&lt;li&gt;The request returns with a 200 status (which can result in the broken page being cached in all sorts of places).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Proposed improvement:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Use set_error_handler() and set_exception_handler() early in the WordPress bootstrap process to give a better experience by default.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
For comparison, the way Drupal handles this is that it &lt;a class="ext-link" href="https://api.drupal.org/api/drupal/includes%21theme.inc/function/theme_render_template/7.x"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;buffers all output from the theme&lt;/a&gt; (only actually printing it much later on in the page request).  That way, if a fatal error or exception does occur, no output has been sent yet, so it can always &lt;a class="ext-link" href="https://api.drupal.org/api/drupal/includes%21errors.inc/function/_drupal_log_error/7.x"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;set a "500 Service unavailable" header and display a maintenance page instead&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are pros and cons to that approach, but in any case, I'm not sure that WordPress could be changed to use it in a backwards-compatible way.
&lt;/p&gt;
&lt;p&gt;
However, what does seem possible to me is:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The error handler could check headers_sent() to see if output was already sent.
&lt;/li&gt;&lt;li&gt;If no output was sent yet, just call wp_die() to display a standard error page with a 500 error.
&lt;/li&gt;&lt;li&gt;If output already was sent, maybe at least try to print some kind of HTML before dying so the user can see that something is broken which wasn't their fault.  I'm thinking something like an "Oops - something went wrong and the page didn't finish loading" message, ideally themed as a simple floating bar at the bottom of the browser window.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #8973 (Function get_page_of_comment() returns incorrect page numbers) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 14:32:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8973#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8973#comment:25/1523025131488293</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43711 (Let's create a standard development setup for WordPress core.) created</title>
      
        <dc:creator>omarreiss</dc:creator>

      <pubDate>Fri, 06 Apr 2018 14:28:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43711</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43711/1523024910626241</guid>
      <description>&lt;p&gt;
&lt;sup&gt;This ticket was triggered by previous discussion in &lt;a href="https://core.trac.wordpress.org/ticket/43055"&gt;https://core.trac.wordpress.org/ticket/43055&lt;/a&gt;&lt;/sup&gt;
The current default for developing WordPress core seems to be VVV. While VVV is doing a great job in making it easier to run WordPress locally, I think we could do better, especially for WordPress core.
&lt;/p&gt;
&lt;p&gt;
With this ticket I would like to set a goal for improvement and discuss ways to achieve it.
&lt;/p&gt;
&lt;h2 id="Thegoal:asimpletwo-stepprocessforsettingupaWordPresscoredevelopmentenvironment"&gt;The goal: a simple, two-step process for setting up a WordPress core development environment&lt;/h2&gt;
&lt;p&gt;
The simplest development setup workflow I can think of consists just of two simple steps:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;em&gt;Download and boot&lt;/em&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
That's how simple it should (eventually) be. WordPress should now be running on some local address and every developer should be able to dive in the code and make changes.
&lt;/p&gt;
&lt;h2 id="Integratingwatchandbuildbehavior"&gt;Integrating watch and build behavior&lt;/h2&gt;
&lt;p&gt;
As we plan to &lt;a href="https://core.trac.wordpress.org/ticket/43055"&gt;introduce a build step to the development workflow&lt;/a&gt;, it becomes more important that building is not an afterthought but something that is integrated into the development workflow.
&lt;/p&gt;
&lt;p&gt;
The desirable state is one in which we just boot and can trust all changes are processed to whatever's being served in the browser.
&lt;/p&gt;
&lt;p&gt;
This unfortunately is not the case at the moment. If we want to do better, we need a more unified approach.
&lt;/p&gt;
&lt;h2 id="Requirements"&gt;Requirements&lt;/h2&gt;
&lt;p&gt;
We need something that is:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the easiest possible development workflow: just download and boot.
&lt;/li&gt;&lt;li&gt;fast: reduce build and boot times to a minimum.
&lt;/li&gt;&lt;li&gt;reliable: it should just work.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
@pento noted that eventually he'd like this thing to be configurable and installable through a GUI in order to reduce the barrier of entry for new contributors to the absolute minimum.
&lt;/p&gt;
&lt;h2 id="Possiblesolutions"&gt;Possible solutions&lt;/h2&gt;
&lt;h3 id="Dockerinstallscript"&gt;Docker install script&lt;/h3&gt;
&lt;p&gt;
@pento built automated development environment setup scripts for Gutenberg based on Docker.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Gutenberg setup script walks the user through setting up their development environment. It would obviously need to be written to work on Windows, too, before it was a valid option for Core. That will be fun. 🙂
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There are a few benefits to using a Docker based environment.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It's fast
&lt;/li&gt;&lt;li&gt;It's composable
&lt;/li&gt;&lt;li&gt;It only requires Docker
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Aside: If we get good and well maintained Docker images for WordPress, this could also benefit the web hosting community, will make WordPress more optimized for cloud native hosting infrastructures, could also help optimize WordPress unit testing in container based CI solutions like Travis etc.
&lt;/p&gt;
&lt;h3 id="VVVinstallscript"&gt;VVV install script&lt;/h3&gt;
&lt;p&gt;
@TJNowell noted similar advantages might also be achieved with VVV
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I see no reason the docker call in the GB script couldn't be a git clone ... cd vvv.. vagrant up --provision
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Of course VVV and the community behind it include a great deal of experience with regard to the intricacies of creating the development environment for WordPress.
&lt;/p&gt;
&lt;p&gt;
If we can make it easy, fast and reliable enough, that might just be what we need!
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33468 (Add image caption hook) updated</title>
      
        <dc:creator>xma</dc:creator>

      <pubDate>Fri, 06 Apr 2018 14:04:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33468#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33468#comment:6/1523023471408467</guid>
      <description>&lt;p&gt;
Hi to all, actualy there is a &lt;code&gt;img_caption_shortcode&lt;/code&gt;, trought that we can change all attribute passed to &lt;code&gt;caption&lt;/code&gt; or &lt;code&gt;wp-caption&lt;/code&gt; shortcode, also caption attribute that define caption text.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:42:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:72</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:72/1523022141378461</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:69" title="Comment 69"&gt;rmccue&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hm, &lt;code&gt;wp_save_post_revision()&lt;/code&gt; doesn't wipe autosave revisions. It has some logic to keep a max number of revisions if they are limited by a plugin. The default is &lt;code&gt;-1&lt;/code&gt; (unlimited). Also note that this logic specifically bypasses (keeps) autosave revisions, even when they are over the max.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ah, you're right, I'd misread the code there.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The code that &lt;em&gt;actually&lt;/em&gt; does this is in &lt;code&gt;edit-form-advanced.php&lt;/code&gt; when the editor checks for autosaves. I guess this adds an extra step to the process too:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User opens the editor
&lt;ul&gt;&lt;li&gt;Editor checks current autosaves: &lt;code&gt;GET /wp/v2/posts/{id}/revisions?revision_type=autosave&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;If any autosaves exist newer than the last save, display restore button
&lt;/li&gt;&lt;li&gt;If any other autosaves exist, delete them
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Editor creates a new autosave: &lt;code&gt;POST /wp/v2/posts/{id}/revisions?revision_type=autosave&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Hm, no. The code in &lt;code&gt;edit-form-advanced.php&lt;/code&gt; repeats the same logic as in &lt;code&gt;wp_create_post_autosave()&lt;/code&gt; &lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.5/src/wp-admin/includes/post.php#L1687"&gt;https://core.trac.wordpress.org/browser/tags/4.9.5/src/wp-admin/includes/post.php#L1687&lt;/a&gt;. It deletes the latest autosave only when the autosaved "fields" match the latest post. It also doesn't look for previous autosave revisions by other authors.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #8973 (Function get_page_of_comment() returns incorrect page numbers) updated</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:39:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8973#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8973#comment:24/1523021993564684</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've managed to reproduce the error by publishing a number of unapproved comments higher than comments pagination and then an approved comment.
&lt;/p&gt;
&lt;p&gt;
For example in the following screenshot I'm on the second page of comments just because of unapproved comments:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://core.trac.wordpress.org/raw-attachment/ticket/8973/Screenshot%20from%202018-04-06%2015-34-19.png"&gt;&lt;img src="https://core.trac.wordpress.org/raw-attachment/ticket/8973/Screenshot%20from%202018-04-06%2015-34-19.png" alt="https://core.trac.wordpress.org/raw-attachment/ticket/8973/Screenshot%20from%202018-04-06%2015-34-19.png" crossorigin="anonymous" title="https://core.trac.wordpress.org/raw-attachment/ticket/8973/Screenshot%20from%202018-04-06%2015-34-19.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
In this case if I'm the author of the unapproved comments the links in the "Recent comments" section were wrong.
&lt;/p&gt;
&lt;p&gt;
The attached patch is fixing this issue and removing some duplication in the file. I don't know if you like the code like this or if I should extract the added template lines in a separate function. I'm happy to update the patch if you think that's better.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Screenshot from 2018-04-06 15-34-19.png attached to Ticket #8973</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:36:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/8973/Screenshot%20from%202018-04-06%2015-34-19.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/8973/Screenshot%20from%202018-04-06%2015-34-19.png/1523021782952123</guid>
      <description>&lt;p&gt;
How to replicate the bug
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>8973.2.diff attached to Ticket #8973</title>
      
        <dc:creator>matjack1</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:32:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/8973/8973.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/8973/8973.2.diff/1523021530039410</guid>
      <description>&lt;p&gt;
Updated patch for WP 5.0 and added functionality in templates
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43710 (WordPress isn't reading the sticky_posts option) updated</title>
      
        <dc:creator>tobifjellner</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:20:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43710#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43710#comment:2/1523020838344292</guid>
      <description>&lt;p&gt;
Pst! My guess would be that you first of all try with a default theme, like twentysixteen...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43710 (WordPress isn't reading the sticky_posts option) closed</title>
      
        <dc:creator>tobifjellner</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:19:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43710#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43710#comment:1/1523020777857031</guid>
      <description>invalid: &lt;p&gt;
Hi rfischmann,
This trac is for more or less confirmed bugs in WordPress core.
In your case, it's still too early to say exactly what went wrong. You need to do som troubleshooting first, and best place for that would be &lt;a class="ext-link" href="https://wordpress.org/support/forum/how-to-and-troubleshooting/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/forum/how-to-and-troubleshooting/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I'll mark this ticket as invalid. If, after troubleshooting, you find that there actually is a bug in WP core, then you can reopen it.
&lt;/p&gt;
&lt;p&gt;
Good luck!
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:17:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:71</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:71/1523020668857529</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:67" title="Comment 67"&gt;rmccue&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Yeah, I'm not sure why this was added to the API. IMHO we shouldn't be removing the functionality of the audit trail. This changes the purpose and functionality of revisions quite a bit...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This was way back in &lt;a class="ext-link" href="https://github.com/WP-API/WP-API/pull/1110"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WP-API/WP-API/pull/1110&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It does check the delete cap on revisions, so I'd make the argument this should be handled in the capability system instead. This is a conversation for another day though :)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The more I think about this, the worse it looks...
&lt;/p&gt;
&lt;p&gt;
Yes, deleting revisions checks the &lt;code&gt;delete_post&lt;/code&gt; cap, however this is still not adequate. Nobody should be able to circumvent the audit trail, not even admins. This is a safety/security feature. I see this as a blocking regression in the API. The only way this should be possible is from a plugin (same as now for non-API).
&lt;/p&gt;
&lt;p&gt;
If you don't want to remove the delete revision endpoint, we probably can require a &lt;code&gt;delete_revisions&lt;/code&gt; capability that will not be mapped to any existing role and will always return false, i.e. a plugin will have to specifically assign that capability to a role.
&lt;/p&gt;
&lt;p&gt;
Created &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/43709" title="#43709: defect (bug): Fix or remove the &amp;#34;delete revision&amp;#34; endpoint (assigned)"&gt;#43709&lt;/a&gt; as a follow-up.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43710 (WordPress isn't reading the sticky_posts option) created</title>
      
        <dc:creator>rfischmann</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:06:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43710</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43710/1523020001183064</guid>
      <description>&lt;p&gt;
I've ran into this bug twice now. I try to set a post as sticky from WordPress' editor, but after saving nothing happens. It ignores the setting and reverts back to non-sticky.
&lt;/p&gt;
&lt;p&gt;
However, I dug into MySQL and found out the post's ID is indeed set as sticky inside wp_options. So I'm not sure what's going on here.
&lt;/p&gt;
&lt;p&gt;
Any way to debug this? First time I'm opening a bug report here.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43709 (Fix or remove the "delete revision" endpoint) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 13:04:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43709#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43709#comment:1/1523019890824947</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This is a regression. Currently revisions can only be deleted (outside the API) from a plugin. Thinking we should keep it that way. The "audit trail" functionality is not that necessary for smaller sites with one or two users but is rather critical for larger sites that have many authors and editors.
&lt;/p&gt;
&lt;p&gt;
Also see &lt;a href="https://core.trac.wordpress.org/ticket/43316#comment:71"&gt;https://core.trac.wordpress.org/ticket/43316#comment:71&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43709 (Fix or remove the "delete revision" endpoint) created</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 12:58:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43709</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43709/1523019532332481</guid>
      <description>&lt;p&gt;
Allowing the client to delete revisions breaks the "audit trail" functionality. This is not allowed in WordPress and shouldn't be allowed through the API.
&lt;/p&gt;
&lt;p&gt;
Ideally the delete revision endpoint should be removed. Alternatively it can require a specific permission which should be &lt;code&gt;false&lt;/code&gt; by default for all user roles.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43707 (Why Using Un-nacessory file(JS &amp; CSS)) closed</title>
      
        <dc:creator>tobifjellner</dc:creator>

      <pubDate>Fri, 06 Apr 2018 12:34:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43707#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43707#comment:1/1523018085049358</guid>
      <description>invalid: &lt;p&gt;
WordPress is a framework, which contains certain functionality as a common service to plugins and themes, so that there won't be any needed for each plugin and/or theme to include this functionality inside their own code structure. See, for example, &lt;a class="ext-link" href="https://codex.wordpress.org/Javascript_Reference"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://codex.wordpress.org/Javascript_Reference&lt;/a&gt; for more detailed information about this.
&lt;/p&gt;
&lt;p&gt;
Further, bear in mind that one important design principle for WordPress is &lt;strong&gt;backward compatibility&lt;/strong&gt;. If a function was available for plugin developers in previous WordPress releases, then it will in almost all cases remain being available. If it has been moved to the collection of deprecated functions, then warnings will be visible during debugging, but in most situations the functions will still continue to work. The idea around this is that upgrading to the latest WordPress release should in virtually all cases be a smooth process. A downside of this is that you have to keep some deprecated code in the package.
&lt;/p&gt;
&lt;p&gt;
For a more detailed reply, please indicate what specific files you think are not needed.
&lt;/p&gt;
&lt;p&gt;
I don't understand your second question at all. But I have a feeling that a better place for that topic would be in the support forums at &lt;a class="ext-link" href="https://wordpress.org/support"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Your proposed dashboard design looks like the result of using WordPress as a framework for a web application. That is a perfectly valid way of using WordPress, but the task oriented view you're implying in your proposal has really no bearing at all for a plain WordPress installation. ("Tasks" is not available as a content type in a basic WordPress install.)
&lt;/p&gt;
&lt;p&gt;
I'll close this ticket as invalid, since it contains no clear bug description or suggestion.
You may reopen the ticket if I misunderstood you.
&lt;/p&gt;
&lt;p&gt;
However, in general, try to have only one main topic in each ticket.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Attachment for WP.org ticket.docx attached to Ticket #43708</title>
      
        <dc:creator>chrissy59</dc:creator>

      <pubDate>Fri, 06 Apr 2018 12:25:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43708/Attachment%20for%20WP.org%20ticket.docx</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43708/Attachment%20for%20WP.org%20ticket.docx/1523017517722668</guid>
      <description>&lt;p&gt;
Screenshots of media library &amp;amp; file manager
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43708 (Since the latest release 4.9.5 I can't see my images in my media library) created</title>
      
        <dc:creator>chrissy59</dc:creator>

      <pubDate>Fri, 06 Apr 2018 12:21:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43708</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43708/1523017286095922</guid>
      <description>&lt;p&gt;
I can no longer see images uploaded in previous months in my media library?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Team Leader Dashboard.png attached to Ticket #43707</title>
      
        <dc:creator>mohitchandila</dc:creator>

      <pubDate>Fri, 06 Apr 2018 11:29:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43707/Team%20Leader%20Dashboard.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43707/Team%20Leader%20Dashboard.png/1523014179485129</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43707 (Why Using Un-nacessory file(JS &amp; CSS)) created</title>
      
        <dc:creator>mohitchandila</dc:creator>

      <pubDate>Fri, 06 Apr 2018 11:29:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43707</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43707/1523014161915484</guid>
      <description>&lt;p&gt;
Hello Sir/Madam,
&lt;/p&gt;
&lt;p&gt;
I have request you please remove the un-usable js and css file, so these file creating a problem our custom code, they conflict our custom websites, so there no using file so please remove the un-usable file, i request you again.
&lt;/p&gt;
&lt;p&gt;
One more suggestion, i have create a new user particular email address but i have can't understand who is login current time of my wordpress.
&lt;/p&gt;
&lt;p&gt;
Redesign the dashboard as like attached screenshot.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://goo.gl/mLBk28"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://goo.gl/mLBk28&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Thanks
Mohit
Wordpress Developer
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43545 (Helper functions: Anonymizing data in a standardized way) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 11:03:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43545#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43545#comment:27/1523012637765674</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43545#comment:26" title="Comment 26"&gt;birgire&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I was wondering about the current &lt;code&gt;0.0.0.0&lt;/code&gt; output for an IPv6 address.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, can change that to &lt;code&gt;::&lt;/code&gt; although (afaik) IPv4 and IPv6 addresses are fully interchangeable.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43638 (Introducing 'sanitize_post' filter) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 11:03:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43638#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43638#comment:2/1523012602486103</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43517 (Adding support of default category term for custom taxonomies) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:45:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43517#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43517#comment:6/1523011503628104</guid>
      <description>&lt;p&gt;
Related: &lt;a class="reviewing ticket" href="http://core.trac.wordpress.org/ticket/43516" title="#43516: enhancement: Allowing default category to be applied to all CPT associated to ... (reviewing)"&gt;#43516&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43516 (Allowing default category to be applied to all CPT associated to ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:44:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43516#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43516#comment:3/1523011482286507</guid>
      <description>&lt;p&gt;
Related: &lt;a class="reviewing ticket" href="http://core.trac.wordpress.org/ticket/43517" title="#43517: enhancement: Adding support of default category term for custom taxonomies (reviewing)"&gt;#43517&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43516 (Allowing default category to be applied to all CPT associated to ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:38:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43516#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43516#comment:2/1523011091049233</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43517 (Adding support of default category term for custom taxonomies) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:35:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43517#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43517#comment:5/1523010926697783</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43545 (Helper functions: Anonymizing data in a standardized way) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:23:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43545#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43545#comment:26/1523010180142004</guid>
      <description>&lt;p&gt;
I was wondering about the current &lt;code&gt;0.0.0.0&lt;/code&gt; output for an IPv6 address.
&lt;/p&gt;
&lt;p&gt;
For example:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;wp_privacy_anonymize_ip( '2001:db8:a0b:12f0::1' )&lt;/code&gt; now outputs &lt;code&gt;'0.0.0.0'&lt;/code&gt; when &lt;code&gt;inet_ntop()&lt;/code&gt; or &lt;code&gt;inet_pton()&lt;/code&gt; are not available.
&lt;/p&gt;
&lt;p&gt;
The unspecified address for IPv6 is &lt;code&gt;0:0:0:0:0:0:0:0&lt;/code&gt; or &lt;code&gt;::&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Would &lt;code&gt;::&lt;/code&gt; be expected in the above example?
&lt;/p&gt;
&lt;p&gt;
Some other suggestions for &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43545/43545.3.diff" title="Attachment '43545.3.diff' in Ticket #43545"&gt;43545.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43545/43545.3.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
Make the tests aware of missing &lt;code&gt;inet_ntop()&lt;/code&gt;/&lt;code&gt;inet_pton()&lt;/code&gt; functions, with e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;if ( ! function_exists( 'inet_ntop' ) ) {
	$this-&amp;gt;markTestSkipped( 'inet_ntop extension not available.' );
}
if ( ! function_exists( 'inet_pton' ) ) {
	$this-&amp;gt;markTestSkipped( 'inet_pton extension not available.' );
}
&lt;/pre&gt;&lt;p&gt;
or modify the expected value explicitly like:
&lt;/p&gt;
&lt;pre class="wiki"&gt;if( function_exists( 'inet_ntop' ) &amp;amp;&amp;amp; function_exists( 'inet_pton' ) ) {
    $expected = '...';
} else {
    $expected = '0.0.0.0';
}
&lt;/pre&gt;&lt;p&gt;
Adjustments according to the &lt;em&gt;Coding Standard&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
Should we use data providers here instead of for loops?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #21676 (Pass a variable to get_template_part()) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:22:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21676#comment:65</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21676#comment:65/1523010133998539</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32651 (get_adjacent_post() doesn't return posts with the same date) updated</title>
      
        <dc:creator>willybahuaud</dc:creator>

      <pubDate>Fri, 06 Apr 2018 10:02:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32651#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32651#comment:7/1523008967564787</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/32651#comment:6" title="Comment 6"&gt;julianoe&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi all ! What's the status on this?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The last patch by @wonderboymusic seem ok. Waiting approval to be merged on core :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32651 (get_adjacent_post() doesn't return posts with the same date) updated</title>
      
        <dc:creator>julianoe</dc:creator>

      <pubDate>Fri, 06 Apr 2018 09:45:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32651#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32651#comment:6/1523007949280721</guid>
      <description>&lt;p&gt;
Hi all ! What's the status on this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43545 (Helper functions: Anonymizing data in a standardized way) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 09:38:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43545#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43545#comment:25/1523007528298879</guid>
      <description>&lt;p&gt;
In 43545.3.diff:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fix output from &lt;code&gt;wp_privacy_anonymize_ip()&lt;/code&gt; when &lt;code&gt;inet_pton()&lt;/code&gt; or &lt;code&gt;inet_ntop()&lt;/code&gt; don't exist.
&lt;/li&gt;&lt;li&gt;Make &lt;code&gt;wp_privacy_anonymize_data()&lt;/code&gt; return an empty string when &lt;code&gt;$type&lt;/code&gt; is not passed.
&lt;/li&gt;&lt;li&gt;Change the anonymous site address to &lt;code&gt;site.invalid&lt;/code&gt;. That way nobody ever can mistake it for a "real site" as it will always return an error when trying to reach it.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>43545.3.diff attached to Ticket #43545</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 09:34:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43545/43545.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43545/43545.3.diff/1523007281580141</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43545 (Helper functions: Anonymizing data in a standardized way) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 06 Apr 2018 07:53:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43545#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43545#comment:24/1523001205738646</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43545#comment:22" title="Comment 22"&gt;allendav&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
43545.diff looks good. There is one place where it may fail to anonymize an IPv6 address, if &lt;code&gt;! function_exists( 'inet_pton' )&lt;/code&gt;. I'll fix that.
&lt;/p&gt;
&lt;p&gt;
Was also thinking we can reuse the "extracted" function in WP_Community_Events: &lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-admin/includes/class-wp-community-events.php#L210"&gt;https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-admin/includes/class-wp-community-events.php#L210&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...modified the domains to example.com and the time stamp to a more appropriate default
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not sure if that's better. Thinking that it should be changed to something that can never be used. The example.com is an actual website, it belongs to "somebody". However the .test domain will never ever exist.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43499 (Document src/wp-admin/js/tags-box.js) closed</title>
      
        <dc:creator>atimmer</dc:creator>

      <pubDate>Fri, 06 Apr 2018 07:46:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43499#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43499#comment:7/1523000775072921</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/42963" title="Docs: Improve JSDoc for `wp-admin/js/tags-box.js`.
Props ..."&gt;42963&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Docs: Improve JSDoc for &lt;code&gt;wp-admin/js/tags-box.js&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props carolinegeven, andizer, ireneyoast, herregroen, jjcomack.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43499" title="#43499: defect (bug): Document src/wp-admin/js/tags-box.js (closed: fixed)"&gt;#43499&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [42963]: Docs: Improve JSDoc for `wp-admin/js/tags-box.js`.  Props ...</title>
      
        <dc:creator>atimmer</dc:creator>

      <pubDate>Fri, 06 Apr 2018 07:46:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/42963</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/42963/1523000774590308</guid>
      <description>&lt;p&gt;
Docs: Improve JSDoc for &lt;code&gt;wp-admin/js/tags-box.js&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Props carolinegeven, andizer, ireneyoast, herregroen, jjcomack.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43499" title="#43499: defect (bug): Document src/wp-admin/js/tags-box.js (closed: fixed)"&gt;#43499&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 06 Apr 2018 06:24:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:70</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:70/1522995842454983</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43316/43316.13.diff" title="Attachment '43316.13.diff' in Ticket #43316"&gt;43316.13.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43316/43316.13.diff" title="Download"&gt;​&lt;/a&gt; adapts &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43316/43316.12.diff" title="Attachment '43316.12.diff' in Ticket #43316"&gt;43316.12.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43316/43316.12.diff" title="Download"&gt;​&lt;/a&gt; but uses the existing revisions endpoint instead. This implements almost all of the proposal, minus the autosave "commit" process; I'll update once checking per &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:69" title="Comment 69"&gt;69&lt;/a&gt;. This is a first pass, and probably needs some work still, but does work in local testing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43316.13.diff attached to Ticket #43316</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 06 Apr 2018 06:17:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43316/43316.13.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43316/43316.13.diff/1522995471364766</guid>
      <description>&lt;p&gt;
Build autosaves into existing revision endpoint
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:48:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:69</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:69/1522993735229891</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:67" title="Comment 67"&gt;rmccue&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hm, &lt;code&gt;wp_save_post_revision()&lt;/code&gt; doesn't wipe autosave revisions. It has some logic to keep a max number of revisions if they are limited by a plugin. The default is &lt;code&gt;-1&lt;/code&gt; (unlimited). Also note that this logic specifically bypasses (keeps) autosave revisions, even when they are over the max.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ah, you're right, I'd misread the code there.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The code that &lt;em&gt;actually&lt;/em&gt; does this is in &lt;code&gt;edit-form-advanced.php&lt;/code&gt; when the editor checks for autosaves. I guess this adds an extra step to the process too:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User opens the editor
&lt;ul&gt;&lt;li&gt;Editor checks current autosaves: &lt;code&gt;GET /wp/v2/posts/{id}/revisions?revision_type=autosave&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;If any autosaves exist newer than the last save, display restore button
&lt;/li&gt;&lt;li&gt;If any other autosaves exist, delete them
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Editor creates a new autosave: &lt;code&gt;POST /wp/v2/posts/{id}/revisions?revision_type=autosave&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41191 (Create browse happy type notice for PHP versions) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:35:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41191#comment:85</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41191#comment:85/1522992946058148</guid>
      <description>&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/41191/41191.8.diff" title="Attachment '41191.8.diff' in Ticket #41191"&gt;41191.8.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/41191/41191.8.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Change the widget header to match the style of the other widgets.
&lt;/li&gt;&lt;li&gt;Reword the notice, props @benhuberman.
&lt;/li&gt;&lt;li&gt;Make the button open in a new tab.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I've also asked @benhuberman to edit the &lt;a class="ext-link" href="https://wordpress.org/support/upgrade-php/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;upgrade page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
@karmatosed: Here's a screenshot of the latest widget:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://core.trac.wordpress.org/attachment/ticket/41191/PHP%20Notice%20on%20Desktop.png"&gt;&lt;img src="http://core.trac.wordpress.org/raw-attachment/ticket/41191/PHP%20Notice%20on%20Desktop.png" crossorigin="anonymous" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It doesn't have any special behaviour on smaller screens, so I've only included the one screenshot. 🙂
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:29:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:68</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:68/1522992566182657</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:65" title="Comment 65"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Also, the part: "User hits save: &lt;code&gt;POST /wp/v2/posts/{id}/revisions/{rev_id}&lt;/code&gt;" would be an actual save, i.e. &lt;code&gt;POST /wp/v2/posts/{id}&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I was thinking this would be a cleaner way of the client actually "committing" the autosaved changes. It avoids the problem where an update to a somewhat-unrelated resource (the post) affects a bunch of others (all the autosaves). This is the current behaviour though: &lt;code&gt;wp_save_post_revision()&lt;/code&gt; is called by &lt;code&gt;wp_insert_post()&lt;/code&gt;, and it wipes out all the autosaves.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Hm, &lt;code&gt;wp_save_post_revision()&lt;/code&gt; doesn't wipe autosave revisions. It has some logic to keep a max number of revisions if they are limited by a plugin. The default is &lt;code&gt;-1&lt;/code&gt; (unlimited). Also note that this logic specifically bypasses (keeps) autosave revisions, even when they are over the max.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
One other question here: how does the autosave actually get applied to the post?
&lt;/p&gt;
&lt;p&gt;
From what I'm understanding here, it seems like it doesn't ever get applied/committed. Rather, the editor just runs a real save with the full content, which doesn't touch the autosave process at all. When the user makes another change after that, the editor then starts autosaving stuff again. Is that accurate?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>PHP Notice on Desktop.png attached to Ticket #41191</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:25:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/41191/PHP%20Notice%20on%20Desktop.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/41191/PHP%20Notice%20on%20Desktop.png/1522992304361832</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>41191.8.diff attached to Ticket #41191</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:22:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/41191/41191.8.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/41191/41191.8.diff/1522992144072706</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43700 (Language switcher on the login screen) updated</title>
      
        <dc:creator>Nikschavan</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:16:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43700#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43700#comment:4/1522991797958513</guid>
      <description>&lt;p&gt;
Seems this was the main commit for adding this to WordPress.org - &lt;a class="ext-link" href="https://meta.trac.wordpress.org/changeset/6677"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://meta.trac.wordpress.org/changeset/6677&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43435 (Add settings screen for creating a privacy policy) updated</title>
      
        <dc:creator>maxfein</dc:creator>

      <pubDate>Fri, 06 Apr 2018 05:09:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43435#comment:45</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43435#comment:45/1522991392985783</guid>
      <description>&lt;p&gt;
for multisites|multinetworks it'd be &lt;em&gt;very&lt;/em&gt; nice to have relevant information supplied automatically to subsite admins about what data is touched/held/etc by the network (eg. wp_users and wp_usermeta and a statement from network that its needed and protected - idk what all else); also, a way for network admins to add additional info as needed (eg. perhaps network handles SMTP setup for subsites to send through).
&lt;/p&gt;
&lt;p&gt;
further, ability of network admins to provide subsite admins additional guidance re. privacy page process generally (eg. ability to filter content of &lt;a href="https://core.trac.wordpress.org/ticket/43435#comment:37"&gt;proposed heads-up mssg&lt;/a&gt;, or even just insert additional, like a support link or such) would be sweet.
&lt;/p&gt;
&lt;p&gt;
seems like many kinds of networks would stand to benefit from tools to help network admins deal effectively with privacy/gdpr: small biz w/ several locations, WPaaS, education/institution and large orgs generally, etc.
&lt;/p&gt;
&lt;p&gt;
apologies; not a coder at this lvl, only have my 2cents to offer here as a network admin... will try to find some other part of gdpr effort to pitch in on.
&lt;/p&gt;
&lt;p&gt;
and, re. security by design, will be great to have &lt;a href="https://core.trac.wordpress.org/ticket/28521#comment:11"&gt;#28521&lt;/a&gt; :)
&lt;/p&gt;
&lt;p&gt;
thanks for the awesomeness.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43605 (Add HTTP/1.0 emulation to apiRequest()) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Fri, 06 Apr 2018 03:57:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43605#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43605#comment:1/1522987075307620</guid>
      <description>&lt;p&gt;
It looks like modsec has some interesting rules that block form encoded strings, but don't block JSON encoded strings. So, we should send things as JSON.
&lt;/p&gt;
&lt;p&gt;
See: &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/pull/5971"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/gutenberg/pull/5971&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>rmccue</dc:creator>

      <pubDate>Fri, 06 Apr 2018 03:43:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:67</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:67/1522986233976539</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:65" title="Comment 65"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
No, currently the auto-draft is created right before the user loads the Add New (post) screen. This is done so we have a post_ID for the brand new post and covers cases where the user may upload files or add tags, categories, post meta, etc. before they actually start writing the post (we need a post_ID to "attach" the meta). I'm not sure how that works through the API at the moment, or if it is possible at all. (That has nothing to do with auto-saving as there is nothing in the post to save yet.)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
OK, so I guess the first logical step in the workflow is:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User starts editing post, editor creates an autosave: &lt;code&gt;POST /wp/v2/posts/{id}/autosaves&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
Yeah, I'm not sure why this was added to the API. IMHO we shouldn't be removing the functionality of the audit trail. This changes the purpose and functionality of revisions quite a bit...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This was way back in &lt;a class="ext-link" href="https://github.com/WP-API/WP-API/pull/1110"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WP-API/WP-API/pull/1110&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It does check the delete cap on revisions, so I'd make the argument this should be handled in the capability system instead. This is a conversation for another day though :)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The proposed autosave process I'm talking about here would allow this, but in a very controlled way. Each change would still get a revision, but clients would now have the ability to temporarily persist changes while the user is still working on them.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So basically you want to move the server auto-saving logic to the client. Not sure this is a good idea. The client can store "persistent backup data" by itself, for example in browser storage. This has nothing to do with server auto-saving. This is how autosaves work at the moment for non-API. There are server autosaves and client (in browser storage) autosaves.
&lt;/p&gt;
&lt;p&gt;
Once the client decides to push a server auto-save, the logic for it should be on the server.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The reason we want the server involved is for cross-client purposes though: switching from web to mobile, restoring autosaves by others, etc. The only thing that really requires is storing the content of the autosave on the server.
&lt;/p&gt;
&lt;p&gt;
Now that I'm more familiar with the code, it doesn't seem like there's a huge amount of special casing anyway, so there's not really any complex logic that needs implementing on the client. Basically, just "if this post is a draft and I'm the post author, save directly, otherwise use autosaves".
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This is mainly needed for post locking (not implemented through the API yet). It prevents data loss when more than one client tries to edit the same post. It also keeps the audit trail more consistent.
&lt;/p&gt;
&lt;p&gt;
[...]
&lt;/p&gt;
&lt;p&gt;
Perhaps but there are some edge cases like when there are several autosaves authored by different users that have edited the post at different times. Then it can get really messy :) Thinking that restoring/overwriting a post from a revision should always be user-controlled.
&lt;/p&gt;
&lt;p&gt;
The current logic is that the post author is "the boss" and other users that edit the post leave audit trail with their changes. This is essential for larger sites that have many authors and many editors.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, my proposal is that we treat the post author the same in this sense, which would improve the audit trail I think. The question I don't have an answer for is whether this makes the UX or data harder to deal with.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hm, &lt;code&gt;wp_save_post_revision()&lt;/code&gt; doesn't wipe autosave revisions. It has some logic to keep a max number of revisions if they are limited by a plugin. The default is &lt;code&gt;-1&lt;/code&gt; (unlimited). Also note that this logic specifically bypasses (keeps) autosave revisions, even when they are over the max.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ah, you're right, I'd misread the code there.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Also, the post is not an "unrelated resource" in this case.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
"Unrelated resource" in the sense of REST resources, not in the sense of WordPress resources; that is, one URL affects another.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43703 (Edit Category screen - Error shown in green and admin notice not ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 06 Apr 2018 01:45:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43703#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43703#comment:2/1522979144807797</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43055 (Reorganize Core JS / introduce build step) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Fri, 06 Apr 2018 01:43:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43055#comment:57</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43055#comment:57/1522978999850188</guid>
      <description>&lt;p&gt;
I commented a little on &lt;a class="ext-link" href="https://github.com/Varying-Vagrant-Vagrants/VVV/issues/1447#issuecomment-378846868"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;VVV repo&lt;/a&gt;, but to reply to your comments here, too:
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43055#comment:56" title="Comment 56"&gt;TJNowell&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Not if you run it on the host machine. Part of the opposition of VVV to auto running &lt;code&gt;grunt watch&lt;/code&gt; is that not every user is interested in developing core, yet an instance is installed out of the box. Running grunt watch in the provisioner would add overhead to every VVV users installs unless they disabled the core dev sites and imo that's an unreasonable ask.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
VVV is a wonderful general purpose tool, if Core's development environment were to use something else at the base, that isn't a slight on VVV: it's simply a case of Core being able to create a tool that's focussed on it's use cases.
&lt;/p&gt;
&lt;p&gt;
With the watch command as the example, I absolutely wouldn't ask you or anyone on the VVV team to impose that overhead on the wider VVV user base.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
the goal being that you could copy it off a USB drive and run it, and it would step through every stage of setting up an environment: &lt;a class="ext-link" href="https://github.com/tomjn/vvv-cd-installer"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/tomjn/vvv-cd-installer&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That tool is pretty cool, and certainly something we'd want to make available to all WordPress contributors. A nice GUI to walk through the setup process (both offline at contributor days, as well as online) is a million times better than running a bunch of shell commands.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As an aside, if we're moving more to webpack, should we not make use of npm scripts so that we maintain the same commands regardless of the tools behind the scenes? &lt;code&gt;npm run watch&lt;/code&gt; &lt;code&gt;npm run build&lt;/code&gt; etc
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yah, we'd definitely move everything to npm scripts.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43706 (Email with link to change admin email does not include proposed new ...) updated</title>
      
        <dc:creator>sshanky</dc:creator>

      <pubDate>Fri, 06 Apr 2018 00:05:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43706#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43706#comment:1/1522973115240217</guid>
      <description>&lt;p&gt;
I just rehosted a site for a client, and am now receiving emails from the site stating I've recently requested to have the administration email changed. I didn't request it, and I've deleted the account the former admin could have used to log in. I've also changed all other passwords, and the host has changed.
&lt;/p&gt;
&lt;p&gt;
This is the second time this has happened. The first time, I tried clicking the link to see if it would tell me the proposed new email that was requested, but instead it just authorized the change. And I couldn't change it back, because the confirmation email went to the new, unauthorized email. So I changed it directly in the database and now know better than to click the link.
&lt;/p&gt;
&lt;p&gt;
I am trying to figure out how these emails are being generated...any ideas? Email I'm receiving is below.
&lt;/p&gt;
&lt;p&gt;
Thanks!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>