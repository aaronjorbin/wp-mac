<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #53171 (Total number of attachments not updated when attachment uploaded) updated</title>
      
        <dc:creator>joedolson</dc:creator>

      <pubDate>Sun, 13 Jun 2021 20:31:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53171#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53171#comment:6/1623616262577091</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I'm not sure this is the best way to handle this, but it does work. Patch adds two private functions attached to the observer on the attachments model, one tracking additions and one on removals. It just increments the total attachments up or down one based on behavior.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Tested when adding an attachment, deleting an attachment, bulk deleting attachments, and bulk adding items.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
What I'm unsure about is whether incrementing up and down is really going to be sufficiently reliable - however, we aren't updating the query results on add/remove events, so getting that from the AJAX response doesn't seem viable. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I tested this with 50105.13.diff applied from &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50105" title="#50105: defect (bug): Remove infinite scrolling behavior from the Media grid (closed: fixed)"&gt;#50105&lt;/a&gt;, but I don't think anything in this patch actually depends on that. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>53171.diff attached to Ticket #53171</title>
      
        <dc:creator>joedolson</dc:creator>

      <pubDate>Sun, 13 Jun 2021 20:25:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53171/53171.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53171/53171.diff/1623615958693589</guid>
      <description>&lt;p&gt;
First pass
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #22862 (Consider a CSS preprocessor) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 13 Jun 2021 19:32:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22862#comment:83</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22862#comment:83/1623612724802429</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-css by codekraft-studio. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-css/p1623612721346800"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50105 (Remove infinite scrolling behavior from the Media grid) updated</title>
      
        <dc:creator>joedolson</dc:creator>

      <pubDate>Sun, 13 Jun 2021 18:57:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50105#comment:114</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50105#comment:114/1623610678135800</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've done some continuing testing, and I think this is ready for commit. It clearly fixes issues with the existing implementation, creates a path for plugins to better adapt for the changes, and as far as I can find, creates no new issues. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53311 (WordPress Events and News Widget modification for change location button) updated</title>
      
        <dc:creator>chaion07</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:57:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53311#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53311#comment:3/1623607045530913</guid>
      <description>&lt;p&gt;
@AmethystAnswers thank you for reporting this. Adding a few resources for context. @keoshi has recently [proposed some tweaks against existing icons]&lt;a class="ext-link" href="https://make.wordpress.org/design/2021/05/27/proposal-to-tweak-existing-icons-and-add-new-ones/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/design/2021/05/27/proposal-to-tweak-existing-icons-and-add-new-ones/&lt;/a&gt;. It would be good idea to include both him and @shaunandrews to this ticket. Additionally noting the link: &lt;a class="ext-link" href="https://www.figma.com/file/e4tLacmlPuZV47l7901FEs/?node-id=2%3A32"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.figma.com/file/e4tLacmlPuZV47l7901FEs/?node-id=2%3A32&lt;/a&gt; to the Figma file for further reference. Thanks&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:35:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:7/1623605740054684</guid>
      <description>&lt;p&gt;
Thanx again @joyously :-)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Patch updated to use the correct new filter name and the example in the ticket &lt;strong&gt;Description&lt;/strong&gt; has been updated accordingly.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It might be good to &lt;strong&gt;also&lt;/strong&gt; add new &lt;code&gt;the_posts_navigation&lt;/code&gt; and &lt;code&gt;the_post_navigation&lt;/code&gt; filters, but for now I'm going to leave the scope of this ticket as originally opened (since that's my only immediate need).  Have no objection if others think it'd be good to expand it and would be happy to update the patch accordingly.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:34:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:6/1623605661991520</guid>
      <description>&lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:32:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:5/1623605566931259</guid>
      <description>&lt;p&gt;
Ah, I see now. It looks like you missed one. (and the title of the ticket has navigation)&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It would be much easier if the child theme could simply filter the &lt;code&gt;the_posts_navigation()&lt;/code&gt; args and let core&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:27:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:4/1623605275841704</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>53392.1.diff attached to Ticket #53392</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:26:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53392/53392.1.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53392/53392.1.diff/1623605218388387</guid>
      <description>&lt;p&gt;
corrects the name of the new filter to reflect which args are being filtered.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:15:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:3/1623604556530390</guid>
      <description>&lt;p&gt;
no, I didn't, thanx for catching that.  Let me update the patch.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>joyously</dc:creator>

      <pubDate>Sun, 13 Jun 2021 17:01:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:2/1623603674233776</guid>
      <description>&lt;p&gt;
Did you intend that your example mixed &lt;code&gt;the_posts_navigation&lt;/code&gt; with &lt;code&gt;the_posts_pagination&lt;/code&gt;? &lt;br /&gt;
They call the same underlying functions, but are very different.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:44:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392#comment:1/1623602651574899</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>53392.diff attached to Ticket #53392</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:43:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53392/53392.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53392/53392.diff/1623602634985244</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53392 (add a filter for the arguments of `the_posts_pagination()`) created</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:42:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53392</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53392/1623602573024499</guid>
      <description>&lt;p&gt;
It would be really helpful if there were a hook to filter the arguments passed to &lt;a class="ext-link" href="https://developer.wordpress.org/reference/functions/the_posts_pagination/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the_posts_pagination()&lt;/a&gt; (and/or &lt;a class="ext-link" href="https://developer.wordpress.org/reference/functions/get_the_posts_pagination/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;get_the_posts_pagination()&lt;/a&gt;).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The most common case I come across where this new filter would be helpful is when creating a child theme, tho there are undoubtedly others.  The parent theme has a template that calls &lt;code&gt;the_posts_pagination()&lt;/code&gt; where I like everything about the template except for the arguments it passes to &lt;code&gt;the_posts_pagination()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Usually what I do in that case is add a copy of the template to my child theme and change &lt;strong&gt;just&lt;/strong&gt; the arguments passed to &lt;code&gt;the_posts_pagination()&lt;/code&gt;.  That's certainly not ideal because of the possibility of the parent theme releasing a new version that changes the template in question and then the child theme needs to have &lt;em&gt;multiple&lt;/em&gt; "copies" of the template and load the one that is based on the version of the parent theme active on the site :-(&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The other option, I guess (it's so complicated, I've never actually done it), is for the child theme to hook into &lt;br /&gt;
&lt;a class="ext-link" href="https://developer.wordpress.org/reference/hooks/paginate_links_output/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;paginate_links_output&lt;/a&gt; (and maybe &lt;a class="ext-link" href="https://developer.wordpress.org/reference/hooks/navigation_markup_template/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;navigation_markup_template&lt;/a&gt;).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It would be &lt;strong&gt;much&lt;/strong&gt; easier if the child theme could simply filter the &lt;code&gt;the_posts_pagination()&lt;/code&gt; args and let core (and the parent theme) do all the rest.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For example, suppose the parent theme does:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;the_posts_pagination(
    array(
       'prev_text' =&amp;gt; parent_theme_get_svg( 'prev' ),
       'next_text' =&amp;gt; parent_theme_get_svg( 'next' ),
    )
);
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
(For a real world example, see twentynineteen's &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-content/themes/twentyseventeen/search.php#L48"&gt;search.php&lt;/a&gt;).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Rather than use the SVG's from the parent theme, the child theme just wants to use plain "Next", "Previous" text so that it can style those links like next/previous buttons it uses in other contexts that have nothing to do with post navigation.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
A new filter would allow the child theme to simply do:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;add_filter( 'the_posts_pagination_args', 'child_theme_the_posts_pagination_args' );
public function child_theme_the_posts_pagination_args( $args ) {
    $args['prev_text'] = __( 'Previous', 'child-theme' );
    $args['next_text'] = __( 'Next', 'child-theme' );
    return $args;
}
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
and not have to copy the parent theme's template into the child theme just so that it can change the args passed to &lt;code&gt;the_posts_pagination()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #52625 (Test tool and unit test improvements for 5.8) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:27:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/52625#comment:69</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/52625#comment:69/1623601659210085</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/51140" title="Tests: Fix typo in a `retrieve_widgets()` test name.
Correct ..."&gt;51140&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Fix typo in a &lt;code&gt;retrieve_widgets()&lt;/code&gt; test name.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Correct parameter description for &lt;code&gt;data_wp_widget_get_field_name()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34780" title="Introduce support for array format field names in ..."&gt;[34780]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/41555" title="Widgets: Improved sidebar mapping on theme switch
Builds on efforts ..."&gt;[41555]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/52625" title="#52625: task (blessed): Test tool and unit test improvements for 5.8 (closed: fixed)"&gt;#52625&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [51140]: Tests: Fix typo in a `retrieve_widgets()` test name.  Correct ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:27:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/51140</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/51140/1623601658133312</guid>
      <description>&lt;p&gt;
Tests: Fix typo in a &lt;code&gt;retrieve_widgets()&lt;/code&gt; test name.
&lt;/p&gt;
&lt;p&gt;
Correct parameter description for &lt;code&gt;data_wp_widget_get_field_name()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34780" title="Introduce support for array format field names in ..."&gt;[34780]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/41555" title="Widgets: Improved sidebar mapping on theme switch
Builds on efforts ..."&gt;[41555]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/52625" title="#52625: task (blessed): Test tool and unit test improvements for 5.8 (closed: fixed)"&gt;#52625&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #22862 (Consider a CSS preprocessor) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:19:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22862#comment:82</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22862#comment:82/1623601170228626</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-css by codekraft-studio. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-css/p1623601167304700"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22862 (Consider a CSS preprocessor) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 13 Jun 2021 16:09:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22862#comment:81</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22862#comment:81/1623600588882857</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by codekraft-studio. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1623600585351400"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53384 (External plugins who can auto-update are always listed under ...) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 14:53:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53384#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53384#comment:5/1623595980868047</guid>
      <description>&lt;p&gt;
I definitely would &lt;strong&gt;not&lt;/strong&gt; close this ticket just yet.  It is certainly possible there is a problem in core that is causing the behavior you are seeing (but I suspect not).  When you've heard back from one or more of the plugin authors then a decision can be made whether to close this ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
When you contact the plugin authors, not only should you reference that dev-note I linked to, but you can also point them to this ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The most common thing I've seen developers do that allows their plugins to auto-update &lt;strong&gt;when updates are available&lt;/strong&gt; but to not work correctly with the auto-updates UI (i.e., allow site admins to enable/disable auto-updates for their plugins) is to not populate the &lt;code&gt;no_update&lt;/code&gt; property when they hook into the Updates API.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
To quote the dev-note linked to above:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The &lt;code&gt;no_update&lt;/code&gt; property is a requirement for the auto-update UI to work correctly for externally hosted plugins.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Some are already populating the &lt;code&gt;no_update&lt;/code&gt; for their plugin. Any that are not should update their code accordingly for the best user experience.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53384 (External plugins who can auto-update are always listed under ...) updated</title>
      
        <dc:creator>NekoJonez</dc:creator>

      <pubDate>Sun, 13 Jun 2021 14:39:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53384#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53384#comment:4/1623595191837490</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53384#comment:3" title="Comment 3"&gt;pbiron&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53384#comment:2" title="Comment 2"&gt;NekoJonez&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I attached a screenshot of what I meant. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanx for the screenshot, that does help.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I've also added a &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/53384/premium-auto-updates.png" title="Attachment 'premium-auto-updates.png' in Ticket #53384"&gt;screenshot&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/53384/premium-auto-updates.png" title="Download"&gt;​&lt;/a&gt; showing that &lt;strong&gt;some&lt;/strong&gt; externally hosted plugins "play nice" with the auto-updates UI that was added to WP in 5.5.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It is know that a number of externally hosted plugins only work correctly with the auto-updates UI &lt;strong&gt;when they have updates available&lt;/strong&gt;.  I don't have access to any of the plugins in your screenshot, so I can't test this, but I suspect this is the case with them.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
That is, it is the responsibility of the authors of externally hosted plugins (and themes) to do certain things when they hook into the Updates API and, unfortunately, not all do &lt;strong&gt;everything&lt;/strong&gt; they need to work correctly with the auto-updates UI.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I suggest you contact the authors of the plugins in your screenshot and ask them to make sure they are hooking into the Updates API in accordance with the &lt;a class="ext-link" href="https://make.wordpress.org/core/2020/07/30/recommended-usage-of-the-updates-api-to-support-the-auto-updates-ui-for-plugins-and-themes-in-wordpress-5-5/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Recommended usage of the Updates API to support the auto-updates UI for Plugins and Themes in WordPress 5.5&lt;/a&gt; dev-note.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I will do that. &lt;br /&gt;
But now I don't know if it's a good idea to close this ticket or recycle it for thinking on a sort of method to make a it less confusing that auto updates are disabled for these plugins while they aren't because they don't play nice with the code standards... &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53384 (External plugins who can auto-update are always listed under ...) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 14:25:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53384#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53384#comment:3/1623594353676803</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53384#comment:2" title="Comment 2"&gt;NekoJonez&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I attached a screenshot of what I meant. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanx for the screenshot, that does help.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I've also added a &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/53384/premium-auto-updates.png" title="Attachment 'premium-auto-updates.png' in Ticket #53384"&gt;screenshot&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/53384/premium-auto-updates.png" title="Download"&gt;​&lt;/a&gt; showing that &lt;strong&gt;some&lt;/strong&gt; externally hosted plugins "play nice" with the auto-updates UI that was added to WP in 5.5.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It is know that a number of externally hosted plugins only work correctly with the auto-updates UI &lt;strong&gt;when they have updates available&lt;/strong&gt;.  I don't have access to any of the plugins in your screenshot, so I can't test this, but I suspect this is the case with them.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
That is, it is the responsibility of the authors of externally hosted plugins (and themes) to do certain things when they hook into the Updates API and, unfortunately, not all do &lt;strong&gt;everything&lt;/strong&gt; they need to work correctly with the auto-updates UI.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I suggest you contact the authors of the plugins in your screenshot and ask them to make sure they are hooking into the Updates API in accordance with the &lt;a class="ext-link" href="https://make.wordpress.org/core/2020/07/30/recommended-usage-of-the-updates-api-to-support-the-auto-updates-ui-for-plugins-and-themes-in-wordpress-5-5/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Recommended usage of the Updates API to support the auto-updates UI for Plugins and Themes in WordPress 5.5&lt;/a&gt; dev-note.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>premium-auto-updates.png attached to Ticket #53384</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sun, 13 Jun 2021 14:15:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53384/premium-auto-updates.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53384/premium-auto-updates.png/1623593731193103</guid>
      <description>&lt;p&gt;
screenshot showing that premium, externally hosted plugins and the auto-updates UI
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53391 (Block editor Code and Preformatted failing to accept text) created</title>
      
        <dc:creator>seasoned_geek</dc:creator>

      <pubDate>Sun, 13 Jun 2021 12:52:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53391</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53391/1623588721557018</guid>
      <description>&lt;p&gt;
This file&lt;br /&gt;
&lt;a class="ext-link" href="https://www.logikalsolutions.com/wordpress/wp-content/uploads/2021/06/u18-sources-list.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.logikalsolutions.com/wordpress/wp-content/uploads/2021/06/u18-sources-list.txt&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
real name sources.list not that it matters. When I pull this into any text editor, be it on Windows or Ubuntu and select-all, copy, then paste it into either a Code bock or a Preformatted block it does this:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://www.logikalsolutions.com/wordpress/wp-content/uploads/2021/06/broken-preformatted-block.png"&gt;&lt;img src="https://www.logikalsolutions.com/wordpress/wp-content/uploads/2021/06/broken-preformatted-block.png" alt="https://www.logikalsolutions.com/wordpress/wp-content/uploads/2021/06/broken-preformatted-block.png" crossorigin="anonymous" title="https://www.logikalsolutions.com/wordpress/wp-content/uploads/2021/06/broken-preformatted-block.png" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The end of the file actually looks like this in every text editor&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;# backports:
#
#   Software from a newer release of the distribution, or even from the
#   development branch of the distribution, but built against this release.
#   It may provide newer features, but should be considered untested.
#
#   Note: Software in this repository WILL NOT receive any review or
#         updates from the Ubuntu security team.
#
#deb     http://old-releases.ubuntu.com/ubuntu hardy-backports main restricted
#deb-src http://old-releases.ubuntu.com/ubuntu hardy-backports main restricted
#deb     http://old-releases.ubuntu.com/ubuntu hardy-backports universe
#deb-src http://old-releases.ubuntu.com/ubuntu hardy-backports universe
#deb     http://old-releases.ubuntu.com/ubuntu hardy-backports multiverse
#deb-src http://old-releases.ubuntu.com/ubuntu hardy-backports multiverse
&lt;/pre&gt;&lt;p&gt;
There is also an annoying thing happening when I scrape Linux shell scripts into Code blocks now. The first line is against the left margin and every other line is indented one space. Does not seem to matter what editor I scrape from. At first I thought it was a Scintilla based editor issue, then it happened with Notepad on Windows and Leafpad on older Ubuntu distros. Leafpad is as basic as basic editors get. It supports no formatting.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I do not know if this cropped up earlier. I did not notice it until 5.7.2 but I might not have been paying attention.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I have a geek blog and post a lot of code so this is critical.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I have even switched themes in case this happened only in one theme.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #53384 (External plugins who can auto-update are always listed under ...) updated</title>
      
        <dc:creator>NekoJonez</dc:creator>

      <pubDate>Sun, 13 Jun 2021 10:24:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53384#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53384#comment:2/1623579856657401</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53384#comment:1" title="Comment 1"&gt;pbiron&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
All plugins (and themes), whether they are hosted on wordpress.org or elsewhere, have auto-updates disabled by default.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If I understand what you're reporting, all you have to do to have plugins that are not hosted on wordpress.org be auto-updated is click the "Enable auto-updates" link next to them (or click the checkbox next to them, choose "Enable Auto-updates" from Bulk Actions, and click Apply.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If I'm misunderstanding what you're reporting, please explain in more detail (screenshots might help).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I attached a screenshot of what I meant. &lt;br /&gt;
I preformed the actions you said and sadly enough, I didn't saw a change. :( &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Even when I know for a fact that these external plugins auto-update!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>image_2021-06-13_122249.png attached to Ticket #53384</title>
      
        <dc:creator>NekoJonez</dc:creator>

      <pubDate>Sun, 13 Jun 2021 10:22:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53384/image_2021-06-13_122249.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53384/image_2021-06-13_122249.png/1623579766966671</guid>
      <description>&lt;p&gt;
Screen
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51912 (Sitemap pages 404 with more than one page) updated</title>
      
        <dc:creator>Tkama</dc:creator>

      <pubDate>Sat, 12 Jun 2021 22:48:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51912#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51912#comment:9/1623538109474974</guid>
      <description>&lt;p&gt;
I described the problem and temporary solution here &lt;a class="ext-link" href="https://wp-kama.com/handbook/sitemap/bag-404-pagination"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wp-kama.com/handbook/sitemap/bag-404-pagination&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The core solution is to move Sitemap init from &lt;code&gt;template_redirect&lt;/code&gt; hook to &lt;code&gt;parse_request&lt;/code&gt; hook, as it's done  for REST API.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53295 (Serialized data should be handled as an opaque value) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 12 Jun 2021 20:31:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53295#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53295#comment:19/1623529865016883</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/WhiteWinterWolf"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WhiteWinterWolf&lt;/a&gt; commented on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/1312#issuecomment-860105033"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #1312&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If anyone read this, the &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/blob/376840b83cb11167d5fe545e929b37d41ce58d6e/tests/phpunit/tests/functions/isSerializedString.php#L51"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;last failing unit test&lt;/a&gt; doesn't make any sense to me:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;// Wrong number of characters is close enough for is_serialized_string().
array( 's:12:"foo";', true ),
&lt;/pre&gt;&lt;p&gt;
How and why is it expected for &lt;code&gt;is_serialized()&lt;/code&gt; to return &lt;code&gt;true&lt;/code&gt; for malformed and invalid data which will fail to deserialize, &lt;code&gt;unserialize('s:12:"foo";')&lt;/code&gt; generating the error below:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;PHP Notice:  unserialize(): Error at offset 2 of 11 bytes in /tmp/test.php on line 3
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #24442 (Visit theme/plugin/author homepage vs Visit theme/plugin/author site) updated</title>
      
        <dc:creator>sabernhardt</dc:creator>

      <pubDate>Sat, 12 Jun 2021 19:52:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24442#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24442#comment:4/1623527579393162</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt;, &lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Updates:&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/28673" title="Remove redundant 'Visit author homepage' title attributes for plugins ..."&gt;changeset:28673&lt;/a&gt; (&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26554" title="#26554: defect (bug): Remove title attributes: class-wp-theme.php (closed: fixed)"&gt;ticket:26554&lt;/a&gt;), the title attributes were removed from class-wp-plugins-list-table.php, plugin.php and class-wp-theme.php.
&lt;/li&gt;&lt;li&gt;Then &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/35924" title="Accessibility: Remove title attributes from the Network Themes list ..."&gt;changeset:35924&lt;/a&gt; replaced the title attribute in class-wp-ms-themes-list-table.php with an ARIA label of "Visit [theme name] homepage" for context within a list of links.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
That &lt;code&gt;aria-label&lt;/code&gt; might be better as "Visit theme site for [theme name]" so its beginning matches the visible link text (at least in English). &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/24442/24442.diff" title="Attachment '24442.diff' in Ticket #24442"&gt;24442.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/24442/24442.diff" title="Download"&gt;​&lt;/a&gt; edits the theme site link label (network themes admin screen), and it adds a similar label on the plugin URI link when the plugin is outside the directory.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>24442.diff attached to Ticket #24442</title>
      
        <dc:creator>sabernhardt</dc:creator>

      <pubDate>Sat, 12 Jun 2021 19:41:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/24442/24442.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/24442/24442.diff/1623526866492242</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53295 (Serialized data should be handled as an opaque value) updated</title>
      
        <dc:creator>whitewinterwolf</dc:creator>

      <pubDate>Sat, 12 Jun 2021 17:26:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53295#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53295#comment:18/1623518763073807</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53295#comment:16" title="Comment 16"&gt;siliconforks&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Ultimately, in order to support Snuffleupagus, &lt;code&gt;is_serialized&lt;/code&gt; would need to return &lt;code&gt;true&lt;/code&gt; for that string - but then it would violate the rule that the behavior of &lt;code&gt;is_serialized&lt;/code&gt; cannot change.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
OK, so your answer to &lt;a href="https://core.trac.wordpress.org/ticket/53295?replyto=16#comment:13"&gt;my question above&lt;/a&gt; is:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
C) this function has been stated as "frozen in time", so there is by principle no point discussing any change to its content anyway.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I've therefore opened a &lt;a href="https://core.trac.wordpress.org/ticket/53390"&gt;side-issue&lt;/a&gt; to address this without polluting this thread.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53295 (Serialized data should be handled as an opaque value) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 12 Jun 2021 17:20:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53295#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53295#comment:17/1623518437608580</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/WhiteWinterWolf"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WhiteWinterWolf&lt;/a&gt; commented on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/1312#issuecomment-860083088"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #1312&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Hi @Ayesh,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For you information I've created &lt;a href="https://core.trac.wordpress.org/ticket/53390"&gt;trac-53390&lt;/a&gt; to request the unfreeze of the &lt;code&gt;is_serialized()&lt;/code&gt; function as it misses it security objectives.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53390 (Unfreeze the code of is_serialized()) created</title>
      
        <dc:creator>whitewinterwolf</dc:creator>

      <pubDate>Sat, 12 Jun 2021 17:14:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53390</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53390/1623518058532910</guid>
      <description>&lt;p&gt;
The code of &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/blob/24a70204db8d9ca5c6ddfc2c22247418fa0af5a1/src/wp-includes/functions.php#L642"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;`is_serialized()`&lt;/a&gt; is frozen &lt;a href="https://core.trac.wordpress.org/ticket/17375#comment:37"&gt;since 2016&lt;/a&gt; as a security measure to protect WordPress and its plugins against PHP Object Injection vulnerabilities, linking to the &lt;a class="ext-link" href="https://www.owasp.org/index.php/PHP_Object_Injection"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;OWASP website&lt;/a&gt; as a reference.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The initial idea was that the &lt;code&gt;is_serialized()&lt;/code&gt; function should return &lt;code&gt;true&lt;/code&gt; only for safe serialized strings, and &lt;code&gt;false&lt;/code&gt; for unsafe ones to prevent their deserialization by the caller.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
However, the current implementation completely fails to achieve that and does not bring any protection at all against the aforementioned threat.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Not only it doesn't add any security, but the fact that the code has been flagged as "frozen in time" is nefarious as it blocks any further developments (both &lt;a href="https://core.trac.wordpress.org/ticket/53299"&gt;functionally&lt;/a&gt; and &lt;a href="https://core.trac.wordpress.org/ticket/53295"&gt;security&lt;/a&gt; wise).&lt;br /&gt;
&lt;/p&gt;
&lt;h2 id="Standardobjects"&gt;Standard objects&lt;/h2&gt;
&lt;p&gt;
Let's take all three examples from the &lt;a class="ext-link" href="https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection#examples"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;OWASP page&lt;/a&gt; used to support and document this choice.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The input string being malicious, &lt;code&gt;is_serialized()&lt;/code&gt; is expected to return &lt;code&gt;false&lt;/code&gt; for each of the following examples, as per documented in the original &lt;a href="https://core.trac.wordpress.org/ticket/17375#comment:37"&gt;ticket 17375&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;em&gt;I highlight that these are the exact examples used to support and document the choice of freezing &lt;code&gt;is_serialized()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;, nothing has been changed.&lt;br /&gt;
&lt;/p&gt;
&lt;h3 id="Example1"&gt;Example 1&lt;/h3&gt;
&lt;p&gt;
Malicious payload:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;http://testsite.com/vuln.php?data=O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}
&lt;/pre&gt;&lt;p&gt;
Returned value:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;var_dump(is_serialized('O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}'));
# Output: bool(true)
&lt;/pre&gt;&lt;p&gt;
The function &lt;strong&gt;failed&lt;/strong&gt; to properly detect and block the malicious serialized object.&lt;br /&gt;
&lt;/p&gt;
&lt;h3 id="Example2"&gt;Example 2&lt;/h3&gt;
&lt;p&gt;
Malicious payload:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;Cookie: data=O%3A8%3A%22Example2%22%3A1%3A%7Bs%3A14%3A%22%00Example2%00hook%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D
&lt;/pre&gt;&lt;p&gt;
Returned value:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;var_dump(is_serialized(urldecode('O%3A8%3A%22Example2%22%3A1%3A%7Bs%3A14%3A%22%00Example2%00hook%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D')));
# Output: bool(true)
&lt;/pre&gt;&lt;p&gt;
The function &lt;strong&gt;failed&lt;/strong&gt; to properly detect and block the malicious serialized object.&lt;br /&gt;
&lt;/p&gt;
&lt;h3 id="Example3"&gt;Example 3&lt;/h3&gt;
&lt;p&gt;
Malicious payload generation:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;class SQL_Row_Value
{
   private $_table = "SQL Injection";
}
class Example3
{
   protected $obj;
   function __construct()
   {
      $this-&amp;gt;obj = new SQL_Row_Value;
   }
}
print urlencode(serialize(new Example3));
# Output: O%3A8%3A%22Example3%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00obj%22%3BO%3A13%3A%22SQL_Row_Value%22%3A1%3A%7Bs%3A21%3A%22%00SQL_Row_Value%00_table%22%3Bs%3A13%3A%22SQL+Injection%22%3B%7D%7D
&lt;/pre&gt;&lt;p&gt;
Returned value:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;var_dump(is_serialized(urldecode('O%3A8%3A%22Example3%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00obj%22%3BO%3A13%3A%22SQL_Row_Value%22%3A1%3A%7Bs%3A21%3A%22%00SQL_Row_Value%00_table%22%
3Bs%3A13%3A%22SQL+Injection%22%3B%7D%7D')));
# Output: bool(true)
&lt;/pre&gt;&lt;p&gt;
The function &lt;strong&gt;failed&lt;/strong&gt; to properly detect and block the malicious serialized object.&lt;br /&gt;
&lt;/p&gt;
&lt;h2 id="Serializableclasses"&gt;Serializable classes&lt;/h2&gt;
&lt;p&gt;
In addition to the standard serialized objects seen above, PHP also offers &lt;a class="ext-link" href="https://www.php.net/manual/en/class.serializable.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;an alternate mechanism&lt;/a&gt; which basically replaces the call to the magic function &lt;code&gt;_wakeup()&lt;/code&gt; by a call to the Serializable interface function &lt;code&gt;deserialize()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
A specific attention has been given to prevent the deserialization of such objects, notably by the addition of a &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/blob/376840b83cb11167d5fe545e929b37d41ce58d6e/tests/phpunit/tests/functions.php#L367"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;dedicated test case&lt;/a&gt;. In particular, &lt;code&gt;is_serialized()&lt;/code&gt; ensures that the first character of the serialized string must not be a 'C'.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Nevertheless, here again, if we take all OWASP examples and replace the standard objects by a Serializable object embedded within an array, &lt;code&gt;is_serialized()&lt;/code&gt; systematically fails to detect and block the malicious payload:&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Example 1:
&lt;/li&gt;&lt;/ul&gt;&lt;pre class="wiki"&gt;var_dump(is_serialized('a:1:{i:0;C:8:"Example1":23:{s:15:"../../index.php";}}'));
# Output: bool(true)
&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Example 2:
&lt;/li&gt;&lt;/ul&gt;&lt;pre class="wiki"&gt;var_dump(is_serialized(urldecode('a%3A1%3A%7Bi%3A0%3BC%3A8%3A%22Example2%22%3A18%3A%7Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D')));
# Output: bool(true)
&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Example 3:
&lt;/li&gt;&lt;/ul&gt;&lt;pre class="wiki"&gt;var_dump(is_serialized(urldecode('a%3A1%3A%7Bi%3A0%3BC%3A8%3A%22Example3%22%3A72%3A%7BO%3A13%3A%22SQL_Row_Value%22%3A1%3A%7Bs%3A21%3A%22SQL_Row_Value_table%22%3Bs%3A13%3A%22S
QL+Injection%22%3B%7D%7D%7D')));
# Output: bool(true)
&lt;/pre&gt;&lt;h2 id="Conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
Freezing &lt;code&gt;is_serialized()&lt;/code&gt; code as a security measure to block malicious payloads proves to be a totally ineffective measure as it fails to block any single one of the examples linked when this decision was taken and did not prevent WordPress from being vulnerable to any Insecure Deserialization vulnerabilities since then (a very quick search shows CVE-2020-36326, CVE-2020-28032, CVE-2019-12240, CVE-2018-20148, etc.).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This freeze should therefore be lifted to allow further developments, notably the implementation of more efficient protections against such threats.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #52625 (Test tool and unit test improvements for 5.8) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 12 Jun 2021 15:47:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/52625#comment:68</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/52625#comment:68/1623512829529828</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/51139" title="Tests: Fix typo in a `get_bookmarks()` test name.
Follow-up to ..."&gt;51139&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Fix typo in a &lt;code&gt;get_bookmarks()&lt;/code&gt; test name.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/44546" title="General: Fix problematic string to array parsing.
WordPress has ..."&gt;[44546]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/52625" title="#52625: task (blessed): Test tool and unit test improvements for 5.8 (closed: fixed)"&gt;#52625&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [51139]: Tests: Fix typo in a `get_bookmarks()` test name.  Follow-up to ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 12 Jun 2021 15:47:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/51139</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/51139/1623512828548809</guid>
      <description>&lt;p&gt;
Tests: Fix typo in a &lt;code&gt;get_bookmarks()&lt;/code&gt; test name.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/44546" title="General: Fix problematic string to array parsing.
WordPress has ..."&gt;[44546]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/52625" title="#52625: task (blessed): Test tool and unit test improvements for 5.8 (closed: fixed)"&gt;#52625&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #53022 (List the supported file types for the active image editor) updated</title>
      
        <dc:creator>jorbin</dc:creator>

      <pubDate>Sat, 12 Jun 2021 15:24:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53022#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53022#comment:12/1623511443391532</guid>
      <description>&lt;p&gt;
53022.4.diff looks good to me. I think it would be good to get this in for 5.8 and since this is a bug to a new feature, it shouldn't be a problem this early in the beta cycle. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53295 (Serialized data should be handled as an opaque value) updated</title>
      
        <dc:creator>siliconforks</dc:creator>

      <pubDate>Sat, 12 Jun 2021 14:53:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53295#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53295#comment:16/1623509618222861</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53295#comment:15" title="Comment 15"&gt;whitewinterwolf&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53295#comment:14" title="Comment 14"&gt;siliconforks&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For example, consider the string O:8:&amp;#34;Example1&amp;#34;:1:{s:10:&amp;#34;cache_file&amp;#34;;s:15:&amp;#34;../../index.php&amp;#34;;}ab84a81d5a516892c86d3a620ac3e714286b8dcdcdebaf67e8112a54ed2514f0. My understanding is that this is what serialized data looks like when Snuffleupagus is enabled. Currently in WordPress, is_serialized() will return false for that. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Currently, &lt;code&gt;is_serialized()&lt;/code&gt; &lt;strong&gt;&lt;em&gt;already returns true&lt;/em&gt;&lt;/strong&gt; for such serialized objects :&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;var_dump(is_serialized('O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}'));
#Output: bool(true)
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
What I mean is that, currently, &lt;code&gt;is_serialized&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; for the string with the HMAC at the end:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;var_dump(is_serialized('O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}ab84a81d5a516892c86d3a620ac3e714286b8dcdcdebaf67e8112a54ed2514f0'));
#Output: bool(false)
&lt;/pre&gt;&lt;p&gt;
Ultimately, in order to support Snuffleupagus, &lt;code&gt;is_serialized&lt;/code&gt; would need to return &lt;code&gt;true&lt;/code&gt; for that string - but then it would violate the rule that the behavior of &lt;code&gt;is_serialized&lt;/code&gt; cannot change.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53332 (Transforming a Legacy Widget to a Block Widget is not possible in WP 5.8) updated</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Sat, 12 Jun 2021 12:37:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53332#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53332#comment:3/1623501447580349</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've found the reason why. While the documentation page and the Gutenberg plugin are using the Widget's class &lt;code&gt;$show_instance_in_rest&lt;/code&gt; property. WordPress decided to stop checking this property into the Widgets REST endpoints in favor of looking into the &lt;code&gt;$widget_options['show_instance_in_rest']&lt;/code&gt; property.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://core.trac.wordpress.org/attachment/ticket/53332/53332.patch"&gt;53332.patch&lt;/a&gt; is fixing my issue. The patch is a kind of back compatibility mechanism for early testers who got used to the &lt;code&gt;$show_instance_in_rest&lt;/code&gt; property.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If you think it's not needed, I'd advise to at least update this &lt;a class="ext-link" href="https://developer.wordpress.org/block-editor/how-to-guides/widgets/legacy-widget-block/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;documentation page&lt;/a&gt; (to avoid misleading developers) to explain people now need to include a &lt;code&gt;$widget_options['show_instance_in_rest'] = true&lt;/code&gt; when registering their widget.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>53332.patch attached to Ticket #53332</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Sat, 12 Jun 2021 12:28:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53332/53332.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53332/53332.patch/1623500932993030</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53295 (Serialized data should be handled as an opaque value) updated</title>
      
        <dc:creator>whitewinterwolf</dc:creator>

      <pubDate>Sat, 12 Jun 2021 10:28:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53295#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53295#comment:15/1623493692026398</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/53295#comment:14" title="Comment 14"&gt;siliconforks&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
in particular I believe the 'C' test was intended to test for equality instead of inequality&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks, this is now fixed.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For example, consider the string O:8:&amp;#34;Example1&amp;#34;:1:{s:10:&amp;#34;cache_file&amp;#34;;s:15:&amp;#34;../../index.php&amp;#34;;}ab84a81d5a516892c86d3a620ac3e714286b8dcdcdebaf67e8112a54ed2514f0. My understanding is that this is what serialized data looks like when Snuffleupagus is enabled. Currently in WordPress, is_serialized() will return false for that. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Currently, &lt;code&gt;is_serialized()&lt;/code&gt; &lt;strong&gt;&lt;em&gt;already returns true&lt;/em&gt;&lt;/strong&gt; for such serialized objects :&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;var_dump(is_serialized('O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}'));
#Output: bool(true)
&lt;/pre&gt;&lt;p&gt;
So there is strictly no point in expecting this function to protect against any kind of untrusted user input.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This means that, with the current version of WordPress, an attacker could input that string as, say, his first name, and that would not be considered serialized data. But in the future, if WordPress were upgraded to a version with an implementation of is_serialized() returning true for that string, it would then be considered serialized data and would be unserialized, potentially causing code execution.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If a module stores serialized data in the database, then it won't be stored as the raw data but as a serialized string: &lt;code&gt;s:60:"O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}";&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
When the modules fetches the value and unserializes it, it will retrieve the initial string, not the object.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If, at any point, a remote user has the ability to confuse some module and force it to process a user-controlled raw input string as a serialized data, then this means that it is &lt;em&gt;the code of this module&lt;/em&gt; which is vulnerable and there is nothing that WordPress could do to prevent this.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
A very quick check return me several Insecure Deserialization vulnerabilities affecting Wordpress modules (CVE-2020-36326, CVE-2020-28032, CVE-2019-12240, CVE-2018-20148, etc.). Would this protection be of any use, WordPress should be immune to this class of vulnerabilities. But as explained above, there is strictly no point in expecting this function to protect against any kind of untrusted user input.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I understand nevertheless that one may prefer to keep legacy code for the legacy PHP versions and keep any historical behavior as much as possible to limit the risk of regression to the minimum, and I already updated my PR that way.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Nevertheless, since &lt;code&gt;is_serialized()&lt;/code&gt; already returns true for serialized objects and malicious strings, I do not see any behavior change: it returned true before the PR, it returns true after the PR, and do perceive one "true" to be safer than the other ;) , the only difference being that before the PR it is not possible to enable any actual protection against this threat class.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49025 (Twenty Twenty: Modal menu link with hash should scroll to that section ...) updated</title>
      
        <dc:creator>lichttag</dc:creator>

      <pubDate>Sat, 12 Jun 2021 09:39:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49025#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49025#comment:7/1623490769617456</guid>
      <description>&lt;p&gt;
The fix by @raQai works like a charm for me! When will it be merged?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #52133 (TinyMCE editor doesn't load properly when initializing on Visual Tab ...) updated</title>
      
        <dc:creator>patkemper</dc:creator>

      <pubDate>Sat, 12 Jun 2021 09:17:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/52133#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/52133#comment:35/1623489475905441</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/52133#comment:32" title="Comment 32"&gt;azaozz&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@metalandcoffee thanks for testing, glad to hear the patch is working :)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
@patkemper that line of code is just a short-circuit to avoid running the loop when the document is still loading (small speed up). If &lt;code&gt;readyState !== 'interactive'&lt;/code&gt; is removed it means the loop will run only after the document has fully loaded, i.e. initialization of all TinyMCE instances will wait for images to finish loading.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
That's not a good idea especially for the main editor on the old Edit Post screen (when using Classic Editor plugin, etc.). It can add a visible slowdown, even flicker when the page seems "ready" but the editor is still not initialized.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Perhaps what you're seeing is caused by the TinyMCE instance not being in a postbox? For plugins there is a way to prevent initializing a particular TinyMCE instance and initialize it later. Example:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$args = array(
        'quicktags' =&amp;gt; false,
        'tinymce' =&amp;gt; array( 'wp_skip_init' =&amp;gt; true ),
);
wp_editor(  'Welcome to WP'  , 'test-editor', $args );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Then the plugin can decide when to initialize, could be onclick, etc. The js for the above example would be:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;tinymce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;tinyMCEPreInit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mceInit&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test-editor'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Thinking 52133.diff is ready for commit as it seems to fix initialization of TinyMCE in postboxes.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Many thanks for your hints. After some expriements, I can confirm, this is completly fixed. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm very glad, this bug has been fixed. Many thank to @metalandcoffee for this ticket and many thanks @azaozz for fixing this issue. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #52532 (Accessibility improvement request: The add block (plus mark) is ...) updated</title>
      
        <dc:creator>a4jp.com</dc:creator>

      <pubDate>Sat, 12 Jun 2021 05:17:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/52532#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/52532#comment:13/1623475035916745</guid>
      <description>&lt;p&gt;
Okay. &lt;br /&gt;
Thank you @talldanwp &lt;br /&gt;
Is this &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/issues/30470"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/gutenberg/issues/30470&lt;/a&gt; the place we should go?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Site Health Info ‹ test — WordPress 2021-06-11 20-35-00.jpg attached to Ticket #53022</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sat, 12 Jun 2021 02:35:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53022/Site%20Health%20Info%20%E2%80%B9%20test%20%E2%80%94%20WordPress%202021-06-11%2020-35-00.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53022/Site%20Health%20Info%20%E2%80%B9%20test%20%E2%80%94%20WordPress%202021-06-11%2020-35-00.jpg/1623465320952962</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53022 (List the supported file types for the active image editor) reopened</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sat, 12 Jun 2021 02:34:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53022#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53022#comment:11/1623465276707685</guid>
      <description>&lt;p&gt;
@desrosj in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/53022/53022.4.diff" title="Attachment '53022.4.diff' in Ticket #53022"&gt;53022.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/53022/53022.4.diff" title="Download"&gt;​&lt;/a&gt; I added support for GD image detection. Since gd_info data looks like this:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
    "GD Version": "bundled (2.1.0 compatible)",
    "FreeType Support": true,
    "FreeType Linkage": "with freetype",
    "GIF Read Support": true,
    "GIF Create Support": true,
    "JPEG Support": true,
    "PNG Support": true,
    "WBMP Support": true,
    "XPM Support": false,
...
}
&lt;/pre&gt;&lt;p&gt;
the code iterates through known formats, looking for matching array variables set to true. I also clean up the GIF image support string a bit and skip formats we don't need/use like "FreeType".&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
We'll need to keep this updated as new formats are added.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Reopening for consideration for 5.8, fine with 5.9 as well.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>53022.4.diff attached to Ticket #53022</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sat, 12 Jun 2021 02:30:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53022/53022.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53022/53022.4.diff/1623465047084543</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>53022.3.diff attached to Ticket #53022</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sat, 12 Jun 2021 02:28:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/53022/53022.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/53022/53022.3.diff/1623464911876991</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #53022 (List the supported file types for the active image editor) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 12 Jun 2021 02:28:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53022#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53022#comment:10/1623464880373668</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/1366"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #1366&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/adamsilverstein"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;adamsilverstein&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/53022"&gt;https://core.trac.wordpress.org/ticket/53022&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #53387 (Carry "dates" and times over to Plugins/Themes so you can see when it ...) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Sat, 12 Jun 2021 00:45:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/53387#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/53387#comment:2/1623458710880739</guid>
      <description>&lt;p&gt;
This is well worth considering for an enhancement to core.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
But until it is added to core, you should be aware that there are many (free) plugins that provide most (if not all) of the kind of logging you are asking for.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
One such plugin that I use on several sites is &lt;a class="ext-link" href="https://wordpress.org/plugins/wp-user-activity/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WP User Activity&lt;/a&gt;.    There are many others, so I recommend looking around before choosing one.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>