<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Mon, 21 Aug 2006 21:21:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156195271000000</guid>
      <description>&lt;p&gt;
"It is not the include file being in the same directory but the plugin itself."
&lt;/p&gt;
&lt;p&gt;
Well you've got me there.  Didn't think of that.
&lt;/p&gt;
&lt;p&gt;
"My implementation is not pointless"
&lt;/p&gt;
&lt;p&gt;
I say pointless, because at some point it's not even convenient to use anymore.  And convenience is at the heart of this function.  Having to call the function from the base plugin script, along with passing FILE to the function, degrades the elegance of the function.
&lt;/p&gt;
&lt;p&gt;
"get_bloginfo can be so effortless because it works for the whole blog it does not need a point of reference - anything that provides the info for a plugin needs a point of reference."
&lt;/p&gt;
&lt;p&gt;
Right, but the goal should be making get_plugininfo() as effetless as get_bloginfo().  Doesn't mean it's going to happen, but that should at least be the goal.
&lt;/p&gt;
&lt;p&gt;
"Personally, I think that a plugin author should know the name of the file they're working with. get_plugininfo('whatevvv', 'myplugindir/mymainpluginfile.php'); is not hard to type."
&lt;/p&gt;
&lt;p&gt;
Not true.  I don't hardcode my plugin path, I know others don't either.  Most of my plugins start like this:
&lt;/p&gt;
&lt;p&gt;
define('PLUG_BASE',                 dirname(plugin_basename(&lt;span class="underline"&gt;FILE&lt;/span&gt;)));
&lt;/p&gt;
&lt;p&gt;
define('PLUG_PATH',                 ABSPATH . 'wp-content/plugins/' . PLUG_BASE);
&lt;/p&gt;
&lt;p&gt;
define('PLUG_URL',                 get_bloginfo('wpurl') . '/wp-content/plugins/' . PLUG_BASE);
&lt;/p&gt;
&lt;p&gt;
This way the user can rename my plugin's directory, and it still works.  If I was to use the method you described, I would still have to define the PLUG_BASE to use whenever I call the get_plugininfo() function.  The point of the function is so I don't have to define any more variables.  Also I try my damnest not to use global variables or constants inside of classes, so that means I would have to redefine the PLUG_BASE inside every class.
&lt;/p&gt;
&lt;p&gt;
"I see no point in a crappy implementation to work around lazy plugin developers."
&lt;/p&gt;
&lt;p&gt;
You call it lazy, I call it convenient.  Like I've said already, you can find out the blog's URL without using get_bloginfo().  So does that make me lazy for using get_bloginfo()?  No.  It's just convenient.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>masquerade</dc:creator>

      <pubDate>Mon, 21 Aug 2006 21:07:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156194436000000</guid>
      <description>&lt;p&gt;
Personally, I think that a plugin author should know the name of the file they're working with. get_plugininfo('whatevvv', 'myplugindir/mymainpluginfile.php'); is not hard to type. There's no need for fancy lookups and all that crap from a subplugin file. Or, here's a better idea, in your base plugin file, define myplugin_getinfo($info) { return get_pluginfo($info, __FILE__); }. I see no point in a crappy implementation to work around lazy plugin developers.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Mon, 21 Aug 2006 20:50:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156193417000000</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;"The only situation where an include file for a plugin would be in the directory of another plugin, is when a plugin developer dumps all the scripts for his plugin straight into the /plugins directory. No one should be doing that to begin with."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It is not the include file being in the same directory but the plugin itself.
&lt;/p&gt;
&lt;p&gt;
If the plugin is in the same folder as other plugins with the includes in a child folder your lookup code finds the first (alphabetically I believe) plugin in the folder of plugins and matches that.
&lt;/p&gt;
&lt;p&gt;
My implementation is not pointless - it provides an easy way for a plugin to access the metadata about itself (or another plugin) using the actual plugin file as a reference point.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;get_bloginfo&lt;/code&gt; can be so effortless because it works for the whole blog it does not need a point of reference - anything that provides the info for a plugin needs a point of reference.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3015 (wp_list_cats doesn't hide category with only a future post) closed</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Mon, 21 Aug 2006 19:53:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3015</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3015/1156190024000000</guid>
      <description>fixed: &lt;p&gt;
This is fixed in 2.1.  It won't be fixed in 2.0.x since the fix requires the new future posting infrastructure.  We'll have to live with it until 2.1 arrives.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #3015 (wp_list_cats doesn't hide category with only a future post) updated</title>
      
        <dc:creator>Michael_</dc:creator>

      <pubDate>Mon, 21 Aug 2006 19:18:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3015</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3015/1156187920000000</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I can confirm this problem using WP 2.0.4 and list_cats(). A user has reported me the problem since I am using list_cats() in my plugin &lt;a class="ext-link" href="http://sw-guide.de/wordpress/category-tagging-plugin/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Category Tagging&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3057 (No load wp-settings.php from wp-config.php) updated</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Mon, 21 Aug 2006 19:04:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3057</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3057/1156187092000000</guid>
      <description>&lt;p&gt;
Just realized in the patch I put the code below the &lt;em&gt; Turn register globals off  comment.  Suppose that should be above it.
&lt;/em&gt;&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>cron.diff attached to Ticket #3058</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Mon, 21 Aug 2006 18:48:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/3058/cron.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/3058/cron.diff/1156186134220000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #3058 (Future posts can collide in cron) created</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Mon, 21 Aug 2006 18:48:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3058</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3058/1156186118000000</guid>
      <description>&lt;p&gt;
Future posts that are scheduled for the same time will step on each other in the cron queue.  This can happen if someone schedules multiple posts with the same timestamp.  This is actually pretty hard to do since we don't allow editing of the second in the timestamp.  Instead, the second is picked up from the current time.  Thus you would have to be saving posts that have the same hour:minute timestamp at the same second of any given minute. Despite the odds, people manage to hit that same second.
&lt;/p&gt;
&lt;p&gt;
To fix, I've added another key to the cron array created from the args passed to the hook.  While I was at it I versioned the cron array.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Mon, 21 Aug 2006 18:47:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156186021000000</guid>
      <description>&lt;p&gt;
&lt;strong&gt;westi:&lt;/strong&gt; The only situation where an include file for a plugin would be in the directory of another plugin, is when a plugin developer dumps all the scripts for his plugin straight into the /plugins directory.  No one should be doing that to begin with.
&lt;/p&gt;
&lt;p&gt;
You're implementation of the function seems pointless to me, since it absolutely must be called from the base plugin script to work.  What kind of function *has* to be called only within a certain script?  That seems silly and confusing.  If it doesn't work as effortlessly as get_bloginfo(), then I don't see any reason to have it at all.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;markjaquith:&lt;/strong&gt; That's what the debug_backtrace() was meant to fix in my original version of the function.  It tells a function which script called it.  As Ryan pointed out, debug_backtrace() is a PHP 4.3+ function, and WP is meant to support 4.2.  That's why I suggested making $filename the second parameter in westi's implementation, so the parameter could be dropped altogether when WP finally supports 4.3+.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>noload.diff attached to Ticket #3057</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Mon, 21 Aug 2006 18:34:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/3057/noload.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/3057/noload.diff/1156185264150000</guid>
      <description>&lt;p&gt;
No load wp-settings patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #3057 (No load wp-settings.php from wp-config.php) created</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Mon, 21 Aug 2006 18:33:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3057</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3057/1156185238000000</guid>
      <description>&lt;p&gt;
Plugin developers may want to include the wp-config.php without loading wp-settings.php.  Included is a patch to correct.  Usage:
&lt;/p&gt;
&lt;p&gt;
define('NOLOAD_WPSETTINGS', true);
include('wp-config.php');
&lt;/p&gt;
&lt;p&gt;
Defining NOLOAD_WPSETTINGS tells WP to skip loading wp-settings.php.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3056 (Deleting a comment shows confirmation twice) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Mon, 21 Aug 2006 17:42:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3056</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3056/1156182148000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
From which screen?  What is the URL you are viewing when you click the delete link/button
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3056 (Deleting a comment shows confirmation twice) created</title>
      
        <dc:creator>Mike_Koepke</dc:creator>

      <pubDate>Mon, 21 Aug 2006 12:32:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3056</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3056/1156163544000000</guid>
      <description>&lt;p&gt;
In 2.0.4, deleting a comment shows an "Are you sure" dialog twice.  The first confirmation prompts with Yes No.  Clicking Yes shows the confirmation page again.  Clicking Yes then diaplys an ID not found error.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3052 (pingback_ping() function displays wrong content in pingback-display in ...) updated</title>
      
        <dc:creator>Webrocker</dc:creator>

      <pubDate>Mon, 21 Aug 2006 11:49:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3052</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3052/1156160992000000</guid>
      <description>&lt;p&gt;
sorry, i messed the formatting in the orig post... should read:
(...) Possible fix: on line 1192 in xmlrpc.php:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$linea = preg_replace( “/ &amp;lt; (h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body)[^&amp;gt;]*&amp;gt;/”, “\n\n”, $linea );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
the "div" tag is not recognized. changing that to:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$linea = preg_replace( “/ &amp;lt; (h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body|div)[^&amp;gt;]*&amp;gt;/”, “\n\n”, $linea );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
fixed the problems for my blog. (...)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3052 (pingback_ping() function displays wrong content in pingback-display in ...) updated</title>
      
        <dc:creator>Webrocker</dc:creator>

      <pubDate>Mon, 21 Aug 2006 11:34:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3052</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3052/1156160088000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>3047a.diff attached to Ticket #3047</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Mon, 21 Aug 2006 08:30:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/3047/3047a.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/3047/3047a.diff/1156149004170000</guid>
      <description>&lt;p&gt;
Replacement patch as descirbed in my comment
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Mon, 21 Aug 2006 08:29:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156148979000000</guid>
      <description>&lt;p&gt;
Thank you all for the feedback.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;forceagainstsomething:&lt;/strong&gt;
Your version of get_plugininfo falls over as soon as the included file that calls it has the parent plugin in the same folder as another plugin. Then you get back the information about the first plugin that it discovers in that folder rather than the plugin you were included from.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;markjaquith:&lt;/strong&gt;
If we assume __FILE__ a the second parameter then __FILE__ will always be wp-includes/plugins.php unfortunately.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;masquerade:&lt;/strong&gt;
Yep lazy loading sounds like a good idea - it does break the possibility of doing the kind of stuff &lt;strong&gt;forceagainstsomething&lt;/strong&gt; wanted to do as you can't lazy load when you don't know the filename - but then again I can see a way of &lt;em&gt;knowing&lt;/em&gt; the filename of the plugin using the include in his methodology anyway.
&lt;/p&gt;
&lt;p&gt;
I am about to upload a new version of my patch changes are:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Lazy Loading
&lt;/li&gt;&lt;li&gt;Change call order to $info, $filename
&lt;/li&gt;&lt;li&gt;$filename is now __FILE__ rather than &lt;code&gt;plugin_basename(!__FILE!__);&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
If you want to get the info from a included file all you need to do is add a simple function like so to your base plugin file:
&lt;/p&gt;
&lt;pre class="wiki"&gt;function my_plugin_getinfo($info) { return get_pluginfo($info, __FILE__);}
&lt;/pre&gt;&lt;p&gt;
Thanks to a sleepy masquerade on irc for that simple oneliner.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>masquerade</dc:creator>

      <pubDate>Mon, 21 Aug 2006 06:54:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156143250000000</guid>
      <description>&lt;p&gt;
Also, can we not load all the info on every load. It seems unnecessary, as 99% of plugins won't even use it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Mon, 21 Aug 2006 06:14:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156140841000000</guid>
      <description>&lt;p&gt;
Can we get it to &lt;strong&gt;assume&lt;/strong&gt; &lt;span class="underline"&gt;FILE&lt;/span&gt; if no 2nd parameter is provided?  That'll likely be how most people are using it (within a plugin, accessing information about itself).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3054 (input Element Should Be Spared From wpautop()) updated</title>
      
        <dc:creator>Viper007Bond</dc:creator>

      <pubDate>Mon, 21 Aug 2006 00:49:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3054</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3054/1156121340000000</guid>
      <description>&lt;p&gt;
I'd be happy to see &lt;code&gt;&amp;lt;param&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; spared too. People have been using some PHP include plugins to load my plugins into their pages and it's laying waste to it's output with &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;'s.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2749 (Typo in edit-comments.php) updated</title>
      
        <dc:creator>Austin Shaythong</dc:creator>

      <pubDate>Sun, 20 Aug 2006 21:46:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2749</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2749/1156110374000000</guid>
      <description>&lt;p&gt;
Shh this is a ok typo fix. I saw it on my site and now its fixed.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Sun, 20 Aug 2006 21:35:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156109732000000</guid>
      <description>&lt;p&gt;
Okay, attached is a version of your get_plugininfo() function that can be called from any script that is part of a plugin.  It's called like this:
&lt;/p&gt;
&lt;p&gt;
get_plugininfo('version', &lt;span class="underline"&gt;FILE&lt;/span&gt;);
&lt;/p&gt;
&lt;p&gt;
That simple.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>get_plugininfo.php attached to Ticket #3047</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Sun, 20 Aug 2006 21:34:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/3047/get_plugininfo.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/3047/get_plugininfo.php/1156109645400000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Sun, 20 Aug 2006 21:09:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156108154000000</guid>
      <description>&lt;p&gt;
"One call to plugin_basename(&lt;span class="underline"&gt;FILE&lt;/span&gt;) in the original plugin file being stored in a global variable allows you to call get_plugininfo from any other plugin file."
&lt;/p&gt;
&lt;p&gt;
That's just nasty. :)  It's easy to modify your code so that it works the way my function did.  I'll get back to you on that change.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sun, 20 Aug 2006 20:19:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156105174000000</guid>
      <description>&lt;p&gt;
Yes my get_plugininfo expects to be called with the plugin_basename version of the plugin file.
&lt;/p&gt;
&lt;p&gt;
How can you provide all of the information in the plugin header by calling it from your  included files.
&lt;/p&gt;
&lt;p&gt;
One call to plugin_basename(__FILE__) in the original plugin file being stored in a global variable allows you to call get_plugininfo from any other plugin file.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>forceagainstsomething</dc:creator>

      <pubDate>Sun, 20 Aug 2006 17:06:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156093598000000</guid>
      <description>&lt;p&gt;
For me this new version doesn't work.
First, I had to change the get_plugininfo() function to get it to work at all, by adding this at the top:
&lt;/p&gt;
&lt;p&gt;
$plugin_filename = plugin_basename($plugin_filename);
&lt;/p&gt;
&lt;p&gt;
That's if I'm calling the function like: get_plugininfo(&lt;span class="underline"&gt;FILE&lt;/span&gt;, 'path');
&lt;/p&gt;
&lt;p&gt;
Second, this only works in the *base* plugin script, which pretty much defeats the purpose.  As I stated in my first reply to you, this function should work for *any* one of the numerous scripts that are part of a plugin.
&lt;/p&gt;
&lt;p&gt;
If I have a plugin with this structure:
&lt;/p&gt;
&lt;p&gt;
/plugins/myplugin/myplugin.php
&lt;/p&gt;
&lt;p&gt;
/plugins/myplugin/includes/classes/myplugin_class.php
&lt;/p&gt;
&lt;p&gt;
Your get_plugininfo() will not work if called from the myplugin_class.php script.  Mine does.
&lt;/p&gt;
&lt;p&gt;
Third, if passing the filename to the function is going to be required, then I'd suggest making it the second parameter, like this:
&lt;/p&gt;
&lt;p&gt;
get_plugininfo($info, $plugin_filename)
&lt;/p&gt;
&lt;p&gt;
That way the parameter can by dropped in the future without breaking plugins that are using the function.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sun, 20 Aug 2006 09:41:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156066874000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've attached an alternative implementation.
&lt;/p&gt;
&lt;p&gt;
This provides easy access to information about active plugins - all the same info as is loaded for all the plugins in the plugins admin page.
&lt;/p&gt;
&lt;p&gt;
Not fully tested but includes a bug fix and extension of get_plugin_data which is moved to wp-includes/plugins from wp-admin/admin-functions.php to make it available in wp-settings.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>3047.diff attached to Ticket #3047</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sun, 20 Aug 2006 09:39:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/3047/3047.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/3047/3047.diff/1156066742770000</guid>
      <description>&lt;p&gt;
Alternative implementation of get_plugin_info
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>comments-rss2_fix.diff attached to Ticket #3055</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Sun, 20 Aug 2006 03:35:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/3055/comments-rss2_fix.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/3055/comments-rss2_fix.diff/1156044952920000</guid>
      <description>&lt;p&gt;
Fix for /trunk/
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #3055 (?feed=comments-rss2 Does not work in WP 2.1) created</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Sun, 20 Aug 2006 03:35:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3055</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3055/1156044904000000</guid>
      <description>&lt;p&gt;
?feed=comments-rss2 works in the 2.0.x branch, but was lost somewhere along the way in 2.1
&lt;/p&gt;
&lt;p&gt;
Thanks to Austin Shaythong on wp-testers for bringing this up.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://comox.textdrive.com/pipermail/wp-testers/2006-August/002798.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://comox.textdrive.com/pipermail/wp-testers/2006-August/002798.html&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Patch to follow.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #3047 (get_plugininfo()) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 20 Aug 2006 03:04:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3047</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3047/1156043048000000</guid>
      <description>&lt;p&gt;
When we break 4.2 compatibility we hear about it from a suprisingly large number of people.  I'd rather not break 4.2 compatibility gratuitously.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>