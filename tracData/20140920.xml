<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>29717.2.patch attached to Ticket #29717</title>
      
        <dc:creator>askapache</dc:creator>

      <pubDate>Sat, 20 Sep 2014 23:30:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29717/29717.2.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29717/29717.2.patch/1411255817584895</guid>
      <description>&lt;p&gt;
29717.2.patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #29720 (tinyMCE editor doesn't allow you to float a gallery left or right) created</title>
      
        <dc:creator>RDall</dc:creator>

      <pubDate>Sat, 20 Sep 2014 23:16:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29720</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29720/1411254977352081</guid>
      <description>&lt;p&gt;
If you add a gallery to WordPress the gallery clears both right and left. The tinyMCE editor doesn't allow you to float a gallery left or right regardless of the size of the gallery. This isn't a problem for 600 width content area and galleries that have 3 columns of photos which is the majority of the themes and the majority of gallery uses.
&lt;/p&gt;
&lt;p&gt;
But if you have a one of two column gallery this leaves a large amount of unused space.
&lt;/p&gt;
&lt;p&gt;
Looking at the Editor layouts for the default themes of twenty fourteen and twenty twelve. You can see in the editor that it takes up the full width of the editable content and if you try aligning left and aligning right nothing will happen.
&lt;/p&gt;
&lt;p&gt;
Twenty Fourteen &lt;a class="ext-link" href="http://cl.ly/image/1V2o1S010j2c"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://cl.ly/image/1V2o1S010j2c&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Twenty Twelve &lt;a class="ext-link" href="http://cl.ly/image/1w222U1F0q3W"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://cl.ly/image/1w222U1F0q3W&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If we have 3 columns of photos this isn't a problem.
&lt;/p&gt;
&lt;p&gt;
But I have two user case scenario's where this might not be best.
&lt;/p&gt;
&lt;p&gt;
If you want to have three images vertically aligned and thumbnailed. You could do this easily if you made a gallery of one column. You could then float this small gallery left or right of the content. This is not currently possible.
&lt;/p&gt;
&lt;p&gt;
The issue is if you were using a wide format content area of a theme. Lets say 800 to 900 pixels wide. (I know we have a 600px as a good width for readability) but say you wanted to float your 2 col or 3 col gallery left of right in a wider screen view. Not currently possible.
&lt;/p&gt;
&lt;p&gt;
If it's possible with the new version of tinyMCE then this would be a great addition to galleries of WordPress.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29681 (Twenty Fourteen: Left Column Drops to the Bottom Way Too Soon) updated</title>
      
        <dc:creator>Quantumstate</dc:creator>

      <pubDate>Sat, 20 Sep 2014 22:54:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29681#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29681#comment:9/1411253694565239</guid>
      <description>&lt;p&gt;
Yes, gourd-head and close this problem.  I've found a far more advanced solution now.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #28968 (Twenty Fourteen: Flips to Tablet Mode Too Soon) closed</title>
      
        <dc:creator>Quantumstate</dc:creator>

      <pubDate>Sat, 20 Sep 2014 22:51:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28968#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28968#comment:13/1411253517439679</guid>
      <description>wontfix: &lt;p&gt;
Never mind.  I've found a far more advanced solution.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #29719 (Connection error to WordPress.org when HTTP calls disabled) created</title>
      
        <dc:creator>grapplerulrich</dc:creator>

      <pubDate>Sat, 20 Sep 2014 22:00:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29719</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29719/1411250425305618</guid>
      <description>&lt;p&gt;
When the  HTTP calls are disabled with either the filter or constant there is an connection error on &lt;code&gt;/wp-admin/update-core.php&lt;/code&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_filter( 'pre_http_request', '__return_true', 100 );
define( 'WP_HTTP_BLOCK_EXTERNAL', true );
&lt;/pre&gt;&lt;p&gt;
The error comes from &lt;a class="ext-link" href="https://github.com/WordPress/WordPress/blob/master/wp-includes/update.php#L457"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;wp-includes/update.php#L457&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29717 (wp_check_invalid_utf8 - pcre tricks and failsafes, ...) updated</title>
      
        <dc:creator>askapache</dc:creator>

      <pubDate>Sat, 20 Sep 2014 19:43:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29717#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29717#comment:3/1411242218144871</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29717#comment:2" title="Comment 2"&gt;miqrogroove&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Impressive.  So the main benefits are 10% faster and more compatibility?  Are there any systems currently running WordPress that need this patch?  A more concise, big picture description would help.
&lt;/p&gt;
&lt;p&gt;
Also, I learned in feedback from the 4.0 release that we need to specifically test PHP versions less than 5.4.9 and 5.3.19, because they exhibit crashes when PCRE is used to perform certain types of alternation and backtracking.  I found that version 5.2.13 is particularly easy to download.  It is not necessary to add unit tests for that, but we need to see that if someone posts a 10kb or 100kb block of text that it won't suddenly crash due to a server bug.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The updates don't actually change the behaviour of this function unless:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;You are one of those with a site with an older pcre lacking utf-8 support, in which case those 4 functions will now correctly filter and check for invalid utf.
&lt;/li&gt;&lt;li&gt;You use the &lt;code&gt;strip&lt;/code&gt; parameter to actually remove invalid utf for a plugin or theme, in which case it will now work correctly.  That was a bug fix.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Some folks have pcre compiled without utf support enabled or with utf-support missing, or disabled, so for them the '/u' doesn't work which results in essentially this entire check being skipped.
&lt;/p&gt;
&lt;p&gt;
This is also somewhat of a security issue, such as the whole IDN domain issues and other utf exploits.  The big big picture with this is to update the function to more easily developed and used, it hadn't been updated for quite a while.  This should make it easier to update/extend/move this function down the road, I think some people may have wrongly assumed that it was doing more than it was.  It's kind of a strange function, to take a string as input and either return it as is, or return a blank string in case of invalid utf-8.  But that's actually really clever, it's much safer and faster that way, just not so clear.
&lt;/p&gt;
&lt;p&gt;
I've noticed several plugins like disqus and yoast seo have started to build their own incarnations of this function, this update should help make clear what it is and isn't.
&lt;/p&gt;
&lt;p&gt;
I have tested on PHP 5.2, I approached this with extreme caution to avoid causing any issues.  IOW, this function will also work on 5.0.  The only reason it wouldn't work for php 4.x is that &lt;code&gt;stripos&lt;/code&gt; wasn't available as a builtin zend function until 5.0, but I noticed it's being used in several places in core so.. ( I am still used to having to code backwards for 4.x, so happy that's officially over for WP).
&lt;/p&gt;
&lt;p&gt;
The big change are the 2 new fallbacks to the original preg_match, including the custom regex, which will be the fallback for those with absolutely no utf pcre capability. It has to be a rarity for that to ever actually be needed, but that's the only possible issue I can see with regard to buffer issues or memory problems.  preg_match isn't as efficient as a builtin function such as strpos, but it is pretty darn efficient.
&lt;/p&gt;
&lt;p&gt;
The other big change is making the 'strip' parameter work, since it isn't actually being used by any core, it seems to have been forgotten about a little.  With it now working, I will start using it in plugins and themes to sanitize utf-8 (because this is super fast).  That's actually why I initially started on this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>29718.patch attached to Ticket #29718</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 20 Sep 2014 19:13:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29718/29718.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29718/29718.patch/1411240431483062</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #29718 (Improved coverage for WP_Tax_Query unit tests) created</title>
      
        <dc:creator>boonebgorges</dc:creator>

      <pubDate>Sat, 20 Sep 2014 19:13:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29718</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29718/1411240416477549</guid>
      <description>&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29560" title="#29560: enhancement: Improved coverage and performance for WP_Meta_Query unit tests (closed: fixed)"&gt;#29560&lt;/a&gt; for a related ticket.
&lt;/p&gt;
&lt;p&gt;
The quality and coverage of &lt;code&gt;WP_Tax_Query&lt;/code&gt; and &lt;code&gt;WP_Query::tax_query&lt;/code&gt; tests is pretty lackluster. This is problematic because it hinders future refactoring, and in particular it hamstrings the taxonomy roadmap.
&lt;/p&gt;
&lt;p&gt;
The attached patch is an initial attempt to introduce some sanity to these tests. I've done the following:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Written systematic tests for all public methods of &lt;code&gt;WP_Tax_Query&lt;/code&gt;. Coverage here is pretty much complete.
&lt;/li&gt;&lt;li&gt;Moved the tests in tests/phpunit/term/query.php that have to do with WP_Query into tests/phpunit/post/query.php. The latter file is kind of a junk drawer of tests, and should probably be broken up, but at least my changes here make it consistent.
&lt;/li&gt;&lt;li&gt;Add some more &lt;code&gt;WP_Query::tax_query&lt;/code&gt; tests, to cover a number of possible permutations: single vs multiple queries using AND and OR as the relation; various values for 'field'; various values for 'operator'
&lt;/li&gt;&lt;li&gt;Clean up existing tests for speed, relevance, better method names.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
As in the case of &lt;code&gt;WP_Meta_Query&lt;/code&gt;, the infinite permutations of query args make it impossible to write 100% test coverage, but this is a reasonable start.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29717 (wp_check_invalid_utf8 - pcre tricks and failsafes, ...) updated</title>
      
        <dc:creator>miqrogroove</dc:creator>

      <pubDate>Sat, 20 Sep 2014 18:45:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29717#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29717#comment:2/1411238725886419</guid>
      <description>&lt;p&gt;
Impressive.  So the main benefits are 10% faster and more compatibility?  Are there any systems currently running WordPress that need this patch?  A more concise, big picture description would help.
&lt;/p&gt;
&lt;p&gt;
Also, I learned in feedback from the 4.0 release that we need to specifically test PHP versions less than 5.4.9 and 5.3.19, because they exhibit crashes when PCRE is used to perform certain types of alternation and backtracking.  I found that version 5.2.13 is particularly easy to download.  It is not necessary to add unit tests for that, but we need to see that if someone posts a 10kb or 100kb block of text that it won't suddenly crash due to a server bug.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29518 (Fatal error in WP_Session_Tokens::hash_token()) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 20 Sep 2014 18:10:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29518#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29518#comment:11/1411236607376395</guid>
      <description>&lt;p&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/29751" title="Add safeguards for when ext/hash is not compiled with PHP.
see ..."&gt;[29751]&lt;/a&gt; missed the ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29717 (wp_check_invalid_utf8 - pcre tricks and failsafes, ...) updated</title>
      
        <dc:creator>askapache</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:30:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29717#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29717#comment:1/1411234237739942</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29518 (Fatal error in WP_Session_Tokens::hash_token()) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:28:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29518#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29518#comment:10/1411234098688338</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [29751]: Add safeguards for when ext/hash is not compiled with PHP.  see ...</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:27:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/29751</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/29751/1411234066264180</guid>
      <description>&lt;p&gt;
Add safeguards for when ext/hash is not compiled with PHP.
&lt;/p&gt;
&lt;p&gt;
see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29518" title="#29518: defect (bug): Fatal error in WP_Session_Tokens::hash_token() (closed: fixed)"&gt;#29518&lt;/a&gt;, for trunk.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>29717.patch attached to Ticket #29717</title>
      
        <dc:creator>askapache</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:24:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29717/29717.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29717/29717.patch/1411233857168692</guid>
      <description>&lt;p&gt;
29717.patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>29717.php.patch attached to Ticket #29717</title>
      
        <dc:creator>askapache</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:23:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29717/29717.php.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29717/29717.php.patch/1411233820729309</guid>
      <description>&lt;p&gt;
29717.wp_check_invalid_utf8.patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #29717 (wp_check_invalid_utf8 - pcre tricks and failsafes, ...) created</title>
      
        <dc:creator>askapache</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:18:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29717</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29717/1411233493640454</guid>
      <description>&lt;p&gt;
Used in core in these 4 functions.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;esc_attr()
&lt;/li&gt;&lt;li&gt;esc_js()
&lt;/li&gt;&lt;li&gt;esc_html()
&lt;/li&gt;&lt;li&gt;sanitize_text_field()
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
It's the first function to execute for all 4, and especially for sanitize_text_field it gets called quite a bit and is pretty important.
&lt;/p&gt;
&lt;p&gt;
It's purpose is to check a string for invalid utf.  It utilizes preg_match with the '/u' modifier to parse both the pattern and subject for utf.  PCRE automatically checks both the pattern and subject for invalid utf, upon which it will exit with an error code/constant.
&lt;/p&gt;
&lt;p&gt;
The changes here:  Normally pcre is compiled with utf support.  It can also be compiled to disallow utf support, and it can be compiled without utf support.  If utf is compiled and enabled the '/u' modifier for preg_match is available which turns on the automatic utf validation.
&lt;/p&gt;
&lt;p&gt;
For older dists or those with utf support turned off at compile, there is a trick to enable the same functionality as the '/u' provides.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://www.pcre.org/pcre.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.pcre.org/pcre.txt&lt;/a&gt;
In  order  process  UTF-8 strings, you must build PCRE to include UTF-8
support in the code, and, in addition,  you  must  call  pcre_compile()
with  the  PCRE_UTF8  option  flag,  or the pattern must start with the
sequence (*UTF8). When either of these is the case,  both  the  pattern
and  any  subject  strings  that  are matched against it are treated as
UTF-8 strings instead of strings of 1-byte characters.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So the first change to this function was to allow a fallback to that pattern option trick in case '/u' wasnt supported.
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;@preg_match( '//u', '' ) !== false&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;@preg_match( '/(*UTF8)/', '' ) !== false&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Fallback to a regex that doesn't require UTF support, instead of using pcre utf validation it searches for it
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
I also wanted it to have better performance, especially due to its use in those 4 core functions I use often. I benchmarked it pretty thoroughly to try and gain more speed. This patch is about 10-20% faster.
&lt;/p&gt;
&lt;p&gt;
Many gains were from refactoring the logic and control structures, chaining within if statements using bools, and utilizing the static variables to the fullest.  This is especially crucial since this function gets called repeatedly.  I also gained some cycles by replacing an in_array() check with a &lt;code&gt;stripos&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
One of the bigger gains came from replacing the &lt;code&gt;strlen( $string ) == 0&lt;/code&gt; that ran on every run with.  Since the $string variable was already casted to a string, that should always work and keep things a little cheaper.
&lt;/p&gt;
&lt;pre class="wiki"&gt;$string = (string) $string;
// if string length is 0 (faster than strlen) return empty
if ( ! isset( $string[0] ) )
	return '';
&lt;/pre&gt;&lt;p&gt;
The final change was to the 2nd parameters $strip, which if true is supposed to strip the invalid utf out of the string and return the valid.  In core nowhere is that parameter being used (yet), which explains the deprecated looking iconv. Also added a fallback to use mb_convert_encoding in case iconv is missing.
&lt;/p&gt;
&lt;pre class="wiki"&gt;// try to use iconv if exists
if ( function_exists( 'iconv' ) )
	return @iconv( 'utf-8', 'utf-8//ignore', $string );
// otherwise try to use mb_convert_encoding, setting the substitue_character to none to mimic strip
if ( function_exists( 'mb_convert_encoding' ) ) {
	@ini_set( 'mbstring.substitute_character', 'none' );
	return @mb_convert_encoding( $string, 'utf-8', 'utf-8' );
}
&lt;/pre&gt;&lt;p&gt;
Here are some of the test strings I used, I also used the utf-8-test file at &lt;a class="ext-link" href="http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt&lt;/a&gt;.  I did testing on 4.0 using php 5.6, 5.4, 5.3, and 5.4.  I verified the output and the strip feature as well.  For all tests I had php error_reporting set to the max:
&lt;/p&gt;
&lt;pre class="wiki"&gt;ini_set( 'error_reporting', 2147483647 );
&lt;/pre&gt;&lt;pre class="wiki"&gt;$valid_utf = array(
	"\xc3\xb1", // 'Valid 2 Octet Sequence'
	"\xe2\x82\xa1", // 'Valid 3 Octet Sequence' =&amp;gt;
	"\xf0\x90\x8c\xbc", // 'Valid 4 Octet Sequence' =&amp;gt;
	"\xf8\xa1\xa1\xa1\xa1", //'Valid 5 Octet Sequence (but not Unicode!)' =&amp;gt;
	"\xfc\xa1\xa1\xa1\xa1\xa1", //'Valid 6 Octet Sequence (but not Unicode!)' =&amp;gt;
	"Iñtërnâtiônàlizætiøn\xf0\x90\x8c\xbcIñtërnâtiônàlizætiøn", // valid four octet id
	'Iñtërnâtiônàlizætiøn', // valid UTF-8 string
	"\xc3\xb1", // valid two octet id
	"Iñtërnâtiônàlizætiøn\xe2\x82\xa1Iñtërnâtiônàlizætiøn", // valid three octet id
);
$invalid_utf = array(
	"\xc3\x28", //'Invalid 2 Octet Sequence' =&amp;gt;
	"\xa0\xa1", //'Invalid Sequence Identifier' =&amp;gt;
	"\xe2\x28\xa1", //'Invalid 3 Octet Sequence (in 2nd Octet)' =&amp;gt;
	"\xe2\x82\x28", //'Invalid 3 Octet Sequence (in 3rd Octet)' =&amp;gt;
	"\xf0\x28\x8c\xbc", //'Invalid 4 Octet Sequence (in 2nd Octet)' =&amp;gt;
   "\xf0\x90\x28\xbc", // 'Invalid 4 Octet Sequence (in 3rd Octet)' =&amp;gt;
	"\xf0\x28\x8c\x28", //'Invalid 4 Octet Sequence (in 4th Octet)' =&amp;gt;
	chr(0xE3) . chr(0x80) . chr(0x22), // Invalid malformed because 0x22 is not a valid second trailing byte following the leading byte 0xE3. http://www.unicode.org/reports/tr36/
	chr(0xF8) . chr(0x80) . chr(0x80) . chr(0x80) . chr(0x80), // Invalid UTF-8, overlong 5 byte encoding.
	chr(0xD0) . chr(0x01), // High code-point without trailing characters.
	chr(0xC0) . chr(0x80), // Overlong encoding of code point 0
	chr(0xF8) . chr(0x80) . chr(0x80) . chr(0x80) . chr(0x80), // Overlong encoding of 5 byte encoding
	chr(0xFC) . chr(0x80) . chr(0x80) . chr(0x80) . chr(0x80) . chr(0x80),  // Overlong encoding of 6 byte encoding
	chr(0xD0) . chr(0x01), // High code-point without trailing characters
	"Iñtërnâtiôn\xe9àlizætiøn", // invalid UTF-8 string
	"Iñtërnâtiônàlizætiøn\xfc\xa1\xa1\xa1\xa1\xa1Iñtërnâtiônàlizætiøn", // invalid six octet sequence
	"Iñtërnâtiônàlizætiøn\xf0\x28\x8c\xbcIñtërnâtiônàlizætiøn", // invalid four octet sequence
	"Iñtërnâtiônàlizætiøn \xc3\x28 Iñtërnâtiônàlizætiøn", // invalid two octet sequence
	"this is an invalid char '\xe9' here", // invalid ASCII string
	"Iñtërnâtiônàlizætiøn\xa0\xa1Iñtërnâtiônàlizætiøn", // invalid id between two and three
	"Iñtërnâtiônàlizætiøn\xf8\xa1\xa1\xa1\xa1Iñtërnâtiônàlizætiøn", //  invalid five octet sequence
	"Iñtërnâtiônàlizætiøn\xe2\x82\x28Iñtërnâtiônàlizætiøn", // invalid three octet sequence third
	"Iñtërnâtiônàlizætiøn\xe2\x28\xa1Iñtërnâtiônàlizætiøn", // invalid three octet sequence second
);
&lt;/pre&gt;&lt;hr /&gt;
&lt;p&gt;
Notes and more info:
&lt;/p&gt;
&lt;pre class="wiki"&gt;
	In  order  process  UTF-8 strings, you must build PCRE to include UTF-8
	support in the code, and, in addition,  you  must  call  pcre_compile()
	with  the  PCRE_UTF8  option  flag,  or the pattern must start with the
	sequence (*UTF8). When either of these is the case,  both  the  pattern
	and  any  subject  strings  that  are matched against it are treated as
	UTF-8 strings instead of strings of 1-byte characters.
   UTF-8 was devised in September 1992 by Ken Thompson, guided by design
   criteria specified by Rob Pike, with the objective of defining a UCS
   transformation format usable in the Plan9 operating system in a non-
   disruptive manner.
    Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
   A UTF-8 string is a sequence of octets representing a sequence of UCS
   characters.  An octet sequence is valid UTF-8 only if it matches the
   following syntax, which is derived from the rules for encoding UTF-8
   and is expressed in the ABNF of [RFC2234].
   UTF8-octets = *( UTF8-char )
   UTF8-char   = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4
   UTF8-1      = %x00-7F
   UTF8-2      = %xC2-DF UTF8-tail
   UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
                 %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
   UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
                 %xF4 %x80-8F 2( UTF8-tail )
   UTF8-tail   = %x80-BF
&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.pcre.org/pcre.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.pcre.org/pcre.txt&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://us1.php.net/manual/en/pcre.constants.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://us1.php.net/manual/en/pcre.constants.php&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://en.wikipedia.org/wiki/Unicode"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://en.wikipedia.org/wiki/Unicode&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://unicode.org/faq/utf_bom.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://unicode.org/faq/utf_bom.html&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.unicode.org/versions/Unicode6.1.0/ch03.pdf"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.unicode.org/versions/Unicode6.1.0/ch03.pdf&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.pcre.org/pcre.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.pcre.org/pcre.txt&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://tools.ietf.org/rfc/rfc3629.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://tools.ietf.org/rfc/rfc3629.txt&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.unicode.org/faq/utf_bom.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.unicode.org/faq/utf_bom.html&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://www.unicode.org/reports/tr36/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.unicode.org/reports/tr36/&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://tools.ietf.org/rfc/rfc3629.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://tools.ietf.org/rfc/rfc3629.txt&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Related Tickets:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://core.trac.wordpress.org/ticket/11175"&gt;https://core.trac.wordpress.org/ticket/11175&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://core.trac.wordpress.org/ticket/28786"&gt;https://core.trac.wordpress.org/ticket/28786&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29716 (orderby for meta values is broken in 4.0) created</title>
      
        <dc:creator>devarni</dc:creator>

      <pubDate>Sat, 20 Sep 2014 17:08:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29716</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29716/1411232906183334</guid>
      <description>&lt;p&gt;
'orderby' =&amp;gt; array(array('meta_key' =&amp;gt; 'date', 'order' =&amp;gt; 'DESC'))
&lt;/p&gt;
&lt;p&gt;
is not working anymore.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #24373 (WordPress Importer - Strict Standards compatibility) updated</title>
      
        <dc:creator>AndrewDon</dc:creator>

      <pubDate>Sat, 20 Sep 2014 16:28:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/24373#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/24373#comment:32/1411230513599094</guid>
      <description>&lt;p&gt;
Thank you much!
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/24373#comment:21" title="Comment 21"&gt;aubreypwd&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/24373#comment:20" title="Comment 20"&gt;unleashyourgeekinc&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
Download &lt;code&gt;/trunk&lt;/code&gt; directly via &lt;a class="ext-link" href="http://downloads.wordpress.org/plugin/wordpress-importer.zip"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://downloads.wordpress.org/plugin/wordpress-importer.zip&lt;/a&gt; and upload (remember to deactivate and remove your current importer plugin) and see if that works. Per @nacin above this is fixed in trunk but just hasn't been tagged for release.
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29708 (WordPress 4.0 decides whether the URL is http or httpS based on site ...) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 20 Sep 2014 15:44:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29708#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29708#comment:4/1411227869223830</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This is indeed a result of &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/28610" title="Force SSL on the frontend via canonical when the home URL uses the ..."&gt;[28610]&lt;/a&gt;. Altering &lt;code&gt;FORCE_SSL_ADMIN&lt;/code&gt; won't affect this behaviour.
&lt;/p&gt;
&lt;p&gt;
I'm inclined to say that this is a server configuration issue. Your load balancer should be letting your web server know that this is an HTTPS request.
&lt;/p&gt;
&lt;p&gt;
If your load balancer is running Nginx then this is achieved with the &lt;code&gt;HTTPS&lt;/code&gt; parameter of the &lt;code&gt;fastcgi_param&lt;/code&gt; directive. With CloudFlare, I'm not sure which setting needs configuring but it should be straight forward.
&lt;/p&gt;
&lt;p&gt;
The question is, is this a common enough misconfiguration to warrant reverting &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/28610" title="Force SSL on the frontend via canonical when the home URL uses the ..."&gt;[28610]&lt;/a&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29715 (Not-unique accesskey values may break quick edit and bulk edit form ...) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 20 Sep 2014 15:42:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29715#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29715#comment:2/1411227741600330</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29715 (Not-unique accesskey values may break quick edit and bulk edit form ...) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 20 Sep 2014 15:40:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29715#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29715#comment:1/1411227640840099</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>29715.patch attached to Ticket #29715</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 20 Sep 2014 15:35:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29715/29715.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29715/29715.patch/1411227337219559</guid>
      <description>&lt;p&gt;
remove accesskey attributes from Quick Edit and Bulk Edit in posts, categories and tags listings
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #29715 (Not-unique accesskey values may break quick edit and bulk edit form ...) created</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 20 Sep 2014 15:33:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29715</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29715/1411227208080985</guid>
      <description>&lt;p&gt;
Please try this in Chrome:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;go in the posts listing screen
&lt;/li&gt;&lt;li&gt;don't click anything, just activate the "s" accesskey (e.g. Alt + s on Windows)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
or:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;go in the posts listing screen
&lt;/li&gt;&lt;li&gt;click "Quick Edit" for a post
&lt;/li&gt;&lt;li&gt;activate the "s" accesskey (e.g. Alt + s on Windows)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
You've just submitted the whole inline-edit/bulk-edit form. &lt;a class="ext-link" href="https://cloudup.com/ck9MggKKb8e"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;see screenshot&lt;/a&gt;, notice all the parameters in your browser's address bar. When the page reloads, it will try to display posts based on those (mostly empty) parameters and the result will be 0 posts.
&lt;/p&gt;
&lt;p&gt;
Try the same in Firefox (Alt + Shift + s on Windows): nothing happens. Click "Quick Edit" and try Alt + Shift + c to cancel: Firefox won't even move the focus from the focused input.
&lt;/p&gt;
&lt;p&gt;
Browsers behaviour is really messy with not-unique accesskey values. As far as I see there are 3 places in WordPress where this happens:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;post listings
&lt;/li&gt;&lt;li&gt;categories and tags listings
&lt;/li&gt;&lt;li&gt;Quicktags in the edit post and new post screens
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
About 1 and 2, please notice that when you "Quick edit", the "inline edit" part of the form (hidden with CSS) gets cloned and populated. Of course, accesskey attributes get cloned too.
&lt;/p&gt;
&lt;p&gt;
The proposed patch simply removes accesskeys for 1 and 2. For a strong opinion about accesskeys, see &lt;a href="https://core.trac.wordpress.org/ticket/29358#comment:2"&gt;@joedolson comment&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
About Quicktags, see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29358" title="#29358: defect (bug): Remove the 'accesskey` attributes from Quicktags buttons (closed: fixed)"&gt;#29358&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/28173" title="#28173: defect (bug): Add Media shortcut in TinyMCE is not working properly (closed: fixed)"&gt;#28173&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/21460" title="#21460: defect (bug): The accesskeys in Quicktags don't work in all browsers (closed: worksforme)"&gt;#21460&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There's one more accesskey: the "p" on the Publish button. I'd suggest to remove that too unless there are strong opinions to keep it.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29710 (Add hooks to wpdb's insert(), update(), delete() and similar methods) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Sat, 20 Sep 2014 15:31:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29710#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29710#comment:2/1411227117153575</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
We had a chat about this in IRC prior to borekb opening this ticket. &lt;a class="ext-link" href="https://irclogs.wordpress.org/chanlog.php?channel=wordpress-dev&amp;amp;day=2014-09-19&amp;amp;sort=asc#m926092"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Chat log here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
My only concern with the proposed actions/filters is that not everything uses the &lt;code&gt;wpdb::insert()&lt;/code&gt; and &lt;code&gt;wpdb::update()&lt;/code&gt; methods. If a plugin on your site performs an INSERT or UPDATE using &lt;code&gt;wpdb::query()&lt;/code&gt;, then the proposed filters won't see that query. This means, for example, that if you're logging INSERTs using the proposed new filter then you'll also need to use the existing &lt;code&gt;query&lt;/code&gt; filter to guarantee you don't miss any INSERTs, thus rendering the proposed filters redundant.
&lt;/p&gt;
&lt;p&gt;
While the filters are a good idea in theory, I don't think they provide any actual benefit. I'm open to being swayed though.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29358 (Remove the 'accesskey` attributes from Quicktags buttons) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sat, 20 Sep 2014 14:40:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29358#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29358#comment:4/1411224038413019</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29358" title="#29358: defect (bug): Remove the 'accesskey` attributes from Quicktags buttons (closed: fixed)"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
When there are several instances of Quicktags on the page, using the "accesskey" shortcut will focus the corresponding button in the last instance, even if it's not visible.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Spent a whole day investigating on this :) and then came across this ticket.
Things are even trickier: Chrome will always try to activate the last instance but other browsers behave differently. Here's &lt;a class="ext-link" href="http://www.456bereastreet.com/archive/201005/if_you_use_the_accesskey_attribute_specify_unique_values/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;what happens in different browsers when two or more elements share the same accesskey value&lt;/a&gt;. That post is a bit old (2010) but still relevant and what applies to "Safari" it's valid for Chrome too.
&lt;/p&gt;
&lt;p&gt;
Btw what's described there it's just the basic behavior. I've run some tests and when elements are hidden or cloned things get weirder and weirder especially in Firefox.
&lt;/p&gt;
&lt;p&gt;
I'd definitely agree with @joedolson: remove them all, consider to implement instead keyboard shortcuts that match the ones used in TinyMCE (but is it worth?).
&lt;/p&gt;
&lt;p&gt;
Accesskeys may be useful (and it's still a matter of debate between experts) just when limited to a very small (no more than 4-5), easy to remember, set of main actions that are consistent across an application and when numeric values are used to reduce conflicts, for example:
0: Help
1: Skip to content
2: Navigation
3: Search
but any different use should be avoided anywhere.
Not to mention that using letters leads to language issues: for example, "b" and "i" suggest "bold" and "italic" but just for English speakers.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29714 (user_can_access_admin_page() returning false for edit.php?post_type=CPT) updated</title>
      
        <dc:creator>bobbingwide</dc:creator>

      <pubDate>Sat, 20 Sep 2014 13:00:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29714#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29714#comment:1/1411218003981689</guid>
      <description>&lt;p&gt;
&lt;strong&gt;Workaround&lt;/strong&gt;
The above fix can be implemented as a workaround.
&lt;/p&gt;
&lt;p&gt;
Create a filter function for "user_has_cap". In that filter function, when the capability being checked for is that which you have defined ( e.g. "edit_oik_sites"), add the following logic.
&lt;/p&gt;
&lt;pre class="wiki"&gt;global $pagenow;
if ( $pagenow == "edit.php" &amp;amp;&amp;amp; isset( $_REQUEST['post_type'] ) ) {
        $pagenow .= '?post_type=' . $_REQUEST['post_type' ];
}
&lt;/pre&gt;&lt;p&gt;
This will then allow the failing function ( user_can_access_admin_page() ) to return true.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29714 (user_can_access_admin_page() returning false for edit.php?post_type=CPT) created</title>
      
        <dc:creator>bobbingwide</dc:creator>

      <pubDate>Sat, 20 Sep 2014 12:30:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29714</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29714/1411216226278603</guid>
      <description>&lt;p&gt;
I have a Custom Post Type (CPT) for which I intend to allow registered subscribers the capability to edit posts, but not create posts or manage the custom taxonomies for the posts.
&lt;/p&gt;
&lt;p&gt;
In this example the CPT is "oik_site" - plural label "Sites"
&lt;/p&gt;
&lt;p&gt;
When the registered user is logged and viewing the Dashboard then the admin menu correctly shows the only available option; Sites - which invokes wp-admin/edit.php?post_type=oik_site
&lt;/p&gt;
&lt;p&gt;
When the user clicks on the link WordPress dies with "You do not have sufficient permissions to access this page."
&lt;/p&gt;
&lt;p&gt;
The expected result is that the user should be shown the list of sites, without the Add New button.
&lt;/p&gt;
&lt;p&gt;
I have tracked the problem down to what I believe to be a bug in user_can_access_admin_page().
&lt;/p&gt;
&lt;p&gt;
The "oik_site" CPT is defined with
&lt;/p&gt;
&lt;pre class="wiki"&gt;  $post_type_args['capability_type'] = 'oik_site';
  $post_type_args['capabilities'] = array( 'create_posts' =&amp;gt; 'create_oik_sites' );
  $post_type_args['map_meta_cap'] = true;
&lt;/pre&gt;&lt;p&gt;
The 'create_posts' capability is defined as 'create_oik_sites', overriding the default 'edit_oik_sites'.
&lt;/p&gt;
&lt;p&gt;
Subscribers are given the 'edit_oik_sites' capability only.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Where it goes wrong...&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
The processing in wp-admin/includes/menu.php has correctly checked the user's capability to "edit_oik_sites" and the admin menu has been simplified so that the 'All Sites' sub menu item is no longer displayed.
Since the user doesn't have either create_oik_sites nor manage_categories the Add New and Custom Taxonomy submenu items have been deleted.
Everything seems fine until we call user_can_access_admin_page().
Here it determines $parent to be null and $pagenow to be "edit.php".
&lt;/p&gt;
&lt;p&gt;
$wp_menu_nopriv is correctly set to the menu items that the subscriber cannot use
&lt;/p&gt;
&lt;pre class="wiki"&gt;    [edit.php] =&amp;gt; 1
    [upload.php] =&amp;gt; 1
    [link-manager.php] =&amp;gt; 1
    [edit.php?post_type=page] =&amp;gt; 1
    [edit-comments.php] =&amp;gt; 1
    ...
&lt;/pre&gt;&lt;p&gt;
Note: edit.php?post_type=oik_site IS NOT SET in the $wp_menu_nopriv array.
&lt;/p&gt;
&lt;p&gt;
Since these tests are true the function returns false.
&lt;/p&gt;
&lt;pre class="wiki"&gt; if ( empty( $parent) ) {
    if ( isset( $_wp_menu_nopriv[$pagenow] ) )
      return false;
&lt;/pre&gt;&lt;p&gt;
Had the second test taken into account the post_type being edited then this would not have failed.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Proposed fix&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Adding the following code after the test on empty( $parent ) gives the expected results.
&lt;/p&gt;
&lt;pre class="wiki"&gt;    if ( $pagenow == "edit.php" &amp;amp;&amp;amp; isset( $_REQUEST['post_type'] ) ) {
      $pagenow .= '?post_type=' . $_REQUEST['post_type' ];
    }
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #21352 (wp_lostpassword_url() on multisite) updated</title>
      
        <dc:creator>oldmankit</dc:creator>

      <pubDate>Sat, 20 Sep 2014 10:20:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21352#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21352#comment:19/1411208445477521</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Anyway, on the site I'm working on, here is the plugin I put together that updates the lost password URL and the reset URL in the email that goes out to be for the site where the lost password request originated rather than the primary domain. It basically swaps out network_site_url() for site_url().
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://gist.github.com/strangerstudios/9487278"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://gist.github.com/strangerstudios/9487278&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I tried this plugin but it didn't seem to have any effect. (Copied php file to plugins folder, as network admin I clicked 'Activate for all sites'.) The emails remained unchanged.
&lt;/p&gt;
&lt;p&gt;
I also tried patch &lt;a href="https://core.trac.wordpress.org/attachment/ticket/21352/lost_password_multisite_patch.diff"&gt;https://core.trac.wordpress.org/attachment/ticket/21352/lost_password_multisite_patch.diff&lt;/a&gt; attached to this bug, which also had no effect. The emails being sent to lost password users again remained unchanged.
&lt;/p&gt;
&lt;p&gt;
I wonder what I'm doing wrong.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20564 (Framework for storing revisions of Post Meta) updated</title>
      
        <dc:creator>Andrew Moawad</dc:creator>

      <pubDate>Sat, 20 Sep 2014 04:14:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20564#comment:112</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20564#comment:112/1411186461290739</guid>
      <description></description>
      <category>editedticket</category>
    </item><item>
      <title>11903.wp-admin.includes.misc.php.2.diff attached to Ticket #11903</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Sat, 20 Sep 2014 02:45:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/11903/11903.wp-admin.includes.misc.php.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/11903/11903.wp-admin.includes.misc.php.2.diff/1411181106009191</guid>
      <description>&lt;p&gt;
THE CORRECT PATCH. the first one was an earlier, bad version i had
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>11903.wp-admin.includes.misc.php.diff attached to Ticket #11903</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Sat, 20 Sep 2014 02:42:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/11903/11903.wp-admin.includes.misc.php.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/11903/11903.wp-admin.includes.misc.php.diff/1411180969928323</guid>
      <description>&lt;p&gt;
patch for the mod_rewrite config to only write the file when needed
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #11903 (insert_with_markers is not threadsafe) updated</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Sat, 20 Sep 2014 02:42:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11903#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11903#comment:22/1411180928144307</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
After reading this whole thing, I totally agree that the right approach is to only write the config files when they actually have changes that need writing, instead of some other approach of limiting writing. A little digging shows that the IIS write functions already seem to do this. The mod_rewrite config writing function however does not seem to cover this yet.
&lt;/p&gt;
&lt;p&gt;
The function already checks if the block exists, but it does not make any distinction of whether it is the same block or not, and just blindly overwrites it. I adapted the function to test if the found block is the same block we are writing. If it is, we just don't write. If it is not the same block, then we replace it. Also if the file does not exist, or the block does not exist already, we still add it to the end of the file.
&lt;/p&gt;
&lt;p&gt;
Seems to work on 4.0+ (and the current nightly). Discuss.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29713 (In recurring problem, post edit box gets stuck at huge size) updated</title>
      
        <dc:creator>CK MacLeod</dc:creator>

      <pubDate>Sat, 20 Sep 2014 02:20:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29713#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29713#comment:2/1411179602234959</guid>
      <description>&lt;p&gt;
One additional note - after hacking class-wp-editor.php to a simple height setting, I get &lt;strong&gt;new&lt;/strong&gt; posts at a usable size - both when added and when saved - but older ones are still living large, and there is no text-area re-size handle in edit either on older or newer posts.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29713 (In recurring problem, post edit box gets stuck at huge size) updated</title>
      
        <dc:creator>CK MacLeod</dc:creator>

      <pubDate>Sat, 20 Sep 2014 01:45:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29713#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29713#comment:1/1411177537777905</guid>
      <description>&lt;p&gt;
Initial investigation suggests that the old hacks no longer work, and my attempts to change class-wp-editor.php at lines 131, 132, or 157 to lower height values have had no effect. Nor have I had any luck running
&lt;/p&gt;
&lt;pre class="wiki"&gt;setUserSetting('ed_size', 300);
&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;
via the browser console. After running it, the console tells me ed_size is 300, but the box is unchanged, still vertically larger than my screen. Refreshes, cache clearing, and deleting WP cookies have no effect. Same problem on Chrome.
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>sc0ttkclark</dc:creator>

      <pubDate>Sat, 20 Sep 2014 01:27:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:70</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:70/1411176421040553</guid>
      <description>&lt;p&gt;
Saw this come through my e-mail and was so happy!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>rzen</dc:creator>

      <pubDate>Sat, 20 Sep 2014 01:24:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:69</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:69/1411176244502531</guid>
      <description>&lt;p&gt;
John, you magnificent and glorious man, these performance stats are excellent! I'm going to put it through some paces on the code where @sc0ttkclark and I first noticed the issue.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29713 (In recurring problem, post edit box gets stuck at huge size) created</title>
      
        <dc:creator>CK MacLeod</dc:creator>

      <pubDate>Sat, 20 Sep 2014 00:46:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29713</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29713/1411173993089140</guid>
      <description>&lt;p&gt;
Similar to a bug or defect affecting previous versions - see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23042" title="#23042: defect (bug): Post edit page may become almost unusable and textarea resize not saved (closed: fixed)"&gt;#23042&lt;/a&gt; for bug affecting 3.5, and reports of similar problems affecting 3.9 (#re-opened as &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/28000" title="#28000: defect (bug): Editor frame becomes huge after dragging the corner to resize it (closed: fixed)"&gt;#28000&lt;/a&gt;), upon being widened too far (vertically for sure, not sure about horizontally), the editor box gets stuck: The re-size corner handles disappear, and there is no way to re-capture them (even after a re-install of WP).
&lt;/p&gt;
&lt;p&gt;
Fingers crossed the old solutions or something like them will work, but obviously not desirable behavior.
&lt;/p&gt;
&lt;p&gt;
(Discovered while using Firefox 32.0.1 - not yet checked on other browsers/versions, but, as noted, this isn't new.)
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #10743 (WP rewrite rule bug with &amp; in url path) closed</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Sat, 20 Sep 2014 00:45:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10743#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10743#comment:12/1411173938986442</guid>
      <description>worksforme: &lt;p&gt;
This problem is already solved in 4.0. Looks like a simple patch to the &lt;code&gt;WP_MatchesMapRegex()&lt;/code&gt; class solved the problem:
&lt;/p&gt;
&lt;pre class="wiki"&gt;  public function callback($matches) {
    $index = intval(substr($matches[0], 9, -1));
    return ( isset( $this-&amp;gt;_matches[$index] ) ? urlencode($this-&amp;gt;_matches[$index]) : '' );
  }
&lt;/pre&gt;&lt;p&gt;
The urlencode bit, on the return line, resolves the &amp;amp; issue.
&lt;/p&gt;
&lt;p&gt;
This should be closed.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #8905 (Category pagination broken with certain permalink structures) updated</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Sat, 20 Sep 2014 00:21:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8905#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8905#comment:13/1411172500410297</guid>
      <description>&lt;p&gt;
This is already fixed. Unless there is some new issue that is not clear here, then this should probably be closed. @SergeyBiryukov's reproduction steps produce the second page now, not a 404. It's not my place to close this, but I'm pretty sure it can be closed as resolved.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #28110 (Recently updated tab missing in Appearance-&gt;Themes) updated</title>
      
        <dc:creator>cyberchimps</dc:creator>

      <pubDate>Fri, 19 Sep 2014 22:33:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28110#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28110#comment:7/1411166006315290</guid>
      <description>&lt;p&gt;
Please keep the "Latest" tab, it is one of the few remaining ways for regularly maintained themes to be discovered.
&lt;/p&gt;
&lt;p&gt;
The majority of people discover themes via the WordPress dashboard, very few people actually visit wordpress.org to find themes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #28110 (Recently updated tab missing in Appearance-&gt;Themes) updated</title>
      
        <dc:creator>rohitink</dc:creator>

      <pubDate>Fri, 19 Sep 2014 21:59:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28110#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28110#comment:6/1411163980428187</guid>
      <description>&lt;p&gt;
I Support a "Recently Updated" Section. It gives, users quick access to themes which are regularly being maintained.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29709 (get_pagenum_link and double domain) updated</title>
      
        <dc:creator>palmiak</dc:creator>

      <pubDate>Fri, 19 Sep 2014 21:58:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29709#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29709#comment:3/1411163939767696</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>jbrinley</dc:creator>

      <pubDate>Fri, 19 Sep 2014 21:02:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:68</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:68/1411160575478207</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Went through a lot of iterations before arriving at the version just attached in 17817.6.patch.
&lt;/p&gt;
&lt;p&gt;
Let's start with performance: this is as good as or better than what currently exists. Better with 0 callbacks or 3+ callbacks, about the same at 1-2 callbacks. Results of the test at &lt;a class="ext-link" href="https://gist.github.com/jbrinley/7518483"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://gist.github.com/jbrinley/7518483&lt;/a&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;Running 10000 times with 0 callbacks
Total Time (Old): 0.042208
Average Time (Old): 0.000004
Total Time (New): 0.037750
Average Time (New): 0.000004
New runs in 89.44% of the time of old.
Running 10000 times with 1 callbacks
Total Time (Old): 0.212133
Average Time (Old): 0.000021
Total Time (New): 0.239030
Average Time (New): 0.000024
New runs in 112.68% of the time of old.
Running 10000 times with 2 callbacks
Total Time (Old): 0.312370
Average Time (Old): 0.000031
Total Time (New): 0.314523
Average Time (New): 0.000031
New runs in 100.69% of the time of old.
Running 10000 times with 3 callbacks
Total Time (Old): 0.400735
Average Time (Old): 0.000040
Total Time (New): 0.384914
Average Time (New): 0.000038
New runs in 96.05% of the time of old.
Running 10000 times with 5 callbacks
Total Time (Old): 0.604012
Average Time (Old): 0.000060
Total Time (New): 0.515111
Average Time (New): 0.000052
New runs in 85.28% of the time of old.
Running 10000 times with 10 callbacks
Total Time (Old): 1.133043
Average Time (Old): 0.000113
Total Time (New): 0.888408
Average Time (New): 0.000089
New runs in 78.41% of the time of old.
Running 10000 times with 15 callbacks
Total Time (Old): 1.535434
Average Time (Old): 0.000154
Total Time (New): 1.266079
Average Time (New): 0.000127
New runs in 82.46% of the time of old.
Running 1000 times with 300 callbacks
Total Time (Old): 2.447496
Average Time (Old): 0.002447
Total Time (New): 2.088821
Average Time (New): 0.002089
New runs in 85.35% of the time of old.
Running 100 times with 3000 callbacks
Total Time (Old): 0.999711
Average Time (Old): 0.009997
Total Time (New): 0.810893
Average Time (New): 0.008109
New runs in 81.11% of the time of old.
&lt;/pre&gt;&lt;p&gt;
@wonderboymusic was concerned about the extra time spent running unit tests. On my system, running tests against current WP trunk takes about 3:23 (average of 4 runs). Running with this patch: 3:28 (average of 4 runs).
&lt;/p&gt;
&lt;p&gt;
I think the performance concerns have been addressed. Many thanks to those of you who kept pushing for more; eventually we got it.
&lt;/p&gt;
&lt;p&gt;
On to functionality: Anonymous callbacks can be removed. Plugins that setup callbacks before WordPress initializes (e.g., batcache, the WP unit test suite) will continue to work. Hooks can be called recursively with no unexpected side effects. Callbacks can be added and removed mid-run with no unexpected side effects.
&lt;/p&gt;
&lt;p&gt;
I removed a unit test added in 4.0 for ticket &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29070" title="#29070: defect (bug): Calling remove_all_filters() causes has_filter() with no ... (closed: fixed)"&gt;#29070&lt;/a&gt;. It tested that the array pointer for the global &lt;code&gt;$wp_filter&lt;/code&gt; didn't change when calling &lt;code&gt;has_action()&lt;/code&gt;. Since this new implementation no longer depends on the global array pointer, that test was rendered superfluous. The array pointer does change, but it doesn't matter.
&lt;/p&gt;
&lt;p&gt;
I abandoned the custom iterator that characterized my previous patches. No matter how much I optimized, it just was not performing as well as I would have liked. I was able to squeeze a lot more out of it by keeping the management of the iteration within the &lt;code&gt;WP_Hook&lt;/code&gt; class, at the slight cost of a cleaner separation of responsibilities.
&lt;/p&gt;
&lt;p&gt;
Any questions? Any concerns? Anything holding this back?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>17817.6.patch attached to Ticket #17817</title>
      
        <dc:creator>jbrinley</dc:creator>

      <pubDate>Fri, 19 Sep 2014 20:32:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/17817/17817.6.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/17817/17817.6.patch/1411158760846053</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #29712 (Restore $current_user between unit tests) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 19 Sep 2014 19:41:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29712#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29712#comment:1/1411155682774150</guid>
      <description>&lt;p&gt;
For the most part, creating your &lt;em&gt;own&lt;/em&gt; user is going to be preferred.
&lt;/p&gt;
&lt;p&gt;
If you do need to set the current user for some reason, you should do wp_set_current_user(), then call wp_set_current_user(0) in your tearDown. We could do that in our own class's tearDown, we just haven't.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29324 (Customizer Panels should have render_content to facilitate subclasses) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Fri, 19 Sep 2014 19:37:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29324#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29324#comment:3/1411155435150373</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29572 (Customizer: add a framework for rendering controls from JS templates) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Fri, 19 Sep 2014 19:35:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29572#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29572#comment:5/1411155315015721</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #28709 (Improve/introduce Customizer JS models for Controls, Sections, and Panels) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Fri, 19 Sep 2014 19:35:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28709#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28709#comment:6/1411155304049262</guid>
      <description>&lt;i&gt;Priority&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>0001-clone-the-current_user-before-the-first-unit-test-an.patch attached to Ticket #29712</title>
      
        <dc:creator>mnelson4</dc:creator>

      <pubDate>Fri, 19 Sep 2014 19:19:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/29712/0001-clone-the-current_user-before-the-first-unit-test-an.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/29712/0001-clone-the-current_user-before-the-first-unit-test-an.patch/1411154363541213</guid>
      <description>&lt;p&gt;
git patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #29712 (Restore $current_user between unit tests) created</title>
      
        <dc:creator>mnelson4</dc:creator>

      <pubDate>Fri, 19 Sep 2014 19:18:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29712</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29712/1411154303929545</guid>
      <description>&lt;p&gt;
If the $current_user global is changed during a unit test, that change is persisted to all subsequent unit tests, making the tests dependent on order. (eg, meaning that if I change the $current_user to be an admin during a test, they're forevermore an admin. So a later test that assumes the $current_user is the default blank user will probably fail, even though that other unit test could pass when ran in isolation.)
The solution I have is to just clone the $current_user on the first unit test and save it somewhere; and then after each unit test, restore the $current_user to be a clone of the saved original
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29708 (WordPress 4.0 decides whether the URL is http or httpS based on site ...) updated</title>
      
        <dc:creator>DannyMe</dc:creator>

      <pubDate>Fri, 19 Sep 2014 18:23:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29708#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29708#comment:3/1411151023835663</guid>
      <description>&lt;p&gt;
Dear @jeremyfelt,
&lt;/p&gt;
&lt;p&gt;
Thanks for getting back to us. Setting the home URL to HTTP does not solve the problem: in my case, I want the website to be reachable through the HTTPS-service of Cloudflare. I never had problems with this setup until the update of Wordpress 4.0 and there are much more people having this problem. Could you please help us finding a solution for this or fixing this, i would like to call it a, bug in the Wordpress software? I don't think it is desirable that a piece of software like Wordpress decides whether to redirect a user to a different URL: I think that's something that can and should be done through .htaccess.
&lt;/p&gt;
&lt;p&gt;
Thanks a lot!
&lt;/p&gt;
&lt;p&gt;
D.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29557 (PHP ≤ 5.4.8 Crashes on '[' Character in Posts) updated</title>
      
        <dc:creator>miqrogroove</dc:creator>

      <pubDate>Fri, 19 Sep 2014 18:08:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29557#comment:60</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29557#comment:60/1411150130048700</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29557#comment:59" title="Comment 59"&gt;bobbingwide&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Up to WordPress 3.9, left square brackets in shortcode parameters were accepted without a problem.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think some combinations of HTML and left brackets might cause problems in 3.9.  Much more testing would be needed to know for sure.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #10158,​29711 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 19 Sep 2014 17:58:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=10158%2C29711</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=10158%2C29711/1411149482061774</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/10158" title="#10158: enhancement: Deprecate is_home() and is_single(), in favor of is_blog() and is_post() (closed: wontfix)"&gt;#10158&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/18705" title="#18705: enhancement: home_url() and is_home() with a static front page (closed: maybelater)"&gt;#18705&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/21620" title="#21620: enhancement: Add conditional tag to check if current page is any of the ... (closed: wontfix)"&gt;#21620&lt;/a&gt;. See also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/21237" title="#21237: enhancement: Terminology for &amp;#34;Front&amp;#34; and &amp;#34;Home&amp;#34; (closed: wontfix)"&gt;#21237&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #29711 (Forget is_home()) created</title>
      
        <dc:creator>jmlapam</dc:creator>

      <pubDate>Fri, 19 Sep 2014 17:46:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29711</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29711/1411148800051590</guid>
      <description>&lt;p&gt;
Hi,
&lt;/p&gt;
&lt;p&gt;
I'm not asking for a complete delete. I'm not asking for anything. But because WordPress is not all about blogging why not to change &lt;code&gt;is_home()&lt;/code&gt; for &lt;code&gt;is_blog()&lt;/code&gt; or &lt;code&gt;is_blog_home()&lt;/code&gt; or &lt;code&gt;is_blog_page()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
It's very confusing for beginners. They all think &lt;code&gt;is_home()&lt;/code&gt; is for the home page but most of the time it's not the case (many websites have a dedicated page called "blog").
&lt;/p&gt;
&lt;p&gt;
What do you think about this?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #28219 (add_media 'Uploaded to this post' listing unattached files when post ...) updated</title>
      
        <dc:creator>momekh</dc:creator>

      <pubDate>Fri, 19 Sep 2014 16:43:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28219#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28219#comment:17/1411144983453495</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This may be related:
&lt;/p&gt;
&lt;p&gt;
I used twentyfourteen's script as follows:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;p class="small byline"&amp;gt;
  Parent Post (for this attachment):
  &amp;lt;span class="parent-post-link"&amp;gt;
   &amp;lt;a href="&amp;lt;?php echo get_permalink( $post-&amp;gt;post_parent ); ?&amp;gt;" rel="gallery"&amp;gt;
	&amp;lt;?php echo get_the_title( $post-&amp;gt;post_parent ); ?&amp;gt;
   &amp;lt;/a&amp;gt;
  &amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;p&gt;
I have thumbnail support enabled.
&lt;/p&gt;
&lt;p&gt;
Now, when I added the function in the theme, all previous gallery attachments are showing post-&amp;gt;parent as 0 (linking back to the original attachment).
&lt;/p&gt;
&lt;p&gt;
But when I add new post (post-format: gallery), and add a few images, the above code correctly links to the attachment parent.
&lt;/p&gt;
&lt;p&gt;
Digging around, the two issues above may be inter-related???
&lt;/p&gt;
&lt;p&gt;
I am on WP 4.0 btw.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29444 (Create new dashicons (4.1)) updated</title>
      
        <dc:creator>EmpireOfLight</dc:creator>

      <pubDate>Fri, 19 Sep 2014 16:41:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29444#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29444#comment:7/1411144872198522</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29444#comment:6" title="Comment 6"&gt;benoitchantre&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Would it be possible to add an animal icon (for zoo websites, pet shops, ...)?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There's an "other" field at the bottom of the poll where you can add this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29444 (Create new dashicons (4.1)) updated</title>
      
        <dc:creator>benoitchantre</dc:creator>

      <pubDate>Fri, 19 Sep 2014 16:20:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29444#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29444#comment:6/1411143601908869</guid>
      <description>&lt;p&gt;
Would it be possible to add an animal icon (for zoo websites, pet shops, ...)?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29710 (Add hooks to wpdb's insert(), update(), delete() and similar methods) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:37:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29710#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29710#comment:1/1411141055292854</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29708 (WordPress 4.0 decides whether the URL is http or httpS based on site ...) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:34:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29708#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29708#comment:2/1411140899313154</guid>
      <description>&lt;p&gt;
Hi @cooperman, thanks for the report.
&lt;/p&gt;
&lt;p&gt;
This sounds related to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/28674" title="Force SSL admin when siteurl is explicitly configured with HTTPS.
see ..."&gt;[28674]&lt;/a&gt;, which forces &lt;code&gt;FORCE_SSL_ADMIN&lt;/code&gt; to true if the site URL scheme is HTTPS, and &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/28610" title="Force SSL on the frontend via canonical when the home URL uses the ..."&gt;[28610]&lt;/a&gt;, which will redirect canonical URLs on the front end if the home URL scheme is HTTPS.
&lt;/p&gt;
&lt;p&gt;
If you set &lt;code&gt;FORCE_SSL_ADMIN&lt;/code&gt; to false in wp-config, the admin will be accessible at HTTP, even with an HTTPS site URL. Setting the home URL to HTTP will remove the canonical redirects.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29356 (iPad Menu Tapping is Broken) updated</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:25:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29356#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29356#comment:23/1411140352556207</guid>
      <description>&lt;p&gt;
On portrait mode, I can reproduce the two-clicks on all things. Once I tap to expand the whole menu, it's always a double-tap to get to the dropdown (not flyouts).
&lt;/p&gt;
&lt;p&gt;
On landscape I cannot. Flyouts show on one tap, but selecting items IN the flyout take two.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29692 (Multisite create new site return fatal error) updated</title>
      
        <dc:creator>jesin</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:23:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29692#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29692#comment:18/1411140203868087</guid>
      <description>&lt;p&gt;
I believe OP is using PHP 5.2.6, so anonymous functions won't work. Better try
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_action( 'admin_footer', 'debug_29692' );
function debug_29692() {
    var_dump( get_class( $GLOBALS['wp_roles'] ) );
}
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29692 (Multisite create new site return fatal error) updated</title>
      
        <dc:creator>nacin</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:12:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29692#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29692#comment:17/1411139534825671</guid>
      <description>&lt;p&gt;
Can you try running code like this?
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_action( 'admin_footer', function() {
    var_dump( get_class( $GLOBALS['wp_roles'] ) );
});
&lt;/pre&gt;&lt;p&gt;
You can drop this into functions.php and look at your dashboard footer for some text.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29557 (PHP ≤ 5.4.8 Crashes on '[' Character in Posts) updated</title>
      
        <dc:creator>bobbingwide</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:11:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29557#comment:59</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29557#comment:59/1411139510415396</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29557#comment:58" title="Comment 58"&gt;miqrogroove&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If you'd like me to research the technical implications of allowing the '[' character inside of a shortcode, I could entertain that thought.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Up to WordPress 3.9, left square brackets in shortcode parameters were accepted without a problem.
Right square brackets could not be used; more often than not they simply ended the shortcode.
&lt;/p&gt;
&lt;p&gt;
IMHO: There's probably little point in re-enabling support for left square brackets without allowing right square brackets as well.
&lt;/p&gt;
&lt;p&gt;
BTW: Nice codex updates.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29692 (Multisite create new site return fatal error) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Fri, 19 Sep 2014 15:05:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29692#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29692#comment:16/1411139148376019</guid>
      <description>&lt;p&gt;
@kkalvaa - Do you have any role management plugins installed on the network or in mu-plugins?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5809 (Updating a term in one taxonomy affects the term in every taxonomy) updated</title>
      
        <dc:creator>aaroncampbell</dc:creator>

      <pubDate>Fri, 19 Sep 2014 14:37:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5809#comment:130</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5809#comment:130/1411137421125077</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5809#comment:129" title="Comment 129"&gt;maxwelton&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If this is never going to be updated
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's not that it's never going to be fixed, it's just that the correct fix takes time because it needs to be spread out across several versions. If you look at the &lt;a class="ext-link" href="http://make.wordpress.org/core/2013/07/28/potential-roadmap-for-taxonomy-meta-and-post-relationships/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;potential roadmap&lt;/a&gt; you can see the plan all laid out. It's taking longer than we had hoped, but we're making progress. I think the next step is &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/22023" title="#22023: enhancement: Remove UNIQUE for slug in wp_terms (closed: fixed)"&gt;#22023&lt;/a&gt;, which was dependent on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/17689" title="#17689: defect (bug): Terms should not be sanitized inside term_exists() (closed: fixed)"&gt;#17689&lt;/a&gt;, which was fixed in 4.0.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #22023 (Remove UNIQUE for slug in wp_terms) updated</title>
      
        <dc:creator>aaroncampbell</dc:creator>

      <pubDate>Fri, 19 Sep 2014 14:36:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/22023#comment:39</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/22023#comment:39/1411137394657027</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29356 (iPad Menu Tapping is Broken) updated</title>
      
        <dc:creator>helen</dc:creator>

      <pubDate>Fri, 19 Sep 2014 14:30:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29356#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29356#comment:22/1411137000219954</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/29356#comment:21" title="Comment 21"&gt;miqrogroove&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I always work in landscape mode, if that's relevant.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's extremely relevant. The menu is different between the two widths. Did you look at stephdau's screenshots?
&lt;/p&gt;
&lt;p&gt;
So a note to everybody else looking at this: this is referring to the original with-flyouts menu, not the small-screen, touch-optimized version.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29710 (Add hooks to wpdb's insert(), update(), delete() and similar methods) created</title>
      
        <dc:creator>borekb</dc:creator>

      <pubDate>Fri, 19 Sep 2014 13:52:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29710</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29710/1411134755920352</guid>
      <description>&lt;p&gt;
The &lt;code&gt;wpdb&lt;/code&gt; class currently offers a &lt;code&gt;query&lt;/code&gt; filter in its &lt;code&gt;query()&lt;/code&gt; method which supplies &lt;em&gt;unstructured&lt;/em&gt; data to its handlers (a string with an SQL query). In our plugin we need to work with &lt;em&gt;structured&lt;/em&gt; data provided to the &lt;code&gt;insert()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt; and similar methods. It would be great if these methods provided hooks both before and after the actual work happens.
&lt;/p&gt;
&lt;p&gt;
For instance, the &lt;code&gt;insert()&lt;/code&gt; method would become:
&lt;/p&gt;
&lt;pre class="wiki"&gt;function insert( $table, $data, $format = null ) {
    do_action( 'db_before_insert', $table, $data, $format );
    $result = $this-&amp;gt;_insert_replace_helper( $table, $data, $format, 'INSERT' );
    do_action( 'db_after_insert', $table, $data, $format, $result );
    return $result;
}
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29707 (Native Audio Player) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 19 Sep 2014 11:57:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29707#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29707#comment:2/1411127839309705</guid>
      <description>&lt;p&gt;
Related: &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/28182" title="Refinements for asynchronous rendering in `wp.mce.media.PlaylistView`: ..."&gt;[28182]&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29134" title="#29134: defect (bug): playlist not supported by many browsers (closed: invalid)"&gt;#29134&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29707 (Native Audio Player) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Fri, 19 Sep 2014 11:34:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29707#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29707#comment:1/1411126493547201</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thanks for the report.
&lt;/p&gt;
&lt;p&gt;
The audio player is made visible by the MediaElement.js JavaScript which is enqueued when audio or video is embedded in a post. If this is not happening then there may be an issue with your theme, or with a plugin on your site, or with your browser.
&lt;/p&gt;
&lt;p&gt;
Can you try deactivating the plugins on your site and switching to the default theme and seeing if the problem persists?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29704 (wp_ajax_replyto_comment does not define $comment_type before compact()) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 19 Sep 2014 11:30:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29704#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29704#comment:2/1411126217220983</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29709 (get_pagenum_link and double domain) updated</title>
      
        <dc:creator>palmiak</dc:creator>

      <pubDate>Fri, 19 Sep 2014 10:29:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29709#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29709#comment:2/1411122556964962</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="http://pastebin.com/WcYbTXms"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://pastebin.com/WcYbTXms&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I'm using get_pagenum_link2 to see how the $request behaves, but It's a normal get_pagenum_link with some echoes.
&lt;/p&gt;
&lt;p&gt;
When you remove the 83th line than everything will work.
&lt;/p&gt;
&lt;p&gt;
Still - you can have problem with reproducting it. I only have this problem only on one server.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29709 (get_pagenum_link and double domain) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 19 Sep 2014 10:23:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29709#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29709#comment:1/1411122218389889</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
When I'm not using query posts &lt;code&gt;[REQUEST_URI] =&amp;gt; /test/page/3/&lt;/code&gt;, but after using it I get &lt;code&gt;[REQUEST_URI] =&amp;gt; http://domainname.com/test/page/3/&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Could you provide a piece of code to reproduce the issue?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29709 (get_pagenum_link and double domain) created</title>
      
        <dc:creator>palmiak</dc:creator>

      <pubDate>Fri, 19 Sep 2014 10:17:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29709</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29709/1411121871189609</guid>
      <description>&lt;p&gt;
get_pagenum_link generates links with double domain, for example:
&lt;a class="ext-link" href="http://domainname.com/http://domainname.com/page/2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://domainname.com/http://domainname.com/page/2&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
The problem doesn't exist on every server and it only appers when you are using query_posts (probably new WP_query also).
&lt;/p&gt;
&lt;p&gt;
A the start of get_pagenum_link() there is &lt;code&gt;$request = remove_query_arg( 'paged' );&lt;/code&gt; which gets data from $_SERVER. When I'm not using query posts &lt;code&gt;[REQUEST_URI] =&amp;gt; /test/page/3/&lt;/code&gt;, but after using it I get &lt;code&gt;[REQUEST_URI] =&amp;gt; http://domainname.com/test/page/3/&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I think there should be a check if REQUEST_URI doesn't contain domainname.
&lt;/p&gt;
&lt;p&gt;
This bug was also found &lt;a class="ext-link" href="https://wordpress.org/support/topic/error-in-link-url-domain-name-appears-twice"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/error-in-link-url-domain-name-appears-twice&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29708 (WordPress 4.0 decides whether the URL is http or httpS based on site ...) updated</title>
      
        <dc:creator>DannyMe</dc:creator>

      <pubDate>Fri, 19 Sep 2014 10:17:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29708#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29708#comment:1/1411121837303129</guid>
      <description>&lt;i&gt;Severity&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Dear cooperman,
&lt;/p&gt;
&lt;p&gt;
Thank you very much for filing this bug report. I would like to state that we are experiencing the same bug, in different hosting environments, based on using Cloudflare's Flexible SSL-solution, which makes it possible to have a https-connection to the end user, but a http-connection to your own hosting environment:
&lt;/p&gt;
&lt;p&gt;
Outside world/visitor --&amp;gt; https --&amp;gt; Cloudflare --&amp;gt; http --&amp;gt; Wordpress-installation.
&lt;/p&gt;
&lt;p&gt;
As Wordpress 4.0 identifies the connection as 'http', it tries to redirect to the https-url of the installation, while the visitor is already visiting through the https-address, which results in an endless and until now non-fixable loop.
&lt;/p&gt;
&lt;p&gt;
Wordpress 4.0 contains changes on how the software handles ssl-connections, although I was not able to reproduce exactly what changed. See also &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/27954" title="#27954: task (blessed): Add FORCE_SSL option to enable HTTPS everywhere on the site (closed: duplicate)"&gt;#27954&lt;/a&gt;, &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/28521" title="#28521: enhancement: FORCE_SSL constant for really forcing SSL (new)"&gt;#28521&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/28674" title="#28674: enhancement: Demote WP Logo from tabindex on setup screen (closed: fixed)"&gt;#28674&lt;/a&gt;. We urgently need a fix for this bug too for our installations, as buying SSL certificates for 20 websites is not an option and in our case not necessary.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29708 (WordPress 4.0 decides whether the URL is http or httpS based on site ...) created</title>
      
        <dc:creator>cooperman</dc:creator>

      <pubDate>Fri, 19 Sep 2014 08:29:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29708</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29708/1411115342683392</guid>
      <description>&lt;p&gt;
On upgrading an installation of WordPress to version 4.0 from 3.8 we found the site in the state of an endless redirect.
&lt;/p&gt;
&lt;p&gt;
After about a day and a half of trying to find the cause we saw that what appeared to be happening was that the site believed, rightly, that it was in a non-ssl environment but it then chose to act upon it and redirected traffic to &lt;a class="ext-link" href="http://site.name"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://site.name&lt;/a&gt; (non SSL domain). The setup of our hosting is that we have:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;https to the load balancer/accelerator on port 443
&lt;/li&gt;&lt;li&gt;http from the load balancer/accelerator to the port 81 on the web server
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
We had an htaccess rule in place at that location to go back to httpS://site.name which then sent traffic back again and so the cycle continued. When we removed the &lt;a class="ext-link" href="http://"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://&lt;/a&gt; to &lt;a class="ext-link" href="https://"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://&lt;/a&gt; rule, the site loaded, instead of following an infinite loop, but all of the resources (stylesheets, JavaScript, etc.) were using &lt;a class="ext-link" href="http://"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://&lt;/a&gt; so didn't load. This was despite the "siteurl" and "home" fields in the options table being set to https. We found ourselves having to hack the core code initially, on functions such as site_url, get_bloginfo(), etc. but it got to a point where it wasn't a sustainable solution.
&lt;/p&gt;
&lt;p&gt;
It seems as though WordPress now makes that decision of whether to use &lt;a class="ext-link" href="http://"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://&lt;/a&gt; or &lt;a class="ext-link" href="https://"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://&lt;/a&gt; based on the server that it's sat upon instead of leaving it up to the settings in the site and what's written into the required fields in the database / settings page as versions 3.9 and earlier did.
&lt;/p&gt;
&lt;p&gt;
I don't know if this is by design or not but we've had to put some serious security holes in our setup just to get the site running once again, following a day and a half of downtime. It's certainly not a feature that I've seen documented anywhere.
&lt;/p&gt;
&lt;p&gt;
We're not the only users in this position (please see the thread at &lt;a class="ext-link" href="https://wordpress.org/support/topic/wordpress-40-in-a-ssl-loop?replies=6#post-6026064"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/wordpress-40-in-a-ssl-loop?replies=6#post-6026064&lt;/a&gt;), and while perhaps unusual our hosting setup is hardly unique.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #29699 (add_theme_support( 'screen-reader-text' );) updated</title>
      
        <dc:creator>ctalkington</dc:creator>

      <pubDate>Fri, 19 Sep 2014 08:02:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29699#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29699#comment:2/1411113779919292</guid>
      <description>&lt;p&gt;
seems like a solid approach to handle this with all the possible front-end variations.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18650 (Make archives and categories widgets dropdown ada compliant) updated</title>
      
        <dc:creator>ctalkington</dc:creator>

      <pubDate>Fri, 19 Sep 2014 08:01:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18650#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18650#comment:19/1411113668543716</guid>
      <description>&lt;p&gt;
new widgets that are a bit smarter in regards to accessibility and modern approaches while letting the old widgets remain in a soft-deprecate stage for back-compat is an intriguing thought. i think this approach has been used for different things before, just not widgets?
&lt;/p&gt;
&lt;p&gt;
it seems like doing theme support could potentially work here but would add a bit of overhead based on the level of adjustment that is needed.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29692 (Multisite create new site return fatal error) updated</title>
      
        <dc:creator>kkalvaa</dc:creator>

      <pubDate>Fri, 19 Sep 2014 06:25:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29692#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29692#comment:15/1411107914522518</guid>
      <description>&lt;p&gt;
I tried to overwrite &lt;code&gt;wp-includes/capabilities.php&lt;/code&gt; from a fresh 4.0 download to see if it was partially updated, no luck. And yes, I'm trying to add new sites from &lt;code&gt;{site-url}/wp-admin/network/site-new.php&lt;/code&gt;. The site is currently closed for other registration possibilities.
&lt;/p&gt;
&lt;p&gt;
@nacin: The bug is still reproducible, the site is currently incapable of creating new sites.
&lt;/p&gt;
&lt;p&gt;
Also, Jetpack used to be network activated, but I had to deactivate it from the network after a theme conflicted with Jetpack. Jetpack is now only active on sites using Jetpack.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5809 (Updating a term in one taxonomy affects the term in every taxonomy) updated</title>
      
        <dc:creator>maxwelton</dc:creator>

      <pubDate>Fri, 19 Sep 2014 05:19:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5809#comment:129</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5809#comment:129/1411103945784788</guid>
      <description>&lt;p&gt;
If this is never going to be updated, can we at least prevent the situations which lead to this circle-of-terms, by enforcing unique slugs throughout WP? I hate unique slugs as a requirement (isn't that what IDs are for?), but if it fixes this, unique slugs are way, way preferable to this embarrassing bug. WP is an excellent platform and I really enjoy working with it, but this is one of those things you cannot explain to a client without them pausing for a long time and finally saying "&lt;em&gt;really?&lt;/em&gt;"
&lt;/p&gt;
&lt;p&gt;
Interesting: if you create the term "best" in tax 1 and then create "best" in tax 2, they are married forevermore.
&lt;/p&gt;
&lt;p&gt;
But if you create "best" in tax 1 and also create "Best" in tax 1, the latter will be assigned a slug of best-2.
&lt;/p&gt;
&lt;p&gt;
If you go to tax 2 and create "best", you get the shared-term-bug misery. But if you create "Best" in tax 2, it is not shared (slug: best-3). And if you go to tax 3 and create "Best" (slug: best-4) it will not be shared, either. But adding "best" to any taxonomy and you'll be sharing that term across all taxonomies, no matter what.
&lt;/p&gt;
&lt;p&gt;
Le sigh.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #29707 (Native Audio Player) created</title>
      
        <dc:creator>noelb</dc:creator>

      <pubDate>Fri, 19 Sep 2014 03:07:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/29707</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/29707/1411096029514888</guid>
      <description>&lt;p&gt;
The native audio player is defaulted to 'visibility: hidden'.  This bug was also in the previous versions of wordpress and when I upgraded to 4.0  all audio in my posts went missing.
&lt;/p&gt;
&lt;p&gt;
The fix is to edit  media.php and search the style and delete the 'visibility:hidden'
&lt;/p&gt;
&lt;p&gt;
wp-includes/media.php
&lt;/p&gt;
&lt;pre class="wiki"&gt;$html_atts = array(
                'class'    =&amp;gt; apply_filters( 'wp_audio_shortcode_class', 'wp-audio-shortcode' ),
                'id'       =&amp;gt; sprintf( 'audio-%d-%d', $post_id, $instances ),
                'loop'     =&amp;gt; $atts['loop'],
                'autoplay' =&amp;gt; $atts['autoplay'],
                'preload'  =&amp;gt; $atts['preload'],
                'style'    =&amp;gt; '/* width: 300px; */',  &amp;lt;------ visibility:hidden was here
);
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5305 (permalinks broken when article name is numeric) updated</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Fri, 19 Sep 2014 03:05:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5305#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5305#comment:42/1411095909744839</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5305#comment:41" title="Comment 41"&gt;toscho&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;code&gt;number&lt;/code&gt; must be translatable, and then you end up with something like &lt;code&gt;číslo&lt;/code&gt;. That would probably raise new issues. I don’t think this is a robust solution.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You make a good point that &lt;code&gt;number&lt;/code&gt; needs to be translatable. Thus, I have updated the patch to include that in the solution. The second part of your objection is moot however. The slug sanitization process already handles sanitization of translations. If that is really an objection, then the sanitization functions need redesign, though I think you will find they don't. As for the 'robustness' of the solution, it is meant to be simple. If there is something I missed as far as the solution is concerned in the ways of 'robustness', feel free to suggest them, and I will try to work them in. Thanks again for the comment. Anything to make it better.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-includes_post.php.2.diff attached to Ticket #5305</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Fri, 19 Sep 2014 02:58:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5305/wp-includes_post.php.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5305/wp-includes_post.php.2.diff/1411095537940689</guid>
      <description>&lt;p&gt;
updated patch, which includes translation on 'number'
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>wp-admin_includes_upgrade.php.diff attached to Ticket #6481</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Fri, 19 Sep 2014 02:51:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/6481/wp-admin_includes_upgrade.php.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/6481/wp-admin_includes_upgrade.php.diff/1411095092455882</guid>
      <description>&lt;p&gt;
wp-admin/includes/upgrade.php 4.0 file patch for pretty permalink test
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #6481 (Fancy permalinks should be enabled on new sites) updated</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Fri, 19 Sep 2014 02:50:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/6481#comment:45</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/6481#comment:45/1411095042018570</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
After reading this whole ticket, there are some good ideas here. It seems like we have also overcome at least half of the only real objection, since we write the .htaccess and web.config files. Only Nginx is on the outs. Thankfully, the code (and my patch) is written in such a way that even if we wind up adding the Nginx config writer later, another change should not be needed.
&lt;/p&gt;
&lt;p&gt;
My approach is simple. During the installation process, after we create our dummy data, it simply attempts to set a basic pretty permalink structure, and to subsequently hit that dummy post at it's pretty url. If we get a 200 response, the we can use pretty permalinks by default. Otherwise we just fallback to the ugly permalinks (coding defensively, heh).
&lt;/p&gt;
&lt;p&gt;
I'll attach the patch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5305 (permalinks broken when article name is numeric) updated</title>
      
        <dc:creator>toscho</dc:creator>

      <pubDate>Fri, 19 Sep 2014 01:39:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5305#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5305#comment:41/1411090779235508</guid>
      <description>&lt;p&gt;
&lt;code&gt;number&lt;/code&gt; must be translatable, and then you end up with something like &lt;code&gt;číslo&lt;/code&gt;. That would probably raise new issues. I don’t think this is a robust solution.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27593 (Widgets: Toggle arrows on focus need an indicator beside color alone) updated</title>
      
        <dc:creator>Cheffheid</dc:creator>

      <pubDate>Fri, 19 Sep 2014 01:25:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27593#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27593#comment:5/1411089915498164</guid>
      <description>&lt;p&gt;
Doing anything to it will probably mean changing the markup and moving the :after somewhere else first. :focus:after doesn't work and so change is limited.
&lt;/p&gt;
&lt;p&gt;
Would probably add a span and move the triangle icon there. That way, there's much more freedom to change the icon too:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://i.imgur.com/qP3W5UE.png"&gt;&lt;img src="http://i.imgur.com/qP3W5UE.png" alt="http://i.imgur.com/qP3W5UE.png" crossorigin="anonymous" title="http://i.imgur.com/qP3W5UE.png" /&gt;&lt;/a&gt;
&lt;em&gt;Size increase&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://i.imgur.com/VNdbHvV.png"&gt;&lt;img src="http://i.imgur.com/VNdbHvV.png" alt="http://i.imgur.com/VNdbHvV.png" crossorigin="anonymous" title="http://i.imgur.com/VNdbHvV.png" /&gt;&lt;/a&gt;
&lt;em&gt;Size increase and border&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp-includes_post.php.diff attached to Ticket #5305</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Fri, 19 Sep 2014 01:21:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5305/wp-includes_post.php.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5305/wp-includes_post.php.diff/1411089711017610</guid>
      <description>&lt;p&gt;
wp-includes/post.php patch for handling numeric slugs
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5305 (permalinks broken when article name is numeric) updated</title>
      
        <dc:creator>loushou</dc:creator>

      <pubDate>Fri, 19 Sep 2014 01:21:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5305#comment:40</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5305#comment:40/1411089670395039</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Seems to me that the only real solution to this problem is going to be to prefix those numeric slugs with some alpha-dash-text of some sort; otherwise, it will always get confused with any numeric value expected in the permalink, and thus interpreted incorrectly. Prefixing it with something as nondescript as '_' seems like the wrong solution, if for no other reason than _123 just looks weird in a URL.
&lt;/p&gt;
&lt;p&gt;
My solution simply prefixes a numeric slug with 'number-' ( &lt;a class="ext-link" href="http://example.com/number-123/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.com/number-123/&lt;/a&gt; ). It is longer, and one could argue that it is equally nondescript, but at least you know it is a number and it does not get confused with expected numeric values in the permalink. This is a blanket patch to the slug generation function, so it applies to all post_types. As requested, this prefix allows any post type to work in any of the standard permalink structures. As a party favor to all those devs out there who love their filters (like me), I also have a filter on 'number-' that only gets called when it is needed. As a fallback to all of this, if 'number-123' is not a nice permalink for a specific person, we obviously still have the ability to manually override the permalink, just not with anything numeric.
&lt;/p&gt;
&lt;p&gt;
The original question also included a secondary issue, where apparently post_name values that were prefixes to a category slug used to force the category page to load instead of the post page. Based on the current permalink class, this sounds like it is already solved and not even possible any more. Even the old category slug - parent page slug collision problem seems solved. This is because categories and tags are all prefixed with a slug now. Matching clashes with that specified slug seems unnecessary, so I assume we are just dropping that second request.
&lt;/p&gt;
&lt;p&gt;
Thus I will attach the patch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>