<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #5380 (Upload tab in linline uploader disappears under certain circumstances) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Thu, 22 Nov 2007 22:39:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5380#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5380#comment:1/1195771176000000</guid>
      <description>&lt;p&gt;
Annoying = you can't edit a Trac ticket after saving.
&lt;/p&gt;
&lt;p&gt;
My report is partially wrong. There has to be an upload associated with the post that you're writing or editing at the time (ie an upload in the Browse tab). Try these new steps to reproduce:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to Write -&amp;gt; Write Post and scroll down to the inline uploader.
&lt;/li&gt;&lt;li&gt;Ensure you have at least two uploads under the Browse All tab (and at least one which you don't mind editing or deleting).
&lt;/li&gt;&lt;li&gt;Ensure you have at least one file under the Browse tab also.
&lt;/li&gt;&lt;li&gt;Click Browse All or Browse, click on an upload, click Edit, and either delete the file or make changes and save it.
&lt;/li&gt;&lt;li&gt;When the uploader returns to the Browse All or Browse tab, the Upload tab has disappeared.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5380 (Upload tab in linline uploader disappears under certain circumstances) created</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Thu, 22 Nov 2007 22:32:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5380</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5380/1195770726000000</guid>
      <description>&lt;p&gt;
The Upload tab in the inline uploader can disappear after deleting or editing a file.
&lt;/p&gt;
&lt;p&gt;
Steps to reproduce:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to Write -&amp;gt; Write Post and scroll down to the inline uploader.
&lt;/li&gt;&lt;li&gt;Ensure you have at least two uploads under the Browse All tab (and at least one which you don't mind editing or deleting).
&lt;/li&gt;&lt;li&gt;Click Browse All, click on an upload, click Edit, and either delete the file or make changes and save it.
&lt;/li&gt;&lt;li&gt;When the uploader returns to the Browse All tab, the Upload tab has disappeared.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
It's not possible to return to the Upload tab without reloading the post writing screen.
&lt;/p&gt;
&lt;p&gt;
Note that this doesn't happen if you upload a file then immediately click Edit and delete or make changes to the file.
&lt;/p&gt;
&lt;p&gt;
Not sure where the problem lies as I'm not too familiar with the uploading system.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 21:46:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:18/1195767967000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/2394#comment:17" title="Comment 17"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
phpass seems flexible and portable and has a compatible license.  Why not use it?  I'd rather not reinvent what someone more knowledgeable in the field has already done.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed.  Marking as needs-patch
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Thu, 22 Nov 2007 19:46:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:17/1195760762000000</guid>
      <description>&lt;p&gt;
phpass seems flexible and portable and has a compatible license.  Why not use it?  I'd rather not reinvent what someone more knowledgeable in the field has already done.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) updated</title>
      
        <dc:creator>donncha</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:35:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379#comment:3/1195749349000000</guid>
      <description>&lt;p&gt;
Good idea, looks better inside the if() condition.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5235 (Add Pre-flight checks to install) updated</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:30:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5235#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5235#comment:8/1195749017000000</guid>
      <description>&lt;p&gt;
I've taken some of the suggestions into consideration and I've attached a new patch. Checks can throw warnings or stop the installation completely if necessary. I've had to alter install.php too.
&lt;/p&gt;
&lt;p&gt;
I've deliberately avoided adding new, more thorough checks for now and concentrated on the larger view.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:05:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379#comment:2/1195747506000000</guid>
      <description>&lt;p&gt;
This could also then be used by any WordPress plugins that wanted to track things like attempts to access pages that the user didn't have the rights to.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:04:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379#comment:1/1195747462000000</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Looking at the mu code (&lt;a class="ext-link" href="http://trac.mu.wordpress.org/browser/trunk/wp-admin/menu.php"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;http://trac.mu.wordpress.org/browser/trunk/wp-admin/menu.php&lt;/a&gt;) would we not do better with an action inside the failure case:
&lt;/p&gt;
&lt;p&gt;
e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;if (! user_can_access_admin_page()) {
    do_action('admin_page_access_denied');
    wp_die( __('You do not have sufficient permissions to access this page.') );
}
&lt;/pre&gt;&lt;p&gt;
mu can then hook on that and do the redirect if necessary before the wp_die
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>menu.php.diff attached to Ticket #5379</title>
      
        <dc:creator>donncha</dc:creator>

      <pubDate>Thu, 22 Nov 2007 15:46:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5379/menu.php.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5379/menu.php.diff/1195746387000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) created</title>
      
        <dc:creator>donncha</dc:creator>

      <pubDate>Thu, 22 Nov 2007 15:46:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379/1195746376000000</guid>
      <description>&lt;p&gt;
WordPress MU has a modified wp-admin/menu.php but with the addition of a new hook just above the user_can_access_admin_page() check, those custom mods can go into a new file.
&lt;/p&gt;
&lt;p&gt;
I called the action admin_menu_permission as there are hooks above for modifying the admin menu, this hook wouldn't have any other function AFAICT.
&lt;/p&gt;
&lt;p&gt;
I did try hooking on to admin_menu but it didn't work and the user received the standard WP "cannot access page" error instead of being redirected as WordPress MU usually does.
&lt;/p&gt;
&lt;p&gt;
Please take a look at the attached file.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5370 (No confirmation on deleting posts in Manage, Posts) updated</title>
      
        <dc:creator>demetris</dc:creator>

      <pubDate>Thu, 22 Nov 2007 15:12:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5370#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5370#comment:3/1195744334000000</guid>
      <description>&lt;p&gt;
Update:
&lt;/p&gt;
&lt;p&gt;
The problem occurs on an *addon* domain on a hostmonster.com account. I did a test install on the default domain, and everything seemed to be fine.
&lt;/p&gt;
&lt;p&gt;
The root directory of this *addon* domain is:
&lt;/p&gt;
&lt;p&gt;
/home/username/public_html/op111/
&lt;/p&gt;
&lt;p&gt;
While for the default domain it is:
&lt;/p&gt;
&lt;p&gt;
/home/username/
&lt;/p&gt;
&lt;p&gt;
I hope this information is relevant and useful.
&lt;/p&gt;
&lt;p&gt;
Greetings,
Demetris
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>DD32</dc:creator>

      <pubDate>Thu, 22 Nov 2007 14:28:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:16/1195741699000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:15" title="Comment 15"&gt;jammycakes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Another thing -- why has this been given a milestone of 2.4? Since it is a security issue that is actively being exploited, shouldn't it be scheduled, at least partially, for the next security release?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Things are fixed in Trunk(2.4) and then backported to 2.3&lt;br /&gt;
Major changes such as this would also go into the next stable release rather than a maintainence release i believe. Allthough extra checks might be added to a 2.3 maintainence release to at least remove some of the vulnerability(ie. patch it, just not completely replace the authentication functions) is need be.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>jammycakes</dc:creator>

      <pubDate>Thu, 22 Nov 2007 14:14:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:15/1195740856000000</guid>
      <description>&lt;p&gt;
Otto42:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Salting the passwords would be nice to prevent dictionary attacks, and using something other than MD5 would be nice as well, but these won't solve the problem.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
They won't solve the problem completely but they will help quite considerably, so this is not a valid reason for not salting. It's all part of a strategy of "defence in depth," which is an approach that security experts all strongly recommend.
&lt;/p&gt;
&lt;p&gt;
You need to have an extremely good reason to reject an additional recommended security measure, especially when its impact on usability or other functionality is zero.
&lt;/p&gt;
&lt;p&gt;
However, I'd agree that sessions are the way to go rather than throwing around hashes of your user name and password in cookies.
&lt;/p&gt;
&lt;p&gt;
nbachiyski:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
one day the rainbow databases may include many md5 strings hashes, or even triple hashes, but I think it would suffice for now.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I wouldn't put it past crackers to come up with one, especially given the popularity of WordPress. That's why I'm strongly in favour of salting in addition to everything else. Again, it boils down to "defence in depth."
&lt;/p&gt;
&lt;p&gt;
In short, we need to do &lt;strong&gt;all&lt;/strong&gt; the following:
&lt;/p&gt;
&lt;ol class="loweralpha"&gt;&lt;li&gt;salt users' passwords
&lt;/li&gt;&lt;li&gt;use a more secure hash algorithm than MD5
&lt;/li&gt;&lt;li&gt;use PHP sessions rather than user name and password
&lt;/li&gt;&lt;li&gt;give sessions a finite (sliding) expiration time of no more than a few hours.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
It would also be a good idea to consider tying sessions to a specific IP address or range of IP addresses, although this could cause usability problems for AOL users who go through random proxy servers.
&lt;/p&gt;
&lt;p&gt;
Another thing -- why has this been given a milestone of 2.4? Since it is a security issue that is actively being exploited, shouldn't it be scheduled, at least partially, for the next security release?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5376 (rules added via mod_rewrite_rules should be in IfModule section) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 12:26:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5376#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5376#comment:1/1195734419000000</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset in tests [90]: taxonomy api tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Thu, 22 Nov 2007 12:01:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/90/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/90/tests/1195732917790719</guid>
      <description>&lt;p&gt;
taxonomy api tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset in tests [89]: initial taxonomy tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Thu, 22 Nov 2007 11:16:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/89/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/89/tests/1195730203394010</guid>
      <description>&lt;p&gt;
initial taxonomy tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #4779 (Proposal for HTTP POST and REQUEST API) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Thu, 22 Nov 2007 10:17:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4779#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4779#comment:6/1195726655000000</guid>
      <description>&lt;p&gt;
&lt;strong&gt;Changes&lt;/strong&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Created &lt;code&gt;wp_remote_register_transport()&lt;/code&gt; and &lt;code&gt;wp_remote_unregister_transport()&lt;/code&gt; instead of using a custom Action hook. I might just wrap those two functions around the Action API, but needs references to object.
&lt;/li&gt;&lt;li&gt;Finished four of the five http request methods (missing !cURL).
&lt;/li&gt;&lt;li&gt;Added hooks for user agent changing, as well as setting the different time outs with filters.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Missing&lt;/strong&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;!cURL implementation (might be plugin material).
&lt;/li&gt;&lt;li&gt;method to setup what each object can be used for, fopen for PHP 4 can only be used for reading and not writing. Might be useful to decide based on &lt;code&gt;$type&lt;/code&gt; used.
&lt;/li&gt;&lt;li&gt;Comprehensive Unit Tests (coming next).
&lt;/li&gt;&lt;li&gt;Missing hooks for parsing headers and body after response is finished (figured some things are better left to the user of the functions, better to return raw, instead of mangling when I shouldn't be).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;a class="ext-link" href="http://wordpress.pastebin.com/m72ab9b2"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Found this&lt;/a&gt; after writing the first prototype. I like mine better, but okay. The guy has some good stuff and I ported some of it over.
&lt;/p&gt;
&lt;p&gt;
Again, this is just a prototype.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5375 (wp_update_term_count cleans the cache for all taxonomies) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Thu, 22 Nov 2007 05:16:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5375#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5375#comment:2/1195708605000000</guid>
      <description>&lt;p&gt;
You're right - I think I have the root cause mixed up.  I'll see if I can reproduce something in unit testing and  post back with more info.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Thu, 22 Nov 2007 03:32:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:14/1195702328000000</guid>
      <description>&lt;p&gt;
Salting the passwords would be nice to prevent dictionary attacks, and using something other than MD5 would be nice as well, but these won't solve the problem.
&lt;/p&gt;
&lt;p&gt;
Why are we storing the username and password in cookies at all? Is there any particular reason that we're not using PHP sessions? With a session, we could have the username and hashed password remain on the server as session variables, and the only cookie would be the randomly generated session ID. No real vulnerability there at all, eh?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5378 (Replace existing wp-includes/rss.php) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Thu, 22 Nov 2007 01:28:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5378#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5378#comment:1/1195694908000000</guid>
      <description>&lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
chmac, to save people manually trawling through your attached file, can you give us a summary of the changes? For example, is there support for enclosures? And what are the new functions that are included?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5375 (wp_update_term_count cleans the cache for all taxonomies) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Wed, 21 Nov 2007 23:26:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5375#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5375#comment:1/1195687594000000</guid>
      <description>&lt;p&gt;
wp_update_term_count() is passing term_taxonomy_ids to clean_term_cache(), not term_ids.  Taxonomy shouldn't be needed.  Passing a taxonomy to clean_term_cache() when tt_ids are passed in $ids will result in the wrong IDs being cleaned.  clean_term_cache() shouldn't clean any taxonomies not represented in the tt_ids being passed.  I think something else is broken if we're cleaning extra taxonomies.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>nbachiyski</dc:creator>

      <pubDate>Wed, 21 Nov 2007 23:07:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:13/1195686420000000</guid>
      <description>&lt;p&gt;
Another way is to leave &lt;code&gt;md5(md5(pass))&lt;/code&gt; in the cookie and store triple-md5-ed pass in the DB. Thus we cover the following cases:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;if the attacker gets the cookie it's almost unbreakable, just as it is now
&lt;/li&gt;&lt;li&gt;if the attacker gets the DB, she can't generate a cookie
&lt;/li&gt;&lt;li&gt;if the attacker gets the DB, she can't use rainbow to get the password
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
And the logic is pretty simple and foolproof. Of course one day the rainbow databases may include many md5 strings hashes, or even triple hashes, but I think it would suffice for now.
&lt;/p&gt;
&lt;p&gt;
The only disadvantage of all the techniques proposed above is that the cookie value cannot be generated using the information. Now this functionality is used to update the cookies, when the URL of the blog changes. The code is in &lt;a class="source" href="http://core.trac.wordpress.org/browser/trunk/wp-admin/includes/misc.php?rev=6025#L142"&gt;wp-admin/includes/misc.php&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/export/6025/trunk/wp-admin/includes/misc.php#L142" title="Download"&gt;â€‹&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>rss.php attached to Ticket #5378</title>
      
        <dc:creator>chmac</dc:creator>

      <pubDate>Wed, 21 Nov 2007 22:58:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5378/rss.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5378/rss.php/1195685881000000</guid>
      <description>&lt;p&gt;
Suggested replacement for wp-includes/rss.php
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5378 (Replace existing wp-includes/rss.php) created</title>
      
        <dc:creator>chmac</dc:creator>

      <pubDate>Wed, 21 Nov 2007 22:48:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5378</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5378/1195685280000000</guid>
      <description>&lt;p&gt;
The current rss.php file is somewhat out of date and doesn't include a number of functions. For example, it doesn't support multiple categories. I'll attach a modified version that is distributed with &lt;a class="ext-link" href="http://wpmudev.org/project/wp-autoblog"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;wp-autoblog&lt;/a&gt; which is significantly better. I haven't tested it extensively, but it does provide a number of useful features which the current file doesn't. Plus, it's a single-file, drop-in replacement.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5377 (Defer term counts during multiple inserts) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Wed, 21 Nov 2007 16:59:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5377#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5377#comment:3/1195664369000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Wed, 21 Nov 2007 13:51:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:12/1195653113000000</guid>
      <description>&lt;p&gt;
Eduardo Tongson posted a helpful &lt;a class="ext-link" href="http://lists.grok.org.uk/pipermail/full-disclosure/2007-November/058611.html"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;message to full-disclosure&lt;/a&gt; pointing to two papers on cookie authentication. I strongly recommend reading these before implementing any changes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5377 (Defer term counts during multiple inserts) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 11:30:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5377#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5377#comment:2/1195644644000000</guid>
      <description>&lt;p&gt;
The second patch defers counting when importing a wxr file.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>import-deferred-counts-r6340.patch attached to Ticket #5377</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 11:29:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5377/import-deferred-counts-r6340.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5377/import-deferred-counts-r6340.patch/1195644591000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5377 (Defer term counts during multiple inserts) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 11:24:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5377#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5377#comment:1/1195644252000000</guid>
      <description>&lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>defer-taxonomy-counts-r6340.patch attached to Ticket #5377</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 11:23:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5377/defer-taxonomy-counts-r6340.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5377/defer-taxonomy-counts-r6340.patch/1195644203000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5377 (Defer term counts during multiple inserts) created</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 11:23:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5377</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5377/1195644185000000</guid>
      <description>&lt;p&gt;
wp_update_term_count() gets called any time a post is inserted with tags or categories.  It can cause several queries and cache invalidations per post insert, which adds up quickly during an import.
&lt;/p&gt;
&lt;p&gt;
The enclosed patch provides a wp_defer_term_counting() function that can be used to temporarily disable term counts when inserting multiple posts:
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp_defer_term_counting(true);
do_many_inserts();
wp_defer_term_counting(false);
&lt;/pre&gt;&lt;p&gt;
Any deferred counts will be automatically updated when wp_defer_term_counting(false) is called.  My testing shows this saves about 6500 queries on a 500 post import.
&lt;/p&gt;
&lt;p&gt;
The patch doesn't touch the import code yet, I wanted to post it for separate review first because it's probably useful elsewhere.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5376 (rules added via mod_rewrite_rules should be in IfModule section) created</title>
      
        <dc:creator>mastermind</dc:creator>

      <pubDate>Wed, 21 Nov 2007 10:25:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5376</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5376/1195640707000000</guid>
      <description>&lt;p&gt;
When mod_rewrite rules are added via the filter &lt;code&gt;mod_rewrite_rules&lt;/code&gt;, the rules should be inserted within the &lt;code&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;&amp;lt;/IfModule&amp;gt;&lt;/code&gt; tags. At the moment, this is not the case, instead they are appended outside this section.
&lt;/p&gt;
&lt;p&gt;
This shouldn't be a problem on most hosts. Still, it's ugly, and it should be easy to fix by putting the line &lt;code&gt;$rules .= "&amp;lt;/IfModule&amp;gt;\n";&lt;/code&gt; just before the return argument in the &lt;code&gt;function mod_rewrite_rules()&lt;/code&gt; in &lt;code&gt;wp-includes/rewrite.php&lt;/code&gt; (i.e. after the filters are applied).
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [88]: import test fixes &amp; improvements</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 05:35:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/88/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/88/tests/1195623308492246</guid>
      <description>&lt;p&gt;
import test fixes &amp;amp; improvements
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>tax-term-count-fix-r6340.patch attached to Ticket #5375</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 02:59:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5375/tax-term-count-fix-r6340.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5375/tax-term-count-fix-r6340.patch/1195613957000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5375 (wp_update_term_count cleans the cache for all taxonomies) created</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Wed, 21 Nov 2007 02:58:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5375</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5375/1195613911000000</guid>
      <description>&lt;p&gt;
wp_update_term_count() doesn't pass the taxonomy name on to clean_term_cache().  This causes clean_term_cache() to run some unnecessary queries and clear the cache for all taxonomies, not just the one with the updated count.
&lt;/p&gt;
&lt;p&gt;
The enclosed patch fixes this.  It reduces import queries by a few percent and might help speed up post saving slightly.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5374 ("Write page/post" &gt;  "code" textarea is to right) created</title>
      
        <dc:creator>cacycleworks</dc:creator>

      <pubDate>Wed, 21 Nov 2007 02:40:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5374</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5374/1195612840000000</guid>
      <description>&lt;p&gt;
This seems similar to Ticket #s &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/3684"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;3684&lt;/a&gt; and &lt;a class="ext-link" href="http://trac.wordpress.org/ticket/3540"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;3540&lt;/a&gt; however it's not exactly like them.
&lt;/p&gt;
&lt;p&gt;
On the "Write page/post" the "code" textarea is far to the right of the center working pane, so that a portion gets cut off. The box's left edge is perfectly aligned to the end of the "code" tool buttons. I thought it was a touch odd with the out-of-box install, but the problem made the page unusable when I applied a theme.
&lt;/p&gt;
&lt;p&gt;
I'm certain my methodology goes against the WP coding style/ ethos, as I found a quick CSS &amp;lt;DIV&amp;gt; hack that changed the behavior in wp-includes/general-template.php ...
&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;original source:&lt;/em&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp-includes/general-template.php
906   &amp;lt;/script&amp;gt;
907   &amp;lt;?php
908
909   $the_editor = apply_filters('the_editor', "&amp;lt;div&amp;gt;&amp;lt;textarea class='mceEditor' $rows cols='40' name='$id' tabindex='2' id='$id'&amp;gt;%s&amp;lt;/textarea&amp;gt;&amp;lt;/div&amp;gt;\n");
910   $the_editor_content = apply_filters('the_editor_content', $content);
911
912   printf($the_editor, $the_editor_content);
913
914   ?&amp;gt;
915   &amp;lt;script type="text/javascript"&amp;gt;
&lt;/pre&gt;&lt;p&gt;
&lt;em&gt;a workaround I used which fixed the symptom:&lt;/em&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;wp-includes/general-template.php
907   &amp;lt;div style="float:left; width:100%;"&amp;gt;
908   &amp;lt;?php
909
910   $the_editor = apply_filters('the_editor', "&amp;lt;textarea class='mceEditor' $rows cols='40' name='$id' tabindex='2' id='$id'&amp;gt;%s&amp;lt;/textarea&amp;gt;\n");
911   $the_editor_content = apply_filters('the_editor_content', $content);
912
913   printf($the_editor, $the_editor_content);
914
915   ?&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;p&gt;
Note that I did try to change &lt;code&gt; apply_filters('the_editor', "&amp;lt;div&amp;gt;&amp;lt;textarea &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
to: &lt;code&gt; apply_filters('the_editor', "&amp;lt;div&lt;/code&gt; &lt;strong&gt;&lt;code&gt;style=\"float:left; width:100%;\"&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;&amp;gt;&amp;lt;textarea &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
and: &lt;code&gt; apply_filters('the_editor', "&amp;lt;div&lt;/code&gt; &lt;strong&gt;&lt;code&gt;style='float:left; width:100%;'&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;&amp;gt;&amp;lt;textarea &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
however these caused errors as print_r complained about the numbers of arguments passed. I did initially try only &lt;code&gt;'style='float:left'&lt;/code&gt; and that worked, but then the text area was only about 100px wide, so I wanted to add the width, too.
&lt;/p&gt;
&lt;p&gt;
I figure someone familiar with the code and the CSS of this area may be able to incorporate the change or implement a more simple solution. :)
&lt;/p&gt;
&lt;p&gt;
version: wordpress-2.3.1.tar.gz
OS: kubuntu gutsy 7.10 amd64
browser: FF
served by LAMP install on same machine.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5369 (jQuery should be used to fade alerts) updated</title>
      
        <dc:creator>Viper007Bond</dc:creator>

      <pubDate>Wed, 21 Nov 2007 01:51:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5369#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5369#comment:2/1195609879000000</guid>
      <description>&lt;p&gt;
+1
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Wed, 21 Nov 2007 00:28:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:16/1195604891000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>5373.diff attached to Ticket #5373</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Wed, 21 Nov 2007 00:22:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5373/5373.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5373/5373.diff/1195604536000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Changeset [6342]: Debug backtrace for queries. Props tellyworth.  fixes #5218</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Wed, 21 Nov 2007 00:14:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/6342</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/6342/1195604098344274</guid>
      <description>&lt;p&gt;
Debug backtrace for queries. Props tellyworth.  fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5218" title="#5218: enhancement: SAVEQUERIES: log calling function name (closed: fixed)"&gt;#5218&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5218 (SAVEQUERIES: log calling function name) closed</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Wed, 21 Nov 2007 00:14:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5218#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5218#comment:7/1195604098000000</guid>
      <description>fixed: &lt;p&gt;
(In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/6342" title="Debug backtrace for queries. Props tellyworth.  fixes #5218"&gt;[6342]&lt;/a&gt;) Debug backtrace for queries. Props tellyworth.  fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5218" title="#5218: enhancement: SAVEQUERIES: log calling function name (closed: fixed)"&gt;#5218&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item>
   </channel>
</rss>