<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #40010 (Customize: Template for site icon control fails to check if full image ...) updated</title>
      
        <dc:creator>aussieguy123</dc:creator>

      <pubDate>Sun, 05 Mar 2017 23:33:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40010#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40010#comment:9/1488756815237954</guid>
      <description>&lt;p&gt;
A few of our non production servers (also based on vip quickstart) got the issue as well
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39647 (Make media upload "HTTP error." more user-helpful) updated</title>
      
        <dc:creator>zodiac1978</dc:creator>

      <pubDate>Sun, 05 Mar 2017 23:12:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39647#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39647#comment:7/1488755569605993</guid>
      <description>&lt;p&gt;
It seems that the JSON Response sometimes contains some useful information which could (should?) be used.
&lt;a class="ext-link" href="https://sebastian.expert/fix-wordpress-an-error-occurred-in-the-upload-please-try-again-later/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://sebastian.expert/fix-wordpress-an-error-occurred-in-the-upload-please-try-again-later/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
As a moderator in the German support forums this is often a problem for beginner. They just get this "HTTP error" and they do not know what to do.
&lt;/p&gt;
&lt;p&gt;
They don't know too, that specials characters (or combining characters) are not a good idea for file names. See: &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/24661" title="#24661: defect (bug): remove_accents is not removing combining accents (new)"&gt;#24661&lt;/a&gt;, &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/22363" title="#22363: defect (bug): Accents in attachment filenames should be sanitized (assigned)"&gt;#22363&lt;/a&gt;, &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/35951" title="#35951: defect (bug): remove_accents() doesn't escape Unicode NFD characters (assigned)"&gt;#35951&lt;/a&gt;, &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/30130" title="#30130: enhancement: Normalize characters with combining marks to precomposed characters (new)"&gt;#30130&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Milestone 4.7.3 completed</title>
      

      <pubDate>Sun, 05 Mar 2017 23:00:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/milestone/4.7.3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/milestone/4.7.3/1488754800000000</guid>
      <description></description>
      <category>milestone</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sun, 05 Mar 2017 22:11:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:127</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:127/1488751915553774</guid>
      <description>&lt;p&gt;
I think it might be useful if I explain why I, as a responsible plugin developer, felt compelled to prepare to possibly update the PHP requirements of my plugin. While of course there are some nice "candy" features that newer PHP versions have (and some that are more substantial), that actually hasn't really informed my decision. Nor has it been just an aversion to encouraging the use of outdated PHP. It is much more practical considerations, specifically relating to user experience, that have lead me here. I am sure that to some degree these same things inform other developers' decisions about this, so I think it is worth explaining in depth.
&lt;/p&gt;
&lt;p&gt;
In a word, it is the maintenance burden, but I realize that doesn't tell the whole story. After all, it is often pointed out that WordPress has been able to remain compatible with older PHP versions without too much of an undue burden. But the burden is significantly greater for plugin developers, and so let me explain why, and why I believe that WordPress needs to take this into account.
&lt;/p&gt;
&lt;p&gt;
To ensure continued compatibility with each supported PHP version, WordPress runs its test against each on Travis CI. I do the same thing with my plugin, but there is an added catch: I also need to ensure compatibility with each version of WordPress that my plugin supports. WordPress only needs to run against 7 different build environments (PHP 5.2-7.1), with PHP nightly also added to keep an eye on compatibility with the next version of PHP. But my plugin needs to run against each of those versions of PHP &lt;em&gt;in combination with&lt;/em&gt; each supported version of WordPress. Even when I limit support to the last two versions of WordPress, that comes out to 21 different build environments: 7 PHP versions x 3 WordPress versions (4.6, 4.7, and trunk).
&lt;/p&gt;
&lt;p&gt;
This isn't unbearable, and if that was the extent of the issues, then I would happily continue to support as many PHP versions as WordPress does. But that isn't where it ends. Because in addition we have to consider plugins that integrate with other plugins. When we throw this into the mix, even when only the latest version of the other plugin is supported, the number of builds is multiplied by 2: 21 x (stable + development versions of the other plugin) = 42.
&lt;/p&gt;
&lt;p&gt;
Even that isn't too unbearable, but here is where the real kicker comes in. My model is developing extensions for my plugin that integrate it with other plugins. So now we are talking about testing the extension against each version of the plugin that it supports, each version of the other plugin that it supports, on each version of WordPress that it supports, on each version of PHP that it supports. Once again, even if we limit the extension to only supporting the latest version of the plugin that we extend, our builds multiple by 2: 7 PHP x 3 WordPress x 2 other plugin x (stable + development of extended plugin) = 84. That is approaching the unreasonable and the unmaintainable, and adding one more PHP version to the mix adds 12 more build environments to test against.
&lt;/p&gt;
&lt;p&gt;
Ignoring for a moment the ability of Travis to handle this number (which it can, but it starts to feel like abuse to me at a certain point), the fact is that maintaining compatibility also requires actual fixing issues brought up by build failures that relate to specific combinations. At a certain point it just becomes too much of a burden for a plugin developer to try to handle.
&lt;/p&gt;
&lt;p&gt;
Which is the reason that I decided I had to prepare to start dropping PHP versions if WordPress itself doesn't soon (which would seem almost miraculous).
&lt;/p&gt;
&lt;p&gt;
Not every plugin developer is in this exact situation of course, but the general fact of maintenance burden, as well as other reasons that are often brought up, mean that more and more plugin developers feel compelled to diverge from the PHP requirements of WordPress.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;As a result, more and more users are going to have to encounter the PHP version issue anyway, regardless of what core does.&lt;/strong&gt; But unless we take the initiative, it is not going to be a positive, educational experience that we have carefully tailored for them to make the whole thing as smooth as possible. Instead it is going to be a hodgepodge of different experiences involving different plugins. Some of those experiences may be pretty good (though if I do say, I think we can do better if we try), and some of them... won't be. Like:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The plugin developer doesn't respond to the users' support request.
&lt;/li&gt;&lt;li&gt;The plugin developer hasn't communicated this very well to start with, so most users are just confused, and FUD sets in.
&lt;/li&gt;&lt;li&gt;The plugin developer decides to up the requirement for an existing plugin, and when users update it breaks their site.
&lt;/li&gt;&lt;li&gt;Or, even if it doesn't break their site, the plugin just stops working. (Instead the update should be prevented, as BuddyPress did, and &lt;a class="ext-link" href="https://github.com/WordPoints/wordpoints/issues/623"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;I've done in my plugin&lt;/a&gt;. As a side note I hope that helps set the record straight about whether I care about the users. :-)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
At the very least, even if the approach recommended by @dd32 is followed and we continue to promote the plugins-first approach here, we should try to unify the experience of users so that this experience gives them as little frustration as possible. The only way to really do that in an ideal fashion though, IMO, is if core actually steps out and takes the lead here, so that plugin developers don't have to. But maybe there is room for discussion there.
&lt;/p&gt;
&lt;p&gt;
The main point is, that &lt;strong&gt;users are going to encounter the PHP version issue through WordPress, and it is up to core/the core community to ensure that encounter is positive and educational&lt;/strong&gt;.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
One other thought that I just had (and yes I know, I talk too much sometimes :-):
&lt;/p&gt;
&lt;p&gt;
There is going to come a day when WordPress is going to have no choice but to drop older versions, if it wants to continue supporting the latest versions. It may be far into the future, but at some point PHP 8 is going to come out, for example, and code compatible with PHP 8 is not going to be compatible with PHP 5. (I don't recall the specific example that brought this to mind, but it has to do with things deprecated in PHP 7, IIRC, possibly other issues too.) So, if for no other reason, WordPress is going to have to come up with a strategy here that will bring up the minimum version to 7.0 by the time PHP 8 comes out. (Could be decades, could not be, I don't really know if there is any way to know at this point.) Currently, most people who are updating appear to be updating to PHP 5.6, so it is possible in theory that this will be an issue. Let's go ahead and begin testing out strategies now, before it ever gets to the place where it becomes a necessity. (Possibly even something presently unforeseen could cause it to become a necessity, so it is best to be prepared.) Hopefully though, by that time hosts will have their act together on this. But yeah, I'm not going to hold my breath.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:45:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:20/1488750330490948</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:12" title="Comment 12"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"It just seems like a shift in WordPress's core purpose at present, if one that is in the general sentiment of its mission. On the other hand, perhaps it is not much different that the trackback support that is currently languishing in core."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Maybe it would be helpful to explicitly define "WordPress's core purpose at present?"  You and I &lt;em&gt;(as well as many others)&lt;/em&gt; may each have a different view of what that is and without a shared idea of purpose we'll just talk past each other.
&lt;/p&gt;
&lt;p&gt;
To me WordPress' core purpose is to &lt;em&gt;"Empower end users to publish the content they author."&lt;/em&gt; And as comments I write on other sites very much fit into the definition of &lt;em&gt;"content I author"&lt;/em&gt; then capturing them and allowing me to control one location where they are published seems perfectly in line with that core purpose.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That definition seems too broad, at least in terms of what users expect from core. I don't think that people see WordPress as a tool for managing comments that they post on other sites (though I realize annotations are kind of broader than that, I guess). Sure, many people might want to use it that way, but right now (perhaps partly due to the novelty of the annotation technology) I find there to be a gulf between that and what WordPress does now. Perhaps that is just the psychology of how I personally perceive it, but I see managing my blog and managing my comments &lt;em&gt;on other people's sites&lt;/em&gt; as being two different things probably better suited to different tools. I'm not saying that is necessarily true, but I suspect that unless and until web annotations really become popular, many average users would perceive this as wasting time to make WordPress a tool for something that 80% of users aren't going to use.
&lt;/p&gt;
&lt;p&gt;
So I'm not really saying that WordPress couldn't do this or that it would contradict its mission. I'm just saying that, at least personally, I don't have the expectation that my blogging software (or any of the millions of other things WordPress is used for/perceived as) will now handle storing my annotations for me. I &lt;em&gt;might&lt;/em&gt; want it to do that, and I &lt;em&gt;might not&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
And as I think about it, I doubt that I would want to enable that feature on any of the half-dozen sites that I currently run (well, maybe my personal blog), because it would just be something totally distinct from what I am using WordPress to do.
&lt;/p&gt;
&lt;p&gt;
That said, when/if annotations become popular and I begin using them, I would probably find it nice to have control over my content, and a familiar interface like WordPress (and also with the benefit of its extendable code) would be something I'd definitely consider using as my annotation storage/management tool. But I just don't think that that is going to be something that the &lt;em&gt;average existing WordPress install&lt;/em&gt; is going to want. It is in this sense that I see it as being kind of outside the scope of what people see as WordPress core's purpose, what they expect it to do "out of the box".
&lt;/p&gt;
&lt;p&gt;
This may not mean that making WordPress into an annotation server has to be confined to plugin territory, but I feel at this point that it is kind of like WordPress would then be two different things: most people would be using it to set up a traditional website, and other people would be using it to set up an annotation server, possibly more-or-less linked to a traditional website. Many people might use it for both. I just doubt that many people will use it for both in a single install, which is kind of what gives me pause.
&lt;/p&gt;
&lt;p&gt;
So this is why it seems to me like using your WordPress website as an annotation server ought to be plugin territory. Unless we are just gambling on the prediction that most people are going to want to turn their websites into annotation servers, after annotations gain traction. It's probably too early to tell, but I don't really see that happening, &lt;em&gt;at least in terms of the broad range of website types that many people build with WordPress.&lt;/em&gt; What percentage of WordPress sites are really personal blogs? (I'm assuming that most other types of websites, like storefronts, etc., aren't going to want to use this feature.) Does this pass the 80% rule, or does it cause people to see WordPress as mainly catering to blogging by sticking more features into core that mainly appeal to that use-case for it?
&lt;/p&gt;
&lt;p&gt;
What are you and others envisioning as to how this would fit into the way that people are currently using WordPress? Why will this be a good feature for them? Why does everybody need it? Or is this more of a desire to get it into core mainly because that way it will be done right and maintained, and carry WordPress's authority, whereas none of that would necessarily be the case with a plugin?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39888 (Right after delete author - PHP notices on '%s is currently editing') updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:29:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39888#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39888#comment:9/1488749362962305</guid>
      <description>&lt;p&gt;
@1naveengiri There was no commit yet, which means the ticket is not fixed yet and your patch will be considered for fixing it. So don't worry.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18146 (Add user-level timezone setting) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:20:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18146#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18146#comment:35/1488748857334151</guid>
      <description>&lt;p&gt;
@ying-sun Right now I would only use this patch on a development site, definitely not production. However, I'm still interested in moving this forward to a more stable state. I just haven't found the time yet to further pursue it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20491 (Introduce some JavaScript i18n functions) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:16:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20491#comment:62</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20491#comment:62/1488748607096670</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-i18n by swissspidy. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-i18n/p1488748604995212"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38181 (Add oEmbed support for Amazon Kindle Instant Previews) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:11:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38181#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38181#comment:31/1488748290613244</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/38181/38181.5.diff" title="Attachment '38181.5.diff' in Ticket #38181"&gt;38181.5.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/38181/38181.5.diff" title="Download"&gt;​&lt;/a&gt; updates the patch against trunk. As some tests from &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/32360" title="#32360: enhancement: Add oEmbed provider unit tests (closed: maybelater)"&gt;#32360&lt;/a&gt; have been removed, I left out the relevant tests here as well. Also, it seems like Amazon now returns embeds with different URLs, so I updated the assertions in &lt;code&gt;test_amazon_kindle_preview_non_us_embed()&lt;/code&gt; accordingly.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>PeterRKnight</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:10:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:19/1488748223186605</guid>
      <description>&lt;p&gt;
I think this idea of this being part of core has a lot going for it. A WordPress site should be able to be a digital home for persons and even businesses. Comment activity involves content authorship which can be as valuable and noteworthy as any post. Comments in WordPress still are a 2nd class citizen. Today most comments are lost to unappealing systems (such as Discus), closed gardens (Facebook) and lost in ephemeral streams (such as Twitter), or chained to platforms that are bound to fold (Medium being next in line after projects like posterous, friendfeed, Wave etc) and in each of these examples the comment author has little to no control. It has also always bothered me that it's hard to look up a site authors comment activity on other sites.
&lt;/p&gt;
&lt;p&gt;
On another front, if WordPress gets ahead of the curve on annotation features, it will be a boon for professionals who produce content in teams as well as opening up new ways of inviting reader contributions and tapping into crowdsourced improvements to content.
&lt;/p&gt;
&lt;p&gt;
Compared to other notable platforms, only WordPress really takes the mantle of acting as a worthy digital home. Attention to annotations will do much to amplify that underlying strength.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>38181.5.diff attached to Ticket #38181</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 05 Mar 2017 21:08:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/38181/38181.5.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/38181/38181.5.diff/1488748131989213</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #39854 (REST API: Add gmt_offset to base /wp-json response) updated</title>
      
        <dc:creator>jnylen0</dc:creator>

      <pubDate>Sun, 05 Mar 2017 19:02:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39854#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39854#comment:15/1488740546625309</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Noted, and makes sense.  I'll get this committed as soon as we're done with shipping 4.7.3.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20899 (is_home() should be able to be true when is_feed()) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Sun, 05 Mar 2017 18:36:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20899#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20899#comment:26/1488738991533260</guid>
      <description>&lt;p&gt;
Thanks @stevenkword!
&lt;/p&gt;
&lt;p&gt;
The patch works as expected and makes sense from a logical point of view. Especially when used in combination with &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/30210" title="#30210: defect (bug): WordPress generates unnecessary RSS feeds (reopened)"&gt;#30210&lt;/a&gt;. Because of backward compatibility, these query tags are a bit of an outlier and we'd need to make sure they're documented accordingly. No objections from me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40038 (Padding load_template's require with a do_action on each end) created</title>
      
        <dc:creator>qwertyzw</dc:creator>

      <pubDate>Sun, 05 Mar 2017 17:08:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40038</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40038/1488733733278414</guid>
      <description>&lt;p&gt;
Pad the requires in load_template in wp-includes\template.php with a do_action on each end so it looks like this:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;load_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$_template_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$require_once&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$wp_did_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$wp_query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$wp_rewrite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$wpdb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$wp_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$wp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$wp_query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;query_vars&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$wp_query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;query_vars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EXTR_SKIP&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;esc_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;do_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'load_template_before'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_template_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new line
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$require_once&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;require_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$_template_file&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$_template_file&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;do_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'load_template_after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_template_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new line
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
this will allow plugin and theme developers to pad each template with html.
&lt;/p&gt;
&lt;p&gt;
At the very least for debugging purposes you'd be able to do something like this
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'load_template_before'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'debug_pad_before'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'load_template_after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'debug_pad_after'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;debug_pad_before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$template&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;!-- template begin '&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$template&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' --&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;debug_pad_after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$template&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;!-- template end '&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$template&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' --&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
I'm specifically targeting this function because it's used not only by wordpress but by buddypress as well, and I anticipate other extensions to fall back to this same function. Buddypress uses its own bp_locate_template but uses wordpress' load_template to load them.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #10457 (Parse shortcodes in text widgets by default) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 05 Mar 2017 16:56:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10457#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10457#comment:56/1488732974777766</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-customize by grapplerulrich. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-customize/p1488732972705898"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>39909.4.patch attached to Ticket #39909</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sun, 05 Mar 2017 16:34:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39909/39909.4.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39909/39909.4.patch/1488731688951582</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sun, 05 Mar 2017 16:34:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:11/1488731661622186</guid>
      <description>&lt;p&gt;
I agree about the scope changes part. If necessary, another ticket can be filed to take care of that.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sun, 05 Mar 2017 16:11:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:10/1488730282718616</guid>
      <description>&lt;p&gt;
The &lt;code&gt;name&lt;/code&gt; property is documented as the "Name for the widget displayed on the configuration page." I took it to be only a coincidence that it was the same string as the default title.
&lt;/p&gt;
&lt;p&gt;
Perhaps the duplication speaks to the need for something like a &lt;code&gt;default_title&lt;/code&gt; property or &lt;code&gt;$widget_options&lt;/code&gt; key? But, if so, I don't know whether that would be in-scope for this ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40032 (Automatic redirects with _wp_old_slug won't mantain GET parameters if ...) updated</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Sun, 05 Mar 2017 16:09:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40032#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40032#comment:2/1488730158608736</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>40032.patch attached to Ticket #40032</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Sun, 05 Mar 2017 16:08:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40032/40032.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40032/40032.patch/1488730133378116</guid>
      <description>&lt;p&gt;
Preserve &lt;code&gt;$_GET&lt;/code&gt; params on &lt;code&gt;_wp_old_slug&lt;/code&gt; redirects
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #37188 (Add New Media button does not give aria feedback) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 05 Mar 2017 15:55:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37188#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37188#comment:19/1488729322735375</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/37188/37188.5.diff" title="Attachment '37188.5.diff' in Ticket #37188"&gt;37188.5.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/37188/37188.5.diff" title="Download"&gt;​&lt;/a&gt; refreshes the patch after recent changes, also adds some inline comments.
&lt;/p&gt;
&lt;p&gt;
Screenshot before the patch: errors and uploader displayed after the toolbar:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/LlpVv_aZWC.png"&gt;&lt;img src="https://cldup.com/LlpVv_aZWC.png" alt="https://cldup.com/LlpVv_aZWC.png" crossorigin="anonymous" title="https://cldup.com/LlpVv_aZWC.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Screenshot with the patch applied: errors and uploader displayed before the toolbar:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/apyRPtlqC9.png"&gt;&lt;img src="https://cldup.com/apyRPtlqC9.png" alt="https://cldup.com/apyRPtlqC9.png" crossorigin="anonymous" title="https://cldup.com/apyRPtlqC9.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>37188.5.diff attached to Ticket #37188</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 05 Mar 2017 15:52:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/37188/37188.5.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/37188/37188.5.diff/1488729170776944</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #13239 (Filter locate_template template_names variable) updated</title>
      
        <dc:creator>Rhand</dc:creator>

      <pubDate>Sun, 05 Mar 2017 15:47:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/13239#comment:114</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/13239#comment:114/1488728869218830</guid>
      <description>&lt;p&gt;
Yeah, would be really great to have this out of the way. Plus one by moi.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40036 (Re-save Network Settings ruin starter content) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 05 Mar 2017 15:45:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40036#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40036#comment:1/1488728745698036</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi @berfayvel, welcome to WordPress Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for the report, the First Page content is indeed blank in Network Settings.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40037 (Add ability to ask wpdb for full db server info) created</title>
      
        <dc:creator>clarinetlord</dc:creator>

      <pubDate>Sun, 05 Mar 2017 15:39:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40037</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40037/1488728368751439</guid>
      <description>&lt;p&gt;
Currently, calling &lt;code&gt;wpdb::db_version()&lt;/code&gt; only returns the version number of the db server. It would be useful to have a separate method called &lt;code&gt;db_server_info()&lt;/code&gt; that returned the full string with vendor and version. That way one wouldn't have to use the raw sql function &lt;code&gt;mysqli_get_server_info()&lt;/code&gt; outside of wpdb and allows &lt;code&gt;wpdb&lt;/code&gt; to properly abstract this functionality.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sun, 05 Mar 2017 14:01:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:9/1488722476238873</guid>
      <description>&lt;p&gt;
@westonruter can quickly fix 1 and 3, but I'm wondering about 2. Shouldn't we change the &lt;code&gt;widget&lt;/code&gt; method to use &lt;code&gt;$this-&amp;gt;name&lt;/code&gt; instead to keep consistency? In this case, it looks like we're repeating the same string 3 times (&lt;code&gt;__construct&lt;/code&gt;, &lt;code&gt;widget&lt;/code&gt;, &lt;code&gt;form&lt;/code&gt;) which feels kind of weird.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40036 (Re-save Network Settings ruin starter content) created</title>
      
        <dc:creator>berfayvel</dc:creator>

      <pubDate>Sun, 05 Mar 2017 11:32:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40036</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40036/1488713521597997</guid>
      <description>&lt;p&gt;
On fresh multisite install, I re-save data in wp-admin/network/settings.php. Then I create a sub-site.
&lt;/p&gt;
&lt;p&gt;
When try to edit the sub-site's starter content Sample Page, the content is just blank (no content, only title).
&lt;/p&gt;
&lt;p&gt;
Then I create more sub-sites. But it still same (Sample Page content is blank).
&lt;/p&gt;
&lt;p&gt;
No error generated.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>registered.png attached to Ticket #40035</title>
      
        <dc:creator>nnikolov</dc:creator>

      <pubDate>Sun, 05 Mar 2017 08:57:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40035/registered.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40035/registered.png/1488704241594496</guid>
      <description>&lt;p&gt;
Site registered date uses different time zone than last updated
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40035 (Site registered date uses different time zone from last updated) created</title>
      
        <dc:creator>nnikolov</dc:creator>

      <pubDate>Sun, 05 Mar 2017 08:56:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40035</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40035/1488704175176281</guid>
      <description>&lt;p&gt;
&lt;strong&gt;The problem&lt;/strong&gt;
In a multisite, when a new site is created, the registered date and time is stored using the time zone setting for the main network site, but the last updated date and time uses the GMT time. This inconsistency is confusing and also can lead to last updated time that is before the registered time, which is impossible.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;How to reproduce?&lt;/strong&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Using WordPress 4.7.2 and a multisite installation log-in as Super Admin.
&lt;/li&gt;&lt;li&gt;Go to the General settings of the main network site and change your time zone to UTC+3 (or anything different from UTC).
&lt;/li&gt;&lt;li&gt;Go to Network admin -&amp;gt; Sites -&amp;gt; Add New, and create a new site.
&lt;/li&gt;&lt;li&gt;Click Edit Site after it is created and see that the registered date and time is different from the last updated date and time (they should be the same).
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
&lt;strong&gt;How to fix?&lt;/strong&gt;
The problem is on line 1330 in the file /wp-includes/ms-functions.php.
Currently the line is like this:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$result = $wpdb-&amp;gt;insert( $wpdb-&amp;gt;blogs, array('site_id' =&amp;gt; $site_id, 'domain' =&amp;gt; $domain, 'path' =&amp;gt; $path, 'registered' =&amp;gt; current_time('mysql')) );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Needs to be like this:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;$result = $wpdb-&amp;gt;insert( $wpdb-&amp;gt;blogs, array('site_id' =&amp;gt; $site_id, 'domain' =&amp;gt; $domain, 'path' =&amp;gt; $path, 'registered' =&amp;gt; current_time('mysql', true)) );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 05 Mar 2017 07:16:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:8/1488698170168294</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@bor0 a couple points about &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39909/39909.3.patch" title="Attachment '39909.3.patch' in Ticket #39909"&gt;39909.3.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39909/39909.3.patch" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;esc_attr_e()&lt;/code&gt; function, like the other translation functions, should not be passed a variable but rather a string. If you want to pass a variable, like &lt;code&gt;$this-&amp;gt;name&lt;/code&gt;, you should use &lt;code&gt;echo esc_attr( $this-&amp;gt;name )&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;I'm not sure that it is right to print &lt;code&gt;$this-&amp;gt;name&lt;/code&gt;. I believe it should copy the string literal from the widget's &lt;code&gt;widget&lt;/code&gt; method as @dlh showed in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch" title="Attachment '39909.2.patch' in Ticket #39909"&gt;39909.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39909/39909.2.patch" title="Download"&gt;​&lt;/a&gt;.
&lt;/li&gt;&lt;li&gt;The change to &lt;code&gt;class-wp-widget-tag-cloud.php&lt;/code&gt; is using a printing function in string concatenation, so that won't have the desired result.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40019 (wp_get_custom_css_post returns Post that are not Custom CSS CPTs) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sun, 05 Mar 2017 07:10:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40019#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40019#comment:1/1488697817365723</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@starepod thanks for the report. The only way I can see this happening is if you have a plugin that is somehow modifying the query results obtained in &lt;code&gt;wp_get_custom_css_post()&lt;/code&gt;. Specifically, if a plugin is modifying the query vars in &lt;code&gt;pre_get_posts&lt;/code&gt; or filtering the posts queried via something like &lt;code&gt;posts_results&lt;/code&gt;, then this could result in something other than the &lt;code&gt;custom_css&lt;/code&gt; post being returned. Do you have any plugins activated that could be doing this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 05 Mar 2017 04:38:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:18/1488688705459016</guid>
      <description>&lt;p&gt;
I know. Neither do I. On either matter. I just have learned from my own attempts that in order to get a big project, you need a lot of support. Smaller projects not as much.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35435 (Support Webmentions) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 05 Mar 2017 04:20:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35435#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35435#comment:4/1488687649834156</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 05 Mar 2017 04:06:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:17/1488686799221414</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:16" title="Comment 16"&gt;dshanske&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Well, trackbacks begot pingbacks which begot webmentions yes.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks.  It does sound like I expected.
&lt;/p&gt;
&lt;p&gt;
I personally don't feel a burning need for them for the use-cases I would like to see enabled, but I also personally am more than happy to see them incorporated into WP core if they can benefit others. Not that I have any control over that one way or the other, you understand. :-)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 05 Mar 2017 03:57:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:16/1488686253263089</guid>
      <description>&lt;p&gt;
Well, trackbacks begot pingbacks which begot webmentions yes. Trackbacks were not verified(security issue) and they set what they expected the remote site to display. Neither trackbacks or pingbacks have been used effectively in WordPress, because the displaying of both is less than useful.
&lt;/p&gt;
&lt;p&gt;
Webmentions are a way of notifying one site that you've linked to it, like its predecessors, but let's take Annotations. You could use webmention as a medium to tell another site that it has been annotated. The receiving site(the one being annotated), would then retrieve the data, even if in the JSON format outlined, parse it, store it, and display it.
&lt;/p&gt;
&lt;p&gt;
It is a core piece of the Indieweb, whose website you cited above, except that group(of which I am a part), uses microformats as opposed to JSON or such. So, basically HTML is our API.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35243 (Extending the text widget to also allow visual mode) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 05 Mar 2017 02:26:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35243#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35243#comment:37/1488680771736210</guid>
      <description>&lt;p&gt;
My understanding of widgets is that they're intended to be distinct blocks of (often dynamic) content. They're the type of thing that a post or a sidebar/widget area may be made up of. A "universal" widget would behave similarly to an entire area, confusing the block concept by requiring some things to be nested blocks within a block that's essentially nested within an area of the same block unnecessarily, and where you can't continue nesting and organizing any type of block.
&lt;/p&gt;
&lt;p&gt;
With a new block based editor, I would expect widget areas to behave the same way that content areas do - as an area where you can add text or other types of blocks. Introducing a distinct widget block that has this functionality, particularly in the form of an editor interface that we're moving away from, doesn't make sense.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 05 Mar 2017 02:08:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:15/1488679714148319</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:14" title="Comment 14"&gt;dshanske&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I agree working toward annotations in WordPress is an admirable goal and support it, especially since too many active members of the community seem to be focusing on business use cases."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
+1
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"To the more practical aspects of it, I am approaching it from the perspective of where annotations are stored and where the subject of annotations are stored because I think it is a prerequisite to storing the relationship between the two. I think those two actions should be taken with the third in mind."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We are in agreement along those lines, at least in the abstract.
&lt;/p&gt;
&lt;p&gt;
In specific it would see to me that annotations for comments made on another site could easily be stored in &lt;code&gt;wp_comments&lt;/code&gt;, and the subject of the annotation would be stored by wherever it is published.  To be explicit though, the annotation includes links to both the annotation and its subject so storing that info in a Web Annotation JSON format in &lt;code&gt;wp_comments&lt;/code&gt; would seem appropriate to me.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"You want persona, which is a form of identity, to be the post type so it can have comments attached to it."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
To be more precise I proposed &lt;code&gt;persona&lt;/code&gt; as one way this use-case could work seamlessly with the existing data schema and existing UI, with only minor tweaks.  There may be other equally appropriate solutions though.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"But there is also the user table, which is where WordPress has designated identity is to be stored."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So over the past several years almost every WordPress site we have worked on has needed to present information about people on the front-end so I have dealt a lot with people-as-content vs. people-as-users.  Our conclusion has been that the User system in WordPress is optimized for authentication but not for presentation, and that Post Types are best used when there is a need for presentation.
&lt;/p&gt;
&lt;p&gt;
Thus &lt;em&gt;"Personas"&lt;/em&gt; as proposed would be related to presentation and not as authentication so they seem more appropriate as Post Types than as Users.  And Users do not handle different email addresses well -- which is more closely aligned with the concept of a persona; for that you'd have to create a different user for each email address and then loose the natural association with a single logged in User.
&lt;/p&gt;
&lt;p&gt;
Still, this implementation is the least important aspect of this proposal.  And I only argue for &lt;code&gt;wp_comments&lt;/code&gt; because I think that would reduce the scope of seeing this come to life vs. using &lt;code&gt;wp_posts&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
As an aside, I think the choice of post type for Menu Items was one of the most regrettable legacy decisions ever made for WordPress. But I have yet to work with Changesets so really can't speak to the wisdom of using post types for that. FWIW.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'd like to see what others have to say on the matter as well."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm the one who is usually advocating for a different W3C standard, Webmentions"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am only vaguely familiar with Webmentions but the reading I just did tells me they are effectively more modern trackbacks?  If no, what am I missing?
&lt;/p&gt;
&lt;p&gt;
If yes then I am not seeing the same value in those as I see in Web Annotations.  That said, Webmentions seem orthogonal and complementary to Web Annotations so maybe this proposal, if accepted could incorporate both.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sun, 05 Mar 2017 01:12:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:14/1488676356340785</guid>
      <description>&lt;p&gt;
I had looked at the specification before I commented. I certainly could stand to read it a few more times as there is a lot there to discuss. I agree working toward annotations in WordPress is an admirable goal and support it, especially since too many active members of the community seem to be focusing on business use cases. We may be at odds as to ways to go about it, which is fine.
&lt;/p&gt;
&lt;p&gt;
To the more practical aspects of it, I am approaching it from the perspective of where annotations are stored and where the subject of annotations are stored because I think it is a prerequisite to storing the relationship between the two. I think those two actions should be taken with the third in mind.
&lt;/p&gt;
&lt;p&gt;
You want persona, which is a form of identity, to be the post type so it can have comments attached to it. There is nothing inherently wrong with that. Menus are post types. Changesets are now post types. The post table is used to store different types of data. But there is also the user table, which is where WordPress has designated identity is to be stored.
&lt;/p&gt;
&lt;p&gt;
We can debate this back and forth, and to your point. The hope was, by your initial statement, to encourage discussion and consensus. I'd like to see what others have to say on the matter as well. My ideas are often on the outside of things to begin with. I'm the one who is usually advocating for a different W3C standard, Webmentions(which, by the way, is also an option for notifying another site that there has been an annotation)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 05 Mar 2017 01:07:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:13/1488676032358784</guid>
      <description>&lt;p&gt;
A few more links that are related to this ticket in ethos:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://indieweb.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://indieweb.org/&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://en.wikipedia.org/wiki/IndieWeb"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://en.wikipedia.org/wiki/IndieWeb&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://indiewebify.me/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://indiewebify.me/&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sun, 05 Mar 2017 01:01:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:12/1488675701625638</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:11" title="Comment 11"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"By "class of content", I was thinking more in terms of what that content means to the user, how it would be presented, etc."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Understood. Web Annotations encompass a lot more than just comments.  But in order to keep it within the scope of what already exists in WordPress I kept my proposal limited to just comments, which core could easily do, and then let the other types of Web annotations be handled by plugin authors.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"It just seems like a shift in WordPress's core purpose at present, if one that is in the general sentiment of its mission. On the other hand, perhaps it is not much different that the trackback support that is currently languishing in core."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Maybe it would be helpful to explicitly define "WordPress's core purpose at present?"  You and I &lt;em&gt;(as well as many others)&lt;/em&gt; may each have a different view of what that is and without a shared idea of purpose we'll just talk past each other.
&lt;/p&gt;
&lt;p&gt;
To me WordPress' core purpose is to &lt;em&gt;"Empower end users to publish the content they author."&lt;/em&gt; And as comments I write on other sites very much fit into the definition of &lt;em&gt;"content I author"&lt;/em&gt; then capturing them and allowing me to control one location where they are published seems perfectly in line with that core purpose.
&lt;/p&gt;
&lt;p&gt;
So rather than extending WordPress' core purpose, I feel like this proposal fills in the gaps that has stopped WordPress from achieving its core purpose as well as it can.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"By this I meant letting the user edit their annotations, delete them, etc."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Okay, then yes.  But it seems to me that WordPress already excels at comment editing so I don't see much of any new functionality that would be needed for this.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"As long as use of this selector method is minimized/restricted, my fears about copyright issues are allayed, and I am happy with the concept of annotations."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Cool.
&lt;/p&gt;
&lt;p&gt;
My primary motivation for this ticket was to see WordPress lead the industry in how Web Annotations are  used rather than wait until others impose their world view upon us in ways that may not favor WordPress. Whatever works to allow us to &lt;em&gt;"dip our toes into the water"&lt;/em&gt; here and get started with Web Annotations in core would cause me to feel this ticket was a success.  I don't feel the need for this ticket to be adopted exactly as I described, hence my describing it as a &lt;em&gt;"strawman proposal."&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sat, 04 Mar 2017 23:01:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:11/1488668471534484</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:6" title="Comment 6"&gt;MikeSchinkel&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:2" title="Comment 2"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm rather new to annotations"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I only learned about them ~12 hours before you.  Before posting this ticket I read &lt;a class="ext-link" href="https://www.w3.org/blog/news/archives/6156"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the three recommendations&lt;/a&gt; in full . I'd highly recommend if you or anyone else is interested in this ticket -- pro or con -- to read at least the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;data model spec&lt;/a&gt; so you can come fully up to speed on what annotations are and what they are not.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks. I haven't read through the whole thing, but just glancing at the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/#selectors"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;section on selectors&lt;/a&gt; was informative. (See below.)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"But this sounds like basically adding support for an entirely separate class of content than WordPress is currently built for, mostly under-the-hood."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
All we need is &lt;strong&gt;already&lt;/strong&gt; in WordPress core as an &lt;em&gt;existing&lt;/em&gt; class of content. We already have the tables needed in the standard WordPress database schema: &lt;code&gt;wp_comments&lt;/code&gt; and &lt;code&gt;wp_commentmeta&lt;/code&gt;.  Had this concept required new tables or even table modification it would have been a non-starter because of WordPress.com and so I would never have proposed it.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I understand that it can fit into the same generic under-the-hook comment types. By "class of content", I was thinking more in terms of what that content means to the user, how it would be presented, etc. More like, the purpose and function of the content. Obviously, WordPress can handle most any class of content, but usually that is through plugins, not part of core. It just seems like a shift in WordPress's core purpose at present, if one that is in the general sentiment of its mission. On the other hand, perhaps it is not much different that the trackback support that is currently languishing in core.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Are we even talking about actual annotation management being provided through WordPress, or essentially just storage?"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am not sure what you specifically mean by &lt;em&gt;"actual annotation management"&lt;/em&gt; so I cannot yet answer.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
By this I meant letting the user edit their annotations, delete them, etc.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Honestly, although I like the idea of annotations, I'm not comfortable with the idea of decentralization if it completely ignores the wishes and copyrights of the publisher of the annotated content."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think I chose poor wording here, by "publisher" I was actually meaning "author". See below.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm not sure it would be entirely unjustified to say that this ticket is trying to turn WordPress into a glorified content-scraping and republishing engine."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
My concern was that specifying the part of the content that an annotation relates to would be done primarily through saving a copy of that part of the content. After reading the selector spec, I realize that there are actually many other options for specifying this, and there's a &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/#text-quote-selector"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;warning there against this particular "selector"&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;Note&lt;/strong&gt;
If the content is under copyright or has other rights asserted on its use, then this method of selecting text is potentially dangerous. A user might select the entire text of the document to annotate, which would not be desirable to copy into the Annotation and share. For static texts with access and/or distribution restrictions, the use of the Text Position Selector is perhaps more appropriate.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is what I was concerned about, and what I was referring to by "content-scraping" (which is essentially what this selector method can work out to). As long as use of this selector method is minimized/restricted, my fears about copyright issues are allayed, and I am happy with the concept of annotations. (Well, maybe not &lt;em&gt;entirely&lt;/em&gt; happy, I still question the fundamental premise of some people's arguments in favor of some uses of annotations, but that is a rabbit hole that this ticket probably doesn't need to go down.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:17:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:10/1488665876497714</guid>
      <description>&lt;p&gt;
Here is the video that @chrisaldrich referenced as well as a more specific one about Hypothes.is and it would be really helpful for people who have not been immersed in the Web Annotations discussion:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.youtube.com/watch?v=QCkm0lL-6lc"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.youtube.com/watch?v=QCkm0lL-6lc&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.youtube.com/watch?v=deOlFn6q01Y"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.youtube.com/watch?v=deOlFn6q01Y&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40034 (Add License and License URI as valid style.css headers to WP_Theme) updated</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:17:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40034#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40034#comment:2/1488665872181659</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40034 (Add License and License URI as valid style.css headers to WP_Theme) updated</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:17:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40034#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40034#comment:1/1488665851676840</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:09:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:9/1488665368777302</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:5" title="Comment 5"&gt;chrisaldrich&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Mostly to provide some additional resources to the conversation I'll add the following:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Excellent! Thanks for commenting and providing the additional background.
&lt;/p&gt;
&lt;p&gt;
Also, may I burden you to explain to @jdgrimes how you use &lt;a class="ext-link" href="http://boffosocko.com/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;your own website&lt;/a&gt; to first publish all your comments, to allay concerns regarding copyright expressed by @jdgrimes?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 22:05:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:8/1488665151693904</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:4" title="Comment 4"&gt;dshanske&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"If someone wants to annotate a URL on another site, that should be a custom post type. The post type would be associated with their user...so there is authorship of the annotation. It doesn't need to have anything to do with the comment table."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I would instead argue &lt;em&gt;"It doesn't need to have anything to do with the posts table"&lt;/em&gt; because posts are conceptually source documents and comments are conceptually annotations to a source document.  So &lt;code&gt;wp_comments&lt;/code&gt; is a better fit than &lt;code&gt;wp_posts&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
And as comments have the &lt;code&gt;user_id&lt;/code&gt; field, authorship is addressed.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"the annotation server merely serves to translate the custom post type posts into the format that other systems can understand...the Annotation spec."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The prior notwithstanding; yes, this is the thinking of the proposal.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"If someone wants to annotate something on the same site they have a user on, that can be a comment type."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And that is another reason to make all annotations comments; it is more &lt;a class="ext-link" href="https://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;D.R.Y.&lt;/a&gt; than having the same logic attached to both posts and comments.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 21:56:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:7/1488664602869513</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:3" title="Comment 3"&gt;dshanske&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Annotation to me sounds like a type of comment where you are specifying a specific part of a post to comment on. It would therefore not be displayed at the bottom, but inline in some fashion."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Annotations can be either of those.  And they can be many other things too.  Highly recommend reading about the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Annotations Data Model&lt;/a&gt; if this ticket continues to interest you.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I think this is the wrong approach for WordPress Core in the short term. if WordPress wants to start with annotations, how about we enhance the comment system to support annotations?"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am assuming you made this comment because of an assumption that Web Annotations refers to being able to select a section of content and then comment on that content?
&lt;/p&gt;
&lt;p&gt;
Yes, that use-case is addressed by Web Annotation, but Web Annotations is &lt;em&gt;(IMO at least)&lt;/em&gt; more about establishing a JSON format for linking between annotation and the subject of the annotation, and thus about enabling additional storage &lt;strong&gt;the fact that such an annotation exists&lt;/strong&gt; in a location different than where the annotations or the subject of the annotation is currently stored.
&lt;/p&gt;
&lt;p&gt;
Or in less abstract terms, Web Annotations is about enabling a website to serve a feed of Web Annotations one of which might look like this:
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
  "@context": "http://www.w3.org/ns/anno.jsonld",
  "id": "https://david.shanske.com/annotation-3264",
  "type": "Annotation",
  "motivation": "replying",
  "body": "https://david.shanske.com/2016/11/28/cbss-elementary-gets-kosher-wrong/",
  "target": [
    "https://david.shanske.com/2016/11/28/cbss-elementary-gets-kosher-wrong/#comment-3264",
    "https://www.facebook.com/dshanske/posts/1188775184544354?comment_id=1188793234542549"
  ]
}
&lt;/pre&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"While support for custom comment types is a 'blessed' task, we still don't have that."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No reason this ticket could not be the catalyst to make that blessed task a higher priority.  It might even inform the design of comment types by providing some insight into use-cases.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"So, having annotations as a built-in comment type would allow someone to annotate a post/page/etc. Now, that's initially a local implementation, not a distributed one. But from the perspective of site owners, you should always have a local implementation of a feature before you start fetching stuff from other sites. A base feature should be built in, and only enhanced by an outside site or service."&lt;/em&gt; ... I may be on a completely different line of thought than the initial proposal, but I feel strongly about local first as a building philosophy.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You have made an philosophical argument but it is too abstract to prove or disprove. And thus I think debating it distracts from the specific use-cases and requirements we could be discussing.
&lt;/p&gt;
&lt;p&gt;
Let us first make sure we all understand what is being proposed and what the goals of the proposal are and then discuss if those goals are appropriate before we debate philosophy of implementation? The former really should inform the latter.  Otherwise we'll just be talking past each other.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40034 (Add License and License URI as valid style.css headers to WP_Theme) created</title>
      
        <dc:creator>grapplerulrich</dc:creator>

      <pubDate>Sat, 04 Mar 2017 21:35:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40034</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40034/1488663349323997</guid>
      <description>&lt;p&gt;
The style.css headers &lt;code&gt;License&lt;/code&gt; and &lt;code&gt;License URI&lt;/code&gt; are required for WordPress.org theme repository but it is not possible to fetch the data using &lt;code&gt;WP_Theme::get()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The reason I realized this is that I am working on an automated testing plugin for theme and wanted to check that the &lt;code&gt;License&lt;/code&gt; and &lt;code&gt;License URI&lt;/code&gt; were set.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 21:26:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:6/1488662766694026</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/40031#comment:2" title="Comment 2"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm rather new to annotations"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I only learned about them ~12 hours before you.  Before posting this ticket I read &lt;a class="ext-link" href="https://www.w3.org/blog/news/archives/6156"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;the three recommendations&lt;/a&gt; in full . I'd highly recommend if you or anyone else is interested in this ticket -- pro or con -- to read at least the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;data model spec&lt;/a&gt; so you can come fully up to speed on what annotations are and what they are not.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"storing the comments that a website owner leaves as annotations anywhere else on the web."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, that is a mostly correct characterization.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"But this sounds like basically adding support for an entirely separate class of content than WordPress is currently built for, mostly under-the-hood."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
All we need is &lt;strong&gt;already&lt;/strong&gt; in WordPress core as an &lt;em&gt;existing&lt;/em&gt; class of content. We already have the tables needed in the standard WordPress database schema: &lt;code&gt;wp_comments&lt;/code&gt; and &lt;code&gt;wp_commentmeta&lt;/code&gt;.  Had this concept required new tables or even table modification it would have been a non-starter because of WordPress.com and so I would never have proposed it.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Or whatever UI it did have would require some modification from what is in core now."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The existing comment UI in the admin would not need trivial enhancements to support this proposal.  Add a new core post type &lt;code&gt;persona&lt;/code&gt; and then associate the annotations to the persona for the person making the comment &lt;em&gt;(a person may choice to comment on the web using different persona's;  e.g.  &lt;/em&gt;"legal analyst"&lt;em&gt;, &lt;/em&gt;"father of daughters"&lt;em&gt;, &lt;/em&gt;"soccer fan"&lt;em&gt;, et. al. so the persona post type would allow them to keep track of annotations for a specific persona.  But in most cases people would have just one persona, at least to start with.
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Note I recommend a Persona post type because &lt;code&gt;wp_comments&lt;/code&gt; has a &lt;code&gt;comment_post_ID&lt;/code&gt; field so we'd need an ID from a record in &lt;code&gt;wp_posts&lt;/code&gt; to occupy this foreign key and one or more personas for an individual would be a great way to address this.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Are we even talking about actual annotation management being provided through WordPress, or essentially just storage?"&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I am not sure what you specifically mean by &lt;em&gt;"actual annotation management"&lt;/em&gt; so I cannot yet answer.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm also not clear whether we're talking about possibly having WordPress display annotations, like as a list of "things I've been annotating recently", kind of like a blog, or whether that is outside scope here as well."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, definitely.   But for that I am really only seeing the need for an addition to the template hierarchy rules, a few rewrite rules, and possibly a new theme template page in the current default theme.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"Honestly, although I like the idea of annotations, I'm not comfortable with the idea of decentralization if it completely ignores the wishes and copyrights of the publisher of the annotated content."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Conveniently &lt;em&gt;(in the absence of a legal contract that assigns copyright)&lt;/em&gt; copyright of creative works always rests automatically with the creator of the work.  If @jdgrimes writes and posts a comment on NYTimes.com it is you @jdgrimes that holds the copyright, not The New York Times &lt;em&gt;(unless NYTimes.com has an egregious click-thru agreement, but that's an edge case and one in which I expect public pressure would quickly correct if this proposal were to become a reality in WordPress code, so let's assume they have no such agreement.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
So the wishes of the publisher are actually moot because  the publisher does not own the copyright nor the moral rights to &lt;strong&gt;your comment&lt;/strong&gt;. You have simply implicitly agreed to allow them to publish it but you have not given up legal right to it &lt;em&gt;(unless as I said they have an egregious legal agreement in place.)&lt;/em&gt;  Also I would think that worrying about the publisher vs. the author is the opposite of &lt;em&gt;"Democratizing Publishing" (although I could have my own view of that which is different than the WordPress project's at large? If so, please enlighten me.)&lt;/em&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;em&gt;"I'm not sure it would be entirely unjustified to say that this ticket is trying to turn WordPress into a glorified content-scraping and republishing engine."&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
To say that would be &lt;strong&gt;entirely unjustified&lt;/strong&gt;.  Content scraping and republishing assumes taking other people's content. This proposal &lt;strong&gt;only&lt;/strong&gt; concerns itself with the content that is created by author of the work.  This proposal assumes the comment would first be posted to the author's own WordPress site first &lt;em&gt;(via an API of course)&lt;/em&gt; before it ever gets posted to a 3rd party publisher's site. So no scraping or republishing whatsoever.
&lt;/p&gt;
&lt;p&gt;
Also, in the case of an organization that gains copyright of commenters work by click-thru agreement, and they won't budge even the case of public pressure, realize that a minimum Web Annotation is just three (3) URLs:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;URL to the item being annotated, e.g. the web page being commented on,
&lt;/li&gt;&lt;li&gt;URL to the annotation text, e.g. the fragment pinpointing the comment on the web page being commented on,
&lt;/li&gt;&lt;li&gt;URL to the annotation JSON file containing these three (3) URLs.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
So even in those cases maintaining an annotation being 3 URLs would not violate any ill-gained publisher's copyright, it would just be a link to said publisher's page and the comment contained therein and courts have upheld that linking does not violate copyright.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Anyway, like I said, I'm fairly new to annotations, but that's my initial thoughts.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I had a different idea a first until I read the &lt;a class="ext-link" href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;data model spec&lt;/a&gt;; highly recommend you at least review it if this ticket continues to interest you.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>chrisaldrich</dc:creator>

      <pubDate>Sat, 04 Mar 2017 20:38:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:5/1488659901589346</guid>
      <description>&lt;p&gt;
Mostly to provide some additional resources to the conversation I'll add the following:
Web Annotation Working Group's &lt;a class="ext-link" href="https://www.w3.org/blog/news/archives/6156"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;three recommendations and two additional notes&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Prior to the WPTavern post which motivated the conversation, there was a &lt;a class="ext-link" href="https://hypothes.is/blog/annotation-is-now-a-web-standard/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;post written by Dan Whaley of Hypothes.is&lt;/a&gt; who worked extensively within the group. This post has some interesting overview, but those interested in a fully implemented annotation platform (presumably using many of the pieces of the proposed standard) should take a quick look at &lt;a class="ext-link" href="https://hypothes.is/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Hypothes.is&lt;/a&gt;, what it is and what it allows. Their front page has a pretty useful video introduction.
&lt;/p&gt;
&lt;p&gt;
Keep in mind that some of the standard is geared specifically toward browsers and browser vendors, though WordPress could certainly implement some of the pieces from the CMS side.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40033 (Press-this: can't set featured image) created</title>
      
        <dc:creator>Livsy</dc:creator>

      <pubDate>Sat, 04 Mar 2017 19:00:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40033</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40033/1488654054846340</guid>
      <description>&lt;p&gt;
Hi! I can not set featured image using press-this.php. I tested at two sites - both of them on the 4.7.2. version of WP. On ver. 4.3.1 everything works well.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 04 Mar 2017 17:43:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:4/1488649400495449</guid>
      <description>&lt;p&gt;
Read the entire ticket a third time. Have to add....
&lt;/p&gt;
&lt;p&gt;
If someone wants to annotate a URL on another site, that should be a custom post type. The post type would be associated with their user...so there is authorship of the annotation. It doesn't need to have anything to do with the comment table.
&lt;/p&gt;
&lt;p&gt;
Then the annotation server merely serves to translate the custom post type posts into the format that other systems can understand...the Annotation spec.
&lt;/p&gt;
&lt;p&gt;
If someone wants to annotate something on the same site they have a user on, that can be a comment type.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 04 Mar 2017 17:21:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:3/1488648060167112</guid>
      <description>&lt;p&gt;
I think this is the wrong approach for WordPress Core in the short term. if WordPress wants to start with annotations, how about we enhance the comment system to support annotations?
&lt;/p&gt;
&lt;p&gt;
Annotation to me sounds like a type of comment where you are specifying a specific part of a post to comment on. It would therefore not be displayed at the bottom, but inline in some fashion.
&lt;/p&gt;
&lt;p&gt;
In WordPress, remember that comments themselves are a type of comment(referring to the comment table). If you look at the current WordPress design. While support for custom comment types is a 'blessed' task, we still don't have that. We have the built-in ones, and some custom ones built without full Core support for registration.
&lt;/p&gt;
&lt;p&gt;
So, having annotations as a built-in comment type would allow someone to annotate a post/page/etc. Now, that's initially a local implementation, not a distributed one. But from the perspective of site owners, you should always have a local implementation of a feature before you start fetching stuff from other sites. A base feature should be built in, and only enhanced by an outside site or service.
&lt;/p&gt;
&lt;p&gt;
Once you have the support for storing and displaying annotations on a post, you can add support for someone to create them on the front-end, then work on receiving them in a distributed manner.
&lt;/p&gt;
&lt;p&gt;
I may be on a completely different line of thought than the initial proposal, but I feel strongly about local first as a building philosophy.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39893 (Header Media: YouTube Embed Does Not Fill Screen) updated</title>
      
        <dc:creator>cingrosso</dc:creator>

      <pubDate>Sat, 04 Mar 2017 17:04:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39893#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39893#comment:4/1488647043384208</guid>
      <description>&lt;p&gt;
Brilliant Brady, well done!
&lt;/p&gt;
&lt;p&gt;
Works a treat....
&lt;/p&gt;
&lt;p&gt;
Thanks
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40032 (Automatic redirects with _wp_old_slug won't mantain GET parameters if ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 04 Mar 2017 16:35:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40032#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40032#comment:1/1488645306743039</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sat, 04 Mar 2017 15:24:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:2/1488641097413294</guid>
      <description>&lt;p&gt;
I'm rather new to annotations, so I may not understand this proposal fully yet. At first I just assumed that this was about having WordPress support in-post comments, but now I realize that it is about the completely other end of annotations: storing the comments that a website owner leaves as annotations anywhere else on the web. I guess being a CMS, and annotations kind of being content, that makes some sense. But this sounds like basically adding support for an entirely separate class of content than WordPress is currently built for, mostly under-the-hood. Or whatever UI it did have would require some modification from what is in core now. Are we even talking about actual annotation management being provided through WordPress, or essentially just storage? I'm also not clear whether we're talking about possibly having WordPress display annotations, like as a list of "things I've been annotating recently", kind of like a blog, or whether that is outside scope here as well.
&lt;/p&gt;
&lt;p&gt;
Honestly, although I like the idea of annotations, I'm not comfortable with the idea of decentralization if it completely ignores the wishes and copyrights of the publisher of the annotated content. I'm not sure it would be entirely unjustified to say that this ticket is trying to turn WordPress into a glorified content-scraping and republishing engine. Not saying that's really accurate, but doesn't implementing this require us to scrape and store the annotated piece of content in some way, or at least a portion of it? If the publisher hasn't specifically granted that right, eventually folks should get into legal trouble, it seems to me. (Though of course, I'm not a lawyer.) Maybe it isn't that much different than Press This, but then, maybe that's just to say that Press This can be abused to. The difference though is that with annotations the entire type of content is designed around this by definition.
&lt;/p&gt;
&lt;p&gt;
Anyway, like I said, I'm fairly new to annotations, but that's my initial thoughts.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40032 (Automatic redirects with _wp_old_slug won't mantain GET parameters if ...) created</title>
      
        <dc:creator>DrLightman</dc:creator>

      <pubDate>Sat, 04 Mar 2017 15:05:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40032</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40032/1488639927498460</guid>
      <description>&lt;p&gt;
If for example links come up with GET parameters, for example utm parameters for analytics, they get stripped before the redirect.
&lt;/p&gt;
&lt;p&gt;
post_name = 'new-slug'
_wp_old_slug = 'old-slug'
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://example.org/old-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.org/old-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Wordpress will build the link for the redirect to the new slug without any GET parameter:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://example.org/new-slug/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.org/new-slug/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I think it should mantein them instead:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://example.org/new-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://example.org/new-slug/?utm_source=test1&amp;amp;utm_medium=test2&amp;amp;utm_campaign=test3&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I'm not even sure if this should be classified as a bug, if it's the correct behaviour or not. I'll let you judge.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>jdgrimes</dc:creator>

      <pubDate>Sat, 04 Mar 2017 14:35:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:126</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:126/1488638145245732</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:125" title="Comment 125"&gt;seancjones&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
I think exploring some of this with users at WordCamps is a great idea. Finding out how users actually feel about having this information shared with them is really going to be imperative. And it could potentially re-frame the entire conversation here, because the goal is to put users first. If it was demonstrated, for example, that most affected users actually &lt;em&gt;want&lt;/em&gt; to know this information, it would contradict the general consensus, which is that they really don't want to know or care about this. I can imagine that for a portion of them though, they'll feel that knowledge is power. We really won't know for sure until we do some research. So far we've just been more or less making assumptions based on the best knowledge that we have—the experience of those that regularly interact with average users on the forums, etc. (Which actually, I expect won't prove too far off, but you never know what you don't know.)
&lt;/p&gt;
&lt;p&gt;
Of course, the average WordCamp attendee likely isn't a complete analog for the average WordPress user. But it would probably still be a good place to begin.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
I was thinking last night that really one thing we should be doing here is researching what strategies other large CMSs have employed regarding PHP version upgrades. Certainly WordPress is in a class all its own in terms of the size of its user base, but there is still probably a lot that we can learn from the experiences of similar, if slightly smaller, projects:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What is their policy regarding PHP version support?
&lt;/li&gt;&lt;li&gt;When they drop a PHP version, how do they communicate that to users?
&lt;/li&gt;&lt;li&gt;How do they communicate that to hosts?
&lt;/li&gt;&lt;li&gt;When they have dropped versions in the past, what has the fallout been?
&lt;ul&gt;&lt;li&gt;How many people were upset?
&lt;/li&gt;&lt;li&gt;How many people just quietly updated?
&lt;/li&gt;&lt;li&gt;How many people didn't update and were just left behind on the old version of the software?
&lt;/li&gt;&lt;li&gt;How many people needed help from support?
&lt;/li&gt;&lt;li&gt;How did web hosts respond? (Did they get most users updated ahead of time, etc.)
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I think that one practical number to consider when coming up with a percentage/number of users at which to drop a PHP version, is the support burden that will be generated, and what the forum volunteers can handle. If 10% of users require some kind of support in order to update their PHP version, out of 500k users that's 50k users who will be seeking support in addition to the normal burden. That wouldn't happen all in one day, of course, (and these numbers are completely made up so they may be unrealistic), and I don't know what the average support load is right now, but that sounds like it would probably be overwhelming. Which is why the Half-elf Support Rogue has always been against trying to tell users anything about PHP.
&lt;/p&gt;
&lt;p&gt;
(Yes, a lot of that support should really be directed at hosts, but some people, especially frustrated ones, are going to come to WordPress for help, to vent, etc.)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36613 (Browser back button doesn't work in Theme Browser) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sat, 04 Mar 2017 13:51:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36613#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36613#comment:14/1488635478683171</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36613#comment:13" title="Comment 13"&gt;afercia&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@adamsilverstein finally tested a bit, yep previous error seems gone. However, there are still edge cases where seems it's a bit difficult to make the history work correctly. To reproduce one of these cases:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Ha, you are a pro edge case finder. The current routing doesn't include browse= query var, however it is a good idea to add it if possible. I will take a look and try to improve the behavior here.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sat, 04 Mar 2017 08:34:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:7/1488616460698611</guid>
      <description>&lt;p&gt;
I see, thanks for the explanation! Added new patch that does that. I only updated widgets for which it made sense, i.e. widgets that also show their title by default.
&lt;/p&gt;
&lt;p&gt;
Some examples that show their title (added placeholder): Archives, Categories, etc.
Some examples that don't show their title (didn't add placeholder): Text, Search, Calendar, etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>39909.3.patch attached to Ticket #39909</title>
      
        <dc:creator>bor0</dc:creator>

      <pubDate>Sat, 04 Mar 2017 08:32:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39909/39909.3.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39909/39909.3.patch/1488616337738491</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) updated</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 05:25:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031#comment:1/1488605132549824</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40031 (Consider Adding Web Annotations to WordPress) created</title>
      
        <dc:creator>MikeSchinkel</dc:creator>

      <pubDate>Sat, 04 Mar 2017 05:20:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40031</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40031/1488604830516476</guid>
      <description>&lt;p&gt;
This is a strawman ticket published to generate discussion and hopefully concensus.
&lt;/p&gt;
&lt;p&gt;
The W3C has standardized &lt;a class="ext-link" href="https://wptavern.com/web-annotations-are-now-a-w3c-standard-paving-the-way-for-decentralized-annotation-infrastructure"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Web Annotions&lt;/a&gt; to decentralize annotations  across the web &lt;em&gt;("annotations" being a superset of commenting.)&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
As WordPress' mission is to &lt;em&gt;"Democratize Publishing,"&lt;/em&gt; and as WordPress is by far the most widely used tool for publishing content on the web that also allows other people to comment on said content, it would seem fitting &lt;em&gt;(at least to me)&lt;/em&gt; that WordPress would empower users of WordPress to control their own annotations across the web, moving forward.
&lt;/p&gt;
&lt;p&gt;
How might to work?  WordPress could offer three (3) new and yet related features:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Add enhancements to the commenting system to accept references to annotations.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;Enable a WordPress site to be an &lt;em&gt;"Annotation Server."&lt;/em&gt; This would likely leverage the existing comment system where the comments could be associated with a new custom post type where each inidividual post could collection annotations for and represent one "persona" of a given registered user as well as how that persona could be presented to the outside world in the form of a URL that represents the user.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;An &lt;em&gt;"Annotate This"&lt;/em&gt; feature similar to &lt;em&gt;"Press This"&lt;/em&gt; which can store annotations at the user's own WordPress site where the Annotate This UI could become the UI for commenting on all future WordPress websites (and potential non-WordPress sites) that offer feature 1.  For those that doesn't offer feature 1 this UI could provide functionality to more easily transfer the comment to the foreign commenting system &lt;em&gt;(such as copying it to the clipboard on user request)&lt;/em&gt; and possibly even implement commenting for specific well-known services &lt;em&gt;(Twitter, Facebook, LinkedIn, Disqus, Medium, etc.)&lt;/em&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Note that some people's first reaction to this idea might be &lt;em&gt;"that's plugin territory"&lt;/em&gt; -- which I can appreciate -- but there are four (4) reasons why I think this is core territory instead:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It is reasonable to assume that 80% of WordPress users would want to maintain their own comments in addition to their own posts,
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;This idea only really has benefits if it can become ubiquitous, e.g. If the 3 features are all available. If a plugin then an individual can only ever control one side of annotations thus dooming their implementation to obscurity.  Note that a &lt;em&gt;"Feature Plugin"&lt;/em&gt; slated for a future version of WP core is not &lt;em&gt;"plugin territory"&lt;/em&gt; that I am arguing against.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="3"&gt;&lt;li&gt;It is a W3C recommendation, not some startup 3rd party service so it is likely to be adopted by many if not all of the web in the next few years.  Why should WordPress not be the tool that helps define for the world how annotations should best be utilized, before some walled-garden like Facebook establishes the defacto-approach ahead of WordPress?
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="4"&gt;&lt;li&gt;And finally, WordPress's mission is to &lt;em&gt;"Democratize Publishing"&lt;/em&gt; and I cannot think of many other feature requests that are more &lt;em&gt;"on-mission"&lt;/em&gt; than this one,
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Thoughts?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Sat, 04 Mar 2017 05:07:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:6/1488604063908553</guid>
      <description>&lt;p&gt;
@dlh you are correct. &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch" title="Attachment '39909.2.patch' in Ticket #39909"&gt;39909.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39909/39909.2.patch" title="Download"&gt;​&lt;/a&gt; is the direction to take.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40030 (Pass User and Comment Objects to rest_get_avatar_urls) created</title>
      
        <dc:creator>dshanske</dc:creator>

      <pubDate>Sat, 04 Mar 2017 04:10:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40030</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40030/1488600642490308</guid>
      <description>&lt;p&gt;
This function retrieves avatars based on email address. It is used by the comments and user controllers.
&lt;/p&gt;
&lt;p&gt;
However, this means that we are locking ourselves into Gravatar, which is a whole other conversation.
&lt;/p&gt;
&lt;p&gt;
The dependent Comment and User 'prepare_item_for_response' functions pass the email address from a User Object or Comment Object to the rest_get_avatar_urls function.
&lt;/p&gt;
&lt;p&gt;
Instead, they should pass the entire Comment or User object. Since get_avatar_url supports this, it will result in no backward compatibility issues, and this will allow the objects to be filtered using existing filters, assuming that you wanted to return alternative avatar data, such as a local avatar, alternative remote service, what have you.
&lt;/p&gt;
&lt;p&gt;
Since this is internal to Core, it won't result in any data leakage to the API.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #31245 (Replace alloptions with a key cache) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:45:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/31245#comment:44</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/31245#comment:44/1488595521553800</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1488595518727103"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27669 (Stale `db_version` value after update with external object cache) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:45:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27669#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27669#comment:24/1488595521046700</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1488595518727103"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37840 (Optimize full size images) updated</title>
      
        <dc:creator>bahia0019</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:23:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37840#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37840#comment:15/1488594223901967</guid>
      <description>&lt;p&gt;
I just saw this pop up in the summary email. I love the idea, as even I'm confused what to use now that SrcSet is out. Large doesn't cover a 27" screen (let alone a 27" Retina iMac), and Full seems too overkill (even though I use JPEGMini before upload).
&lt;/p&gt;
&lt;p&gt;
I don't know what compression methods are currently being used on upload. Last I knew it was a straight 90% JPEG compression.
But what if we looked at replacing it with something like EWWW that utilizes multiple lossless compression utilities. I think they actually use JPEGMini and TinyPNG.
&lt;/p&gt;
&lt;p&gt;
APIs may be an issue for some of these utilities but (and I can't believe I'm going to say this, as I hate Jetpack), but maybe that becomes an option for Jetpack users.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #17924 (Make Integrating Multiple Roles Per User Easier for Plugin Authors) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sat, 04 Mar 2017 02:16:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17924#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17924#comment:49/1488593784994134</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
It would be great to see this milestoned in the near future, adding &lt;code&gt;dev-feedback&lt;/code&gt; to existing &lt;code&gt;commit&lt;/code&gt; hoping to attract some attention
&lt;/p&gt;
&lt;p&gt;
FYI: Patch still applies to /trunk cleanly :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39909 (Make title behaviours consistent across all widgets on first load) updated</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sat, 04 Mar 2017 01:58:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39909#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39909#comment:5/1488592701815957</guid>
      <description>&lt;p&gt;
@bor0 Your patch updates the various &lt;code&gt;widget()&lt;/code&gt; methods, but I think the &lt;code&gt;form()&lt;/code&gt; methods are what need updating? &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch" title="Attachment '39909.2.patch' in Ticket #39909"&gt;39909.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/39909/39909.2.patch" title="Download"&gt;​&lt;/a&gt; has an example of what I understood the intent to be.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>39909.2.patch attached to Ticket #39909</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sat, 04 Mar 2017 01:56:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39909/39909.2.patch/1488592594300964</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #33381 (Strategize the updating of minimum PHP version.) updated</title>
      
        <dc:creator>seancjones</dc:creator>

      <pubDate>Sat, 04 Mar 2017 00:49:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33381#comment:125</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33381#comment:125/1488588573171713</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/33381#comment:124" title="Comment 124"&gt;jdgrimes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I agree that when we present this information to users, that this is a good way to do it. I'm just cautioning that if we are talking about presenting this to everybody within the admin panel, the core devs are going to be very hesitant to do that.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Excellent points. Thanks for voicing the head devs. It's easy to forget the incredible responsibility of running the largest CMS in the world. I am always trying to push things forward, but I also work in IT. Don't want to be the next AWS!
&lt;/p&gt;
&lt;p&gt;
Clearly I didn't fully consider the mass hysteria that could result. What you' said got me thinking in a different direction entirely. Mainly, what is the absolute smallest educational step that can be made that still goes a long way to moving a plan forward?
&lt;/p&gt;
&lt;p&gt;
We talk about tech a first as devs but one of the best places to start testing out the message and it's efficiency is at WordCamps and meetups. A lot of users go and they're already highly engaged. I know the medium is different than web, but it has a lot of appeal, not least of which is that it engages the community directly. Perhaps it could be an early foray into a broader strategy where user input is directly requested/received.
&lt;/p&gt;
&lt;p&gt;
A talk like "How to not get hacked" with a few topics, especially upgrading PHP, and time for discussion, could help shed light on the greater strategy. Even if it takes a while to finalize a plan that takes still longer, I think a lot of us would be happy to finally see some headway.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36514 (posting with custom taxes) updated</title>
      
        <dc:creator>ZaneMatthew</dc:creator>

      <pubDate>Sat, 04 Mar 2017 00:30:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36514#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36514#comment:21/1488587404651567</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36514/36514.4.diff" title="Attachment '36514.4.diff' in Ticket #36514"&gt;36514.4.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36514/36514.4.diff" title="Download"&gt;​&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I've submitted a unit test for the proposed patch. The unit test failed before applying the patch, and passed once the patch was applied.
&lt;/p&gt;
&lt;p&gt;
I was able to manually reproduced the issue via the WP Admin. I then created a unit test that;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;registers a given taxonomy based on the reporters criteria,
&lt;/li&gt;&lt;li&gt;creates a post and term for the newly registered taxonomy,
&lt;/li&gt;&lt;li&gt;sets the current user to editor role,
&lt;/li&gt;&lt;li&gt;uses &lt;code&gt;edit_post()&lt;/code&gt; to apply the newly created term to the given post,
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I verified that WordPress did create a new term with the term ID as the term, vs. adding the term to the post.
&lt;/p&gt;
&lt;p&gt;
I then applied the patch, re-run the test, and the test passed.
&lt;/p&gt;
&lt;p&gt;
One item to note is that to fully simulate the process of editing a post from the WP Admin, the &lt;code&gt;$term_id&lt;/code&gt; had to be type casted as &lt;code&gt;(string) $term_id&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36514.4.diff attached to Ticket #36514</title>
      
        <dc:creator>ZaneMatthew</dc:creator>

      <pubDate>Sat, 04 Mar 2017 00:02:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36514/36514.4.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36514/36514.4.diff/1488585728039117</guid>
      <description></description>
      <category>attachment</category>
    </item>
   </channel>
</rss>