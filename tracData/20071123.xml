<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:57:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:3/1195858671000000</guid>
      <description>&lt;p&gt;
Solutions already exist or can exist with a plugin. However, such a plugin has not yet been referenced on WP-Hackers. Travis has stated that he developed a system for his web site that uses sessions to correct this problem.
&lt;/p&gt;
&lt;p&gt;
However, since the solution calls for either using PHP Sessions, PHPass, and/or salting passwords, I don't think it is trival and could cause problems. I can't think of an solution that doesn't involve resetting everyone's password once the change is implemented.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:52:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:2/1195858348000000</guid>
      <description>&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2394" title="#2394: defect (bug): Passwords are stored in an insecure un-salted form (closed: fixed)"&gt;#2394&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5367" title="#5367: defect (bug): Wordpress cookie authentication vulnerability (closed: fixed)"&gt;#5367&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) updated</title>
      
        <dc:creator>rob1n</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:42:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383#comment:1/1195857762000000</guid>
      <description>&lt;p&gt;
Of course it's possible to get the hash and run it against a rainbow pattern (or create a session cookie) -- if you have read-only access.
&lt;/p&gt;
&lt;p&gt;
I suppose a solution would be to stop storing the hash in the cookie, and authenticate a bit differently.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5383 (security notification) created</title>
      
        <dc:creator>chuckpeters</dc:creator>

      <pubDate>Fri, 23 Nov 2007 22:28:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5383</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5383/1195856908000000</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="http://lwn.net/Articles/259204/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://lwn.net/Articles/259204/&lt;/a&gt; shows wordpress has a security issue and I can't seem to find anything useful about when this might be fixed or if it is being worked on.
&lt;/p&gt;
&lt;p&gt;
You need to do a better job of notifying us of security issues.  Things like a section on the website... &lt;a class="ext-link" href="http://wordpress.org/security"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/security&lt;/a&gt; is 404 now.
&lt;/p&gt;
&lt;p&gt;
Send out notification on the announcement list of open issues like the one mentioned above and suggest "Workarounds" if the issue isn't fixed.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5218 (SAVEQUERIES: log calling function name) updated</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Fri, 23 Nov 2007 21:36:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5218#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5218#comment:8/1195853775000000</guid>
      <description>&lt;p&gt;
I like this!
&lt;/p&gt;
&lt;p&gt;
We should warn people about using it in production though, debug_backtrace can be SLOW.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5382 ("MySQL server has gone away" error when trying to post anonymous comment) updated</title>
      
        <dc:creator>santosj</dc:creator>

      <pubDate>Fri, 23 Nov 2007 20:27:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5382#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5382#comment:1/1195849623000000</guid>
      <description>&lt;p&gt;
This does not appear to be an WordPress issue, but I'm not going to close it. FastCGI is not part of WordPress. This issue affects other web applications and does not have a trival fix.
&lt;/p&gt;
&lt;p&gt;
You can use caching and see about setting the amount of database connections higher or seeing what load the database has.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5382 ("MySQL server has gone away" error when trying to post anonymous comment) created</title>
      
        <dc:creator>meonkeys</dc:creator>

      <pubDate>Fri, 23 Nov 2007 20:23:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5382</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5382/1195849397000000</guid>
      <description>&lt;h1 id="Description"&gt;Description&lt;/h1&gt;
&lt;p&gt;
Can't post comments anonymously.
&lt;/p&gt;
&lt;h1 id="Stepstoreproduce"&gt;Steps to reproduce&lt;/h1&gt;
&lt;ol&gt;&lt;li&gt;Install WordPress 2.3.1, MySQL 5.0.x, and enable FastCGI
&lt;/li&gt;&lt;li&gt;Try to post an anonymous comment
&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="Expectedresult"&gt;Expected result&lt;/h1&gt;
&lt;ol&gt;&lt;li&gt;Comment is placed in queue for moderation (if this is enabled)
&lt;/li&gt;&lt;li&gt;User is redirected and can see their comment posted
&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="Actualresult"&gt;Actual result&lt;/h1&gt;
&lt;p&gt;
error message appears in browser window:
&lt;/p&gt;
&lt;pre class="wiki"&gt;WordPress database error: [MySQL server has gone away]
SELECT * FROM wp_comments WHERE comment_ID = '11690' LIMIT 1
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-comments-post.php on line 67
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-comments-post.php on line 68
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-comments-post.php on line 69
Warning: Cannot modify header information - headers already sent by (output started at .../wp-includes/wp-db.php:160) in .../wp-includes/pluggable.php on line 392
&lt;/pre&gt;&lt;p&gt;
(modified slightly: ellipses replace private path information on server)
&lt;/p&gt;
&lt;h1 id="Reproducability"&gt;Reproducability&lt;/h1&gt;
&lt;p&gt;
Always.
&lt;/p&gt;
&lt;h1 id="Workaround"&gt;Workaround&lt;/h1&gt;
&lt;p&gt;
Disabling FastCGI appears to fix the issue.
&lt;/p&gt;
&lt;h1 id="Additionalinformation"&gt;Additional information&lt;/h1&gt;
&lt;p&gt;
This bug was originally reproduced using a Bluehost-hosted blog at &lt;a class="ext-link" href="http://adammonsen.com"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://adammonsen.com&lt;/a&gt;. It is unclear if this is issue is specific to Bluehost.
&lt;/p&gt;
&lt;h2 id="softwareversionsusedinthisrepro"&gt;software versions used in this repro&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;WordPress 2.3.1
&lt;/li&gt;&lt;li&gt;MySQL 5.0.37
&lt;/li&gt;&lt;li&gt;FastCGI (mod_fastcgi) 2.4.2
&lt;/li&gt;&lt;li&gt;Apache 1.3.39
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Relatedpostsinsupportforum"&gt;Related posts in support forum&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="http://wordpress.org/support/topic/124416"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/124416&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://wordpress.org/support/topic/133745"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/133745&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="http://wordpress.org/support/topic/140982"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://wordpress.org/support/topic/140982&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [93]: new export dataset</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 19:40:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/93/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/93/tests/1195846814285630</guid>
      <description>&lt;p&gt;
new export dataset
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5380 (Upload tab in linline uploader disappears under certain circumstances) updated</title>
      
        <dc:creator>lloydbudd</dc:creator>

      <pubDate>Fri, 23 Nov 2007 19:36:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5380#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5380#comment:2/1195846615000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5381 (type mismatch between is_term and get_term_by) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Fri, 23 Nov 2007 17:24:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5381#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5381#comment:1/1195838682000000</guid>
      <description>&lt;p&gt;
Overloading was a mistake, but here we are.  Part of the problem is that we changed sanitize_term() to return immediately for the raw context.  It should probably do int casts for the IDs before returning.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5255 (Simplify role/capability for easier cap =&gt; user lookups) updated</title>
      
        <dc:creator>imwebgefunden</dc:creator>

      <pubDate>Fri, 23 Nov 2007 14:14:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5255#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5255#comment:12/1195827265000000</guid>
      <description>&lt;p&gt;
I'm the maintainer of WordPRess' Role Manager Plugin.
The first time I came to the Role Manager I don't like the function to remove/set a single capability on users profile page. But in the meantime I used this way very often and today I like it. It's gives the administrator more flexibility to try single permission tests.
&lt;/p&gt;
&lt;p&gt;
In the last months of development for the Role Manager I'm missing the following things:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The maximum length and allowed signs for roles and capabilities should be described. For a couple of days I released a new version 2.2.0. The new release set the max. length for roles and caps to 30 signs and only letters, digits and spaces are allowed for input. For caps all spaces are stored as a "_". But other plugins - such the very popular 'NextGen-Gallery-Plugin' don't do this translation and stores spaces as spaces. If you do so - you can have different capabilities one with a single space and one with a double space in the name, eg
&lt;pre class="wiki"&gt;cap 1
&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
and
&lt;/p&gt;
&lt;pre class="wiki"&gt;cap  1
&lt;/pre&gt;&lt;p&gt;
Caps and Roles first should be trim'ed and then double spaces should be replaced by single spaces. And single spaces are stored as "_". We can go an other way - but what we need is a description for all plugin authors.
&lt;/p&gt;
&lt;ol start="2"&gt;&lt;li&gt;We need a list, eg in the otions-table, with all capabilities - not only the assigned to one or more roles. I wrote a plugin to hide the dashboard. It's based on a capability "hide_dashboard". If a user has this capability the dashboard is hidden. Most plugins add all their capabilities on activation to the administrator-role. But if you have a "negative" capability such as "hide_dashborad" you "can't" add this to the administrator-role on this way. Maybe, a way can be, to only register a capability. In the next step the administrator can assign this capability to one or more roles or single user as an exra cap.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Fri, 23 Nov 2007 13:13:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:19/1195823606000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've attached a patch that achieves the same using phpass instead - it not that different to how I was salting passwords. I've gone for the portable, MD5 based hash it provides, leaving the option to switch to other hash functions when they are more widely available.
&lt;/p&gt;
&lt;p&gt;
I've tested the patch with old style passwords, a new installation, and a new user and all appears to work as intended. Testing on Windows may be in order - phpass appears to attempt a different source of random data in that case.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>class-phpass.php attached to Ticket #2394</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Fri, 23 Nov 2007 13:07:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/2394/class-phpass.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/2394/class-phpass.php/1195823228000000</guid>
      <description>&lt;p&gt;
phpass file for wp-includes
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>2394-phpass.patch attached to Ticket #2394</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Fri, 23 Nov 2007 13:06:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/2394/2394-phpass.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/2394/2394-phpass.patch/1195823194000000</guid>
      <description>&lt;p&gt;
Implentation of salted passwords through the use of phpass
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5381 (type mismatch between is_term and get_term_by) created</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 10:26:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5381</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5381/1195813588000000</guid>
      <description>&lt;p&gt;
get_term_by() and similar functions return a row that includes the term_id as a numeric string.  is_term() requires that a term_id be passed in as an int; a numeric string will fail.
&lt;/p&gt;
&lt;p&gt;
I don't know what the solution is but this seems like a likely cause of bugs.  Code that looks like it ought to work fails:
&lt;/p&gt;
&lt;pre class="wiki"&gt;	$term_id = get_term_by('name', $term, $taxonomy);
	if ( is_term($term_id) ) ... // fails because is_term returns false
&lt;/pre&gt;&lt;p&gt;
test_is_term_type() in &lt;a class="ext-link" href="http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_taxonomy.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://svn.automattic.com/wordpress-tests/wp-testcase/test_includes_taxonomy.php&lt;/a&gt; reproduces the problem.
&lt;/p&gt;
&lt;p&gt;
There are other related type inconsistencies in taxonomy.php also - for example, is_term() returns a 0, NULL, term ID, WP_Error object or row object depending on the context and circumstances, which makes handling the return result difficult.  Mostly due I think to the functions being overloaded to magically handle both term ids and names.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Changeset in tests [92]: more tax api tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 10:24:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/92/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/92/tests/1195813470213841</guid>
      <description>&lt;p&gt;
more tax api tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #4779 (Proposal for HTTP POST and REQUEST API) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Fri, 23 Nov 2007 07:40:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4779#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4779#comment:7/1195803613000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Totally sweet! It works! That just blows my mind.
&lt;/p&gt;
&lt;p&gt;
Unit Test covers most of the functions, does not cover &lt;code&gt;wp_remote_get_body()&lt;/code&gt; or &lt;code&gt;wp_remote_get_headers()&lt;/code&gt;. The Unit Tests informally cover the &lt;code&gt;WP_HTTP_Fsockopen&lt;/code&gt; class, the functions cover the &lt;code&gt;test()&lt;/code&gt; and the &lt;code&gt;wp_remote_get_object()&lt;/code&gt; covers the &lt;code&gt;request()&lt;/code&gt; method. Which does prove that the class does work. However, to complete the unit tests, the &lt;code&gt;WP_HTTP_Base&lt;/code&gt; class methods need to be covered, as well as the rest of the transport classes.
&lt;/p&gt;
&lt;p&gt;
The next patch, if this is still considered okay, will include complete unit tests and replace Snoopy and transition areas that use fsockopen to use these functions. It will also include splitting the five classes down to one or two (cURL might be useful to be packaged also).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset in tests [91]: import test: update to asdftestblog1-2007-11-23.xml</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Fri, 23 Nov 2007 07:00:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/91/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/91/tests/1195801236302545</guid>
      <description>&lt;p&gt;
import test: update to asdftestblog1-2007-11-23.xml
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5378 (Replace existing wp-includes/rss.php) updated</title>
      
        <dc:creator>chmac</dc:creator>

      <pubDate>Fri, 23 Nov 2007 00:53:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5378#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5378#comment:2/1195779226000000</guid>
      <description>&lt;p&gt;
The file includes a summary of changes I believe. I noticed that it handles categories much better, and also creates a date_timestamp field (saves a bunch of hassle calculating dates). Those were the only two features I specifically needed, so I haven't looked at what else it does in detail.
&lt;/p&gt;
&lt;p&gt;
var_dump(fetch_rss($url)) provides an awful lot more with this file. Beyond "more" I didn't really pay attention to specifically what it does.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5380 (Upload tab in linline uploader disappears under certain circumstances) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Thu, 22 Nov 2007 22:39:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5380#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5380#comment:1/1195771176000000</guid>
      <description>&lt;p&gt;
Annoying = you can't edit a Trac ticket after saving.
&lt;/p&gt;
&lt;p&gt;
My report is partially wrong. There has to be an upload associated with the post that you're writing or editing at the time (ie an upload in the Browse tab). Try these new steps to reproduce:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to Write -&amp;gt; Write Post and scroll down to the inline uploader.
&lt;/li&gt;&lt;li&gt;Ensure you have at least two uploads under the Browse All tab (and at least one which you don't mind editing or deleting).
&lt;/li&gt;&lt;li&gt;Ensure you have at least one file under the Browse tab also.
&lt;/li&gt;&lt;li&gt;Click Browse All or Browse, click on an upload, click Edit, and either delete the file or make changes and save it.
&lt;/li&gt;&lt;li&gt;When the uploader returns to the Browse All or Browse tab, the Upload tab has disappeared.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5380 (Upload tab in linline uploader disappears under certain circumstances) created</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Thu, 22 Nov 2007 22:32:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5380</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5380/1195770726000000</guid>
      <description>&lt;p&gt;
The Upload tab in the inline uploader can disappear after deleting or editing a file.
&lt;/p&gt;
&lt;p&gt;
Steps to reproduce:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to Write -&amp;gt; Write Post and scroll down to the inline uploader.
&lt;/li&gt;&lt;li&gt;Ensure you have at least two uploads under the Browse All tab (and at least one which you don't mind editing or deleting).
&lt;/li&gt;&lt;li&gt;Click Browse All, click on an upload, click Edit, and either delete the file or make changes and save it.
&lt;/li&gt;&lt;li&gt;When the uploader returns to the Browse All tab, the Upload tab has disappeared.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
It's not possible to return to the Upload tab without reloading the post writing screen.
&lt;/p&gt;
&lt;p&gt;
Note that this doesn't happen if you upload a file then immediately click Edit and delete or make changes to the file.
&lt;/p&gt;
&lt;p&gt;
Not sure where the problem lies as I'm not too familiar with the uploading system.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 21:46:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:18/1195767967000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/2394#comment:17" title="Comment 17"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
phpass seems flexible and portable and has a compatible license.  Why not use it?  I'd rather not reinvent what someone more knowledgeable in the field has already done.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed.  Marking as needs-patch
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Thu, 22 Nov 2007 19:46:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:17/1195760762000000</guid>
      <description>&lt;p&gt;
phpass seems flexible and portable and has a compatible license.  Why not use it?  I'd rather not reinvent what someone more knowledgeable in the field has already done.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) updated</title>
      
        <dc:creator>donncha</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:35:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379#comment:3/1195749349000000</guid>
      <description>&lt;p&gt;
Good idea, looks better inside the if() condition.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5235 (Add Pre-flight checks to install) updated</title>
      
        <dc:creator>pishmishy</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:30:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5235#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5235#comment:8/1195749017000000</guid>
      <description>&lt;p&gt;
I've taken some of the suggestions into consideration and I've attached a new patch. Checks can throw warnings or stop the installation completely if necessary. I've had to alter install.php too.
&lt;/p&gt;
&lt;p&gt;
I've deliberately avoided adding new, more thorough checks for now and concentrated on the larger view.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:05:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379#comment:2/1195747506000000</guid>
      <description>&lt;p&gt;
This could also then be used by any WordPress plugins that wanted to track things like attempts to access pages that the user didn't have the rights to.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 16:04:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379#comment:1/1195747462000000</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Looking at the mu code (&lt;a class="ext-link" href="http://trac.mu.wordpress.org/browser/trunk/wp-admin/menu.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://trac.mu.wordpress.org/browser/trunk/wp-admin/menu.php&lt;/a&gt;) would we not do better with an action inside the failure case:
&lt;/p&gt;
&lt;p&gt;
e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;if (! user_can_access_admin_page()) {
    do_action('admin_page_access_denied');
    wp_die( __('You do not have sufficient permissions to access this page.') );
}
&lt;/pre&gt;&lt;p&gt;
mu can then hook on that and do the redirect if necessary before the wp_die
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>menu.php.diff attached to Ticket #5379</title>
      
        <dc:creator>donncha</dc:creator>

      <pubDate>Thu, 22 Nov 2007 15:46:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5379/menu.php.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5379/menu.php.diff/1195746387000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5379 (Add admin_menu_permission hook to menu.php) created</title>
      
        <dc:creator>donncha</dc:creator>

      <pubDate>Thu, 22 Nov 2007 15:46:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5379</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5379/1195746376000000</guid>
      <description>&lt;p&gt;
WordPress MU has a modified wp-admin/menu.php but with the addition of a new hook just above the user_can_access_admin_page() check, those custom mods can go into a new file.
&lt;/p&gt;
&lt;p&gt;
I called the action admin_menu_permission as there are hooks above for modifying the admin menu, this hook wouldn't have any other function AFAICT.
&lt;/p&gt;
&lt;p&gt;
I did try hooking on to admin_menu but it didn't work and the user received the standard WP "cannot access page" error instead of being redirected as WordPress MU usually does.
&lt;/p&gt;
&lt;p&gt;
Please take a look at the attached file.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5370 (No confirmation on deleting posts in Manage, Posts) updated</title>
      
        <dc:creator>demetris</dc:creator>

      <pubDate>Thu, 22 Nov 2007 15:12:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5370#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5370#comment:3/1195744334000000</guid>
      <description>&lt;p&gt;
Update:
&lt;/p&gt;
&lt;p&gt;
The problem occurs on an *addon* domain on a hostmonster.com account. I did a test install on the default domain, and everything seemed to be fine.
&lt;/p&gt;
&lt;p&gt;
The root directory of this *addon* domain is:
&lt;/p&gt;
&lt;p&gt;
/home/username/public_html/op111/
&lt;/p&gt;
&lt;p&gt;
While for the default domain it is:
&lt;/p&gt;
&lt;p&gt;
/home/username/
&lt;/p&gt;
&lt;p&gt;
I hope this information is relevant and useful.
&lt;/p&gt;
&lt;p&gt;
Greetings,
Demetris
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>DD32</dc:creator>

      <pubDate>Thu, 22 Nov 2007 14:28:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:16/1195741699000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:15" title="Comment 15"&gt;jammycakes&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Another thing -- why has this been given a milestone of 2.4? Since it is a security issue that is actively being exploited, shouldn't it be scheduled, at least partially, for the next security release?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Things are fixed in Trunk(2.4) and then backported to 2.3&lt;br /&gt;
Major changes such as this would also go into the next stable release rather than a maintainence release i believe. Allthough extra checks might be added to a 2.3 maintainence release to at least remove some of the vulnerability(ie. patch it, just not completely replace the authentication functions) is need be.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>jammycakes</dc:creator>

      <pubDate>Thu, 22 Nov 2007 14:14:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:15/1195740856000000</guid>
      <description>&lt;p&gt;
Otto42:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Salting the passwords would be nice to prevent dictionary attacks, and using something other than MD5 would be nice as well, but these won't solve the problem.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
They won't solve the problem completely but they will help quite considerably, so this is not a valid reason for not salting. It's all part of a strategy of "defence in depth," which is an approach that security experts all strongly recommend.
&lt;/p&gt;
&lt;p&gt;
You need to have an extremely good reason to reject an additional recommended security measure, especially when its impact on usability or other functionality is zero.
&lt;/p&gt;
&lt;p&gt;
However, I'd agree that sessions are the way to go rather than throwing around hashes of your user name and password in cookies.
&lt;/p&gt;
&lt;p&gt;
nbachiyski:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
one day the rainbow databases may include many md5 strings hashes, or even triple hashes, but I think it would suffice for now.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I wouldn't put it past crackers to come up with one, especially given the popularity of WordPress. That's why I'm strongly in favour of salting in addition to everything else. Again, it boils down to "defence in depth."
&lt;/p&gt;
&lt;p&gt;
In short, we need to do &lt;strong&gt;all&lt;/strong&gt; the following:
&lt;/p&gt;
&lt;ol class="loweralpha"&gt;&lt;li&gt;salt users' passwords
&lt;/li&gt;&lt;li&gt;use a more secure hash algorithm than MD5
&lt;/li&gt;&lt;li&gt;use PHP sessions rather than user name and password
&lt;/li&gt;&lt;li&gt;give sessions a finite (sliding) expiration time of no more than a few hours.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
It would also be a good idea to consider tying sessions to a specific IP address or range of IP addresses, although this could cause usability problems for AOL users who go through random proxy servers.
&lt;/p&gt;
&lt;p&gt;
Another thing -- why has this been given a milestone of 2.4? Since it is a security issue that is actively being exploited, shouldn't it be scheduled, at least partially, for the next security release?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5376 (rules added via mod_rewrite_rules should be in IfModule section) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Thu, 22 Nov 2007 12:26:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5376#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5376#comment:1/1195734419000000</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset in tests [90]: taxonomy api tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Thu, 22 Nov 2007 12:01:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/90/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/90/tests/1195732917790719</guid>
      <description>&lt;p&gt;
taxonomy api tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset in tests [89]: initial taxonomy tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Thu, 22 Nov 2007 11:16:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/89/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/89/tests/1195730203394010</guid>
      <description>&lt;p&gt;
initial taxonomy tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #4779 (Proposal for HTTP POST and REQUEST API) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Thu, 22 Nov 2007 10:17:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4779#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4779#comment:6/1195726655000000</guid>
      <description>&lt;p&gt;
&lt;strong&gt;Changes&lt;/strong&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Created &lt;code&gt;wp_remote_register_transport()&lt;/code&gt; and &lt;code&gt;wp_remote_unregister_transport()&lt;/code&gt; instead of using a custom Action hook. I might just wrap those two functions around the Action API, but needs references to object.
&lt;/li&gt;&lt;li&gt;Finished four of the five http request methods (missing !cURL).
&lt;/li&gt;&lt;li&gt;Added hooks for user agent changing, as well as setting the different time outs with filters.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Missing&lt;/strong&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;!cURL implementation (might be plugin material).
&lt;/li&gt;&lt;li&gt;method to setup what each object can be used for, fopen for PHP 4 can only be used for reading and not writing. Might be useful to decide based on &lt;code&gt;$type&lt;/code&gt; used.
&lt;/li&gt;&lt;li&gt;Comprehensive Unit Tests (coming next).
&lt;/li&gt;&lt;li&gt;Missing hooks for parsing headers and body after response is finished (figured some things are better left to the user of the functions, better to return raw, instead of mangling when I shouldn't be).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;a class="ext-link" href="http://wordpress.pastebin.com/m72ab9b2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Found this&lt;/a&gt; after writing the first prototype. I like mine better, but okay. The guy has some good stuff and I ported some of it over.
&lt;/p&gt;
&lt;p&gt;
Again, this is just a prototype.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5375 (wp_update_term_count cleans the cache for all taxonomies) updated</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Thu, 22 Nov 2007 05:16:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5375#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5375#comment:2/1195708605000000</guid>
      <description>&lt;p&gt;
You're right - I think I have the root cause mixed up.  I'll see if I can reproduce something in unit testing and  post back with more info.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Thu, 22 Nov 2007 03:32:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:14/1195702328000000</guid>
      <description>&lt;p&gt;
Salting the passwords would be nice to prevent dictionary attacks, and using something other than MD5 would be nice as well, but these won't solve the problem.
&lt;/p&gt;
&lt;p&gt;
Why are we storing the username and password in cookies at all? Is there any particular reason that we're not using PHP sessions? With a session, we could have the username and hashed password remain on the server as session variables, and the only cookie would be the randomly generated session ID. No real vulnerability there at all, eh?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5378 (Replace existing wp-includes/rss.php) updated</title>
      
        <dc:creator>johnbillion</dc:creator>

      <pubDate>Thu, 22 Nov 2007 01:28:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5378#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5378#comment:1/1195694908000000</guid>
      <description>&lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
chmac, to save people manually trawling through your attached file, can you give us a summary of the changes? For example, is there support for enclosures? And what are the new functions that are included?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>