<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #43310 (Generic "HTTP Error" when uploading PDFs via Media area) updated</title>
      
        <dc:creator>BearlyDoug</dc:creator>

      <pubDate>Fri, 30 Mar 2018 23:38:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43310#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43310#comment:7/1522453088666081</guid>
      <description>&lt;p&gt;
FYI, tomorrow morning, I will have a barebones WP installation running on one of our PHP7 boxes. I'll be happy to set up an account for you, @johnbillion, and get you FTP access, as well. Found you on Twitter and gave you a follow there... that way I can get you access details directly, as needed. :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42814 (PHP 7.2 Warning: ...wp-includes/post-template.php on line 284) updated</title>
      
        <dc:creator>FPCSJames</dc:creator>

      <pubDate>Fri, 30 Mar 2018 22:47:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42814#comment:42</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42814#comment:42/1522450049829151</guid>
      <description>&lt;p&gt;
This also occurs when calling wp_calculate_image_srcset(). Changing line 1206 to:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;if ( ! $src_matched || ! is_array( $sources ) || count( $sources ) &amp;lt; 2 ) {&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
fixes the issue.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #30876 (Paste an image into the Media Library) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 30 Mar 2018 22:44:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/30876#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/30876#comment:5/1522449859057734</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by danielbachhuber. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1522449856000208"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43310 (Generic "HTTP Error" when uploading PDFs via Media area) updated</title>
      
        <dc:creator>BearlyDoug</dc:creator>

      <pubDate>Fri, 30 Mar 2018 21:27:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43310#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43310#comment:6/1522445248074108</guid>
      <description>&lt;p&gt;
@johnbillion, apologies for the delay.
&lt;/p&gt;
&lt;p&gt;
Media Debugging Info
Active Editor         WP_Image_Editor_GD
Imagick Module Number         1687
ImageMagick Version         ImageMagick 6.9.7-4 Q16 i686 20170114 &lt;a class="ext-link" href="http://www.imagemagick.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.imagemagick.org&lt;/a&gt;
GD Version         2.2.4
Ghostscript Version         9.20
Memory Limit         300M
Max Execution Time         90
Max Input Time         20
Upload Max Filesize         80M
Post Max Size         80M
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43481 (Add tabs and placeholders to privacy tools page in wp-admin) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Fri, 30 Mar 2018 20:57:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43481#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43481#comment:32/1522443446929008</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43481#comment:30" title="Comment 30"&gt;allendav&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43481#comment:29" title="Comment 29"&gt;melchoyce&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hey @allendav, looking at &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43481/43481-unified-ux-idea.gif" title="Attachment '43481-unified-ux-idea.gif' in Ticket #43481"&gt;43481-unified-ux-idea.gif&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43481/43481-unified-ux-idea.gif" title="Download"&gt;​&lt;/a&gt;, it looks like you could accidentally delete requests for data export? In general, I'm finding this idea very confusing.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In what way? Because of the bulk action? We don't need to have the bulk action for delete.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
All this new stuff is really confusing and complicated. It kind of has to be — issues around privacy and data retention &lt;em&gt;are&lt;/em&gt; complicated. But that means we need to make sure the tools we're providing are as clear and uncomplicated as we can make them.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The idea behind deleting a request is if a request goes months and months without the user confirming the request - to give the site owner a way of "tidying things up."
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn't clear from the interface — when I see that "delete" bulk action, I think, "okay, yes, I am deleting this person's data." I had no idea that you're removing the request, not deleting the data itself. We need to be really careful about how we present this option, because it can go a couple ways:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Site owner goes, "Okay, I'll delete their data. Done!" and then they delete the request, but not the data.
&lt;/li&gt;&lt;li&gt;Site owner goes, "I'll delete all of the peoples' data. Done! Wait, did I also just delete the export requests?? Oh no, oh no, how do I fix this??"
&lt;/li&gt;&lt;li&gt;Site owner looks at this interface, goes "I have no idea what this is," and nopes out.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
We could add a prompt when deleting an individual request, i.e. an "You are about to delete a request. Are you sure?"  If we keep bulk delete we could do that as well, i.e. an "You are about to delete 5 requests. Are you sure?"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't think that clarifies what exactly you're deleting, since it could be perceived as "deleting the data this person asked me to delete."
&lt;/p&gt;
&lt;p&gt;
I need to clarify — is this replacing, or in addition to, the list of folks who have already requested either data export or anonymization? The more I look at this the more I'm starting to think it's in addition to, as in — this is the manual list, versus an automatic list that comes in somewhere that you then need to act upon. Am I correct or incorrect here?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 30 Mar 2018 20:56:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:4/1522443369099109</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@mattkeys great, thanks for the testing.
&lt;/p&gt;
&lt;p&gt;
ps:
&lt;/p&gt;
&lt;p&gt;
There is ticket &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/30206" title="#30206: defect (bug): get_stylesheet_directory_uri() includes space (closed: invalid)"&gt;#30206&lt;/a&gt; but I don't think it's the same issue though.
&lt;/p&gt;
&lt;p&gt;
Then one can wonder about the edge case, when the full directory path is returned, if that should be handled to support spaces?
&lt;/p&gt;
&lt;p&gt;
But I just stumbled up on &lt;a href="https://core.trac.wordpress.org/ticket/23661#comment:1"&gt;this comment&lt;/a&gt; by &lt;code&gt;@nacin&lt;/code&gt;, an interesting idea to add a second URL argument to &lt;code&gt;register_theme_directory()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
That would be one way to avoid the above edge case.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 20:04:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:30/1522440285908579</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
So, it's better we start planning for this now. I propose we define for each entity what's public, what's not, what capability is needed to see any field.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, +1 to this. I think this ticket needs to be a research project first, and implementation details later. Personally, I'd suggest tracking down a couple dozen real implementations of CPTs, and then begin evaluating from there.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There's undoubtedly some work to do to define exactly what post types can be read be unauthenticated users, and logged in ones. However, &lt;code&gt;show_in_rest&lt;/code&gt; should not be this, and we should start to phase it's existence out.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Exactly this. However, &lt;code&gt;show_in_rest&lt;/code&gt; has historically meant "reveal in REST" (whether or not the data is exposed), so I don't think it makes sense to change this on a whim. Possibly, the intermediate implementation could be &lt;code&gt;editable_in_rest&lt;/code&gt; and default to &lt;code&gt;true&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The key distinction (based on my understanding of the ticket description):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;show_in_rest&lt;/code&gt; defaulting to &lt;code&gt;true&lt;/code&gt; would mean the existence of the CPT is exposed to the world (and possibly have some unexpected information disclosure issues).
&lt;/li&gt;&lt;li&gt;&lt;code&gt;editable_in_rest&lt;/code&gt; would meant the CPT could be editable in the backend with appropriate authorization, but would expose no existence to the unauthorized world.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
With the &lt;em&gt;right access controls&lt;/em&gt;, there should be no reason &lt;em&gt;by default&lt;/em&gt; not to expose the data over the REST API.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Correct. But these aren't present in 42785.4.diff. That patch, for instance, would give me (a WordPress.com user) access to every CPT registered on every CPT site. Not only that, but it also incorrectly overrides the value passed by the developer.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43669 (Menu Item should have remove button near to accordion title) created</title>
      
        <dc:creator>1naveengiri</dc:creator>

      <pubDate>Fri, 30 Mar 2018 19:48:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43669</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43669/1522439289384164</guid>
      <description>&lt;p&gt;
When someone has more menu item and he decided to remove few of those menu items.
&lt;/p&gt;
&lt;p&gt;
Each time to remove a menu item we have to open the menu item accordion and then find remove link and click on that,
The process becoming irritating and time-consuming when there are lots of menu item to remove.
&lt;/p&gt;
&lt;p&gt;
I have tried to show the problem below
&lt;a class="ext-link" href="https://drive.google.com/file/d/1UkacVP9w7hoIEDDLi0VOj1on1X9JIoF4/view"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://drive.google.com/file/d/1UkacVP9w7hoIEDDLi0VOj1on1X9JIoF4/view&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
can we have the remove menu item option somewhere on the accordion title?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Fri, 30 Mar 2018 19:16:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:3/1522437410835857</guid>
      <description>&lt;p&gt;
Thanks @birgire, I just tested out your patch and I can confirm that it fixes the issues I was seeing. Here is output from testing the themeFile.php tests:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Matts-MacBook-Pro:WordPress Unit Tests mattkeys$ phpunit tests/phpunit/tests/link/themeFile.php
Installing...
Running as single site... To run multisite, use -c tests/phpunit/multisite.xml
Not running ajax tests. To execute these, use --group ajax.
Not running ms-files tests. To execute these, use --group ms-files.
Not running external-http tests. To execute these, use --group external-http.
PHPUnit 6.5.7 by Sebastian Bergmann and contributors.
........................                                          24 / 24 (100%)
Time: 1.28 seconds, Memory: 28.00MB
OK (24 tests, 48 assertions)
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>joehoyle</dc:creator>

      <pubDate>Fri, 30 Mar 2018 19:08:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:29/1522436902230117</guid>
      <description>&lt;p&gt;
To justify the creation of this ticket a little more - let me spell out why I think we need to do this.
&lt;/p&gt;
&lt;p&gt;
I think primarily we should be focusing on the semantics of what data is readable, by who, what is public etc. Unfortunately the definitions of &lt;code&gt;public&lt;/code&gt; in a post type is pretty fraught with exceptions, there's multiple ways in interpret &lt;code&gt;show_ui&lt;/code&gt;, &lt;code&gt;publically_queryable&lt;/code&gt; etc - for this reason, in the introduction of the REST API we put up a simple wall "show_in_rest" to just be simple about what data is included in the REST API. The obvious issues with this approach is that we 1: defaulted to true, and 2: divorced it of any association with what the user-access is on the data; it encourages the wrong approach.
&lt;/p&gt;
&lt;p&gt;
Perhaps it made sense at the time, given the REST API was a new thing where we wanted to be conservative - but now it's considered (for Gutenberg at least) the source of the data on the WordPress site. It doesn't make sense to have a technology-enabled flag anymore. There's  undoubtedly some work to do to define exactly what post types can be read be unauthenticated users, and logged in ones. However, &lt;code&gt;show_in_rest&lt;/code&gt; should not be this, and we should start to phase it's existence out. The REST API is no longer a new technology that is relegated to optional activation per cpt - it's a core part of the technology stack of WordPress, which is demonstrated more than ever in the building of Gutenberg.
&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;With the right access controls&lt;/em&gt;, there should be no reason &lt;em&gt;by default&lt;/em&gt; not to expose the data over the REST API. If you're a developer that's building a shadow post type, then sure - we have a way to opt out, but that's not the norm. The REST API should not be a myopic view into your whole WordPress data, on a developer-only opt-in basis, it should by default, contain access to as much of it as possible (assuming we of course have sane publicity defaults, which I think we pretty much already to).
&lt;/p&gt;
&lt;p&gt;
That all being said, its time to focus on specifics that &lt;code&gt;show_in_rest = true&lt;/code&gt; is adversely cause.
&lt;/p&gt;
&lt;p&gt;
---
&lt;/p&gt;
&lt;p&gt;
Random replies:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
The nut of it is that we can't expose information publicly unless we can prove that it can be public. For instance, a registered CPT could be using post_excerpt for some secret notes. Because they're secret, the developer hasn't exposed the field in the theme templates. And there's no way for us to declaratively know whether this custom use of data is safe to reveal unless the developer has explicitly marked show_in_rest=true.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn't true - this data could, and I think _would_ be in the RSS Feeds, for one thing. If a post type is registered as &lt;code&gt;public&lt;/code&gt;, that's the closest we are ever going to get to say something is public.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote&gt;
&lt;p&gt;
To the point above, I think it's important that we follow-up with another patch to force show_in_rest to true (for public CPTs and taxonomies) for loggedin users (other than subscribers) and not being only a default value, because people will expect to be able to use Gutenberg for all CPTs in the backend no matter the value set for show_in_rest.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We should be thinking only in capabilities, not roles - or logged in state. Also, nit-pick "all CPTs in the backend no matter the value set for show_in_rest" this isn't true, users will expect to see any CPTs they &lt;em&gt;know about&lt;/em&gt;. Just like the rest of the admin, there's no such thing as "show all CTPs" (menus being one example).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:44:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:28/1522435481840894</guid>
      <description>&lt;p&gt;
Awesome thanks @danielbachhuber These links are indeed very helpful to understand the whole picture and I agree with the compromises made at that time.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If we want to transition WordPress to an API-driven world, we need a better plan than default show_in_rest=true and hope there's no impact.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think it's not "if we want" anymore, WordPress is transitioning to an API-driven world with Gutenberg.
&lt;/p&gt;
&lt;p&gt;
So, it's better we start planning for this now. I propose we define for each entity what's public, what's not, what capability is needed to see any field. Once done we can add ways for people to force capabilities/roles by fields if possible (for example we can't force the post title, content to be private in APIs for public CPTs), include deprecation warnings and clarify these changes, leave them for some releases and start updating. I also think this is not specific to the REST API, the REST API is just one API, the same considerations concern any other type of API. Imagine we add GraphQL, how do we define which property needs which capability since we can't use a global &lt;code&gt;show_in_rest&lt;/code&gt;, GraphQL requests being per field...
&lt;/p&gt;
&lt;p&gt;
I guess we could discuss these things in the weekly meetings unless you think this is set in stone.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43555 (Keep Hello Dolly from displaying sexist text in the admin) updated</title>
      
        <dc:creator>kalich5</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:20:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43555#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43555#comment:35/1522434020175106</guid>
      <description>&lt;p&gt;
I would delete all Hello Dolly content! It is a relic!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:17:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:27/1522433825925269</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Do you have any link to discussions explaining the need for &lt;code&gt;show_in_rest&lt;/code&gt;, I'd love to learn more about those compromises?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sure, here's some of the genesis (with links to corresponding Slack conversations):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/WP-API/WP-API/issues/136"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Add register_post_type argument for API exposure&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/WP-API/WP-API/issues/710"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Clarify expectations and impact of the 'show_in_json' Post Type flag&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://github.com/WP-API/WP-API/issues/419"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Private taxonomy data shouldn't be exposed without appropriate capabilities&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The nut of it is that we can't expose information publicly unless we can &lt;em&gt;prove&lt;/em&gt; that it can be public. For instance, a registered CPT could be using &lt;code&gt;post_excerpt&lt;/code&gt; for some secret notes. Because they're secret, the developer hasn't exposed the field in the theme templates. And there's no way for us to declaratively know whether this custom use of data is safe to reveal unless the developer has explicitly marked &lt;code&gt;show_in_rest=true&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
If we want to transition WordPress to an API-driven world, we need a better plan than default &lt;code&gt;show_in_rest=true&lt;/code&gt; and hope there's no impact.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43621 (Introduce `add_action_once` and `add_filter_once` sugar.) updated</title>
      
        <dc:creator>vortfu</dc:creator>

      <pubDate>Fri, 30 Mar 2018 18:02:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43621#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43621#comment:4/1522432977254517</guid>
      <description>&lt;p&gt;
I'm not the biggest fan of implementing something like this in the first place over explicitly add/removing callbacks as needed, but as is this patch only supports the use of one "once" callback (per priority), e.g.
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_filter_once( 'test_filter', '__return_false' );
add_filter_once( 'test_filter', '__return_true' );
// $wp_filter['test_filter']-&amp;gt;callbacks
//
// array(1) {
//   [10]=&amp;gt;
//   array(3) {
//     ["__return_false"]=&amp;gt;...
//     ["_remove_filter_once"]=&amp;gt;...
//     ["__return_true"]=&amp;gt;...
//   }
// }
apply_filters( 'test_filter', null ); // true
apply_filters( 'test_filter', null ); // true
// ...
apply_filters( 'test_filter', null ); // true
// etc
&lt;/pre&gt;&lt;p&gt;
&lt;code&gt;_remove_filter_once()&lt;/code&gt; could be re-implemented as an anonymous func to ensure it's always added, but then you'd also have to check that the callback was actually added as well so other, non-once callbacks aren't accidentally removed ...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 17:54:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:26/1522432485912282</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
You're working with 15+ years of code, not a shiny brand new project.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I understand that, and these compromises are necessary. But that's not a reason to not change anything. We could plan these more difficult changes iteratively. Deprecate things for several versions... Inform the users to force a property to &lt;code&gt;true&lt;/code&gt; even if it's its default value and then after some releases, switch it to default &lt;code&gt;false&lt;/code&gt;...
&lt;/p&gt;
&lt;p&gt;
Do you have any link to discussions explaining the need for &lt;code&gt;show_in_rest&lt;/code&gt;, I'd love to learn more about those compromises?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43481 (Add tabs and placeholders to privacy tools page in wp-admin) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Fri, 30 Mar 2018 17:49:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43481#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43481#comment:31/1522432157970743</guid>
      <description>&lt;p&gt;
Does &lt;a href="https://core.trac.wordpress.org/ticket/43442#comment:6"&gt;https://core.trac.wordpress.org/ticket/43442#comment:6&lt;/a&gt; now supersede &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43481/43481.7.gif" title="Attachment '43481.7.gif' in Ticket #43481"&gt;43481.7.gif&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43481/43481.7.gif" title="Download"&gt;​&lt;/a&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43435 (Add settings screen for creating a privacy policy) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Fri, 30 Mar 2018 17:31:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43435#comment:41</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43435#comment:41/1522431092284240</guid>
      <description>&lt;p&gt;
Working on updating the design for this screen, and wanted to check on something:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When you first go to select a Privacy Policy page, you have the option of using an existing page, or creating a new page.
&lt;/li&gt;&lt;li&gt;After selecting or creating a page, you have the option of changing the page you're using for your Privacy Policy.
&lt;/li&gt;&lt;li&gt;However, you can only switch it to using an existing page — you can't create a new page at this point.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Can someone clarify why you can't create a new page afterwards?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 16:30:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:57</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:57/1522427456516511</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:56" title="Comment 56"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What matters are the endpoints. I think that a &lt;code&gt;POST /posts/&lt;/code&gt; is a different concept than a &lt;code&gt;POST /autosaves/&lt;/code&gt;.
...
When we now split up &lt;code&gt;/posts/&lt;/code&gt; to mean "trigger saving a post" AND "trigger saving an autosave"...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sorry I'm going to repeat myself but &lt;strong&gt;autosaving is&lt;/strong&gt; "trigger saving a post". It is the same concept of "saving a post", uses the same data shape, form, and size, and performs the same action as a result of the same intent by the client.
&lt;/p&gt;
&lt;p&gt;
The logical problem in having &lt;code&gt;POST /autosaves/&lt;/code&gt; endpoint is that it is "superficial". Autosaves don't exist outside posts and revisions.
&lt;/p&gt;
&lt;p&gt;
Anyway, think we delved into very "philosophical" discussion here :)
&lt;/p&gt;
&lt;p&gt;
I'm assuming that:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You are +1 on the patch that introduces an &lt;code&gt;autosaves&lt;/code&gt; end point.
&lt;/li&gt;&lt;li&gt;Daniel is a +1 on the patch that adds autosave support to the &lt;code&gt;posts&lt;/code&gt; endpoint.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Anybody else?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 16:30:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:25/1522427454293380</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Aside, In an API world (which is where we're heading), a &lt;code&gt;show_in_rest&lt;/code&gt; config doesn't make sense at all.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We've had to make many, many, many design compromises (cough cough, sticky posts) because of WordPress' historical application architecture. You're working with 15+ years of code, not a shiny brand new project.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43668 (Image cropping fails for many PHP locales, if set) created</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Fri, 30 Mar 2018 16:12:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43668</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43668/1522426330626204</guid>
      <description>&lt;p&gt;
If{{{#!php
&amp;lt;?php
setlocale( LC_NUMERIC /*or LC_ALL */, 'nb_NO' );
}}}
&lt;/p&gt;
&lt;p&gt;
is used then Media image cropping fails and selection input fields show &lt;code&gt;Infinity&lt;/code&gt;. It works fine with 'en_US', btw.
&lt;/p&gt;
&lt;p&gt;
If &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/17268" title="#17268: enhancement: Use native gettext library when available (new)"&gt;#17268&lt;/a&gt; is implemented, I guess it includes use of `setlocale'.
&lt;/p&gt;
&lt;p&gt;
Anyway, image cropping, and other internal passing of numeric data insede an application, should work independently of how numbers are to displayed according to a locale.
&lt;/p&gt;
&lt;p&gt;
I don't know which file or script to look into, to suggest a patch. Any help appreciated.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:35:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:24/1522424155952920</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
I should've been more clear: for the purposes of shipping Gutenberg in WordPress 5.0.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
👍While this could be fine, my concern is that people new to WordPress would have to deal with two editors while it shouldn't be that hard to update &lt;code&gt;show_in_rest&lt;/code&gt; to be opt-out for logged-in users.
&lt;/p&gt;
&lt;p&gt;
Aside, In an API world (which is where we're heading), a &lt;code&gt;show_in_rest&lt;/code&gt; config doesn't make sense at all. I understand it's here to mitigate the fact that we can unintentionally expose data but from my point of view, exposing data should be a security/access/role/capability concern and not a global config but that's another question obviously.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:09:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:23/1522422576480529</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/42785#comment:22" title="Comment 22"&gt;youknowriad&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For the purposes of Gutenberg, loading the Classic Editor for post types with show_in_rest=false seems sufficient to me.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I strongly disagree with this. The classic editor is there only for backwards compatibility concerns, at some point (probably not soon) its code will be removed from Core, so conceptually, Gutenberg should be able to edit all Post Types with &lt;code&gt;show_ui&lt;/code&gt; true. Without this we won't be able to edit these post types at all.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I should've been more clear: for the purposes of shipping Gutenberg in WordPress 5.0.
&lt;/p&gt;
&lt;p&gt;
In the short-term, I think we need to keep the Classic Edit for custom post types with &lt;code&gt;show_in_rest=true&lt;/code&gt;. In the long-term, we do need to figure out some solution.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>youknowriad</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:06:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:22/1522422419134634</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
For the purposes of Gutenberg, loading the Classic Editor for post types with show_in_rest=false seems sufficient to me.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I strongly disagree with this. The classic editor is there only for backwards compatibility concerns, at some point (probably not soon) its code will be removed from Core, so conceptually, Gutenberg should be able to edit all public post types. Without this we won't be able to edit these post types at all.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Fri, 30 Mar 2018 15:06:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:56/1522422408010894</guid>
      <description>&lt;p&gt;
Just want to add the distinction that I wasn't talking about controllers above. It is pretty irrelevant how we split up controllers and where we put them. That's a technical detail in the REST API black box and can be changed at will.
&lt;/p&gt;
&lt;p&gt;
What matters are the endpoints. I think that a &lt;code&gt;POST /posts/&lt;/code&gt; is a different concept than a &lt;code&gt;POST /autosaves/&lt;/code&gt;. Yes, they share the same code and data model, and yes, they can happily use the same controller (for now). The thing is that the action that the client requests is a different one, and should be expressed in that way. All the other discussions are details that the client does not need to know.
&lt;/p&gt;
&lt;p&gt;
When we now split up &lt;code&gt;/posts/&lt;/code&gt; to mean "trigger saving a post" AND "trigger saving an autosave", that is just immediate technical debt and raises the complexity in an unneeded way. And yes, adding a separate endpoint means having a bit more code, but the complexity actually gets lowered, because we have less branching in one individual code path. Most importantly, though, it doesn't need a rewrite of the client in case the handling of "trigger saving a post" and "trigger saving an autosave" should later diverge.
&lt;/p&gt;
&lt;p&gt;
The above being said, I'm not the one in a position to decide here, I just wanted to make sure my concerns are heard. I thought that we had already previously agreed to go with a separate &lt;code&gt;/autosaves/&lt;/code&gt; endpoint (as it seems the more future-safe approach, regardless of any other factors), but I'm happy to help refine whatever approach you finally plan to commit.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:43:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667#comment:3/1522421004472644</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42785 (Change default of `show_in_rest` in register_post_type and ...) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:38:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42785#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42785#comment:21/1522420692637797</guid>
      <description>&lt;p&gt;
I'm unconvinced that &lt;code&gt;show_in_rest&lt;/code&gt; should become opt-out instead of opt-in.
&lt;/p&gt;
&lt;p&gt;
Given custom post types probably have custom editor UI (metaboxes and otherwise), it seems unlikely that Gutenberg will be a drop-in replacement for the existing UI. Also, I'm concerned we'd unintentionally expose data we don't mean to expose.
&lt;/p&gt;
&lt;p&gt;
Lastly, such a significant change &lt;em&gt;certainly&lt;/em&gt; shouldn't be in a minor release.
&lt;/p&gt;
&lt;p&gt;
For the purposes of Gutenberg, loading the Classic Editor for post types with &lt;code&gt;show_in_rest=false&lt;/code&gt; seems sufficient to me.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42919 (Unable to upload files with the AAC extension) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:37:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42919#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42919#comment:12/1522420624557407</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:29:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:2/1522420153376068</guid>
      <description>&lt;p&gt;
@mattkeys thanks for the report and the patch.
&lt;/p&gt;
&lt;p&gt;
It looks to me that the problem with the &lt;code&gt;test_theme_file_uri_returns_valid_uri()&lt;/code&gt; is that the current active theme is the one from: &lt;code&gt;/full/path/to/tests/phpunit/includes/../data/themedir1/default&lt;/code&gt;. The themes from the test method's data provider haven't been activated. So we are dealing with a special case when &lt;code&gt;get_theme_root_uri()&lt;/code&gt; can't determine the theme's URL and it returns the full directory path instead, namely this part:
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://core.trac.wordpress.org/browser/tags/4.9/src/wp-includes/theme.php#L595"&gt;https://core.trac.wordpress.org/browser/tags/4.9/src/wp-includes/theme.php#L595&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If we activate the themes from the data provider with:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;switch_theme( $expected_theme );&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
before the code in &lt;code&gt;test_theme_file_uri_returns_valid_uri()&lt;/code&gt; then we are avoiding the above edge case and the spaces in the path are not involved.
&lt;/p&gt;
&lt;p&gt;
That's the case with &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/43663/43636.3.diff" title="Attachment '43636.3.diff' in Ticket #43663"&gt;43636.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/43663/43636.3.diff" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43636.3.diff attached to Ticket #43663</title>
      
        <dc:creator>birgire</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:27:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43663/43636.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43663/43636.3.diff/1522420025136038</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) updated</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:20:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667#comment:2/1522419648415079</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) updated</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:20:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667#comment:1/1522419633349822</guid>
      <description>&lt;p&gt;
I've added a patch which uses the &lt;code&gt;wp_verify_nonce&lt;/code&gt; function and expands the error message to include a link to the signup form. Clicking this link will make a new request which will generate a new nonce.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>signup_nonce_check.patch attached to Ticket #43667</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:18:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43667/signup_nonce_check.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43667/signup_nonce_check.patch/1522419512428616</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43667 (signup_nonce_check does not use wp_verify_nonce.) created</title>
      
        <dc:creator>herregroen</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:18:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43667</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43667/1522419493689231</guid>
      <description>&lt;p&gt;
Currently in multisite setups a nonce check is added to the singup form.
&lt;/p&gt;
&lt;p&gt;
This check does not use the &lt;code&gt;wp_verify_nonce&lt;/code&gt; function but instead creates a new nonce and expects an exact match. Due to the nature of &lt;code&gt;wp_nonce_tick&lt;/code&gt; this means it's possible to generate nonces that are valid for only a few seconds twice a day.
&lt;/p&gt;
&lt;p&gt;
The error message to try again could also use improvement. Most users will simply click the back button to try again, which will not generate a new nonce but simply restore the old form with the old nonce from browser memory.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:13:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:55</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:55/1522419232627391</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:54" title="Comment 54"&gt;schlessera&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I still recommend looking at the &lt;strong&gt;concept&lt;/strong&gt; you want to model, not how its data happens to be stored.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree. The concept is that a post is being saved and a revision is being (auto)created. The only difference between a &lt;code&gt;save&lt;/code&gt; and an &lt;code&gt;autosave&lt;/code&gt; is that the latter employs additional server logic when creating the revision.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Putting two models into the same endpoint because their data happens to be saved in the same way...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
These are not different models. It is the same model with the same data performing the same action of saving a post to the database.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As soon as they need to diverge again (posts needing to do something autosaves shouldn't, or vice-versa) you're facing a big problem again. You could for example imagine autosaves being stored as incremental diffs in a separate table through a later optimization.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Wouldn't that depend on the server's "business logic"? It depends on it now. We auto-create revisions on each save. If these revisions are to be moved to a different method of saving, should we deprecate the revisions controller and stop auto-creating them? :)
&lt;/p&gt;
&lt;p&gt;
It doesn't seem likely for revisions to be stored as incremental diffs in a different table, unless perhaps we drop MySQL and move to git for storage :) Then we will drop the concept of revisions altogether and won't need to flag the autosave revisions.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
That's why I recommend a separate &lt;code&gt;autosaves&lt;/code&gt; endpoint, not some trickery with posts or revisions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The problem we seem to be stuck on is that &lt;strong&gt;autosaves do not exist&lt;/strong&gt; outside of posts and revisions. Frankly I don't care much how DRY or non-DRY another controller may be, as long as it is logical, and easy to understand how it works and why.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...but the actual public API should cleanly separate the concepts, not let the current technical implementation bleed through.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's exactly my point too :) The concept is that a post is being saved and a revision is being auto-created. There is a different server logic when this is done directly by the user or is triggered automatically by the client.
&lt;/p&gt;
&lt;p&gt;
I'm not sure how to stress this more: &lt;strong&gt;autosaves are not a different concept of saving&lt;/strong&gt;. They are &lt;strong&gt;identical to "standard" saves&lt;/strong&gt;. The difference is in the logic that auto-creates the post revisions.
&lt;/p&gt;
&lt;p&gt;
In any case, we have two patches that work well here:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;One adds the specialized revision logic to the existing posts and revisions controllers.
&lt;/li&gt;&lt;li&gt;The other introduces a new controller that partially duplicates the posts and revisions controllers and performs identical actions, but introduces different end points.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
This ticket has been "simmering" for over a month now and is urgent. Can we please get on the same boat, pick a patch and commit it already? :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40510 (REST API: Post Revisions: Adding support for pagination) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 30 Mar 2018 14:03:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40510#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40510#comment:5/1522418617445730</guid>
      <description>&lt;p&gt;
This looks good @flixos90! Tested with the JS client and I see all of the expected headers and pagination functionality.
&lt;/p&gt;
&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/40510/40510.2.diff" title="Attachment '40510.2.diff' in Ticket #40510"&gt;40510.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/40510/40510.2.diff" title="Download"&gt;​&lt;/a&gt; I added a cast to (int) for &lt;code&gt;$request['page'];&lt;/code&gt;use and update the fixtures. (&lt;code&gt;phpunit --group=restapi-jsclient&lt;/code&gt; or &lt;code&gt;grunt precommit&lt;/code&gt; generates this file). Some tests to validate all of the new features would be nice.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>40510.2.diff attached to Ticket #40510</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:58:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/40510/40510.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/40510/40510.2.diff/1522418320337347</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>schlessera</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:13:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:54</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:54/1522415605716392</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If the shape of the data is the exact same, then we could co-opt the status attribute to trigger an auto-save (i.e. status=auto-save).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The shape of the data is identical - its a post thats being saved, both for posts and for autosaves. The problem with status is an autosave can have a published or draft status, we need to store the status. In &lt;a href="https://core.trac.wordpress.org/ticket/43316#comment:10"&gt;https://core.trac.wordpress.org/ticket/43316#comment:10&lt;/a&gt; @azaozz proposed using post type as the 'flag' that triggers an autosave. see 43316.1.diff
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I still recommend looking at the &lt;strong&gt;concept&lt;/strong&gt; you want to model, not how its data happens to be stored. Putting two models into the same endpoint because their data happens to be saved in the same way is the wrong way of doing DRY. As soon as they need to diverge again (posts needing to do something autosaves shouldn't, or vice-versa) you're facing a big problem again. You could for example imagine autosaves being stored as incremental diffs in a separate table through a later optimization.
&lt;/p&gt;
&lt;p&gt;
That's why I recommend a separate &lt;code&gt;autosaves&lt;/code&gt; endpoint, not some trickery with posts or revisions. Yes, it can just extend one of the existing controllers, but the actual public API should cleanly separate the concepts, not let the current technical implementation bleed through.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:05:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:53</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:53/1522415141186950</guid>
      <description>&lt;p&gt;
Sure! Good idea :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:03:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:52</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:52/1522414992964164</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by azaozz. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1522414991000027"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 13:00:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:51</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:51/1522414822603405</guid>
      <description>&lt;p&gt;
One last suggestion :) Would it make sense to change &lt;code&gt;is_autosave&lt;/code&gt; to something like &lt;code&gt;save_type&lt;/code&gt; to leave the door open for other save types in the future?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 12:56:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:50</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:50/1522414582396910</guid>
      <description>&lt;p&gt;
@danielbachhuber thanks for the review! :)
&lt;/p&gt;
&lt;p&gt;
Yes, as @adamsilverstein points out above the shape of the data is identical - it is a post that is being saved (hence my idea to use the same controller/endpoint). That includes all of the post "properties", post_type, post_status, post_parent, etc.
&lt;/p&gt;
&lt;p&gt;
If we are using &lt;code&gt;WP_REST_Posts_Controller::update_item()&lt;/code&gt; to do both saves and autosaves, we need some sort of a flag that is different than the post properties, see 43316.1.patch that uses &lt;code&gt;is_autosave&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally, in thinking about this more, I'd be leaning closer to one revisions endpoint that covers past and future revisions. We could handle write operations through /wp/v2/posts with special status attribute handling.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, thinking the same.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even taking a step back from this, it seems like it might make sense to produce a design document capturing all of the detail on how the endpoint(s) should behave, and write code once that's determined.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's a bit too late for this :) The REST API is actively being used now, and the lack of autosave support means it is creating tens or even hundreds of revisions when it shouldn't. It's not uncommon to see 120-150 revisions for an average length post :(
&lt;/p&gt;
&lt;p&gt;
Generally autosaves are "real" saves but the "business logic" on the server is a bit different. It depends on post_status, post_author vs. current_user, and post_lock (not implemented in the API yet!). It also depends on decisions in some plugins.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Has this idea (auto-creating a revision when an autosave is significantly different) been validated as useful in the real world? Given the tendency of revisions to bloat the database...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, it has. It protects the users in a rare edge case when post_content may "disappear" as a result of a user (or plugin/network?) error. Was planning to add that to the non-API autosave too, have heard of many disastrous cases over the years.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What if you want to save your work in progress when updating an already published post?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We need future revisions! But yeah, interesting question.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Perhaps we can even look at reducing the size diff that will trigger creating a revision when autosaving a published post. But that is not super urgent. We can adjust how this works when we have more "real life" data.
&lt;/p&gt;
&lt;p&gt;
@adamsilverstein @aduth @danielbachhuber @flixos90 @schlessera I'm going to refresh 43316.1.patch over the weekend (yeah, I know it's a holiday, but this cannot wait any longer) and then commit it, if no other objections.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 12:38:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:98</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:98/1522413533397528</guid>
      <description>&lt;p&gt;
I agree with &lt;a class="ext-link" href="https://wptavern.com/my-gutenberg-experience-thus-far"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Jeff's post&lt;/a&gt; — there's a good amount of fit and finish to be desired before rolling out to a large number of unacquainted users. We're not quite over the hump on the issues we do already know about. There's not a ton of sense in having 10,000 users re-report them.
&lt;/p&gt;
&lt;p&gt;
Are there alternative mechanisms we could employ to do a larger rollout (e.g. hosting companies promoting to end users or similar)? Or, if &lt;code&gt;Try Gutenberg&lt;/code&gt; is destined for core, could we only make it visible for something like 10% of installs to start?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43666 (Check update post meta before add new post meta in WordPress Importer) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Fri, 30 Mar 2018 12:00:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43666#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43666#comment:1/1522411220588312</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>43666.patch attached to Ticket #43666</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Fri, 30 Mar 2018 11:59:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43666/43666.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43666/43666.patch/1522411196349622</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43666 (Check update post meta before add new post meta in WordPress Importer) created</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Fri, 30 Mar 2018 11:59:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43666</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43666/1522411160876820</guid>
      <description>&lt;p&gt;
When we import any post/page content XML multiple time new post meta import multiple time so before import any post meta import we have to check if same post with meta key is exist or not if not exist then we have to add new post meta using add_post_meta function or update that post meta using update_post_meta function.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43664 ($wpdb-&gt;get_results fails in specific cases with non-latin charaters in ...) updated</title>
      
        <dc:creator>altert</dc:creator>

      <pubDate>Fri, 30 Mar 2018 10:56:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43664#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43664#comment:1/1522407410418265</guid>
      <description>&lt;p&gt;
most likely the culprit is regexp in &lt;code&gt;get_table_from_query&lt;/code&gt; function in &lt;code&gt;wp-includes/wp-db.php&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
It is called from &lt;code&gt;check_safe_collation&lt;/code&gt; on non-asciii queries.
&lt;/p&gt;
&lt;p&gt;
Possible solution would be to assume that last 'from' in query should be used and therefore non-greedy modifier should be dropped from select-from matching, so &lt;code&gt;SELECT.*?\s+FROM&lt;/code&gt; should be  &lt;code&gt;SELECT.*\s+FROM&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43665 (XHR requests disregard the WP_DEBUG_DISPLAY flag) updated</title>
      
        <dc:creator>OwenMelbz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 10:41:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43665#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43665#comment:2/1522406477107683</guid>
      <description>&lt;p&gt;
Id say that the fact there is a simple solution to the problem, would it really that bad to include it if it can help enhance the development experience? Wondering what the downside actually is?
&lt;/p&gt;
&lt;p&gt;
Regards to being problematic I feel it should still definitely be considered as this, especially as it creates a peculiar dynamic between debugging ajax work and everything else - why is there a difference? Why can't it be consistent?
&lt;/p&gt;
&lt;p&gt;
Regards to constantly referring back to an error log, this adds an additional overhead to the developer during development, making them refer to other files to simply understand whats in front of them.
&lt;/p&gt;
&lt;p&gt;
It also adds an initial understanding barrier - as somebody will be setting up their configuration, e.g in their configs for example, then they're blindly getting overwritten, without explanation - which can affect deadlines and stress for developers trying to track down whats going on.
&lt;/p&gt;
&lt;p&gt;
Yes as you say theres "alternatives" but why should people have to find alternatives? This doesn't seem a very user-centric approach to the issue, if there is something that can be done, fairly easily, why not?
&lt;/p&gt;
&lt;p&gt;
If this is something that the core will consider, I'd happily submit the PR myself.
&lt;/p&gt;
&lt;p&gt;
Everybody wants to create the best product possible for all those involved, so I think making small decisions like this to enhance  the development experience can be really important.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43665 (XHR requests disregard the WP_DEBUG_DISPLAY flag) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Fri, 30 Mar 2018 09:48:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43665#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43665#comment:1/1522403316391719</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello @OwenMelbz, welcome to WordPress Trac!
&lt;/p&gt;
&lt;p&gt;
I don't see this as "very problematic" since there are at least two alternatives mentioned in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26262#comment:17" title="Comment 17 for #26262: defect (bug): Ajax requests shouldn't display errors (closed: fixed)"&gt;ticket:26262:17&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26262#comment:18" title="Comment 18 for #26262: defect (bug): Ajax requests shouldn't display errors (closed: fixed)"&gt;ticket:26262:18&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43665 (XHR requests disregard the WP_DEBUG_DISPLAY flag) created</title>
      
        <dc:creator>OwenMelbz</dc:creator>

      <pubDate>Fri, 30 Mar 2018 09:34:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43665</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43665/1522402441695253</guid>
      <description>&lt;p&gt;
Within &lt;code&gt;wp-includes/load.php&lt;/code&gt; and the &lt;code&gt;wp_debug_mode()&lt;/code&gt; method it does
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'XMLRPC_REQUEST'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'REST_REQUEST'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'WP_INSTALLING'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;WP_INSTALLING&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;wp_doing_ajax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'display_errors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
This then turns off the rendering of PHP issues.
&lt;/p&gt;
&lt;p&gt;
This makes it very problematic when actively developing ajax endpoints via &lt;code&gt;admin-ajax.php&lt;/code&gt; as you have to keep turning them back on.
&lt;/p&gt;
&lt;p&gt;
It seems that it should at least appreciate the &lt;code&gt;WP_DEBUG_DISPLAY&lt;/code&gt; constant
&lt;/p&gt;
&lt;p&gt;
Is this something we could look at getting addressed?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43664 ($wpdb-&gt;get_results fails in specific cases with non-latin charaters in ...) created</title>
      
        <dc:creator>altert</dc:creator>

      <pubDate>Fri, 30 Mar 2018 08:37:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43664</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43664/1522399067299388</guid>
      <description>&lt;p&gt;
Let's say we have user with display name 'Алексей';
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;$wpdb-&amp;gt;get_results("SELECT user_login FROM $wpdb-&amp;gt;users where `display_name`='Алексей' ", ARRAY_A);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
executes normally
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;$wpdb-&amp;gt;get_results("SELECT user_login AS 'russian person' FROM $wpdb-&amp;gt;users where `display_name`='Алексей' ", ARRAY_A);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
executes normally as well
&lt;/p&gt;
&lt;p&gt;
but
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;$wpdb-&amp;gt;get_results("SELECT user_login AS 'person from Russia' FROM $wpdb-&amp;gt;users where `display_name`='Алексей' ", ARRAY_A);&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
returns empty array and results in error:
[table &amp;lt;table_prefix&amp;gt; Russia.doesn't exist]
SHOW FULL COLUMNS FROM &lt;code&gt;Russia&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
That means 'from' in 'person from Russia' somehow gets in sql
&lt;/p&gt;
&lt;p&gt;
It's an obscure enough situation, but might signify that something is wrong with wpdb query handling
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>philclothier</dc:creator>

      <pubDate>Fri, 30 Mar 2018 07:51:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:97</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:97/1522396307213283</guid>
      <description>&lt;p&gt;
I agree with the points being made by @bph and @brianhogg. I think at the very least, there should be more guidance on what this all really means to the user. Currently it is far too easy to to install the plugin via the prompt without any formal introduction to what Gutenberg is and is going to change on the site.
&lt;/p&gt;
&lt;p&gt;
I'm left wondering what the goal of this callout is. If it is to get more "eyes on" Gutenberg for testing, then this is not a good method of gathering suitable candidates. All this will cause is further [backlash](&lt;a class="ext-link" href="https://wordpress.org/support/plugin/gutenberg/reviews/?filter=1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/plugin/gutenberg/reviews/?filter=1&lt;/a&gt;) against Gutenberg from "normal" users who may have a negative experience. There needs to be far more hand-holding throughout this process, such as on screen popups and pointers to each section when the plugin is activated. Much like when WooCommerce is activated and you add your first product, each section of the product editing screen is described and shown via on screen popups.
&lt;/p&gt;
&lt;p&gt;
Currently, it feels like we're just throwing a callout with the idea of "This will get more people to look at Gutenberg and give it a try, which is cool". I feel like we're sleep walking into a nightmare for the support forums.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43587 (UI adjustments to the Status box in the Edit Comment screen) updated</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 06:24:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43587#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43587#comment:8/1522391096765488</guid>
      <description>&lt;p&gt;
Please consider reviewing &lt;strong&gt;43587.2.diff&lt;/strong&gt; over &lt;strong&gt;43587.diff&lt;/strong&gt; as it contains slight changes regarding coding standards.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43587.2.diff attached to Ticket #43587</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 06:23:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43587/43587.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43587/43587.2.diff/1522391005613681</guid>
      <description>&lt;p&gt;
Changes regarding coding standards
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43587 (UI adjustments to the Status box in the Edit Comment screen) updated</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 06:08:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43587#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43587#comment:7/1522390136031915</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The &lt;strong&gt;435687.diff&lt;/strong&gt; addresses all the enhancements mentioned in this ticket.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43587.diff attached to Ticket #43587</title>
      
        <dc:creator>nfmohit</dc:creator>

      <pubDate>Fri, 30 Mar 2018 05:58:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43587/43587.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43587/43587.diff/1522389530066151</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>bph</dc:creator>

      <pubDate>Fri, 30 Mar 2018 03:50:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:96</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:96/1522381829935619</guid>
      <description>&lt;p&gt;
After reading through [Jeff Chandlers tale]&lt;a class="ext-link" href="https://wptavern.com/my-gutenberg-experience-thus-far"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wptavern.com/my-gutenberg-experience-thus-far&lt;/a&gt; I have to admit, among us friends, the "Try Gutenberg prompt" has me a little worried.
&lt;/p&gt;
&lt;p&gt;
Most content creators just want to get their work done. And even if they are brave and go and try out things. They will get mad, when we let users install and activate Gutenberg, on live sites, when we &lt;strong&gt;know&lt;/strong&gt; some of the plugins installed won't work and they won't get their work done.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;em&gt;"People may not remember exactly what you did, or what you said, but they will always remember how you made them feel." --&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Is there are way to warn a person before they install and activate Gutenberg, when they have plugins installed we &lt;strong&gt;know&lt;/strong&gt; won't work (Publish Post Preview, or Switch Post Type)?
&lt;/p&gt;
&lt;p&gt;
Can we have a warning on the prompt, stating 1) it's still in beta, and they are part of a test.  Things might break and 2) if they are brave enough to try it, here are things that WILL NOT work? And make it individual to their own installation.
&lt;/p&gt;
&lt;p&gt;
I started a list of known Themes and Plugins that bomb, its rudimentary right now from various sources, with maybe a 14 - 16 items on it. I can certainly use the next couple of weeks to add to it, and maintain it also in machine readable form (json, csv, txt, whatever) so it can be polled by a script, that comes with the "Try Gutenberg" prompt.
In essence, all you would need is the plugins' slugs in a list, I'd be happy to augment it with export of Daniels data.
&lt;/p&gt;
&lt;p&gt;
And this list gets better and better the more people try it and report. That way, we can warn the people of the potholes along the way regardless how fast the hick-ups can be fixed. The list of known plugins can be updated with every Gutenberg update.
&lt;/p&gt;
&lt;p&gt;
If the 'hard-hat-zone" searcher finds plugins installed from the list, the prompt could also just not appear.
&lt;/p&gt;
&lt;p&gt;
The goal of the prompt, as I understand is to find out how 'real users' (not experts) work with Gutenberg. It should give information about the use of editor itself. It would be a shame when we want to get users working with Gutenberg, yet some users, ready to help-out get discouraged just because we didn't warn them even if we could. And instead getting more user to help debugg the Gutenberg editors, we primarily collect tickets on incompatibilities. It has its own value, admitted, but do we need 'normal users' to get to this pain to discover them?
&lt;/p&gt;
&lt;p&gt;
I have a lot of empathy for users that can't get their work done because they didn't think twice and clicked on a nice blue button.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Fri, 30 Mar 2018 02:43:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:49</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:49/1522377812984922</guid>
      <description>&lt;p&gt;
@danielbachhuber thanks...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If the shape of the data is the exact same, then we could co-opt the status attribute to trigger an auto-save (i.e. status=auto-save).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The shape of the data is identical - its a post thats being saved, both for posts and for autosaves. The problem with status is an autosave can have a published or draft status, we need to store the status. In &lt;a href="https://core.trac.wordpress.org/ticket/43316#comment:10"&gt;https://core.trac.wordpress.org/ticket/43316#comment:10&lt;/a&gt; @azaozz proposed using post type as the 'flag' that triggers an autosave. see &lt;a class="missing attachment"&gt;43316.1.diff&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally, in thinking about this more, I'd be leaning closer to one revisions endpoint that covers past and future revisions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So, add the ability to explicitly create revisions?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right now, it's difficult to understand the decisions and consensus through all of the Trac comments and patches.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree - and there was additional discussion in &lt;a class="ext-link" href="https://wordpress.slack.com/archives/C02RQC26G/p1520345228000158"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;slack&lt;/a&gt; around this ticket as well.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41035 (Don't return if WP_Error object return by wp_insert_term() from ...) updated</title>
      
        <dc:creator>pbiron</dc:creator>

      <pubDate>Fri, 30 Mar 2018 01:31:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41035#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41035#comment:3/1522373511716085</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/41035#comment:2" title="Comment 2"&gt;boonebgorges&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
We currently don't have a great way of handling return values in mixed-success situations. We can only return one thing: in this case, it's either an array of &lt;code&gt;$tt_ids&lt;/code&gt; or a &lt;code&gt;WP_Error&lt;/code&gt; object. If we allowed the function to process partially, it's not clear to me how we would provide this information to developers. I think this is probably the main reason why we ought to keep something like the current (imperfect) behavior. Do you have ideas about how this error reporting can be improved without losing important feedback for developers?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I just bumped into this problem today, altho for a slightly different reason than the OP.
&lt;/p&gt;
&lt;p&gt;
In my case, &lt;code&gt;term_exists()&lt;/code&gt; (&lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-includes/taxonomy.php#L2286"&gt; on line 2286&lt;/a&gt;) was returning false but the &lt;code&gt;wp_insert_term()&lt;/code&gt; (&lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-includes/taxonomy.php#L2290"&gt;on line 2290&lt;/a&gt;) was returning a &lt;code&gt;WP_Error&lt;/code&gt; that the term already existed...because the new &lt;code&gt;$term-&amp;gt;name&lt;/code&gt; was getting "santizied" into a string that was the same as an existing &lt;code&gt;$term-&amp;gt;name&lt;/code&gt; (due to illegal UTF-8 encoding of the string).
&lt;/p&gt;
&lt;p&gt;
The following is just off the top of my head (i.e., I have't thought thru all of the implications), but...
&lt;/p&gt;
&lt;p&gt;
Since a single &lt;code&gt;WP_Error&lt;/code&gt; object can contain more than 1 error (via &lt;code&gt;WP_Error:add()&lt;/code&gt;), how about &lt;code&gt;WP_Error::add()&lt;/code&gt;'ing error that occurs in the loop...and then doing 1 final &lt;code&gt;WP_Error::add()&lt;/code&gt; with the &lt;code&gt;$tt_ids&lt;/code&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19278 (Allow WP_List_Table ::get_bulk_items() to receive a nested array and ...) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Fri, 30 Mar 2018 00:57:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19278#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19278#comment:6/1522371431695808</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Going to play necromancer here a bit and submit a patch for this. I work with WP List Table often and I know many other developers use it in their plugins/themes (&lt;a class="ext-link" href="https://codex.wordpress.org/Class_Reference/WP_List_Table"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;despite the codex warning&lt;/a&gt;). Optgroup's would be a nice way to organize bulk actions.
&lt;/p&gt;
&lt;p&gt;
The patch I submitted just checks if the current value from the existing bulk actions foreach is an array. If it is, the key becomes the optgroup label, and a new foreach is used to loop over the optgroup's children. Otherwise it proceeds as usual. I also modified a couple variable names to semantic reasons.
&lt;/p&gt;
&lt;p&gt;
I would love to hear back from others about any unforeseen impacts that this change might have.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>19278.diff attached to Ticket #19278</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Fri, 30 Mar 2018 00:48:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19278/19278.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19278/19278.diff/1522370883710939</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>danielbachhuber</dc:creator>

      <pubDate>Fri, 30 Mar 2018 00:21:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:48</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:48/1522369306318708</guid>
      <description>&lt;p&gt;
Thanks @azaozz, @adamsilverstein. I'll reply to the few points I can easily comment on:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Here we are proposing that revisions are created whenever an autosave occurs and the content has changed not insignificantly. This expands the definition of autosaves and lets WordPress automatically track your changes over time versus keeping only a single backup (especially for published posts). This protects users by capturing a history of changes. A filter is provided to disable this behavior.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Has this idea been validated as useful in the real world? Given the tendency of revisions to bloat the database, it seems like it might be worthwhile to verify this is a valuable feature for end users.
&lt;/p&gt;
&lt;p&gt;
Another way of considering: if autosaves create new revisions by some multiple (e.g. 5x), then it will change the UX of working back through the revision history.
&lt;/p&gt;
&lt;p&gt;
Other ideas: only keep the most recent five auto-saves as revisions, only create an auto-save revision every five minutes, etc.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What if you want to save your work in progress when updating an already published post?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We need future revisions! But yeah, interesting question.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm not sure which makes more sense from pure "RESTfull" point of view: having a flag or having a separate controller that partially duplicates the &lt;code&gt;WP_REST_Posts_Controller&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If the shape of the data is the exact same, then we could co-opt the &lt;code&gt;status&lt;/code&gt; attribute to trigger an auto-save (i.e. &lt;code&gt;status=auto-save&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
If the shape of the data is different, then we need a different REST endpoint.
&lt;/p&gt;
&lt;p&gt;
REST is all about the resources: Posts, Users, Terms, etc. A Post has &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt;, whereas a user has &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Because the data is shaped differently, they exist at different endpoints.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Generally, in thinking about this more, I'd be leaning closer to one revisions endpoint that covers past and future revisions. We could handle write operations through &lt;code&gt;/wp/v2/posts&lt;/code&gt; with special &lt;code&gt;status&lt;/code&gt; attribute handling.
&lt;/p&gt;
&lt;p&gt;
Even taking a step back from this, it seems like it might make sense to produce a design document capturing all of the detail on how the endpoint(s) should behave, and write code once that's determined. Right now, it's difficult to understand the decisions and consensus through all of the Trac comments and patches.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43602 (Add to the privacy tools UX a means to erase personal data by username ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:26:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43602#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43602#comment:5/1522362390984335</guid>
      <description>&lt;p&gt;
Update: @mikejolley and I are working on this in a temporary repo here: &lt;a class="ext-link" href="https://github.com/allendav/wp-privacy-requests"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/allendav/wp-privacy-requests&lt;/a&gt; while we await @melchoyce 's designs
&lt;/p&gt;
&lt;p&gt;
See also patch added today in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43442" title="#43442: enhancement: Add tools for anonymizing of commenters (closed: fixed)"&gt;#43442&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:26:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:95</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:95/1522362361708768</guid>
      <description>&lt;p&gt;
Helping inexperienced users get to know the new editing experience.
&lt;/p&gt;
&lt;p&gt;
Having the option to choose among a few pre created designs/layouts (similar to selecting template layouts).
Perhaps having two thumbnails boxes.
Box 1: Enter the Gutenberg Experience. Gives the standard blank screen.
Box 2: How to use Gutenberg. Shows a post/page with examples on how Gutenberg works. Gives hand holding instructions in adjusting various blocks that are used in the layout. The user gets instructions from the beginning on how to adjust and add blocks by reading the instructional Gutenberg layout page. It would then use various standard blocks, give links to various resources pages and at the same time also ask for feedback. All in one instructional Gutenberg created page.
&lt;/p&gt;
&lt;p&gt;
--
&lt;/p&gt;
&lt;p&gt;
Having resources easily available for the user to read/learn about Gutenberg. Will the plugin support forum be the main way for all users to give feedback and ask questions? Or are there plans to easily add feedback in another way?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43442 (Add tools for anonymizing of commenters) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:23:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43442#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43442#comment:6/1522362224424542</guid>
      <description>&lt;p&gt;
@fclaussen - I've taken your patch and rolled it into a new one that is compatible with the ajax pump and eraser registration in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43637" title="#43637: enhancement: Add filters and ajax support for personal data erasure (closed: fixed)"&gt;#43637&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
@jesperher - I'd like to use your anonymizers when they land - we need anonymizers for author, author email and IP
&lt;/p&gt;
&lt;p&gt;
To test:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;install 43442.diff
&lt;/li&gt;&lt;li&gt;install 43637.diff from &lt;a href="https://core.trac.wordpress.org/ticket/43637"&gt;https://core.trac.wordpress.org/ticket/43637&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;install the temporary plugin from &lt;a class="ext-link" href="https://github.com/allendav/wp-privacy-requests"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/allendav/wp-privacy-requests&lt;/a&gt; and follow the  instructions in the README.md in that repo to kick off personal data removal
&lt;/li&gt;&lt;li&gt;note: the temporary plugin will be delivered in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43602" title="#43602: enhancement: Add to the privacy tools UX a means to erase personal data by username ... (closed: fixed)"&gt;#43602&lt;/a&gt; + &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43546" title="#43546: enhancement: Add to the privacy tools UX a means to export personal data by ... (closed: fixed)"&gt;#43546&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;profit!
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
cc @azaozz @mikejolley
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:23:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663#comment:1/1522362183134495</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>43663.2.diff attached to Ticket #43663</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:21:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43663/43663.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43663/43663.2.diff/1522362117154025</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>43442.diff attached to Ticket #43442</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:17:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43442/43442.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43442/43442.diff/1522361828396886</guid>
      <description>&lt;p&gt;
Builds on fclaussen's patch but makes it pageable and compatible with the ajax in 43637
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>43663.diff attached to Ticket #43663</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:17:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43663/43663.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43663/43663.diff/1522361822873342</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43663 (Unit Test test_theme_file_uri_returns_valid_uri fails on directories ...) created</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:15:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43663</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43663/1522361747554613</guid>
      <description>&lt;p&gt;
Setting up PHPUnit and running the unit tests for the first time produced some failures because I was running from a directory with spaces in the name (WordPress Unit Tests).
&lt;/p&gt;
&lt;p&gt;
4 assertions in total failed, but all 4 of them reference the same function, here is one of the examples:
&lt;/p&gt;
&lt;pre class="wiki"&gt;1) Test_Theme_File::test_theme_file_uri_returns_valid_uri with data set #0 ('parent-only.php', 'theme-file-parent', array('theme-file-parent'))
Failed asserting that two strings are identical.
--- Expected
+++ Actual
@@ @@
-'/Users/mattkeys/Desktop/W/WordPress%20Unit%20Tests/tests/phpunit/includes/../data/themedir1/default/parent-only.php'
+'/Users/mattkeys/Desktop/W/WordPress Unit Tests/tests/phpunit/includes/../data/themedir1/default/parent-only.php'
&lt;/pre&gt;&lt;p&gt;
Looking at this test, it makes use of esc_url_raw() which encodes the spaces as %20, then compares them against the original URI which has does not have the spaces encoded, so they are not the same.
&lt;/p&gt;
&lt;p&gt;
If this is something that we want to fix, an easy way would be to str_replace spaces &amp;gt; %20 before running the assertion. Patch attached.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43637 (Add filters and ajax support for personal data erasure) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:15:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43637#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43637#comment:2/1522361726273649</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Requires &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43442" title="#43442: enhancement: Add tools for anonymizing of commenters (closed: fixed)"&gt;#43442&lt;/a&gt; to test. For testing instructions, see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43442" title="#43442: enhancement: Add tools for anonymizing of commenters (closed: fixed)"&gt;#43442&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43637.diff attached to Ticket #43637</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 22:14:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43637/43637.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43637/43637.diff/1522361671360644</guid>
      <description>&lt;p&gt;
Adds personal data eraser filtering and ajax supportr
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43473 (Add default text for a privacy policy) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Thu, 29 Mar 2018 21:48:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43473#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43473#comment:5/1522360132104633</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43473#comment:4" title="Comment 4"&gt;allendav&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
This is only about the "default" privacy policy text in WordPress. It will be "the base" for it. We'll add it to the policy page when creating it, and also (probably) to the policy metabox, as it should be accessible even after the policy page was created.
&lt;/p&gt;
&lt;p&gt;
As @idea15 mentions above, this text should be easy to translate and will cover all of WordPress' default privacy like oEmbeds, registered user cookies, private data stored in posts, comments, user profile, etc.
&lt;/p&gt;
&lt;p&gt;
It could also mention several groups of commonly used plugins like spam checks, analytics, etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #23578,​43662 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Thu, 29 Mar 2018 21:31:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=23578%2C43662</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=23578%2C43662/1522359081725596</guid>
      <description>duplicate: &lt;p&gt;
Hi @Julius123, welcome to WordPress Trac!
&lt;/p&gt;
&lt;p&gt;
Thanks for the report, we're already tracking this issue in &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/23578" title="#23578: defect (bug): URLs wrapped in &amp;lt;&amp;gt; parsed as HTML when wp_mail_content_type set to ... (new)"&gt;#23578&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/21095" title="#21095: defect (bug): Reset password link is in &amp;lt; RESET_URL &amp;gt; - Gmail does not show it. (closed: invalid)"&gt;#21095&lt;/a&gt;. Also related: &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/43206" title="#43206: defect (bug): Angle brackets around URLs can confuse email clients (reopened)"&gt;#43206&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #43206 (Angle brackets around URLs can confuse email clients) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Thu, 29 Mar 2018 21:10:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43206#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43206#comment:4/1522357815318738</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43662 (No reset password link preset in some providers) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:57:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43662#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43662#comment:1/1522357060134706</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello Julius123,
&lt;/p&gt;
&lt;p&gt;
A good next step here would be to submit a patch (.diff file) with your changes. There are a variety of methods out there for generating this file. Your can use SVN or GIT. Read more here: &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/tutorials/trac/submitting-a-patch/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://make.wordpress.org/core/handbook/tutorials/trac/submitting-a-patch/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>jadonn</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:54:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:94</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:94/1522356841388782</guid>
      <description>&lt;p&gt;
@pento Thank you for the warm response! I think those three areas you outlined align with our goals from the #hosting-community side. We are aiming to recruit folks who could screen the forums for issues and then confirm they are issues before logging them in a database of reported incompatibilities. I think at the moment we have the most interest in automated tools for identifying incompatibilities, but we are going working on outreach to drum up more help for reviewing and replicating issues. I will report back to the #hosting-community at our next meeting next week about what you have said to get everyone's feedback and to work on developing plans for supporting the Try Gutenberg launch and for ensuring our goals and yours align.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43473 (Add default text for a privacy policy) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:53:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43473#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43473#comment:4/1522356815676719</guid>
      <description>&lt;p&gt;
I am assuming this ticket would also support filtering so plugins could add their own suggested snippets for privacy policies for use with &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43620" title="#43620: enhancement: Privacy Policy page design (closed: fixed)"&gt;#43620&lt;/a&gt; ?
&lt;/p&gt;
&lt;p&gt;
cc @melchoyce
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #21666 (Customizer reset/undo/revert) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:14:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/21666#comment:51</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/21666#comment:51/1522354490385170</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #themereview by joyously. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/themereview/p1522354488000221"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>unneccessary-call-to-get_post.diff attached to Ticket #43661</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:11:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43661/unneccessary-call-to-get_post.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43661/unneccessary-call-to-get_post.diff/1522354297764734</guid>
      <description>&lt;p&gt;
removing unneeded call out to get_post when we already have the post object
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43661 (Un-neccessary call to get_post() in get_body_class() method) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:11:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43661#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43661#comment:2/1522354260500657</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I do not see any reason that get_post() needs to be called here. Comparing what is returned from $wp_query-&amp;gt;get_queried_object() and from get_post() they are the same. I think this should be safe to be removed, I've attached a diff.
&lt;/p&gt;
&lt;p&gt;
In your particular use case you *may* run into a similar issue with the call to get_pages() that happens shortly after the code you mentioned, where you may not get the 'page-parent' class applied when it should. But that may or may not be an issue in your implementation.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Screen Shot 2018-03-29 at 12.59.38.png attached to Ticket #43662</title>
      
        <dc:creator>Julius123</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:04:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43662/Screen%20Shot%202018-03-29%20at%2012.59.38.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43662/Screen%20Shot%202018-03-29%20at%2012.59.38.png/1522353896462559</guid>
      <description>&lt;p&gt;
login.php
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43662 (No reset password link preset in some providers) created</title>
      
        <dc:creator>Julius123</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:04:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43662</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43662/1522353870481655</guid>
      <description>&lt;p&gt;
The password reset email is missing the rest link in some cases. It seems to be because of an inconsistency with email providers with regards to text vs html emails. The fix is below in login.php
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
$message .= '&amp;lt;' . network_site_url( "wp-login.php?action=rp&amp;amp;key=$key&amp;amp;login=" . rawurlencode( $user_login ), 'login' ) . "&amp;gt;\r\n";
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
should be
&lt;/p&gt;
&lt;p&gt;
$message .= '(' . network_site_url( "wp-login.php?action=rp&amp;amp;key=$key&amp;amp;login=" . rawurlencode( $user_login ), 'login' ) . ")\r\n";
&lt;/p&gt;
&lt;p&gt;
Note that &amp;lt; &amp;gt;has been replaced with ( )
&lt;/p&gt;
&lt;p&gt;
Cheers
&lt;/p&gt;
&lt;p&gt;
Julius
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #38624 (Allow starter content to apply after a site has already been set up ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Thu, 29 Mar 2018 20:01:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38624#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38624#comment:24/1522353692447224</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #themereview by joyously. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/themereview/p1522353690000420"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43438 (Add filters and Ajax support for personal data export) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 19:50:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43438#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43438#comment:35/1522353044953071</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43438#comment:34" title="Comment 34"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/42889" title="Privacy: add support for exporting multiple pages of personal data.
 ..."&gt;[42889]&lt;/a&gt; has a few issues which need to be addressed:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thank you @ocean90 ! - I'll submit a patch to address these
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43661 (Un-neccessary call to get_post() in get_body_class() method) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Thu, 29 Mar 2018 19:45:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43661#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43661#comment:1/1522352715997589</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43661 (Un-neccessary call to get_post() in get_body_class() method) created</title>
      
        <author>pat@…</author>

      <pubDate>Thu, 29 Mar 2018 19:05:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43661</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43661/1522350321520171</guid>
      <description>&lt;p&gt;
I'm working with a multisite installation and selecting a Post from the primary site to use as the queried_object on another blog when rendering the front end.
&lt;/p&gt;
&lt;p&gt;
When the body_class() method is called in my header template I've encountered a problem with wp-includes/post-template starting on line 639:
&lt;/p&gt;
&lt;p&gt;
639: } elseif ( is_page() ) {
&lt;/p&gt;
&lt;p&gt;
642: $page_id = $wp_query-&amp;gt;get_queried_object_id();
&lt;/p&gt;
&lt;p&gt;
644: $post = get_post($page_id);
&lt;/p&gt;
&lt;p&gt;
The queried object id and the post has already been defined on line 598 and 599:
&lt;/p&gt;
&lt;p&gt;
$post_id = $wp_query-&amp;gt;get_queried_object_id();
$post = $wp_query-&amp;gt;get_queried_object();
&lt;/p&gt;
&lt;p&gt;
With the call to get_post() it's invoking WP_Post::get_instance() which can't return the Post I've already set as the queried object because it doesn't exist on the current blog.
&lt;/p&gt;
&lt;p&gt;
I'm aware it's a rare use case and there may be other issues I'll encounter, but as far as I can tell the bit of code mentioned above is redundant and can be removed.
&lt;/p&gt;
&lt;p&gt;
Please?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #42919 (Unable to upload files with the AAC extension) reopened</title>
      
        <dc:creator>desrosj</dc:creator>

      <pubDate>Thu, 29 Mar 2018 18:59:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42919#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42919#comment:11/1522349945327134</guid>
      <description>&lt;p&gt;
Reopening this for two reasons.
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The original intention of the ticket was to allow users to upload a file with the &lt;code&gt;.aac&lt;/code&gt; extension. Uploading a file with the &lt;code&gt;aac&lt;/code&gt; mime type was allowed, but only if it was used in an MP4 container. This is a bug fix, and I think that the fix in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/42919/42919.diff" title="Attachment '42919.diff' in Ticket #42919"&gt;42919.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/42919/42919.diff" title="Download"&gt;​&lt;/a&gt; should be backported to the &lt;code&gt;4.9&lt;/code&gt; branch.
&lt;/li&gt;&lt;/ol&gt;&lt;ol start="2"&gt;&lt;li&gt;&lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/42697" title="Media: Add `aac` to the list of allowed file types.
Props desrosj. ..."&gt;r42697&lt;/a&gt; also adds support to the media player for &lt;code&gt;.aac&lt;/code&gt; files. This does not work in FireFox, though (&lt;a class="ext-link" href="https://caniuse.com/#search=aac"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://caniuse.com/#search=aac&lt;/a&gt;). The player will draw correctly, but the media will not play. Because of this, I think that part of the commit should be reverted.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
We talked this over in this week's Media chat, and there was agreement that if a format is explicitly supported for use in the editor and within embeds, there should not be any bad user experiences.
&lt;/p&gt;
&lt;p&gt;
@SergeyBiryukov wanted to follow up to see if there was something we missed or if there was a reason you added that.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #42919 (Unable to upload files with the AAC extension) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Thu, 29 Mar 2018 18:36:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42919#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42919#comment:10/1522348595108739</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-media by desrosj. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-media/p1522348593000176"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43642 (Gallery titles and labels erasing) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Thu, 29 Mar 2018 18:31:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43642#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43642#comment:1/1522348283610398</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-media by antpb. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-media/p1522348281000679"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #39941 (Allow using Content-Security-Policy without unsafe-inline) updated</title>
      
        <dc:creator>maestr055</dc:creator>

      <pubDate>Thu, 29 Mar 2018 18:30:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39941#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39941#comment:12/1522348252113317</guid>
      <description>&lt;p&gt;
+1
I'm busy with hardening my Wordpress sites. What is the status of this proposed change?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>EXPORT.md attached to Ticket #43546</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 18:05:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43546/EXPORT.md</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43546/EXPORT.md/1522346758279731</guid>
      <description>&lt;p&gt;
Markdown document explaining how this all works together
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43546 (Add to the privacy tools UX a means to export personal data by ...) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 18:05:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43546#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43546#comment:4/1522346705742394</guid>
      <description>&lt;p&gt;
Here is a write up that could be added to &lt;a class="ext-link" href="https://developer.wordpress.org/plugins/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.wordpress.org/plugins/&lt;/a&gt; and linked to from the under-construction privacy chapter in the guidelines.
&lt;/p&gt;
&lt;p&gt;
It helps explain how all this works together: &lt;a class="ext-link" href="https://github.com/allendav/wp-privacy-requests/blob/master/EXPORT.md"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/allendav/wp-privacy-requests/blob/master/EXPORT.md&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
cc @azaozz @mikejolley
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41191 (Create browse happy type notice for PHP versions) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Thu, 29 Mar 2018 17:39:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41191#comment:76</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41191#comment:76/1522345178646624</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by joyously. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1522345176000563"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43660 (Problem uploading images) created</title>
      
        <dc:creator>maxiolmedo</dc:creator>

      <pubDate>Thu, 29 Mar 2018 17:25:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43660</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43660/1522344324530544</guid>
      <description>&lt;p&gt;
Since 4.9.4 the amount of memory needed to upload images increased considerably. Same site, since 4.9.4 wont upload a 1920*1080 JPG image when same site used to upload that same image without problems.
To fix that problem I had to increase the php memory limit.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43659 (ACF form image upload - not showing in media library after WordPress update) updated</title>
      
        <author>sebastien@…</author>

      <pubDate>Thu, 29 Mar 2018 17:14:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43659#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43659#comment:1/1522343656843547</guid>
      <description>&lt;p&gt;
Hello and many thanks to report us this "bug".
But it isn't a WordPress bug as it's an ACF (different from WP)
SUpport is there: &lt;a class="ext-link" href="https://support.advancedcustomfields.com/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://support.advancedcustomfields.com/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
it's isn't a bug, an hook exists to add theimage in the media library
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32656 (Add hooks to allow hijacking cron implementation) updated</title>
      
        <dc:creator>ethitter</dc:creator>

      <pubDate>Thu, 29 Mar 2018 16:53:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32656#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32656#comment:16/1522342436733671</guid>
      <description>&lt;p&gt;
These hooks would be a great addition! Cron Control does some interesting things to offload event storage to its own table, and these hooks would significantly simplify that. Allowing plugins to completely bypass the &lt;code&gt;cron&lt;/code&gt; option would go a long way towards eliminating race conditions that can occur under load.
&lt;/p&gt;
&lt;p&gt;
The issue in &lt;code&gt;wp_reschedule_event()&lt;/code&gt; is an interesting one. The cron array is only needed if the interval can't be determined, which should only happen if a schedule is removed but the events that use it remain. Two options come to mind. The first is to introduce a &lt;code&gt;wp_get_scheduled_event()&lt;/code&gt; or some such thing, which wraps the call to &lt;code&gt;_get_cron_array()&lt;/code&gt; and the attendant parsing out of the event, and which includes a &lt;code&gt;pre_&lt;/code&gt; filter for hijacking. My second thought was to update &lt;code&gt;wp_next_scheduled()&lt;/code&gt; to be able to return more than the event's timestamp. A &lt;code&gt;pre_&lt;/code&gt; filter in &lt;code&gt;_get_cron_array()&lt;/code&gt; is something I considered, but it won't scale unless the function accepts arguments that could be used to return a subset of scheduled events; with the &lt;code&gt;pre_&lt;/code&gt; filters in all of the functions that use the cron array, I'm inclined to leave the array helper alone.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43620 (Privacy Policy page design) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Thu, 29 Mar 2018 16:38:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43620#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43620#comment:12/1522341539729999</guid>
      <description>&lt;p&gt;
Yeah, the only potential problem with scrollbars is that's it's easy to get trapped in them or scroll by accident when you're trying to scroll the page itself.
&lt;/p&gt;
&lt;p&gt;
@rianrietveld, if you have a moment to chime in from an accessibility perspective, which do you think will be better for folks using screen readers here — showing a bunch of copy in a list of scrollable containers, or having a "read more" link on each container?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43659 (ACF form image upload - not showing in media library after WordPress update) created</title>
      
        <dc:creator>jamieson2504</dc:creator>

      <pubDate>Thu, 29 Mar 2018 16:35:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43659</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43659/1522341326156533</guid>
      <description>&lt;p&gt;
I have a front-end form using acf_form() function in ACF Pro. This is used to upload a post type pending review by any site visitor (not logged in).
&lt;/p&gt;
&lt;p&gt;
This includes an image field. When a user uploads the form with an image, the image does not show in the WordPress Media Library.
&lt;/p&gt;
&lt;p&gt;
But after messing around with the filters, eventually the image does show in the library. The only difference I see is that these images have no author - could this possibly be causing them to be filtered out?
&lt;/p&gt;
&lt;p&gt;
This issue has only cropped up recently, possibly since updated WordPress to version 4.9.4. I've noticed on an old backup of my site that I ran locally that the gallery was working fine with old and new versions of ACF. But then would mess up when updating WordPress. Perhaps an update to the database or media structure?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #43620 (Privacy Policy page design) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Thu, 29 Mar 2018 16:20:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43620#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43620#comment:11/1522340420406010</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
The height of each of the policy text bites from plugins could probably vary greatly in length.
I would probably be a good idea to have a "read more" or "see full text" button.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, I've started working on this and expecting the text from each plugin to be somewhere between three to ten paragraphs. On average on most sites there will probably be five plugins that will output such text.
&lt;/p&gt;
&lt;p&gt;
Nevertheless I don't think we should make the UI "the box of 1000 clicks" with accordions, sliders, tabs, or any other "show-me/hide-me" gizmos. A scrollbar so the user can scroll through all output would be enough imho. The simpler the UI -- the better :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43549 (Add a privacy policy page setting/selector to the customizer) updated</title>
      
        <dc:creator>xkon</dc:creator>

      <pubDate>Thu, 29 Mar 2018 15:59:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43549#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43549#comment:9/1522339186073399</guid>
      <description>&lt;p&gt;
I'd say as well let's leave the Customizer out of it, at least for the time being. Let's direct everything to 1 spot for the start as it'll already be pretty confusing to some. I understand the diversity and 'ease of use' to have everything accessible from various points but this is for something super specific and not for the general UI/UX of the front-end website as Customizer is usually.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43545 (Helper functions: Anonymizing data in a standardized way) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Thu, 29 Mar 2018 15:58:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43545#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43545#comment:17/1522339099129012</guid>
      <description>&lt;p&gt;
In 43545.2.diff: make the changes discussed in &lt;a href="https://core.trac.wordpress.org/ticket/43545#comment:11"&gt;https://core.trac.wordpress.org/ticket/43545#comment:11&lt;/a&gt; and &lt;a href="https://core.trac.wordpress.org/ticket/43545#comment:13"&gt;https://core.trac.wordpress.org/ticket/43545#comment:13&lt;/a&gt;. I've also removed the &lt;code&gt;$data_to_anonymize&lt;/code&gt; param since it became unused.
&lt;/p&gt;
&lt;p&gt;
If we want to be able to anonymize IP addresses by truncating them, we can extract the function from the Community Events dashboard widget &lt;a href="https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-admin/includes/class-wp-community-events.php#L210"&gt;https://core.trac.wordpress.org/browser/tags/4.9.4/src/wp-admin/includes/class-wp-community-events.php#L210&lt;/a&gt; and reuse it. However seems that this will not comply with the privacy laws in some countries.
&lt;/p&gt;
&lt;p&gt;
Also, seems that the comment text is considered "personal data", so we will have to delete the whole comments instead of "anonymizing" them. Then there will be no need for truncated IPs for comments.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>clean_up_unit_test.diff attached to Ticket #43636</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 15:52:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43636/clean_up_unit_test.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43636/clean_up_unit_test.diff/1522338765986614</guid>
      <description>&lt;p&gt;
Same as the last patch but with cleaner unit test code
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43636 (Additional wp_query 'fields' choices) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 15:47:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43636#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43636#comment:5/1522338431476585</guid>
      <description>&lt;p&gt;
New patch today updating the names of the new field options to match existing convention. Now all of the options for the fields argument are:
&lt;/p&gt;
&lt;p&gt;
ids (existing option)
id=&amp;gt;parent (existing option)
id=&amp;gt;author_id (new)
id=&amp;gt;title (new)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>wp_query_fields_with_unit_tests_new_field_names.diff attached to Ticket #43636</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 15:45:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43636/wp_query_fields_with_unit_tests_new_field_names.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43636/wp_query_fields_with_unit_tests_new_field_names.diff/1522338315475396</guid>
      <description>&lt;p&gt;
Updating the field names to match existing conventions
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>43545.2.diff attached to Ticket #43545</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Thu, 29 Mar 2018 15:42:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43545/43545.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43545/43545.2.diff/1522338128335203</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>brianhogg</dc:creator>

      <pubDate>Thu, 29 Mar 2018 14:51:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:93</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:93/1522335095363605</guid>
      <description>&lt;p&gt;
@pento I do think it should be easier to re-find that notice, as most wouldn't know they could go to Screen Options. Perhaps a sidebar box within the Gutenberg UI at the very least. The whole goal of something like this is to collect feedback and find issues so it should be as straightforward as possible.
&lt;/p&gt;
&lt;p&gt;
Also if the admin notice doesn't disappear, what does "Try Today" button do then after the plugin is installed and activated?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43549 (Add a privacy policy page setting/selector to the customizer) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Thu, 29 Mar 2018 14:43:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43549#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43549#comment:8/1522334581582495</guid>
      <description>&lt;p&gt;
Yeah, I'm not sure this is a good use-case for the Customizer. Just setting the page doesn't help much if there isn't anything else you can configure without hopping out and actually editing the page content.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43435 (Add settings screen for creating a privacy policy) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Thu, 29 Mar 2018 14:40:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43435#comment:40</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43435#comment:40/1522334439607592</guid>
      <description>&lt;p&gt;
Hey @dejliglama, in the GDPR chat, it was suggested I break the design out into a separate ticket. What's in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43620" title="#43620: enhancement: Privacy Policy page design (closed: fixed)"&gt;#43620&lt;/a&gt; is a riff off of @azaozz's earlier concepts in here.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43620 (Privacy Policy page design) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Thu, 29 Mar 2018 14:38:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43620#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43620#comment:10/1522334322473227</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43620#comment:6" title="Comment 6"&gt;dejliglama&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The height of each of the policy text bites from plugins could probably vary greatly in length.
I would probably be a good idea to have a "read more" or "see full text" button.
&lt;/p&gt;
&lt;p&gt;
The copy btn should, of course, copy the full-length text.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Good idea 👍
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43620#comment:8" title="Comment 8"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
With Gutenberg around the corner, is the current proposal actually the best approach here?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As @xkon mentioned, there's a solid chance this will be released before Gutenberg. I did start exploring a Gutenberg version, though: &lt;a class="ext-link" href="https://marvelapp.com/3b5j6j4/screen/40182175"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://marvelapp.com/3b5j6j4/screen/40182175&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41242 (Image crop not working in mobile screen.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Thu, 29 Mar 2018 14:16:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41242#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41242#comment:32/1522332997521003</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/41242#comment:31" title="Comment 31"&gt;adamsilverstein&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Add &lt;code&gt;imgareaselect&lt;/code&gt; to uglify grunt process
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Should we also add it to &lt;code&gt;precommit:js&lt;/code&gt;, next to &lt;code&gt;uglify:masonry&lt;/code&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41242 (Image crop not working in mobile screen.) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Thu, 29 Mar 2018 13:07:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41242#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41242#comment:31/1522328834989273</guid>
      <description>&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/41242/41242.2.diff" title="Attachment '41242.2.diff' in Ticket #41242"&gt;41242.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/41242/41242.2.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add &lt;code&gt;imgareaselect&lt;/code&gt; to uglify grunt process, builds &lt;code&gt;wp-includes/js/imgareaselect/jquery.imgareaselect.min.js&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;updated &lt;code&gt;jquery.imgareaselect.min.js&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Does this look good @SergeyBiryukov ?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>41242.2.diff attached to Ticket #41242</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Thu, 29 Mar 2018 13:04:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/41242/41242.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/41242/41242.2.diff/1522328693920846</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #41242 (Image crop not working in mobile screen.) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Thu, 29 Mar 2018 12:45:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41242#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41242#comment:30/1522327510613906</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/41242#comment:29" title="Comment 29"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This is still an external package/library. That's why the minified file is committed together with the source.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, and the external library is no longer maintained and we are patching the source code. Thats why our build process should create the minified file, so committers don't have to manually build the file.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Thu, 29 Mar 2018 11:15:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:47</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:47/1522322111383767</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43316#comment:45" title="Comment 45"&gt;danielbachhuber&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
From the user's perspective, I see two goals:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;I should never lose what I'm currently working on (autosaves).
&lt;/li&gt;&lt;li&gt;I should be able to see, and restore, my history of edits (revisions).
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
If we agree these are two &lt;em&gt;distinct&lt;/em&gt; goals, then it would logically make sense to have two separate REST API endpoints because there are two distinct sets of behaviors:
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, there are two distinct goals and we have two separate REST API endpoints for them. Actually we have two separate REST API controllers for them: &lt;code&gt;WP_REST_Autosaves_Controller&lt;/code&gt; and &lt;code&gt;WP_REST_Revisions_Controller&lt;/code&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ol&gt;&lt;li&gt;The autosaves endpoint is read/write. There is only one 'autosave' resource per user. A client can create an autosave for a user, retrieve the autosave for the user, and retrieve all autosaves for all users.
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
Not quite.
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The autosaves endpoint is a duplicate of the &lt;code&gt;save&lt;/code&gt; endpoint. The only reason it exists (in a separate controller) is to pass a flag to the server when the client has initiated an automatic save. I'm not sure which makes more sense from pure "RESTfull" point of view: having a flag or having a separate controller that partially duplicates the &lt;code&gt;WP_REST_Posts_Controller&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;"There is only one 'autosave' resource per user." No. There are no separate 'autosave' resources. These are the same 'post' and 'revision' resources.
&lt;/li&gt;&lt;li&gt;"A client can create an autosave for a user". No. A client cannot create an autosave. A client can save the post, and the server decides what to do according to its "business logic".
&lt;/li&gt;&lt;li&gt;"...retrieve the autosave for the user". Yeah, the client should be able to get the latest revision for a post. This has nothing to do with who the user is. Autosave revisions can be retrieved through the revisions controller. Not really sure we need to duplicate this in the autosave controller.
&lt;/li&gt;&lt;li&gt;"...and retrieve all autosaves for all users". This can also be done through the revisions controller. Not sure we need the duplicate here too.
&lt;/li&gt;&lt;/ol&gt;&lt;blockquote class="citation"&gt;
&lt;ol start="2"&gt;&lt;li&gt;The revisions endpoint is read-only. Revisions are created by server when a resource is saved. The client can only retrieve all revisions (I've forgotten how we support "restoring" revisions).
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
Right. Revisions are typically restored in the client, after the user chooses the content. Then the post is saved as usual.
&lt;/p&gt;
&lt;p&gt;
Revisions can also be deleted by the client which generally shouldn't be possible as they are "audit trail". The client is generally "untrusted" and shouldn't "mess with" the server logic. Imagine an &lt;code&gt;author&lt;/code&gt; level user managing all revisions of a post they started, including the revisions that were made by the editor(s). But this is a different discussion/weakness/bug.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
And then we get in to the programmatic implementation of the abstraction:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It seems magical to create a revision based on some algorithm applied to the saved data.
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Are you talking about the "disaster recovery when the user was editing for 6 hours and didn't save even once and at the end there was a (network or human) error and they lost all their work" mode? :) There is nothing "magical" about it. It's just a rare edge case we decided to cover in the server logic. Again, this is the "business logic" when saving a post, nothing to do with the client.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Similarly, if revisions are only created when a post is fully saved, then I think it makes sense to keep that distinction in the client-side UX (i.e. you hit the "Save" button to create a revision).
&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Yep, agreed. That is up to the client to decide. This is also the way it currently works on the Edit Post screen.
&lt;/p&gt;
&lt;p&gt;
Also, revisions may be created or deleted at any time depending on the server logic. There may be restrictions on how many revisions to keep, revisions may be disabled altogether, plugins may decide when and how to save a revision or to prevent it from saving. None of this logic belongs in the client.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ul&gt;&lt;li&gt;Because autosaves are user-specific, paths and supported operations would be:
&lt;ul&gt;&lt;li&gt;&lt;code&gt;GET /wp/v2/posts/&amp;lt;post-id&amp;gt;/autosaves&lt;/code&gt; - List all autosave objects.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;POST /wp/v2/posts/&amp;lt;post-id&amp;gt;/autosves&lt;/code&gt; - Create a new autosave object.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;GET /wp/v2/posts/&amp;lt;post-id&amp;gt;/autosaves/&amp;lt;user-id&amp;gt;&lt;/code&gt; - Get the autosave object for a specific user.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;
Autosave revisions are &lt;strong&gt;not&lt;/strong&gt; user specific. The user that is also author of the post usually doesn't get an autosave revision while editing. When saving, the logic for creating autosave revisions looks at who is the post author and who is the current user only to prevent content loss/overwriting.
&lt;/p&gt;
&lt;p&gt;
I'm actually thinking we should remove either the "get single autosave" or the "get all autosaves" endpoint. Doesn't make sense to have both on top of all revisions endpoints (that also retrieve autosaves).
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35596 (Color contrast: checkboxes and radio buttons) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Thu, 29 Mar 2018 11:02:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35596#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35596#comment:23/1522321355870611</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #accessibility by rianrietveld. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/accessibility/p1522321353000221"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35596 (Color contrast: checkboxes and radio buttons) updated</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Thu, 29 Mar 2018 11:01:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35596#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35596#comment:22/1522321310846680</guid>
      <description>&lt;p&gt;
@afercia: 35596.3.patch is a refresh of nr 2.
Enhances colour contrast for radio buttons and check boxes.
&lt;/p&gt;
&lt;p&gt;
Tested in Firefox/Safari/Chrome/Edge/IE11.
&lt;/p&gt;
&lt;p&gt;
Doesn't work in Firefox and IE11, as expected.
But it seems like IE11 already has a default darker border.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>35596.3.patch attached to Ticket #35596</title>
      
        <dc:creator>rianrietveld</dc:creator>

      <pubDate>Thu, 29 Mar 2018 10:34:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/35596/35596.3.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/35596/35596.3.patch/1522319651061852</guid>
      <description>&lt;p&gt;
Refresh of 35596.2.patch
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #42264 (Systematic way of dealing with compat code and polyfills) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Thu, 29 Mar 2018 08:56:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42264#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42264#comment:5/1522313805954769</guid>
      <description>&lt;p&gt;
@ayeshrajans All individual back-fills should still be wrapped in &lt;code&gt;function_exists()&lt;/code&gt;, &lt;code&gt;interface_exists()&lt;/code&gt;, &lt;code&gt;defined()&lt;/code&gt; calls, just like they are now.
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;extensions_loaded()&lt;/code&gt; logic example was just intended to regulate which back-fill files to load.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
and functions can be disabled in &lt;code&gt;php.ini&lt;/code&gt; where &lt;code&gt;extension_loaded&lt;/code&gt; would happily return &lt;code&gt;true&lt;/code&gt;, but &lt;code&gt;function_exists&lt;/code&gt; doesn't.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You have a point there which needs further thought, as that would be a argument to have the compat bootstrap file have all the &lt;code&gt;function_exists()&lt;/code&gt; checks and have the back-fill files just add individual functions, though that would also necessitate each back-fill to be in their own file, which might be going over the top a bit with modular loading.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42438 (Add support for preload links (similar to resource hints)) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Thu, 29 Mar 2018 08:53:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42438#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42438#comment:2/1522313634654815</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42438 (Add support for preload links (similar to resource hints)) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Thu, 29 Mar 2018 08:53:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42438#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42438#comment:1/1522313624660000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Previously: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34292" title="#34292: feature request: Support for DNS Prefetching &amp;amp; Prerender (closed: fixed)"&gt;#34292&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38121" title="#38121: enhancement: Crossorigin and other attributes for wp_resource_hints (closed: fixed)"&gt;#38121&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Browser support looks much better now: &lt;a class="ext-link" href="https://caniuse.com/#feat=link-rel-preload"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://caniuse.com/#feat=link-rel-preload&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #18857 (get_plugin_page_hookname uses menu_title to construct subpage load-hooks) updated</title>
      
        <dc:creator>swissspidy</dc:creator>

      <pubDate>Thu, 29 Mar 2018 08:23:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/18857#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/18857#comment:33/1522311811989351</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43656 (Media attachment filter does not work after switching list mode to ...) updated</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:23:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43656#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43656#comment:1/1522308184571028</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43658 (Media attachment filter drop-down mime types in grid mode is not ...) updated</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:22:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43658#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43658#comment:2/1522308137158365</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43658 (Media attachment filter drop-down mime types in grid mode is not ...) updated</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:21:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43658#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43658#comment:1/1522308118605449</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>43658.patch attached to Ticket #43658</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:19:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43658/43658.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43658/43658.patch/1522307950222600</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #42264 (Systematic way of dealing with compat code and polyfills) updated</title>
      
        <dc:creator>ayeshrajans</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:18:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42264#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42264#comment:4/1522307899209853</guid>
      <description>&lt;p&gt;
👍👌 for &lt;code&gt;extension_loaded&lt;/code&gt; calls to detect availability. That really makes the code more readable too.
&amp;lt;bike-shedding&amp;gt;
There are few arguments in outside PHP communities to use &lt;code&gt;function_exists&lt;/code&gt; vs &lt;code&gt;extension_loaded&lt;/code&gt; - &lt;code&gt;function_exists&lt;/code&gt; is tiny bit faster and functions can be disabled in &lt;code&gt;php.ini&lt;/code&gt; where &lt;code&gt;extension_loaded&lt;/code&gt; would happily return true, but &lt;code&gt;function_exists&lt;/code&gt; doesn't.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;/bike-shedding&amp;gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>media-list-attachment-filter-dropdown.png attached to Ticket #43658</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:09:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43658/media-list-attachment-filter-dropdown.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43658/media-list-attachment-filter-dropdown.png/1522307389632746</guid>
      <description>&lt;p&gt;
List view attachment filters drop-down
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>media-grid-attachment-filter-dropdown.png attached to Ticket #43658</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:09:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43658/media-grid-attachment-filter-dropdown.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43658/media-grid-attachment-filter-dropdown.png/1522307352572909</guid>
      <description>&lt;p&gt;
Grid view attachments filters drop-down
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43658 (Media attachment filter drop-down mime types in grid mode is not ...) created</title>
      
        <dc:creator>itzmekhokan</dc:creator>

      <pubDate>Thu, 29 Mar 2018 07:07:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43658</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43658/1522307262893443</guid>
      <description>&lt;p&gt;
In &lt;strong&gt;Gird&lt;/strong&gt; mode media attachment filter is not properly filtered by available mime types, it shows all mime types by default via -
&lt;/p&gt;
&lt;pre class="wiki"&gt;get_post_mime_types()
&lt;/pre&gt;&lt;p&gt;
But in &lt;strong&gt;List mode&lt;/strong&gt; its already filtered by checking
&lt;/p&gt;
&lt;pre class="wiki"&gt;if ( ! wp_match_mime_types( $mime_type, $avail_post_mime_types ) ) {
	continue;
}
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>pento</dc:creator>

      <pubDate>Thu, 29 Mar 2018 03:07:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:92</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:92/1522292852540261</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/41316/41316.12.diff" title="Attachment '41316.12.diff' in Ticket #41316"&gt;41316.12.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/41316/41316.12.diff" title="Download"&gt;​&lt;/a&gt; has a slight language tweak, props @benhuberman.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Thanks for the offer, @jadonn! I've caught up with the log of the hosting meeting, I agree with a lot of the discussion there. Hosts are in a unique position to be able to collect a wide range of testing data and feedback, and filter that into actionable items for us to work on. Depending on the skills of the folks you're able to put onto this, I think there are three major areas where you'd have the biggest impact:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Support forums. If you have support folks who can help out with the increased load we expect to see on the forums, that will be a huge help to the forums team. Having support folks who are able to recognise and diagnose similar issues across a wide range of sites means we can get fixes out faster.
&lt;/li&gt;&lt;li&gt;Testing. Not necessarily front-line testing, but folks who are able to take a reported problem, and turn it into a reproducible set of steps would be wonderful. Getting bug fixes out as quickly as possible depends on being able to consistently reproduce the bugs.
&lt;/li&gt;&lt;li&gt;Tools development. I saw some discussion about improving and streamlining @danielbachhuber's plugincompat tool. Being able to build an accurate snapshot of plugin compatibility means we can give end users the best possible experience, regardless of which plugins they use. We can fix compatibility issues where possible, and fall back to the classic editor where it isn't.
&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;
&lt;p&gt;
@brianhogg: While Gutenberg is still a plugin, it will continue to have the Classic Editor link, so people can easily switch back to the classic editor, should they either be a user who can't disable plugins, or they're not sure how.
&lt;/p&gt;
&lt;p&gt;
Also, the admin notice doesn't disappear when you click "Try Today", it only disappears if you click the "Dismiss" button. It re-appears if you re-enable it in the "Screen Options" dropdown.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43636 (Additional wp_query 'fields' choices) updated</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 01:59:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43636#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43636#comment:4/1522288774572180</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>wp_query_fields_with_unit_tests.diff attached to Ticket #43636</title>
      
        <dc:creator>mattkeys</dc:creator>

      <pubDate>Thu, 29 Mar 2018 01:58:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43636/wp_query_fields_with_unit_tests.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43636/wp_query_fields_with_unit_tests.diff/1522288734600522</guid>
      <description>&lt;p&gt;
wp_query_fields + unit tests
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43316 (REST API: Support autosaves) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Thu, 29 Mar 2018 01:39:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43316#comment:46</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43316#comment:46/1522287575103392</guid>
      <description>&lt;p&gt;
Hey @danielbachhuber thank you for your feedback! Mostly I think you are right on, and I appreciate the fresh perspective. Here are some responses to specific points you raise...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If we agree these are two distinct goals...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, I agree we need two distinct endpoints almost as you describe them, except I think the revisions endpoint can already delete revisions?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It seems magical to create a revision based on some algorithm applied to the saved data. I'd think this logic makes more sense client-side; let the client decide whether to perform a full save or an autosave.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, it is somewhat magical I agree :) In a good way. WordPress decides when you have made enough of a change that more than an autosave is warranted. this would happen if you were updating your post with any client and save you from disaster if you lost your single autosave. Also, this lets us save revisions for published posts without updating them, which currently is not possible.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Similarly, if revisions are only created when a post is fully saved, then I think it makes sense to keep that distinction in the client-side UX (i.e. you hit the "Save" button to create a revision).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Here we are proposing that revisions are created whenever an autosave occurs and the content has changed not insignificantly. This expands the definition of autosaves and lets WordPress automatically track your changes over time versus keeping only a single backup (especially for published posts). This protects users by capturing a history of changes. A filter is provided to disable this behavior.
&lt;/p&gt;
&lt;p&gt;
Perhaps clicking 'update' or 'save' could remove all of the intermediate revisions so we can avoid clogging up the posts table with revisions. Is this part of your concern?
&lt;/p&gt;
&lt;p&gt;
What if you want to save your work in progress when updating an already published post?
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;code&gt;GET /wp/v2/posts/&amp;lt;post-id&amp;gt;/autosaves/&amp;lt;user-id&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Shouldn't this endpoint match revisions? &lt;code&gt;GET /wp/v2/posts/&amp;lt;post-id&amp;gt;/autosaves/&amp;lt;autosave-id&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For a fun thought experiment, or dark rabbit hole, imagine revisions and autosaves for individual blocks :)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Would you be surprised if I told you I've already been thinking about this?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43654 (Silence "JQMIGRATE: Migrate is installed with logging active, version ...) updated</title>
      
        <dc:creator>peterwilsoncc</dc:creator>

      <pubDate>Thu, 29 Mar 2018 00:51:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43654#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43654#comment:4/1522284690425145</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43654#comment:3" title="Comment 3"&gt;netweb&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As such we'd want to fork &lt;code&gt;jquery-migrate&lt;/code&gt; for these changes so that npm can pull in our custom fork.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm inclined to close this wont fix.
&lt;/p&gt;
&lt;p&gt;
Maintaining a custom fork is a lot of effort to go to to remove a message most users won't see.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43551 (Add a means to package personal data into a file) updated</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 00:45:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43551#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43551#comment:4/1522284342169961</guid>
      <description>&lt;p&gt;
See screenshot above
&lt;/p&gt;
&lt;p&gt;
How to test:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Update to the latest trunk
&lt;/li&gt;&lt;li&gt;Apply this patch (43551.2.diff)
&lt;/li&gt;&lt;li&gt;Follow the instructions at &lt;a class="ext-link" href="https://github.com/allendav/wp-privacy-requests"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/allendav/wp-privacy-requests&lt;/a&gt; to install the temporary UX plugin until a patch becomes available for &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43546" title="#43546: enhancement: Add to the privacy tools UX a means to export personal data by ... (closed: fixed)"&gt;#43546&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;Initiate a personal data export request if you don't have one already under wp-admin &amp;gt; Tools &amp;gt; Personal Data Requests
&lt;/li&gt;&lt;li&gt;Be sure to use an email address that has a few comments on the site
&lt;/li&gt;&lt;li&gt;No need to confirm the request - immediately click on Download under the email address
&lt;/li&gt;&lt;li&gt;When download is complete, a ZIP will be returned to you. Open it and behold the HTML report therein with your comments.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Design notes:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;This leverages the concept of grouped items that was introduced in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43440" title="#43440: enhancement: Add personal data from comments to personal data export (closed: fixed)"&gt;#43440&lt;/a&gt; specifically &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43440" title="#43440: enhancement: Add personal data from comments to personal data export (closed: fixed)"&gt;#43440&lt;/a&gt;.5
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Work in progress. Ruggedization and better error handling are needed as well as attachment support.
&lt;/p&gt;
&lt;p&gt;
cc @azaozz @mikejolley @xkon @dejliglama @jesperher
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>43551.2.png attached to Ticket #43551</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 00:38:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43551/43551.2.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43551/43551.2.png/1522283907220848</guid>
      <description>&lt;p&gt;
Example report with the user's comments
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>43551.2.diff attached to Ticket #43551</title>
      
        <dc:creator>allendav</dc:creator>

      <pubDate>Thu, 29 Mar 2018 00:35:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43551/43551.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43551/43551.2.diff/1522283731172021</guid>
      <description>&lt;p&gt;
Updated to handle 1-base; updated to handle nested/structured personal data; improved HTML report format
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43654 (Silence "JQMIGRATE: Migrate is installed with logging active, version ...) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Thu, 29 Mar 2018 00:24:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43654#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43654#comment:3/1522283060571202</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/43654#comment:2" title="Comment 2"&gt;netweb&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The only way I see to silence the warning is to &lt;em&gt;roll-our-own&lt;/em&gt;, we can modify &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-includes/js/jquery/jquery-migrate.js#L21"&gt;src/wp-includes/js/jquery/jquery-migrate.js#L21&lt;/a&gt; (and minimize this version) to replace it with the &lt;a class="ext-link" href="https://github.com/jquery/jquery-migrate/blob/7fcf44ae2083c12e9a7a48d632379bf8e6c50505/src/migrate.js#L7-L15"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;previous jquery-migrate code&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Note: As part of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43055" title="#43055: enhancement: Reorganize Core JS / introduce build step (closed: fixed)"&gt;#43055&lt;/a&gt; for WP 5.0 the plan is to pull jquery-migrate into WordPress via npm, as such we'd want to fork &lt;code&gt;jquery-migrate&lt;/code&gt; for these changes so that npm can pull in our custom fork.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #41316 (Introduce "Try Gutenberg" callout) updated</title>
      
        <dc:creator>brianhogg</dc:creator>

      <pubDate>Thu, 29 Mar 2018 00:04:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/41316#comment:91</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/41316#comment:91/1522281867354475</guid>
      <description>&lt;p&gt;
As @philclothier pointed out it should be very clear how to disable the plugin if there are issues, perhaps as a permanent admin notice in the Posts/Pages listing. It should also be clear that this is still beta software, with several large accessibility and compatibility issues (as pointed out in multiple issues such as &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/issues/179"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/gutenberg/issues/179&lt;/a&gt;) more than just the wording that they'll be "one of the first to try."
&lt;/p&gt;
&lt;p&gt;
The current design also has a major flaw with the "Get Support" and "Report Issues" links, namely the fact that this dismissible notice will disappear once they click "Try Today" and install the plugin and they wouldn't really be clicking them beforehand? A permanent admin notice with a way to Learn More, Deactivate, Get Support and Report Issues could solve that.
&lt;/p&gt;
&lt;p&gt;
I'm still pretty adamant that this is not ready for prime-time, though.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>