<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #36358 (Return of _wp_json_prepare_data() in wp_json_encode() should be used.) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:48:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36358#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36358#comment:5/1460418518297935</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by rachelbaker. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1460418514002058"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #14808 (Add Editor Documentation Functions URL for theme-defined functions) updated</title>
      
        <dc:creator>exthilion</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:40:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/14808#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/14808#comment:8/1460418054605741</guid>
      <description>&lt;p&gt;
I'm new to submitting patches here, so please forgive me if this isn't the right way to approach this.
Per the patch above by @GaryJ
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'file_editor_documentation_url'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'child_documentation_url'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="sd"&gt;/**
 * Filter the function documentation URL in theme editor.
 *
 * @param string $url a default url if $provider doesn't provide a custom url
 * @param string $provider Name of the theme or plugin
 * @param string $file full path of the file being edited
 * @return string
 */&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;child_documentation_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if $provider is handled by this filter. If not, use default.
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'My Awesome Theme or Plugin'&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;$provider&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Provide some kind of logic here to generate correct documentation url for $file.
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'http://my.example.com/?theme= '&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$provider&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;function='&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Seems like a trivial change, but I am also unsure of what @swissspidy means by proper docs.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>filter.diff attached to Ticket #14808</title>
      
        <dc:creator>exthilion</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:38:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/14808/filter.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/14808/filter.diff/1460417928447463</guid>
      <description>&lt;p&gt;
Apply @GaryJ's original patch to theme and plugin editor
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36477 (Responsive images (srcset) can include images larger than the full size) updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:27:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36477#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36477#comment:1/1460417228997752</guid>
      <description>&lt;p&gt;
The owner of this website (cdn2.peterdavehello.org) does not allow hotlinking to that resource (/wp-content/uploads/2016/04/status.png).
&lt;/p&gt;
&lt;p&gt;
with http instead of https it works
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36468 (Error in docs of get_home_url() and home_url()) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:17:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36468#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36468#comment:3/1460416633621314</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35658 (Provide additional data for registered meta through register_meta()) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:13:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35658#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35658#comment:27/1460416418841860</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by eric. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1460416416001975"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34999 (Calling wp_die() in a REST API request should return valid JSON) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 23:10:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34999#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34999#comment:7/1460416226111596</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by rmccue. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1460416224001970"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35658 (Provide additional data for registered meta through register_meta()) updated</title>
      
        <dc:creator>ericlewis</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:54:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35658#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35658#comment:26/1460415255171912</guid>
      <description>&lt;p&gt;
Would y'all be into working on this in a git branch off of &lt;a class="ext-link" href="https://github.com/aaronjorbin/develop.wordpress/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Aaron's repo&lt;/a&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35658 (Provide additional data for registered meta through register_meta()) updated</title>
      
        <dc:creator>ericlewis</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:45:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35658#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35658#comment:25/1460414736302835</guid>
      <description>&lt;p&gt;
@jeremyfelt thank you for starting the fire here.
&lt;/p&gt;
&lt;p&gt;
I have some ideas in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/35658/35658.2.diff" title="Attachment '35658.2.diff' in Ticket #35658"&gt;attachment:35658.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/35658/35658.2.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Let's introduce something like &lt;code&gt;class WP_Meta_Manager&lt;/code&gt; to store state of what is registered and what isn't. This guards us from developers accessing (and modifying) public global arrays.
&lt;/li&gt;&lt;li&gt;I've moved the business logic of some registry-related functions into it, and left the global functions as wrappers for them (&lt;code&gt;registered_meta_key_exists()&lt;/code&gt; and &lt;code&gt;unregister_meta_key()&lt;/code&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Follow-up thoughts:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Should the JSON data type value represent the entire JSON schema type attributes (items, properties, etc.) a la
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;register_meta_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'review'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'json_data_type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'array'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s1"&gt;'items'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'array'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s1"&gt;'items'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                        &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="s1"&gt;'properties'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                                &lt;span class="s1"&gt;'reviewer_name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                                        &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;
                                                &lt;span class="p"&gt;),&lt;/span&gt;
                                                &lt;span class="s1"&gt;'review'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                                        &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;
                                                &lt;span class="p"&gt;)&lt;/span&gt;
                                        &lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="c1"&gt;// No minimum or maximum.
&lt;/span&gt;                        &lt;span class="c1"&gt;// 'minItems' =&amp;gt; 0,
&lt;/span&gt;                        &lt;span class="c1"&gt;// 'maxItems' =&amp;gt; 0
&lt;/span&gt;                &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>vars.php.patch attached to Ticket #36486</title>
      
        <dc:creator>amandato</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:43:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36486/vars.php.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36486/vars.php.patch/1460414607294425</guid>
      <description>&lt;p&gt;
Patch for this ticket from WinMerge (let me know if you need a different patch format)
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36486 (is_apache in vars.php does not always work) created</title>
      
        <dc:creator>amandato</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:42:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36486</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36486/1460414530841170</guid>
      <description>&lt;p&gt;
The $is_apache variable does not always work when using an Apache module like security2_module with the SecServerSignature option. By removing the word "Apache" from the name of the server vars.php will no longer detect that the server is Apache.
&lt;/p&gt;
&lt;table class="wiki"&gt;
&lt;tr&gt;A simple solution is to add an addition check: &lt;td&gt; function_exists('apache_get_version')!== false
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;
Any Apache only function will work.
&lt;/p&gt;
&lt;p&gt;
See attached patch from WP 4.4.2
&lt;/p&gt;
&lt;p&gt;
I discovered this caused issues with the RewriteRules, randomly WordPress would add index.php/ within the permalinks when editing the permalink options in the wp-admin.
&lt;/p&gt;
&lt;p&gt;
Not sure if this should be called a bug or an enhancement, leave it up to core team to decide that.
&lt;/p&gt;
&lt;p&gt;
I would not remove the first 2 checks though, it is possible that the apache_get_version is disabled in the php.ini. I would recommend adding the option to the current checks just to be 100% sure.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>35658.2.diff attached to Ticket #35658</title>
      
        <dc:creator>ericlewis</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:37:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/35658/35658.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/35658/35658.2.diff/1460414223013919</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36483 (Inline image replacement in Post Editor does not replace image) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:22:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36483#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36483#comment:5/1460413343928058</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36483#comment:4" title="Comment 4"&gt;Ipstenu&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
Thanks, yeah, can see it now.
&lt;/p&gt;
&lt;p&gt;
A new bug is that the right sidebar (image info and settings) doesn't get refreshed/cleared out after deleting an image. Seems caused by the Backbone update as far as I see.
&lt;/p&gt;
&lt;p&gt;
The image not refreshing after replacing it is tougher. Was able to reproduce in 4.4 too, but less frequently. Seems the browsers "hold onto" the image in the editor despite that it is no longer on the server. Can happen more reliably after deleting an image, no need to replace. Steps:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open the media modal, upload an image and insert it in a post.
&lt;/li&gt;&lt;li&gt;Edit the image, and delete it permanently.
&lt;/li&gt;&lt;li&gt;Close the modal by clicking outside or on the top/right close button.
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
At this point the image is displayed in the editor. After switching to the Text editor and back (i.e. forcing TinyMCE to reload the post content) the image is still displayed, although it is not on the server any more. Only after saving a draft/reloading the page the image will be displayed as missing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36473 (JavaScript error in theme customizer a specific value of before_widget) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:18:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36473#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36473#comment:1/1460413103240970</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
The code for &lt;code&gt;buildWidgetSelectors&lt;/code&gt; has been in place since 3.9.
&lt;/p&gt;
&lt;p&gt;
@martin.krcho could you please share the &lt;code&gt;register_sidebar()&lt;/code&gt; calls that the theme has?
&lt;/p&gt;
&lt;p&gt;
You're right that a problem here is that &lt;code&gt;String.replace()&lt;/code&gt; will only replace the first instance if the replacement arg is a string instead of a regular expression. So changing the pattern it to be a regular expression instead of string should do it, but I want to see how the sidebars are registered to see what is going on.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36485 (Lost pending customizer settings after theme change) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:14:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36485#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36485#comment:5/1460412879988654</guid>
      <description>&lt;p&gt;
The theme switcher uses the &lt;code&gt;customize-loader&lt;/code&gt; script, which gives the illusion that there is no page load. However, what really happens is we fade in a full-screen loading indicator while waiting for a response from the serve to navigate to the new URL. However, when there are dirty settings, it has to &lt;code&gt;confirm()&lt;/code&gt; (?) first. There isn't (or wasn't, at least) to know when a true/false value is returned from the confirm call, so we have to hide the loading indicator as soon as the confirm window is closed so that the user isn't stuck with a loading indicator preventing them from getting "back" to the customizer so that they can save there changes. When you do chose to lose changes, it still hides the loader, giving the impression of it hanging when really it's just doing the same thing it does when there are no dirty settings, but without the loading indicator.
&lt;/p&gt;
&lt;p&gt;
Not a great UX, so hopefully we'll be able to improve on it at some point.
&lt;/p&gt;
&lt;p&gt;
(to clarify, "stay on this page" is the previous theme, where settings are dirty; "leave" is go to the new theme, since you don't actually trigger the link until it's the last )
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36485 (Lost pending customizer settings after theme change) updated</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:12:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36485#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36485#comment:4/1460412721265661</guid>
      <description>&lt;p&gt;
The biggest trouble here is clicking on "Stay on this page" doesn't go back to where the user was previously, and just hangs.
&lt;/p&gt;
&lt;p&gt;
If it's by design, then thinking we should warn the user and allow canceling the choice (or at least fix this issue where clicking "stay" does not "go/hang".
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36485 (Lost pending customizer settings after theme change) updated</title>
      
        <dc:creator>westonruter</dc:creator>

      <pubDate>Mon, 11 Apr 2016 22:07:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36485#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36485#comment:3/1460412473438098</guid>
      <description>&lt;p&gt;
@celloexpressions yes the loss of dirty settings is expected. However, what about the hanging behavior? I haven't experienced that before.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36485 (Lost pending customizer settings after theme change) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Mon, 11 Apr 2016 21:34:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36485#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36485#comment:2/1460410462563974</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This is unfortunately expected behavior. Users need to save their changes before switching themes, and because a theme switch does in fact do a page load, if they "leave" by switching themes they'll lose their changes. I believe that customizer transactions and the ability to have draft changes could eventually lead to a better solution here, although the page load when switching themes would be very difficult to eliminate.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36485 (Lost pending customizer settings after theme change) updated</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 21:05:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36485#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36485#comment:1/1460408704465831</guid>
      <description>&lt;p&gt;
This is a problem in WordPress 4.4.2 (so not a regression in 4.5).
I haven't dug back to find out if it's been a problem since theme switching.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Customizer Loses Settings.mp4 attached to Ticket #36485</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 21:03:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36485/Customizer%20Loses%20Settings.mp4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36485/Customizer%20Loses%20Settings.mp4/1460408607056009</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36485 (Lost pending customizer settings after theme change) created</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 21:03:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36485</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36485/1460408593608692</guid>
      <description>&lt;p&gt;
If you make a change in the customizer, don't publish the change, then choose a different theme, your browser prompts you as to whether you want to leave the current page or not.
&lt;/p&gt;
&lt;p&gt;
If you say no, the customizer hangs.
If you say yes, you lose your settings.
&lt;/p&gt;
&lt;p&gt;
Video example to be attached shortly.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #35658 (Provide additional data for registered meta through register_meta()) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 20:04:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35658#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35658#comment:24/1460405092228822</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-fields by eric. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-fields/p1460405089000448"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) updated</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Mon, 11 Apr 2016 19:51:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474#comment:6/1460404274180962</guid>
      <description>&lt;p&gt;
Would love to see some improvement here.
&lt;/p&gt;
&lt;p&gt;
Two concerns I have with the initial accordion-style mockup:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Requires more clicks to open each section rather than being able to select a category, format, enter tags, etc. quickly. Does it make sense to condense it by default on larger screens where having these all available is less of an issue? On mobile, something like this would be fantastic. Regadless of the direction taken, it wouldn't work to allow some to be open by default and others closed. Consistency is key here so we'd need to live with the consequences of that decision. Items under the editor (main column) presumably wouldn't collapse by default.
&lt;/li&gt;&lt;li&gt;There are several issues with accordion UIs, and the Customizer ended up moving away from them as a result (and also Press This I believe). Might it make sense to reuse an existing UI in core, such as the sliding panels in the Customizer, rather than moving in an entirely new direction (although &lt;code&gt;accordion.js&lt;/code&gt; is a thing)?
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36481 (Emoji script is loaded even if emoji not available?) updated</title>
      
        <dc:creator>pavelevap</dc:creator>

      <pubDate>Mon, 11 Apr 2016 19:16:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36481#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36481#comment:3/1460402214929095</guid>
      <description>&lt;p&gt;
I tried to insert many different emojis inside post content and they were never saved in database and displayed on website. Is there any specific example which I could test?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [37177]: Post 4.5-RC3 version bump.</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 19:12:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37177</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37177/1460401959200853</guid>
      <description>&lt;p&gt;
Post 4.5-RC3 version bump.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #36217 (WP_Post_Type class) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:48:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36217#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36217#comment:11/1460400492266657</guid>
      <description>&lt;p&gt;
Maybe we should consider to handle everything that doesn't modify the post type object itself outside of the class and leave it in &lt;code&gt;register_post_type()&lt;/code&gt;. Right now, some steps (like adding rewrite rules) happen in the &lt;code&gt;WP_Post_Type&lt;/code&gt; constructor while others (&lt;code&gt;_future_post_hook&lt;/code&gt;, registering taxonomies) remain in &lt;code&gt;register_post_type&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This would mean that the &lt;code&gt;WP_Post_Type&lt;/code&gt; constructor only handles all its properties, while additional steps (like adding rewrite rules, query var etc would remain in &lt;code&gt;register_post_type()&lt;/code&gt; (the &lt;code&gt;WP_Post_Type&lt;/code&gt; class then wouldn't need to access &lt;code&gt;$wp&lt;/code&gt; and &lt;code&gt;$wp_rewrite&lt;/code&gt; for example). I actually like this approach a little more as &lt;code&gt;WP_Post_Type&lt;/code&gt; would then only take care of itself and represent a post type, so if someone manually created an instance of the class, it wouldn't add any rewrite rules or cause other inconsistencies. And we also could possibly allow to insert this object directly into &lt;code&gt;register_post_type()&lt;/code&gt; as a parameter at a later stage.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19629 (return option for media_sideload_image) updated</title>
      
        <dc:creator>whyisjake</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:38:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19629#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19629#comment:25/1460399920524798</guid>
      <description>&lt;p&gt;
Any updates on this? Would be handy to return the ID...
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>media-sideload.diff attached to Ticket #19629</title>
      
        <dc:creator>whyisjake</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:38:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/19629/media-sideload.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/19629/media-sideload.diff/1460399890634010</guid>
      <description>&lt;p&gt;
Media sideload, return the post ID
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Changeset [37176]: 4.5-RC3</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:30:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37176</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37176/1460399445671123</guid>
      <description>&lt;p&gt;
4.5-RC3
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #36484 (Bump Recommended PHP version to PHP 7) updated</title>
      
        <dc:creator>blobaugh</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:27:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36484#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36484#comment:4/1460399237615162</guid>
      <description>&lt;p&gt;
I like it! I have not run into any issues with PHP 7 in a few months. Was running a beta before that had issues that seem to be ironed out.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36483 (Inline image replacement in Post Editor does not replace image) updated</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:24:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36483#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36483#comment:4/1460399084848680</guid>
      <description>&lt;p&gt;
I gave the unclear directions
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ol start="3"&gt;&lt;li&gt;Click to REPLACE image
&lt;/li&gt;&lt;li&gt;Click 'Edit Original'
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
So on the post editor, click the pencil and then press the box to replace the image, not edit.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://cloudup.com/cLAG65T_A3h"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://cloudup.com/cLAG65T_A3h&lt;/a&gt;
&lt;/p&gt;
&lt;ol start="3"&gt;&lt;li&gt;Click to edit the image
&lt;/li&gt;&lt;li&gt;Press REPLACE button
&lt;/li&gt;&lt;/ol&gt;&lt;blockquote class="citation"&gt;
&lt;p&gt;
Another question: if the image is deleted in step 5, and another image with the same name is uploaded, and the old one is shown in the editor, where the old one comes from?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The replacement window. Drag/drop the new image with the old image name.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35698 (Distinguish between regular (site) options and network options in ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:13:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35698#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35698#comment:11/1460398410686979</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-multisite by flixos90. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-multisite/p1460398407000084"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35379 (update_network_option changes stored option value if sanitize_option ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 18:13:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35379#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35379#comment:8/1460398410128426</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-multisite by flixos90. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-multisite/p1460398407000084"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35698 (Distinguish between regular (site) options and network options in ...) updated</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:57:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35698#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35698#comment:10/1460397437465349</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/35698/35698.2.diff" title="Attachment '35698.2.diff' in Ticket #35698"&gt;35698.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/35698/35698.2.diff" title="Download"&gt;​&lt;/a&gt; is an updated patch with the &lt;code&gt;sanitize_site_option_{$option}&lt;/code&gt; filter added, renamed &lt;code&gt;$scope&lt;/code&gt; to &lt;code&gt;$context&lt;/code&gt; and updated docs.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>35698.2.diff attached to Ticket #35698</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:55:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/35698/35698.2.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/35698/35698.2.diff/1460397320128611</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:51:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:61</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:61/1460397062557916</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by jorbin. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460397060004851"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) closed</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:45:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:60</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:60/1460396717907162</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/37175" title="About Page: Use `srcset` and the w.org CDN for images.
Also, flip the ..."&gt;37175&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
About Page: Use &lt;code&gt;srcset&lt;/code&gt; and the w.org CDN for images.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Also, flip the "Selective Refresh" and "Smart Image Resizing" section and remove script enqueues which are no longer used.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props joemcgill, melchoyce, ocean90.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36173" title="#36173: task (blessed): 4.5 About Page (closed: fixed)"&gt;#36173&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [37175]: About Page: Use `srcset` and the w.org CDN for images.  Also, flip the ...</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:45:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37175</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37175/1460396717206795</guid>
      <description>&lt;p&gt;
About Page: Use &lt;code&gt;srcset&lt;/code&gt; and the w.org CDN for images.
&lt;/p&gt;
&lt;p&gt;
Also, flip the "Selective Refresh" and "Smart Image Resizing" section and remove script enqueues which are no longer used.
&lt;/p&gt;
&lt;p&gt;
Props joemcgill, melchoyce, ocean90.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36173" title="#36173: task (blessed): 4.5 About Page (closed: fixed)"&gt;#36173&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #36458 (Fix support for Safari + VoiceOver when editing inline links) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:43:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36458#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36458#comment:1/1460396599003113</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #accessibility by rianrietveld. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/accessibility/p1460396596000482"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36484 (Bump Recommended PHP version to PHP 7) updated</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:43:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36484#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36484#comment:3/1460396583585609</guid>
      <description>&lt;p&gt;
I/we run PHP 7 on most of my (client) sites (60) and see no reason this should not be the &lt;em&gt;recommended&lt;/em&gt; version from now on.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36468 (Error in docs of get_home_url() and home_url()) updated</title>
      
        <dc:creator>thomaswm</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:36:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36468#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36468#comment:2/1460396197786437</guid>
      <description>&lt;p&gt;
Originally, the docs matched the actual behaviour of the functions. In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/21937" title="Honor https in home option.
fixes #20759
"&gt;[21937]&lt;/a&gt;, however, the code for choosing the scheme has changed, but the docs haven't been updated.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36483 (Inline image replacement in Post Editor does not replace image) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Mon, 11 Apr 2016 17:01:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36483#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36483#comment:3/1460394105039259</guid>
      <description>&lt;p&gt;
Think I'm missing or misunderstanding a step when trying to reproduce.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;ol start="5"&gt;&lt;li&gt;DELETE from this window.
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
I'm in the modal in the image file editor and cannot delete from there. Tried editing the image then deleting it and replacing it, all works as expected.
&lt;/p&gt;
&lt;p&gt;
Another question: if the image is deleted in step 5, and another image with the same name is uploaded, and the old one is shown in the editor, where the old one comes from? At this point it is not on the server any more? It is possible some sort of "network cache" is interfering, as old and new images have the same name. Not sure why it only happens sometimes though.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>edit-image.png attached to Ticket #36483</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:57:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36483/edit-image.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36483/edit-image.png/1460393822934405</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36484 (Bump Recommended PHP version to PHP 7) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:55:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36484#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36484#comment:2/1460393743618751</guid>
      <description>&lt;p&gt;
Noting that &lt;code&gt;Tests_External_HTTP_Basis&lt;/code&gt; is using &lt;a class="ext-link" href="https://secure.php.net/supported-versions.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://secure.php.net/supported-versions.php&lt;/a&gt; which would fail in 8 months I think.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36484 (Bump Recommended PHP version to PHP 7) updated</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:55:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36484#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36484#comment:1/1460393713735319</guid>
      <description>&lt;p&gt;
FWIW, this has my +1.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36484 (Bump Recommended PHP version to PHP 7) created</title>
      
        <dc:creator>jorbin</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:51:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36484</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36484/1460393482903712</guid>
      <description>&lt;p&gt;
Follow up to &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33758" title="#33758: task (blessed): Bump Recommended PHP version (closed: fixed)"&gt;#33758&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
PHP 7 has been released for 4 months now and there have been no major issues with running WordPress on. Let's bump the recommended version of PHP to continue encouraging people to run the latest and greatest PHP.
&lt;/p&gt;
&lt;p&gt;
Once we decide to do it, a meta ticket will need to be opened to update things on WordPress.org
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #23394 (Remove version from readme.html / Upgrade core doesn't restore the file) updated</title>
      
        <dc:creator>RedSand</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:28:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23394#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23394#comment:15/1460392094989207</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35557 (grunt precommit should run phpunit tests) updated</title>
      
        <dc:creator>jorbin</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:22:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35557#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35557#comment:30/1460391748701021</guid>
      <description>&lt;p&gt;
@netweb Can you create a new ticket?  As this one was closed for 4.5, we will want a new one to follow up and improve things in 4.6
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:14:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474#comment:5/1460391292947553</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by hugobaeta. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1460391291001076"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36483 (Inline image replacement in Post Editor does not replace image) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 16:04:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36483#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36483#comment:2/1460390656770906</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by mike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460390654004678"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36358 (Return of _wp_json_prepare_data() in wp_json_encode() should be used.) updated</title>
      
        <dc:creator>rachelbaker</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:59:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36358#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36358#comment:4/1460390399510473</guid>
      <description>&lt;p&gt;
@rmccue @swissspidy or @pento Can you take a look?  I cannot tell from &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/34926" title="REST API: Add JsonSerializable compatibility to wp_json_encode
 ..."&gt;[34926]&lt;/a&gt; if the intent was for the result of &lt;code&gt;_wp_json_prepare_data&lt;/code&gt; to be passed to &lt;code&gt;json_encode&lt;/code&gt; always OR only if &lt;code&gt;json_encode()&lt;/code&gt; fails.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36483 (Inline image replacement in Post Editor does not replace image) updated</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:58:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36483#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36483#comment:1/1460390309597837</guid>
      <description>&lt;p&gt;
Note: Original report here - &lt;a class="ext-link" href="https://wordpress.org/support/topic/media-file-not-being-replaced-unless-with-another-name"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/media-file-not-being-replaced-unless-with-another-name&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #27159 (Removing TinyMCE buttons to improve user experience) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:58:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27159#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27159#comment:34/1460390294190859</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by hugobaeta. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1460390291001055"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36483 (Inline image replacement in Post Editor does not replace image) created</title>
      
        <dc:creator>Ipstenu</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:55:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36483</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36483/1460390149067463</guid>
      <description>&lt;p&gt;
Tested on 4.5-RC2-37173 with the following steps:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Make a new post
&lt;/li&gt;&lt;li&gt;Add m08aGa1nAM.png to post as medium image
&lt;/li&gt;&lt;li&gt;Click to REPLACE image
&lt;/li&gt;&lt;li&gt;Click 'Edit Original'
&lt;/li&gt;&lt;li&gt;DELETE from this window
&lt;/li&gt;&lt;li&gt;Upload new m08aGa1nAM.png
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
At this point, I see the OLD image in the edit page. As soon as I hit 'save draft' however, it shows the correct image.
&lt;/p&gt;
&lt;p&gt;
Tested on WP 4.4.2 and the image replaces as expected, no need to save.
&lt;/p&gt;
&lt;p&gt;
It looks like whatever ajax magic is supposed to refresh that image isn't happening until save.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>gitlost</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:51:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:12/1460389865997779</guid>
      <description>&lt;p&gt;
The backtick problem on keyboards that require a modifier might be solved by loosening the checks on &lt;code&gt;keyCode&lt;/code&gt; values in the &lt;code&gt;keyup&lt;/code&gt; event handler. I've tried testing it by setting up a Norwegian layout but I'm not sure I have the right set up. If it does solve the problem, it's quite a small change really as the checks are only done for optimization reasons.
&lt;/p&gt;
&lt;p&gt;
The quick typing issue is trickier as it's caused by typeahead getting into the selection on &lt;code&gt;keyup&lt;/code&gt; which means that the current character needn't be a backtick. The change in the patch allows for one extra typeahead but if you're very quick you can put two in at least.
&lt;/p&gt;
&lt;p&gt;
The broken backtick issue causing others in the same paragraph not to work can be fixed by looking for the &lt;code&gt;endOffset&lt;/code&gt; first and then looking backwards for the start.
&lt;/p&gt;
&lt;p&gt;
There's a couple of other changes, to ignore backticks that are empty or contain a single white space, and to ignore backticks when they're in the code nodes themselves.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36453 (Disable 'replace' button in replace media frame while attachment is ...) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:41:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36453#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36453#comment:2/1460389296014069</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Confirmed as well. For posterity, the error:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;Uncaught TypeError: Cannot read property 'medium' of undefined&lt;/code&gt; in &lt;code&gt;media-models.js?ver=4.5-RC2-37173-src:1072&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
This likely goes back to the introduction of replacing an image in the editor via &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/27050" title="Introduce Edit Image (single mode) in the media modal and use it to ..."&gt;[27050]&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36482 (Improve editor scrolling) created</title>
      
        <dc:creator>iseulde</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:36:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36482</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36482/1460388994900823</guid>
      <description>&lt;p&gt;
Maybe we can look into keeping the main toolbar hidden when scrolling down, while showing it when scrolling up. This way we can also use CSS to make showing and hiding of it smoother, instead of JavaScript. This kind of experience is widely used now, so a lot of users would already be used to it.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>36459.patch attached to Ticket #36459</title>
      
        <dc:creator>gitlost</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:33:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36459/36459.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36459/36459.patch/1460388821662478</guid>
      <description>&lt;p&gt;
Less strict keyCode checking plus other changes.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36481 (Emoji script is loaded even if emoji not available?) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:30:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36481#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36481#comment:2/1460388647038620</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Emoji are possible without utf8mb4, they get encoded by &lt;code&gt;wp_encode_emoji()&lt;/code&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36468 (Error in docs of get_home_url() and home_url()) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:29:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36468#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36468#comment:1/1460388575054581</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Docs added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/12598" title="Introduce home_url(). Props Denis-de-Bernardy, hakre. see #9008"&gt;[12598]&lt;/a&gt; and &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/12978" title="Introduce get_home_url(), get_site_url(), and get_admin_url() for ..."&gt;[12978]&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34074 (wp_debug false still showing errors) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:28:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34074#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34074#comment:4/1460388496887452</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36481 (Emoji script is loaded even if emoji not available?) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:24:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36481#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36481#comment:1/1460388281090392</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #23394 (Remove version from readme.html / Upgrade core doesn't restore the file) updated</title>
      
        <dc:creator>RedSand</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:16:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23394#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23394#comment:14/1460387769897014</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/23394#comment:13" title="Comment 13"&gt;chriscct7&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
Hey Chris,
&lt;/p&gt;
&lt;p&gt;
Good discussion. Thanks for sharing your thoughts. :)
&lt;/p&gt;
&lt;p&gt;
I'm glad that you all are open to discussion even if this is closed for now. Let's keep the discussion going.
&lt;/p&gt;
&lt;p&gt;
However, I do have to say that I am a bit disappointed by your response though, as it seems to immediately dismiss what I'm saying. It really seems that the WordPress core dev team is (and has been) resistant (in general) to user suggestions about certain security issues. &lt;strong&gt;I would understand this if people were making suggestions that are not good security practices, but this is an established security best-practice, and no security best-practice should be ignored, however seemingly small.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
I would think that with the discovery of security flaws in nearly every WordPress release for the past two years, the global rise in hacking, malware, etc, that you all would start to make hardening WordPress a bigger priority. I hope this becomes true. If you need recent examples in the news...just look at the Panama Papers scandal for example. Granted...they were using outdated plugins, so it is squarely on them, but please hear my overall point here. WordPress is becoming a bigger and bigger part of the whole global cybersecurity scene. Some of the security issues that arose in the last couple years with WordPress were predictable because WordPress did not follow good security practices 100%. Seemingly small things that seemed like an unlikely attack vector got ignored. And unless something was an immediate critical threat, users were often shut down, which discouraged them from reporting security issues altogether.
&lt;/p&gt;
&lt;p&gt;
Even if a user quotes a credible source to back up the point, it is ignored and shut down. However, when one of the WordPress core dev team members responds, instead of quoting a credible source to back up their point, it is with usually with one of these types of arguments:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;"That's the way it's always been done..."
&lt;/li&gt;&lt;li&gt;"That will break stuff..."
&lt;/li&gt;&lt;li&gt;"That's not a real security issue..."
&lt;/li&gt;&lt;li&gt;"Well, you can always find that info another way..."
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
These are circular arguments, and end up sounding like "the company line" because almost everyone gets some version of the same few responses. I know for a fact that you all are good people, and do not intend things to come off this way.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Don't get me wrong, I have a &lt;em&gt;ton of respect and love for you all&lt;/em&gt;, and the WordPress community in general. WordPress is by far the best CMS out there, and I am glad to see it's influence on the web increase as it has.&lt;/strong&gt; (I hope that I can be a positive contributor in this community.)
&lt;/p&gt;
&lt;p&gt;
For years, users have been requesting that version numbers be removed from the front-facing side of WordPress, and the core team has shut down each of these requests...&lt;em&gt;for years&lt;/em&gt;. There is definitely a disconnect between the core team and users in this area. Being a plugin developer I'm caught in between. I understand both points of view. I've been developing plugins for 10 years, but have not gotten into contributing to the core until now, but I'm definitely changing that moving forward.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;WordPress core definitely needs some hardening.&lt;/strong&gt; I've spent years dealing with security issues in both the military (here in the US and deployed in combat zones) and civilian sectors, and not just web/IT, but physical security, and COMSEC (communications security) as well, which give you some interesting insight into security issues and hacking that you don't get if you only work with web/IT security.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;So, to continue the discussion, I'll respond to some points you made.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
If you would allow me to make an observation based on your responses: &lt;strong&gt;You're thinking like a &lt;em&gt;developer&lt;/em&gt;, not a &lt;em&gt;hacker&lt;/em&gt;.&lt;/strong&gt; When dealing with security issues, you need to think like a hacker. (And it's not just you, so I'm not trying to make that any kind of insult.)
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
IETF's recommendation 14.39 in RFC 2038 refers to a header that was previously used for intra-network communication for use in identifying the processing software or for general use server surveys.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Actually, I think you may have misread that...14.39 actually references the "Server" header which is still a standard header in use. The rest of what you mentioned wanders a bit off the topic as the full reference actually was: "Example: &lt;strong&gt;&lt;em&gt;Server:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; CERN/3.0 libwww/2.17&lt;/em&gt;", which was merely an example of &lt;em&gt;server header revealing version numbers&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
Additionally, I was not specifically referencing section 14.39, as this quote is mentioned again in section 15.4:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Revealing the specific software version of the server may allow the server machine to become more vulnerable to attacks against software that is known to contain security holes.&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Substitute the word "server" for "software", "application", "web application", "web application framework", "Content Management System", etc, and the more generalized principle becomes clear.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Take a step back for a second and look at the overall picture of what I'm saying here...I think you had focused a bit too much on one detail, and were missing my overall point. :)
&lt;/p&gt;
&lt;p&gt;
The point wasn't about the specifics or the RFC itself...&lt;strong&gt;it was about the general security principle&lt;/strong&gt;. &lt;strong&gt;The Internet Engineering Task Force (IETF) are making a clear point that web server/software version numbers should not be revealed.&lt;/strong&gt; This is a &lt;strong&gt;general security principle,&lt;/strong&gt; and &lt;strong&gt;whether an RFC is updated or replaced, doesn't affect that.&lt;/strong&gt; The IETF are merely one example, and I quoted them because of their role in the development of the web and standards. (ie... the man, Tim Berners-Lee...)
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Again, it's about a security principle, not the RFC.&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Regarding removing version numbers from CSS and JS files: As I mentioned above, replace the version number with a salted hash (or other unique random key) that changes each time the version is updated.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This would break backwards compatibility that plugins can rely on, and it doesn't solve the problem that it's just as easy to compare the contents of the file as it is to parse the version out of the url.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Exactly what backward compatibility would be broken?&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The only purpose for the query string is cache-busting.
&lt;/li&gt;&lt;li&gt;The particular string that's used is not relevant. The way it is currently implemented, it just needs to be unique and stay the same until the site updates to the next WordPress version.
&lt;/li&gt;&lt;li&gt;CSS (.css) files don't access the WordPress database, so they don't know what the string is that's attached to the URL. Nothing would break here unless it's poorly coded.
&lt;/li&gt;&lt;li&gt;JS (.js) files don't directly access the WordPress database either, so even if they detect the query string on their URL, they have nothing to compare it against, meaning they don't care what the particular string is either.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I'm intimately familiar with WordPress, have worked intensely with WordPress site development, security, speed optimization, theme development, and plugin development for 10 years (plus an additional 10 years before that in web development as well), and have not seen where this would be true, and that it would break anything.
&lt;/p&gt;
&lt;p&gt;
WordPress is adding the query string to the .js and .css be a cache buster, so that when a site is updated to the next version of WordPress, it can update the CSS and JS scripts, and break any existing caches in a user's browser. It's not necessary for the query string to reference the WordPress version number in that query string: &lt;strong&gt;It could be any unique string that changes when the site is updated.&lt;/strong&gt; Easy fix! There a million ways to create a unique random string that would stay the same until the site is updated.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;However, that's ignoring the website speed performance issues created by adding query strings to .css and .js URLs,&lt;/strong&gt; because it specifically &lt;strong&gt;makes the files uncacheable by browsers&lt;/strong&gt;. I realize that's the intention, but these query strings are added to every script and style that is run through the enqueuing process.
&lt;/p&gt;
&lt;p&gt;
So, &lt;strong&gt;instead of using these cache busting query strings, use alternate methods, which are better practices anyhow.&lt;/strong&gt; Caching can be completely managed by headers: Cache-Control, Surrogate-Control, Expires, Last-Modified, Vary, and Etag Headers, and should be done that way instead of adding query strings.
&lt;/p&gt;
&lt;p&gt;
A major principle in WordPress speed optimization is to concatenate and minify CSS and JS scripts, along with &lt;a class="ext-link" href="https://gtmetrix.com/remove-query-strings-from-static-resources.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;removing query strings from static resources&lt;/a&gt;, which renders that whole argument invalid. If you have a specific example of a plugin that it would break, please share it.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Your argument:&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This would break backwards compatibility that plugins can rely on...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Argument busted.&lt;/strong&gt; I've provided you with more than one alternative and shown that this is not a web development best practice, and not only that, it has a negative impact on website's performance by preventing CSS and JS files from being cached.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Moreover, there appears to be a suggestion that even if you remove these files, hide the meta generator tag, and randomize the version appended to strings, somehow that will plug all of your version concerns.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The WordPress version info needs to be entirely scrubbed from the front facing side of WordPress. The areas I've mentioned include (but are not limited to):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The Meta Generator
&lt;/li&gt;&lt;li&gt;Query Strings (or remove these altogether)
&lt;/li&gt;&lt;li&gt;Readme/License File
&lt;/li&gt;&lt;li&gt;Etag headers being added in v4.5 to the load-scripts.php and load-styles.php files:
&lt;pre class="wiki"&gt;header("Etag: $wp_version");
&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Code comments in .js (I found 5 doing a quick grep of the .js files)
&lt;/li&gt;&lt;li&gt;REST API
&lt;/li&gt;&lt;li&gt;If there is anything I'm not aware of or have left out, then let's add it to the list, set up a project and get it done!
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Your argument:&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Moreover, there appears to be a suggestion that even if you remove these files, hide the meta generator tag, and randomize the version appended to strings, somehow that will plug all of your version concerns...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Argument busted.&lt;/strong&gt; This is not a reason not to fix things. As I've shown, if my list isn't complete, then let's make a complete list of things and fix the entire issue. It's not that huge a project. Sign me up.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, if one really wants the version number you can simply run a string comparison on the outputted css or js files.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;That's not how hacking with bots works. They don't want to hit a lot of files on your site when they are scanning. They don't want to use a lot of bandwidth or set off red flags. If there isn't a generator tag with a number, or something easy like .css/.js. URLs (or Etags) that they can glean, they move on to the next. If they are doing a deep scan of your site it can make it easy to get caught, even by newbies. (This is the same reason they don't scan for an entire library of exploits...there are far too many now, so it would take too much bandwith, and could trigger red flags.)
&lt;/li&gt;&lt;li&gt;We're not talking about the combination of James Bond/NSA/Navy Seals trying to break into your site. If someone wants to compare files against a repository to see if the file signatures match, that's a whole different different ballgame and not what you're dealing in 99.9999% of cases. (Again, that would take a lot of bandwith, and be noticeable.)
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;That's an easy fix: Remove the version number from the comments in the .js files. Or better yet, remove the comments altogether. Good minification/concatenation plugins do this anyway.&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Your argument:&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, if one really wants the version number you can simply run a string comparison on the outputted css or js files...
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Argument busted.&lt;/strong&gt; We're not talking about pro-level hackers trying to break into your site. I'm talking about the obvious stuff: Don't make it easy.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Moreover, the WordPress REST API framework requires versioning, which inherently must be public in order for the feature to use, and that versioning can be directly mapped to versions of WordPress. That itself cannot be prevented.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;That's not really a valid argument. There is nothing about REST principles that requires the software version be exposed.
&lt;/li&gt;&lt;li&gt;Even if it did, then why accept that flaw? Why not create an improved API and fix the issue?
&lt;/li&gt;&lt;li&gt;REST principles are not set in stone yet, and there is room for change, modification, etc. WordPress should lead the way.
&lt;/li&gt;&lt;li&gt;In web development, we don't just accept that a poor security practice is necessary because something uses it...that's faulty logic. We fix the system so it doesn't require poor security practices.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Your argument:&lt;/strong&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Moreover, the WordPress REST API framework requires versioning, which inherently must be public in order for the feature to use, and that versioning can be directly mapped to versions of WordPress. That itself cannot be prevented....
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Argument busted.&lt;/strong&gt; Simply not accurate.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Most of the arguments you've used so far are circular arguments. You haven't quoted any security experts that promote revealing version numbers as a good idea, or any web development best practices as to why it should be done.&lt;/strong&gt; If the WordPress core dev team is going to be so staunchly &lt;em&gt;for&lt;/em&gt; revealing and using version numbers, then there should be some really solid reasons why. I'm happy to hear them.
&lt;/p&gt;
&lt;p&gt;
Again, I'm &lt;em&gt;not&lt;/em&gt; attacking you guys...I truly do love you all, and think you all are incredibly talented, brilliant people who are making an incredible contribution to the world. I just am hoping that some of these points help spark a different way of looking at things.
&lt;/p&gt;
&lt;p&gt;
If you're worried about the amount of effort to fix it, I will be happy to help! I will be happy to contribute my time, and I'm sure many others would as well.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Using a version detection library attached to a standard exploit library set such as metasploit, one can simply just run through all vulnerabilities ever found for WordPress just as quickly as detecting the version on a site that's done what you've prescribed.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Um, no. Just no.&lt;/strong&gt; Effective hacking is not done like that. That takes too much bandwidth to make it scalable. It isn't stealthy and it isn't practical. &lt;strong&gt;To say something to the effect of "one can simply just run through all vulnerabilities ever found for WordPress", shows me you are clearly unaware of &lt;span class="underline"&gt;exactly how many vulnerabilities&lt;/span&gt; there are out there for WordPress.&lt;/strong&gt; Hackers and thieves value discretion. You do &lt;span class="underline"&gt;recon&lt;/span&gt; first...data gathering, then &lt;span class="underline"&gt;select targets,&lt;/span&gt; and strike. Have you actually ever tracked how hacks happen? I have. Tracking bot activity and hacking patterns is something we do, and has been for a long time. We've studied hack attempts happening in real time. What you're saying is commonly repeated info, but not how it actually works.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The fact of the matter is that security by obscurity (version hiding being an example), does not make the site any more or less secure (as pointed out in the OWASP). In actuality in certain penetration software it makes it faster. Many frameworks, upon being unable to deduce a version number of an application, simply iterate over all vulnerabilities anyways.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
SMH. &lt;strong&gt;That's not what "Security by Obscurity" means.&lt;/strong&gt; That phrase gets thrown around a lot in online forums, in the WordPress community, and by word of mouth, without people understanding the actual principle.
&lt;/p&gt;
&lt;p&gt;
The security principle you are incorrectly referencing is: "Avoid Security by Obscurity".
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What it actually means: &lt;strong&gt;Do not make obscurity &lt;em&gt;your only security method&lt;/em&gt;.&lt;/strong&gt; - I cannot say this enough: &lt;strong&gt;YOUR ONLY METHOD.&lt;/strong&gt; Example: Using a unique file URL &lt;em&gt;instead of&lt;/em&gt; a login to protect something sensitive. That's overly basic but you get the idea.
&lt;/li&gt;&lt;li&gt;What it &lt;em&gt;does not&lt;/em&gt; mean:&lt;strong&gt; Don't bother &lt;em&gt;using obscurity as part of&lt;/em&gt; your security strategy.&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The security principle: "Defense in Depth" supersedes this and means:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Use a robust layered security strategy.
&lt;/li&gt;&lt;li&gt;By all means, use obscurity in your layers! Why make it easier for the hacker? Restrict info from those who do not need it.
&lt;/li&gt;&lt;li&gt;Use redundant measures so that if one fails during an attack, another can backstop it.
&lt;/li&gt;&lt;li&gt;And a lot more...
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
You mention this:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
...[version hiding being an example], does not make the site any more or less secure (as pointed out in the OWASP).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If using version hiding was your only "security" measure, then that would be ridiculous, and would fit the true definition of trying to use "security by obscurity". But, no one is suggesting that. I don't think anyone reading my comments who is being honest would interpret what I've written to say that that's what I'm suggesting.
&lt;/p&gt;
&lt;p&gt;
Again, you have to think like a hacker my friend, not like a developer.
&lt;/p&gt;
&lt;p&gt;
And where exactly is this quoted in OWASP? That's not what it says &lt;em&gt;anywhere in OWASP&lt;/em&gt;.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Very true...but WordPress.org's own usage stats show that approximately 48% of WordPress users aren't even updated to the 4.4 (current) branch so that leaves about half of WordPress' users out of luck if a more proactive approach to security isn't taken.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is a soon to be obsolete argument.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's assuming a lot. What defines soon? It's not going to obsolete for at least a few years, and there are plenty of hacks to be had in that time.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
WordPress is moving towards Chromium style updates, where major versions are done automatically. Existing tail end WordPress installs are automatically being updated major versions now, even if they were not previously by a combination of WordPress outreach to major web hosting companies and other relevant parties.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's fantastic...and very exciting. But, that's assuming that users don't disable the auto-updating. Not everyone wants to update right away. Should they? Yes, I think so. Will they? Not in my experience.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As this continues to occur, the number of sites on the current major version in perpetuity will continue to grow. It wouldn't surprise me if after 2 years, that's up to 85-90% of all installs always on the current major version.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I hope you're right, but that would seem to be overly optimistic.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Furthermore, on sites where WordPress has autoupdate minor releases (all sites since 3.7, so about 80%+ of all WP installs), any newly discovered vulnerabilities can be pushed and patched in real time.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Again, that's assuming that auto-update is not manually disabled. Unfortunately, we've run across many who don't want to update.
&lt;/p&gt;
&lt;p&gt;
In my experience, it's really only the users on the most recent branch that are even &lt;em&gt;close&lt;/em&gt; to up-to-date on the minor versions. Stats back this up. We'll take a look at some stats in a minute.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hiding versions does not in any way, shape or form help make any site newer than 3.7 more secure than they already were.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;I'm sorry, but you are flat out incorrect when you say this.&lt;/strong&gt; Statements like that demonstrate a complete lack of understanding of security principles. &lt;strong&gt;Just because &lt;em&gt;&lt;span class="underline"&gt;you&lt;/span&gt; don't understand the full security implications,&lt;/em&gt; &lt;span class="underline"&gt;does not mean it is not a security issue.&lt;/span&gt;&lt;/strong&gt; When you hear me say that &lt;em&gt;something is a security risk&lt;/em&gt;, I think you think I'm saying that that revealing the version number is like giving someone a password to your site or key to your house. That's not what I mean at all. &lt;strong&gt;Revealing version number does not directly enable the act of penetrating a site.&lt;/strong&gt; That's where you guys seem to be assuming that if something doesn't directly enable access to a site, that means everything is secure. Nothing could be farther from the truth. That's like saying, "Hey, if a thief doesn't have the key to my house, then it's secure." Sure, &lt;strong&gt;if the only way in is the door, or if they're "polite" enough to &lt;em&gt;NOT kick your door in&lt;/em&gt;.&lt;/strong&gt; But there are a million ways into a house (just like a website), and thieves/hackers and the ilk are &lt;em&gt;anything but polite&lt;/em&gt;. &lt;strong&gt;Security is a complex scale of skill/motivation/resources vs difficulty.&lt;/strong&gt; That's where you have to understand that some seemingly peripheral things like this are security risks. &lt;strong&gt;Security encompasses a lot more than just the single act of penetrating a site.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Before a hacker breaks into a site, they gather data and pick their targets. Revealing site software versions makes it really easy for hackers to target sites with specific version/vulnerability combinations.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Hacking doesn't start and end with someone breaking into your site. A direct quote from the one of OWASP's guides on fingerprinting during the information gathering process - &lt;a class="ext-link" href="https://www.owasp.org/index.php/Fingerprint_Web_Application_(OTG-INFO-009)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Fingerprint Web Application (OTG-INFO-009)&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Test Objectives:
&lt;span class="underline"&gt;Identify the web application and version&lt;/span&gt; to determine &lt;span class="underline"&gt;known vulnerabilities&lt;/span&gt; and the &lt;span class="underline"&gt;appropriate exploits&lt;/span&gt; to use during testing.&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'll use key points from an OWASP guide to give you the basics, so you all can see why you need to stop saying, "That's not a real security issue when people point out why WordPress should not be revealing version numbers".
&lt;/p&gt;
&lt;p&gt;
The basic process:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It starts with research, aka &lt;a class="ext-link" href="https://www.owasp.org/index.php/Testing_Information_Gathering"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Information Gathering&lt;/a&gt;. I'm going just give a little info about each point. Read the guides for more info.
&lt;ul&gt;&lt;li&gt;Use search engines to gather data - &lt;a class="ext-link" href="https://www.owasp.org/index.php/Conduct_search_engine_discovery/reconnaissance_for_information_leakage_(OTG-INFO-001)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.1 Conduct Search Engine Discovery and Reconnaissance for Information Leakage (OTG-INFO-001)&lt;/a&gt; - I'll show you a quick trick in a second here.
&lt;/li&gt;&lt;li&gt;Fingerprint (build a profile on) your target
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.owasp.org/index.php/Fingerprint_Web_Server_(OTG-INFO-002)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Fingerprint Web Server (OTG-INFO-002)&lt;/a&gt; - Get the details of the server. Headers give out a wealth of info.
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.owasp.org/index.php/Fingerprint_Web_Application_Framework_(OTG-INFO-008)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Fingerprint Web Application Framework (OTG-INFO-008)&lt;/a&gt; - In this case, Web Application Framework is synonymous with CMS. Basically, get the details of the CMS or framework. Specifically mentions mitigating some of this by removing install files like the WordPress readme and license, as well as removing code comments (ie the comments in WordPress' JS files that contain the version number, and META generator tags.
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.owasp.org/index.php/Fingerprint_Web_Application_(OTG-INFO-009)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Fingerprint Web Application (OTG-INFO-009)&lt;/a&gt; - This involves getting the application's details, including version number, and &lt;strong&gt;WordPress is specifically used as one of the examples&lt;/strong&gt;, and they specifically reference the META GENERATOR tag used in WordPress:
&lt;pre class="wiki"&gt;&amp;lt;meta name="generator" content="WordPress 3.9.2" /&amp;gt;
&lt;/pre&gt;*&lt;a class="ext-link" href="https://www.owasp.org/index.php/Enumerate_Applications_on_Webserver_(OTG-INFO-004)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Enumerate Applications on Webserver (OTG-INFO-004)&lt;/a&gt; - Basically, figure out what apps are running, versions, and determine vulnerabilities. Regarding WordPress, this would relate specifically to plugins. "A paramount step in testing for web application vulnerabilities is to find out which particular applications are hosted on a web server. Many applications have known vulnerabilities and known attack strategies that can be exploited in order to gain remote control or to exploit data. In addition, many applications are often misconfigured or not updated..."
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;After the information gathering stage is finished, move on the hacking/penetration.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Let me show you a brutally simple, and low-skill way to gather a list of sites that have vulnerable versions.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Use search engines to find targets.
&lt;/li&gt;&lt;li&gt;Pick one of 63+ vulnerable versions to build a list for. I'll pick 4.3.1.
&lt;/li&gt;&lt;li&gt;Enter a query like this into Google:
&lt;pre class="wiki"&gt;inurl:.js?ver=4.3.1
&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;You'll get a quick list of sites that are using vulnerable version 4.3.1.
&lt;/li&gt;&lt;li&gt;From there, just import the data into your target list, and run your bot.
&lt;/li&gt;&lt;li&gt;The better way is to employ a bot that will cruise through sites and build a list for you of sites with the specific version you're looking for, but like I said, using Google requires no skill, and anyone can do it.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;Now, each one of those sites is a potential target for hackers, even low-skill ones, &lt;em&gt;so tell me again how that is not a security risk?&lt;/em&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Ok, now let's take a look at some stats.&lt;/strong&gt; The following are the percentage of WordPress users on each major branch (4.2, 4.3, 4.4, etc) that are using versions with security vulnerabilities:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WordPress 4.4 branch using vulnerable versions: Approx 3.1% | Approx 1.5% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/4.4/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/4.4/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/44"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.4 (3)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/441"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.4.1 (2)&lt;/a&gt; &amp;lt;-- Version (# exploits)
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 4.3 branch using vulnerable versions: Approx 26.6% | Approx 4.2% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/4.3/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/4.3/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/43"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.3 (6)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/431"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.3.1 (4)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/432"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.3.2 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 4.2 branch using vulnerable versions: Approx 30.9% | Approx 3.3% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/4.2/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/4.2/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt; Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/42"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2 (14)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/421"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.1 (13)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/422"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.2 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/423"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.3 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/424"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.4 (6)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/425"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.5 (4)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/426"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.2.6 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 4.1 branch using vulnerable versions: Approx 26% | Approx 1.6% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/4.1/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/4.1/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt; Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/41"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1 (16)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/411"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.1 (17)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/412"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.2 (14)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/413"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.3 (13)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/414"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.4 (13)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/415"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.5 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/416"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.6 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/417"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.7 (6)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/418"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.8 (4)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/419"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.1.9 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 4.0 branch using vulnerable versions: Approx 23.6% | Approx 0.9% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/4.0/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/4.0/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt; Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/40"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0 (18)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/401"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.1 (14)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/402"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.2 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/403"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.3 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/404"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.4 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/405"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.5 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/406"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.6 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/407"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.7 (6)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/408"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.8 (4)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/409"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;4.0.9 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 3.9 branch using vulnerable versions: Approx 35.1% | Approx 1.3% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/3.9/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/3.9/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt; Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/39"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9 (23)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/391"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.1 (22)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/392"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.2 (19)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/393"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.3 (13)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/394"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.4 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/395"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.5 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/396"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.6 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/397"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.7 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/398"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.8 (6)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/399"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.9 (4)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3910"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.9.10 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 3.8 branch using vulnerable versions: Approx 35.6% | Approx 0.8% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/3.8/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/3.8/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt; Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/38"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8 (22)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/381"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.1 (25)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/382"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.2 (20)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/383"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.3 (20)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/384"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.4 (13)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/385"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.5 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/386"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.6 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/387"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.7 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/388"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.8 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/389"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.9 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3810"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.10 (6)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3811"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.11 (4)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3812"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.8.12 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;WordPress 3.7 branch using vulnerable versions: Approx 40.3% | Approx 0.3% of total WP user base
&lt;ul&gt;&lt;li&gt;Reference: &lt;a class="ext-link" href="http://w3techs.com/technologies/details/cm-wordpress/3.7/all"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://w3techs.com/technologies/details/cm-wordpress/3.7/all&lt;/a&gt;
&lt;/li&gt;&lt;li&gt; Vulnerable versions: &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/37"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7 (20)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/371"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.1 (25)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/372"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.2 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/373"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.3 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/374"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.4 (13)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/375"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.5 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/376"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.6 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/377"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.7 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/378"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.8 (12)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/379"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.9 (11)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3710"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.10 (8)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3711"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.11 (3)&lt;/a&gt; | &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses/3712"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;3.7.12 (2)&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;strong&gt;So based on this, if we're only counting users on branches 3.7-4.4+, approximately 14% of your total user base is using one of &lt;em&gt;63 WordPress versions with known vulnerabilities&lt;/em&gt;.&lt;/strong&gt; But, we need to add in the rest...so adding in users on the branches below that as well, then&lt;strong&gt; approximately 20%+ of the WordPress' user base is using a version that has known vulnerabilities.&lt;/strong&gt; That's 1 in 5. &lt;strong&gt;1 in 5.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;If WordPress powers 26% of the web, then that means that roughly 5% of the world's websites are a WordPress site using a version with a known vulnerability.&lt;/strong&gt; (Well, from 1-25+ vulnerabilities to be specific.) That's of course, not counting potential plugin security issues, which would increase that percentage dramatically.
&lt;/p&gt;
&lt;p&gt;
At the time I wrote this, there are &lt;a class="ext-link" href="http://www.internetlivestats.com/total-number-of-websites/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;1,013,194,710 websites and counting&lt;/a&gt;. So, if that's true, then 26% of that is &lt;strong&gt;263,430,625 sites powered by WordPress.&lt;/strong&gt; Yes, 263 million.
&lt;/p&gt;
&lt;p&gt;
20% of those: &lt;strong&gt;52,686,125 websites using versions of WordPress with a known vulnerability.&lt;/strong&gt; (Again, not counting plugins.) &lt;strong&gt;50...million...websites. With major security flaws.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;No offense, but while &lt;em&gt;you guys are excellent developers&lt;/em&gt;, you are &lt;em&gt;not security experts,&lt;/em&gt; and you need to be realistic about that.&lt;/strong&gt; The WordPress core dev team should really not be shutting people down so quickly about these security issues that users are pointing out. &lt;strong&gt;The overall security of WordPress needs to be taken a bit more seriously.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Let's look at things another way...real life examples.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Real life Physical Security principles that apply to web security:&lt;/strong&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;According to law enforcement and FBI statistics, what is the # 1 way to prevent auto break-ins?&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Don't put your valuables in plain sight.&lt;/em&gt;
&lt;/li&gt;&lt;li&gt;If you have a load of awesome, valuable stuff, like cameras, stereo, TV, high-end jewelry or anything else desirable, you can lock your doors all you want, but you are giving the thief huge motivation, and if they really want your stuff, they will go to almost any length to get it. Locks aren't going to stop them.
&lt;/li&gt;&lt;li&gt;Notice, the # 1 way is NOT to simply lock your door, or get an alarm system. Should you lock your door? Of course! That's a no-brainer. Should you get an alarm? Probably a good idea. But if you create enough motivation in a potential thief, they will find a way...even a fairly unskilled thief. They'll get a backhoe and smash it up if they have to.
&lt;/li&gt;&lt;li&gt;The same holds true of websites.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If you're securing a physical building containing a safe holding millions of dollars, would you lock the doors, and turn on the alarm system, but then post a notice on the front door with a map showing how to get to the safe, what model the safe was, and what the model of the security system was?
&lt;ul&gt;&lt;li&gt;No, you would not, because that would be ridiculous.
&lt;ul&gt;&lt;li&gt;With that info, an average skill-level thief could research how to disable that specific alarm system, crack that specific safe model, and they would have a map to the goods.
&lt;/li&gt;&lt;li&gt;Without that info, a thief is not going to randomly go up to your building, and attempt to try hacks for every type of alarm system out there. That would take forever, and trigger alarms. They will move on to an easier target that they know more about.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;That is essentially the exact same thing is being done by not hiding version numbers. It's essentially the WordPress model number.
&lt;ul&gt;&lt;li&gt;What on earth would make it seem that this is a safe thing to do with WordPress websites?
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;When someone points out to you guys that the version numbers are revealed by readme files, or meta generator, or anything else you all keep saying, "Well, it's not like they couldn't get that info another way."
&lt;ul&gt;&lt;li&gt;That's like saying, "Well, the other 2 doors to my house are unlocked, so why bother locking any of them." That's a ridiculous way of thinking. Just go lock all the doors.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Obviously, these points are oversimplified...but they get the point across.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Security is about reducing risk, and lowering the statistical probability of a successful attack.&lt;/strong&gt; You can never eliminate risk fully, and there is no such thing as 100% impenetrable security, even with the best measures in place.
&lt;/p&gt;
&lt;p&gt;
By increasing the level of security for your site or application, you are shrinking the pool of hackers that have the [skill|experience|time|resources|desire] to hack your site. In most criminal acts, it's about following the path of least resistance — if you increase the difficulty of success then often the hacker will go somewhere else. That's why every percentage of security improvement really does make a difference. (There still needs to be a robust layered security strategy...not saying to skip any of that.)
&lt;/p&gt;
&lt;p&gt;
You can often cut things off right at the beginning by removing any potential data leakage. &lt;strong&gt;That prevents a hacker from making your site a target during the initial information gathering stage.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;This is why version number leakage needs to be removed from WordPress.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
I really hope that no one takes any of what I've said as an insult or offense to the WordPress core dev team, because that is not my intent. My intent is to spark more of a wake-up call regarding WordPress security and hardening.
&lt;/p&gt;
&lt;p&gt;
You all are awesome, and I have much respect for your skills and contributions.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) closed</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:11:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:14/1460387493552958</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/37174" title="TinyMCE, inline link: Make styles for the autocomplete results ..."&gt;37174&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
TinyMCE, inline link: Make styles for the autocomplete results available on front end.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Also, replace the generic &lt;code&gt;.alignright&lt;/code&gt; class with a more specific class to avoid styling issues with themes which have padding/margin attached to &lt;code&gt;.alignright&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props azaozz, imath.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36461" title="#36461: defect (bug): wpLink autocomplete results styles are not available when wp_editor() ... (closed: fixed)"&gt;#36461&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [37174]: TinyMCE, inline link: Make styles for the autocomplete results ...</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:11:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37174</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37174/1460387492942483</guid>
      <description>&lt;p&gt;
TinyMCE, inline link: Make styles for the autocomplete results available on front end.
&lt;/p&gt;
&lt;p&gt;
Also, replace the generic &lt;code&gt;.alignright&lt;/code&gt; class with a more specific class to avoid styling issues with themes which have padding/margin attached to &lt;code&gt;.alignright&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Props azaozz, imath.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36461" title="#36461: defect (bug): wpLink autocomplete results styles are not available when wp_editor() ... (closed: fixed)"&gt;#36461&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #36481 (Emoji script is loaded even if emoji not available?) created</title>
      
        <dc:creator>pavelevap</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:03:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36481</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36481/1460386995619096</guid>
      <description>&lt;p&gt;
Some of my websites have older MySQL version and WordPress database was not upgraded to &lt;code&gt;ut8mb4&lt;/code&gt;, so it is not possible to use emojis. But related scripts (for example &lt;code&gt;wp-emoji-release.min.js&lt;/code&gt;) and styles are still loaded?
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36480 (TinyMCE: use the API for inline toolbars) created</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Mon, 11 Apr 2016 15:02:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36480</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36480/1460386968954536</guid>
      <description>&lt;p&gt;
Switch our inline toolbars to use the new TinyMCE API. It was improved several times and now has a callback we can use to precisely position the toolbar and take into account our UI changes like "editor scrolling" and DWF.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 14:58:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:13/1460386698457072</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by mike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460386696004666"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36479 (Improve autosave in the browser) created</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Mon, 11 Apr 2016 14:55:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36479</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36479/1460386510448551</guid>
      <description>&lt;p&gt;
Several improvements that can make this quite better:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Try to better detect when a restore may be needed.
&lt;/li&gt;&lt;li&gt;Make in-browser autosaves a "higher priority" than remote/server autosaves. The in-browser content is fresher. If both are available, prefer/emphasis the in-browser data.
&lt;/li&gt;&lt;li&gt;Add some subtle, always present UI for restoring a post from in-browser autosave. This should (probably) be only available before the users start typing.
&lt;/li&gt;&lt;li&gt;Consider adding the in-browser data to the revisions or display a preview/diff with the current data in some other way.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #17817 (do_action/apply_filters/etc. recursion on same filter kills underlying call) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 14:51:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/17817#comment:180</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/17817#comment:180/1460386263557716</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by casiepa. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460386261004663"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #36217,​36478 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 14:35:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=36217%2C36478</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=36217%2C36478/1460385345770147</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36217" title="#36217: enhancement: WP_Post_Type class (closed: fixed)"&gt;#36217&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #36478 (Add a `WP_Post_Type` class to represent post types) created</title>
      
        <dc:creator>flixos90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 14:34:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36478</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36478/1460385298041889</guid>
      <description>&lt;p&gt;
We now have classes for users, posts, terms, comments, networks, sites and I think it would be a good next step to get rid of the basic post type objects and use instances of a specific class for these as well. Therefore I'm proposing to add a new class &lt;code&gt;WP_Post_Type&lt;/code&gt; which is instantiated from the &lt;code&gt;register_post_type()&lt;/code&gt; function. The global variable &lt;code&gt;$wp_post_types&lt;/code&gt; would then contain these instances.
&lt;/p&gt;
&lt;p&gt;
What I'm thinking of is that we could move huge parts of the logic in &lt;code&gt;register_post_type()&lt;/code&gt; into the constructor of the new class, more specifically, I think we should move everything that changes the actual post type object (for example filling &lt;code&gt;publicly_queryable&lt;/code&gt; with the value from &lt;code&gt;public&lt;/code&gt;, getting the labels) while keeping everything that acts outside of the post type object (for example adding query var, adding meta box callback) directly in the &lt;code&gt;register_post_type()&lt;/code&gt; function.
&lt;/p&gt;
&lt;p&gt;
About the behavior of the class itself, I see two approaches: we could either use class properties for all the arguments of &lt;code&gt;register_post_type()&lt;/code&gt; or we could put them into an &lt;code&gt;$args&lt;/code&gt; array which would then be the only class property (for now). Then we could still access everything in a backwards-compatible way with PHP magic methods. What I like about the second approach is that it would allow to add any additional arguments, for example if a plugin does something custom with post types.
&lt;/p&gt;
&lt;p&gt;
If we create this class, we will have a base to work with in the future to centralize functionality that revolves around post types, for example I think it would be great if the post type objects would hold and manage its post type features - this way we could get rid of the private global variable that is currently used for that.
&lt;/p&gt;
&lt;p&gt;
I have already started writing a patch for this, just to test, which works fine so far, but before I refine the code to post it here, I would like to get some feedback about the idea in general.
&lt;/p&gt;
&lt;p&gt;
Also, if we tackle this, we can do the same thing for taxonomies (&lt;code&gt;WP_Taxonomy&lt;/code&gt;), but that should be dealt with in a separate ticket I think.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #27888 (Feature request: `get_current_admin_url()` and `get_current_admin_hook()`) updated</title>
      
        <dc:creator>brgweb</dc:creator>

      <pubDate>Mon, 11 Apr 2016 14:26:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/27888#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/27888#comment:9/1460384781317362</guid>
      <description>&lt;p&gt;
@mrahmadawais are you working on it?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) updated</title>
      
        <dc:creator>melchoyce</dc:creator>

      <pubDate>Mon, 11 Apr 2016 13:42:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:59</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:59/1460382179579484</guid>
      <description>&lt;p&gt;
Super thorough. From what I can tell it looks good, but I get &lt;code&gt;Fatal error: Cannot read property 'statusCode' of undefined&lt;/code&gt; if I try to apply the patch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36477 (Responsive images (srcset) can include images larger than the full size) created</title>
      
        <dc:creator>peterdavehello</dc:creator>

      <pubDate>Mon, 11 Apr 2016 13:27:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36477</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36477/1460381278752802</guid>
      <description>&lt;p&gt;
In many cases, I saw the resized and smaller images are much larger than the origin image, especially for the optimized images, it will make no sense to do that resize in this case, the worst case I've seen is about 13x larger than the origin and bigger image.
&lt;/p&gt;
&lt;p&gt;
If an example can help to explain the problem, please take this picture:
&lt;a class="ext-link" href="https://cdn2.peterdavehello.org/wp-content/uploads/2016/04/status.png"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://cdn2.peterdavehello.org/wp-content/uploads/2016/04/status.png&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Many thanks!
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36476 (The login form is not covered by a test) created</title>
      
        <dc:creator>slimndap</dc:creator>

      <pubDate>Mon, 11 Apr 2016 13:03:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36476</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36476/1460379798428165</guid>
      <description>&lt;p&gt;
I don't think that the login procedure and the underlying &lt;code&gt;wp_signon()&lt;/code&gt; are covered by (php)unit tests.
Since this is something quite trivial, I believe this should be added.
&lt;/p&gt;
&lt;p&gt;
I tried to add it myself, but failed. Keep running into &lt;code&gt;Cannot modify header information - headers already sent&lt;/code&gt; errors.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36475 (Responsive images in TinyMCE) created</title>
      
        <dc:creator>iseulde</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:49:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36475</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36475/1460378947851466</guid>
      <description>&lt;p&gt;
Decide if we should be adding the &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes to the images in the editor, and if they should be saved to the database or added with the display filter.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #32563 (Introduce filter for disabling new user notifcation) updated</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:43:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32563#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32563#comment:7/1460378582722070</guid>
      <description>&lt;p&gt;
@darrenlambert: When testing patches from core trac, the recommended method is to leverage the &lt;code&gt;patch&lt;/code&gt; module for grunt shipped with our build tools in the develop.svn.wordpress.org repo. It can handle the different directories problem. For more on that, see the &lt;a class="ext-link" href="https://make.wordpress.org/core/handbook/testing/patch/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Testing a Patch&lt;/a&gt; page in the Core Contributor Handbook.
&lt;/p&gt;
&lt;p&gt;
If you'd still like to apply the patch directly, I'd suggest moving the the patch file into your src/ directory and applying from there.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20152 (Multisite simplify option name to user_roles) updated</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:41:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20152#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20152#comment:31/1460378508402896</guid>
      <description>&lt;p&gt;
This convention (prefixing an option in a table that's already prefixed and thereby site specific) just creates extra work and possible confusion when moving sites.
&lt;/p&gt;
&lt;p&gt;
If two sites in some strange way are able to be sharing their options then they share &lt;code&gt;user roles&lt;/code&gt;, too. If this is happening in som rare cases, using config contants for &lt;code&gt;site_url&lt;/code&gt; and &lt;code&gt;home_url&lt;/code&gt;, add a constant for &lt;code&gt;user_roles&lt;/code&gt;  to override the option, like &lt;code&gt;WP_USER_ROLES&lt;/code&gt; (simple array of strings).
&lt;/p&gt;
&lt;p&gt;
Please fix.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) updated</title>
      
        <dc:creator>iseulde</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:31:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474#comment:4/1460377911704857</guid>
      <description>&lt;p&gt;
That sounds good, thanks for the feedback!
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) updated</title>
      
        <dc:creator>GregRoss</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:28:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474#comment:3/1460377733252545</guid>
      <description>&lt;p&gt;
Your ticket wasn't clear it was for the post screen only, but even so, allowing the developer to set the default makes the most sense I think.
&lt;/p&gt;
&lt;p&gt;
I have a plug that adds a widget to the posts screen and it wouldn't make much sense to have it closed by default if the user had added it to the display.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36421 (User profile not shown  when clicked on the photo and name displayed) closed</title>
      
        <dc:creator>DrewAPicture</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:26:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36421#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36421#comment:1/1460377614357555</guid>
      <description>invalid: &lt;p&gt;
Hi @harshita1,
&lt;/p&gt;
&lt;p&gt;
Trac is used for building the WordPress core software itself.
&lt;/p&gt;
&lt;p&gt;
If you're having trouble with gravatar features on WordPress.com you'll want to contact their support here: &lt;a class="ext-link" href="http://en.support.wordpress.com/contact/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://en.support.wordpress.com/contact/&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) updated</title>
      
        <dc:creator>iseulde</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:25:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474#comment:2/1460377524156228</guid>
      <description>&lt;p&gt;
This does not apply to dashboard or other meta boxes that or not on the editor screen. And sure, the meta box could perhaps set the default.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) updated</title>
      
        <dc:creator>GregRoss</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:22:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474#comment:1/1460377340336374</guid>
      <description>&lt;p&gt;
That might not be a very good in general.  While on the post screen it would be fine, other screens like the dashboard, would make little sense with the default set to closed.  A first time install of WordPress would provide a dashboard with little information visible.
&lt;/p&gt;
&lt;p&gt;
Likewise many plugins assume "open" is the default and this change would break those as well.
&lt;/p&gt;
&lt;p&gt;
Perhaps instead of changing the default, allow the default to be set on a per widget basis?
&lt;/p&gt;
&lt;p&gt;
That way a developer could determine which is best for a given widget.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #20152 (Multisite simplify option name to user_roles) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 12:19:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/20152#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/20152#comment:30/1460377164717999</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by ocean90. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460377162004648"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36474 (Revamp meta boxes) created</title>
      
        <dc:creator>iseulde</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:55:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36474</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36474/1460375721089640</guid>
      <description>&lt;p&gt;
This would be a pretty big user facing enhancement.
&lt;/p&gt;
&lt;p&gt;
The idea is to collapse meta boxes by default, allowing them to have an icon and some kind of summary. Just like we do now, we would keep opened meta boxes open, closed ones closed, only the default would now be closed.
&lt;/p&gt;
&lt;p&gt;
This is similar to &lt;a class="ext-link" href="https://wordpress.com/post"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;wordpress.com/post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;em&gt;&lt;a class="ext-link" href="https://make.wordpress.org/design/2016/01/11/improving-post-new/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Improving Post New&lt;/a&gt;&lt;/em&gt; by @michael-arestad, Metabox physics.
&lt;/p&gt;
&lt;p&gt;
Related to &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/17028" title="#17028: enhancement: Move the &amp;#34;last edited at&amp;#34; text and saved/updated/published notices in ... (new)"&gt;#17028&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Proof of concept:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://make.wordpress.org/core/files/2016/01/Screen-Shot-2015-08-07-at-16.02.49.png"&gt;&lt;img src="https://make.wordpress.org/core/files/2016/01/Screen-Shot-2015-08-07-at-16.02.49.png" alt="https://make.wordpress.org/core/files/2016/01/Screen-Shot-2015-08-07-at-16.02.49.png" crossorigin="anonymous" title="https://make.wordpress.org/core/files/2016/01/Screen-Shot-2015-08-07-at-16.02.49.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36473 (JavaScript error in theme customizer a specific value of before_widget) created</title>
      
        <dc:creator>martin.krcho</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:25:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36473</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36473/1460373943825952</guid>
      <description>&lt;p&gt;
I just came across an issue with the theme customizer. It is failing with the following JavaScript error
&lt;/p&gt;
&lt;pre class="wiki"&gt;Uncaught Error: Syntax error, unrecognized expression: SECTION.widget.widget-%2$s,SECTION.widget.widget-%2$s,SECTION.widget.widget-%2$s,SECTION.widget.widget-%2$s,SECTION.widget.widget-%2$s,SECTION.widget.widget-%2$s
&lt;/pre&gt;&lt;p&gt;
I tracked this issue down to the function buildWidgetSelectors in customize-preview-widgets.min.js, specififcally to this bit of code:
&lt;/p&gt;
&lt;pre class="wiki"&gt;d.before_widget.replace("%1$s", "").replace("%2$s", "")
&lt;/pre&gt;&lt;p&gt;
I am using theme called Bearded that defines the "before_widget" as follows:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;section id="%1$s" class="widget %2$s widget-%2$s"&amp;gt;
&lt;/pre&gt;&lt;p&gt;
A possible fix would be to make both of the replace actions mentioned above replace ALL occurencies of the pattern:
&lt;/p&gt;
&lt;pre class="wiki"&gt;d.before_widget.replace(/%1\$s/g, "").replace(/%2\$s/g, "")
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Tickets #26262,​36472 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:25:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=26262%2C36472</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=26262%2C36472/1460373929206187</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26262" title="#26262: defect (bug): Ajax requests shouldn't display errors (closed: fixed)"&gt;#26262&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Thanks for testing!
&lt;/p&gt;
&lt;p&gt;
For your 4.4 install I suggest to inspect the response of the XHR request in your browser. Should be visible in the network tab of the developer tools.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #36472 (Media Library seems to break) updated</title>
      
        <dc:creator>coderste</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:22:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36472#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36472#comment:5/1460373746762480</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36472 (Media Library seems to break) updated</title>
      
        <dc:creator>coderste</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:18:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36472#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36472#comment:4/1460373498247200</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36472#comment:2" title="Comment 2"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hello @coderste, that's probably because of a PHP warning caused by one of your plugins or a theme which corrupts the XHR response. &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/36571" title="Don't display errors during Ajax requests.
See #34915 for REST and ..."&gt;[36571]&lt;/a&gt; will fix this by suppressing the errors.
Can you test if it still happens in &lt;a class="ext-link" href="https://wordpress.org/news/2016/04/wordpress-4-5-rc2/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;RC2 of WordPress 4.5&lt;/a&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I've tested this in 4.5 and while in debug mode the media library does work - I can it was just a 4.4 bug
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33305 (Plugin details modal: initial focus and constraining tabbing) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:11:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33305#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33305#comment:17/1460373080907213</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by mehulkaklotar. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460373078004638"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33305 (Plugin details modal: initial focus and constraining tabbing) updated</title>
      
        <dc:creator>mehulkaklotar</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:09:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33305#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33305#comment:16/1460372960328733</guid>
      <description>&lt;p&gt;
Any Props? :) @afercia @mikeschroder
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36472 (Media Library seems to break) updated</title>
      
        <dc:creator>coderste</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:07:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36472#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36472#comment:3/1460372858737917</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36472#comment:2" title="Comment 2"&gt;ocean90&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hello @coderste, that's probably because of a PHP warning caused by one of your plugins or a theme which corrupts the XHR response. &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/36571" title="Don't display errors during Ajax requests.
See #34915 for REST and ..."&gt;[36571]&lt;/a&gt; will fix this by suppressing the errors.
Can you test if it still happens in &lt;a class="ext-link" href="https://wordpress.org/news/2016/04/wordpress-4-5-rc2/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;RC2 of WordPress 4.5&lt;/a&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I have restored back to the default theme and disabled all Plugins and I seem to get the same result while in debug mode I can not access the media library
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36472 (Media Library seems to break) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:04:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36472#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36472#comment:2/1460372651655567</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello @coderste, that's probably because of a PHP warning caused by one of your plugins or a theme which corrupts the XHR response. &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/36571" title="Don't display errors during Ajax requests.
See #34915 for REST and ..."&gt;[36571]&lt;/a&gt; will fix this by suppressing the errors.
Can you test if it still happens in &lt;a class="ext-link" href="https://wordpress.org/news/2016/04/wordpress-4-5-rc2/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;RC2 of WordPress 4.5&lt;/a&gt;?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36472 (Media Library seems to break) updated</title>
      
        <dc:creator>coderste</dc:creator>

      <pubDate>Mon, 11 Apr 2016 11:03:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36472#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36472#comment:1/1460372583553866</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36472 (Media Library seems to break) created</title>
      
        <dc:creator>coderste</dc:creator>

      <pubDate>Mon, 11 Apr 2016 10:58:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36472</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36472/1460372320921033</guid>
      <description>&lt;p&gt;
In WordPress 4.4.2 the media library seems to break completely if I set &lt;code&gt;WP_DEBUG&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; - is this the normal behaviour for this?
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="http://i.stack.imgur.com/wmPCJ.png"&gt;&lt;img src="http://i.stack.imgur.com/wmPCJ.png" alt="http://i.stack.imgur.com/wmPCJ.png" crossorigin="anonymous" title="http://i.stack.imgur.com/wmPCJ.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Once I disable &lt;code&gt;WP_DEBUG&lt;/code&gt; it seems to work just fine and all the images I have uploaded are displayed - this is quite annoying having to turn it off while debugging a feature on my theme.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Tickets #34213,​35653 batch updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 10:24:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=34213%2C35653</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=34213%2C35653/1460370254406616</guid>
      <description>duplicate: &lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34213" title="#34213: enhancement: Change priority for loading theme/plugin translations (closed: fixed)"&gt;#34213&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #32879 (Live switching Language) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 10:20:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32879#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32879#comment:1/1460370050619210</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/29783" title="#29783: feature request: User Admin Language (closed: fixed)"&gt;#29783&lt;/a&gt;, &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/26511" title="#26511: feature request: Introduce a locale-switching function (closed: fixed)"&gt;#26511&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #26511 (Introduce a locale-switching function) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Mon, 11 Apr 2016 10:20:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/26511#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/26511#comment:9/1460370040957352</guid>
      <description>&lt;p&gt;
Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/32879" title="#32879: feature request: Live switching Language (closed: duplicate)"&gt;#32879&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36471 (Accessing the path /data/feed/atom on a Wordpress URL causes an error ...) created</title>
      
        <dc:creator>dannyjjk</dc:creator>

      <pubDate>Mon, 11 Apr 2016 09:54:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36471</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36471/1460368451563917</guid>
      <description>&lt;p&gt;
I have WP_DEBUG set up on my Wordpress domains to ensure that I find any PHP notices or warnings as they often help me to find issues that may be present or may not be present but could be in the future. I noticed when I accessed the path /data/feed/atom on a Wordpress URL, it causes this error:
&lt;/p&gt;
&lt;p&gt;
PHP Notice:  Trying to get property of non-object in /var/www/vhosts/soul.academy/httpdocs/wp-includes/link-template.php on line 636
&lt;/p&gt;
&lt;p&gt;
I did a stack trace which showed all the files were core wordpress files (all located in /wp-includes). I imagine this notice should be being handled in some way such that it does come up in the logs, and because of that it seems like a bug to me.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36470 (Multisite - network sites list not very memory efficient) created</title>
      
        <dc:creator>Bombdogs</dc:creator>

      <pubDate>Mon, 11 Apr 2016 09:16:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36470</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36470/1460366200631540</guid>
      <description>&lt;p&gt;
This recent change in 4.3 to add user counts to multisite network admin sites list can cause out of memory errors on installs with many thousands of users...
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://core.trac.wordpress.org/attachment/ticket/32434/32434.2.patch"&gt;https://core.trac.wordpress.org/attachment/ticket/32434/32434.2.patch&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
On a vanilla WPMU install with 200,000 users (bulk generated by wp-cli) the wp-admin memory footprint for the network admin sites list page can be as low as 32Mb when running WP4.2 - simply upgrading to WP4.3 requires you to increase this to 128Mb (~4x) for this size user base. The memory requirement keeps increasing as the user base increases (unsustainable).
&lt;/p&gt;
&lt;p&gt;
The problem in the code referenced in the patch above is that all users for a blog are selected out of the DB and then a count is done in PHP - this requires more memory than is ideal - selecting just the count will be quicker and more memory efficient.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #8217 (Check all checkbox never becomes checked) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 09:02:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/8217#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/8217#comment:13/1460365341447032</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #accessibility by garyj. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/accessibility/p1460365338000477"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37 (1.3 updater is calling 'autoload' column without db alterations...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 09:02:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37#comment:7/1460365341172549</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #accessibility by garyj. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/accessibility/p1460365338000477"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36467 (disable zip extension in themes directroy) updated</title>
      
        <dc:creator>ahmedash95</dc:creator>

      <pubDate>Mon, 11 Apr 2016 08:48:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36467#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36467#comment:2/1460364536357376</guid>
      <description>&lt;p&gt;
i'm agree with you .. but a lot of users make this mistake by wrong and they completely forgot to protected their important files, i think wordpress must have some protected ways to secure user's files.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36469 (Chrome bug when placing cursor before or after Gallery shortcode (WPView)) created</title>
      
        <dc:creator>bduclos</dc:creator>

      <pubDate>Mon, 11 Apr 2016 08:22:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36469</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36469/1460362970138125</guid>
      <description>&lt;p&gt;
To reproduce this issue: in the Visual editor mode, type a long text followed by a Gallery shortcode (you have to scroll to see the gallery).
&lt;/p&gt;
&lt;p&gt;
In Chrome, if you click to the left or right of the Gallery WPView to place the cursor, the editor jumps to the top.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36466 (Remove "appearance" reference in customizer permissions error) updated</title>
      
        <dc:creator>Frozzare</dc:creator>

      <pubDate>Mon, 11 Apr 2016 06:43:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36466#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36466#comment:1/1460356987768611</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>36466.patch attached to Ticket #36466</title>
      
        <dc:creator>Frozzare</dc:creator>

      <pubDate>Mon, 11 Apr 2016 05:47:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36466/36466.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36466/36466.patch/1460353639712092</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Mon, 11 Apr 2016 05:00:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:12/1460350847818359</guid>
      <description>&lt;p&gt;
If anyone else thinks &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36461/36461.3.patch" title="Attachment '36461.3.patch' in Ticket #36461"&gt;36461.3.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36461/36461.3.patch" title="Download"&gt;​&lt;/a&gt; is the right way to go, would be great to get this committed before tomorrow morning's dry run.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) updated</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Mon, 11 Apr 2016 03:46:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:58</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:58/1460346387058128</guid>
      <description>&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36173/36173.23.diff" title="Attachment '36173.23.diff' in Ticket #36173"&gt;36173.23.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36173/36173.23.diff" title="Download"&gt;​&lt;/a&gt; sets up the feature images with &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes. I created smaller sizes from the original 1000px versions and compressed them using ImageOptim. The whole set of file sizes can be found in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36173/about-images.zip" title="Attachment 'about-images.zip' in Ticket #36173"&gt;about-images.zip&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36173/about-images.zip" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The image sizes included are: 280px, 400px, 560px, 680px, 800px, and 1000px.
&lt;/p&gt;
&lt;p&gt;
These will need to be uploaded to the wp.com CDN and then all of the placeholder URLs in the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;srcset&lt;/code&gt; will need to be replaced with the actual URLs.
&lt;/p&gt;
&lt;p&gt;
Some considerations I included in the implementation:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I've included the 560px version in the &lt;code&gt;src&lt;/code&gt;, which is slightly larger than the largest 1x width needed. I'm assuming that most retina devices are capable of displaying images from the &lt;code&gt;srcset&lt;/code&gt;. Otherwise, we will display a smaller image, and since we're not using a polyfill, we don't need to worry about any double download issues by including both a &lt;code&gt;src&lt;/code&gt; and a &lt;code&gt;srcset&lt;/code&gt; attribute.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;I've listed the 1000px resource first in the &lt;code&gt;srcset&lt;/code&gt; to ensure that older versions of iOS Safari get crisp images due to a bug that cause them to always load the first source in a &lt;code&gt;srcset&lt;/code&gt; attribute when using an unrecognized descriptor (see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/35030" title="#35030: defect (bug): Responsive Images: wrong source selected in iOS8 (closed: fixed)"&gt;#35030&lt;/a&gt;).
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>36173.23.diff attached to Ticket #36173</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Mon, 11 Apr 2016 03:41:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36173/36173.23.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36173/36173.23.diff/1460346069129362</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 03:39:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:57</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:57/1460345955062620</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by mark. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460345953004613"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>about-images.zip attached to Ticket #36173</title>
      
        <dc:creator>joemcgill</dc:creator>

      <pubDate>Mon, 11 Apr 2016 03:26:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36173/about-images.zip</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36173/about-images.zip/1460345197221086</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36447 (Responsive preview icons in Customizer need tooltips) updated</title>
      
        <dc:creator>ahortin</dc:creator>

      <pubDate>Mon, 11 Apr 2016 01:59:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36447#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36447#comment:3/1460339943002472</guid>
      <description>&lt;p&gt;
@celloexpressions the fact that they're non-destructive is irrelevant. People shouldn't have to click a button to find out what it does. That's the most annoying thing ever. Why is there a tooltip on the Distraction Free Writing icon in the Visual Editor? It's non-desctructive as well. By your way of thinking, this tooltip should be removed also.
&lt;/p&gt;
&lt;p&gt;
You should know what an icon/button does BEFORE you click it. If I'm using an interface and I don't know what a particular button does, I'm less likely to click it at all, just in case it messes up my work. If I don't know what the icon/button does, how do I know if it's non-destructive?
&lt;/p&gt;
&lt;p&gt;
Even though the sizes may be arbitrary, they'd still benefit from having labels like "Mobile view/Tablet view/Desktop view", or something along those lines. They're not device specific and will at least give people an idea of what the icon does.
&lt;/p&gt;
&lt;p&gt;
Also, tooltips don't become distracting once you know what an icon/button does. I refer to the Visual Editor again. I don't find the tooltips on any of those buttons annoying and I've been using them for 10+ years. Once you know what an icon does, you simply click it and move on. Your mouse doesn't tend to hover over it. The tooltip will only display for a microsecond.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36455 (Call opcache_reset() after plug-in, theme or core update) updated</title>
      
        <dc:creator>dd32</dc:creator>

      <pubDate>Mon, 11 Apr 2016 01:57:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36455#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36455#comment:1/1460339826534083</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Focuses&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
When running in an environment where PHP files are modified, using an opcode cache without some kind of filesystem monitoring is always going to be a bad idea - the opcode cache simply is not designed to be used within that environment.
&lt;/p&gt;
&lt;p&gt;
I'm not against adding this, especially as it's more likely to be enabled in PHP 7, but this won't help at all for scenario's where a manual update is run, or WP-CLI (or other similar tools) are used to manage the updates.
&lt;/p&gt;
&lt;p&gt;
It'd have to be run post plugin/theme/core update, on the plugin/theme editors, probably needs some way of being triggered by plugins too, etc.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36467 (disable zip extension in themes directroy) closed</title>
      
        <dc:creator>dd32</dc:creator>

      <pubDate>Mon, 11 Apr 2016 01:26:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36467#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36467#comment:1/1460338008323658</guid>
      <description>wontfix: &lt;p&gt;
At this time, we don't add rewrite rules to block access to files - if a user doesn't want files downloadable, they shouldn't be placed within a publicly readable location, or should have a unqiue non-guessable filename.
&lt;/p&gt;
&lt;p&gt;
Some security plugins are known to add extra rewrite rules to potentially block invalid requests, I don't think I've seen any of those add a similar rule to this either.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #35557 (grunt precommit should run phpunit tests) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 11 Apr 2016 00:37:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35557#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35557#comment:29/1460335065892919</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by netweb. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460335063004611"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36452 (customize_value should be passed $this) reopened</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Mon, 11 Apr 2016 00:31:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36452#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36452#comment:4/1460334696608645</guid>
      <description></description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #34584 (Editor/TinyMCE - Enhance Blockquote Functionality to Allow Citations) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Mon, 11 Apr 2016 00:29:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34584#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34584#comment:3/1460334587820774</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11863 (Trashed items interfere with page/post slug generation) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 10 Apr 2016 23:36:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11863#comment:156</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11863#comment:156/1460331362611258</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:154" title="Comment 154"&gt;pavelevap&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Yes, when you publish post "Trash" (slug &lt;code&gt;trash&lt;/code&gt;) and move it to Trash, &lt;code&gt;post_name&lt;/code&gt; will be changed to &lt;code&gt;trash__trashed&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Correct
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:154" title="Comment 154"&gt;pavelevap&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
And when you restore it, &lt;code&gt;post_name&lt;/code&gt; is changed back to &lt;code&gt;trash&lt;/code&gt; and &lt;code&gt;_wp_old_slug&lt;/code&gt; with value &lt;code&gt;trash__trashed&lt;/code&gt; is created.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Correct
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:154" title="Comment 154"&gt;pavelevap&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The only feature of &lt;code&gt;_wp_old_slug&lt;/code&gt; in this case is possible redirection from &lt;code&gt;trash__trashed&lt;/code&gt; to &lt;code&gt;trash&lt;/code&gt;? But I do not understand why?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Correct, the &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/11863/11863.18.diff" title="Attachment '11863.18.diff' in Ticket #11863"&gt;11863.18.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/11863/11863.18.diff" title="Download"&gt;​&lt;/a&gt; would have bypassed saving &lt;code&gt;_wp_old_slug&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:154" title="Comment 154"&gt;pavelevap&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
No user knows (for default Posts and Pages) this temporary trashed slug and there is no need to save this redirect.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
For default post types yes, for custom post types like bbPress' use case knowing and using the trashed slug is required.
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:154" title="Comment 154"&gt;pavelevap&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
And if it is possible problem on bbPress side, it should be solved there because it is not WP core issue?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There is no longer any issue on bbPress side, it also couldn't be handled by bbPress alone, this is WP core functionality that changed that bbPress itself could not change.
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:154" title="Comment 154"&gt;pavelevap&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For most of WP users it has only downsizes, I guess, that means bloated database with not usable values :-(
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, but again this would be pretty limited numbers for most users
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11863 (Trashed items interfere with page/post slug generation) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 10 Apr 2016 23:25:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11863#comment:155</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11863#comment:155/1460330754860361</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:153" title="Comment 153"&gt;ericlewis&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:152" title="Comment 152"&gt;netweb&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
you get an automatic redirect to &lt;code&gt;.../forums/topic/my-topic__/?view=all&lt;/code&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Did you mean a redirect to &lt;code&gt;.../forums/topic/my-topic/?view=all&lt;/code&gt;? The underscores should be removed when untrashed.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, my bad, edited and fixed copy pasta.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #23394 (Remove version from readme.html / Upgrade core doesn't restore the file) closed</title>
      
        <dc:creator>chriscct7</dc:creator>

      <pubDate>Sun, 10 Apr 2016 23:25:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23394#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23394#comment:13/1460330709561219</guid>
      <description>wontfix: &lt;p&gt;
IETF's recommendation 14.39 in RFC 2038 refers to a header that was previously used for intra-network communication for use in identifying the processing software or for general use server surveys. This specific header would contain information about a level that is higher than the application layer of WordPress, and thus should not be construed as guidance to projects like WordPress or other software that runs at the same layer as WordPress. An example of data previously contained in this header was:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
CERN/3.0 libwww/2.17
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This header no longer exists. In fact the RFC you referenced was written in 1997, and was itself invalidated and supersceded by RFC 2616 in 1999. As of the 1999 RFC, no RFCs since, about the HTTP protocol have contained similar guidance, partially because the header in question doesn't exist beginning in RFC 2616.
&lt;/p&gt;
&lt;p&gt;
The license.txt file contains the GPL license text which is a component of the GPL license which WordPress uses.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Regarding removing version numbers from CSS and JS files: As I mentioned above, replace the version number with a salted hash (or other unique random key) that changes each time the version is updated.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This would break backwards compatibility that plugins can rely on, and it doesn't solve the problem that it's just as easy to compare the contents of the file as it is to parse the version out of the url.
&lt;/p&gt;
&lt;p&gt;
Moreover, there appears to be a suggestion that even if you remove these files, hide the meta generator tag, and randomize the version appended to strings, somehow that will plug all of your version concerns. However, if one really wants the version number you can simply run a string comparison on the outputted css or js files. Moreover, the WordPress REST API framework requires versioning, which inherently must be public in order for the feature to use, and that versioning can be directly mapped to versions of WordPress. That itself cannot be prevented.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
We have to assume that sooner or later, a vulnerability will be found in every single version of WordPress.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Using a version detection library attached to a standard exploit library set such as metasploit, one can simply just run through all vulnerabilities ever found for WordPress just as quickly as detecting the version on a site that's done what you've prescribed. The fact of the matter is that security by obscurity (version hiding being an example), does not make the site any more or less secure (as pointed out in the OWASP). In actuality in certain penetration software it makes it faster. Many frameworks, upon being unable to deduce a version number of an application, simply iterate over all vulnerabilities anyways.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Very true...but WordPress.org's own usage stats show that approximately 48% of WordPress users aren't even updated to the 4.4 (current) branch so that leaves about half of WordPress' users out of luck if a more proactive approach to security isn't taken.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is a soon to be obsolete argument. WordPress is moving towards Chromium style updates, where major versions are done automatically. Existing tail end WordPress installs are automatically being updated major versions now, even if they were not previously by a combination of WordPress outreach to major web hosting companies and other relevant parties. As this continues to occur, the number of sites on the current major version in perpetuity will continue to grow. It wouldn't surprise me if after 2 years, that's up to 85-90% of all installs always on the current major version.
&lt;/p&gt;
&lt;p&gt;
Furthermore, on sites where WordPress has autoupdate minor releases (all sites since 3.7, so about 80%+ of all WP installs), any newly discovered vulnerabilities can be pushed and patched in real time. Hiding versions does not in any way, shape or form help make any site newer than 3.7 more secure than they already were.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It's also being proposed to add the WP version number in Etags, and this is already implemented in v4.5-RC2, which is also not a great idea. Please see &lt;a href="https://core.trac.wordpress.org/ticket/28722#comment:25"&gt;my comments&lt;/a&gt; on the &lt;a href="https://core.trac.wordpress.org/ticket/28722#comment:27"&gt;ticket here&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's not a proposal, it's a merged feature that will ship with WordPress 4.5 in 2 days.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Not revealing version numbers is merely one aspect of following establshed good security principles, so this shouldn't be seen as an odd request. I've seen requests similar to this keep getting shut down over the years and it makes me scratch my head.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;If we can make some relatively easy changes to remove all the version number leakage throughout WordPress, and reduce the number of successful hacks (even if only by a small percent), for &lt;em&gt;nearly half of WordPress users&lt;/em&gt; that don't upgrade as quickly, doesn't it seem like that's something we should do?&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
These are only successful because either users fail to upgrade major versions (something that again will not be as significant if at all an issue in the future) or have something else that's vulnerable, generally a plugin, which does not in any way have anything to do with WordPress version number "leakage". In the meantime, the users who don't upgrade will never see this update to remove the version numbers, so in the end, this type of thing provides a net benefit of helping no one. A site is either up to date and thus secure via security releases, or doesn't update and will never see this update anyway.
&lt;/p&gt;
&lt;p&gt;
Note, I'm going to reclose this ticket, however, a closed ticket does not mean discussion has to stop. You (and others) can continue commenting on the ticket while it is closed.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 22:50:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:11/1460328614562510</guid>
      <description>&lt;p&gt;
We shouldn't be using &lt;code&gt;.item-title&lt;/code&gt; and &lt;code&gt;.item-type&lt;/code&gt; in autocomplete as they are used in the "rivers" in wpLink where the styling is different. Also, &lt;code&gt;.item-title&lt;/code&gt; is not needed there at all. If we must change the class name, lets make it something more specific to the editor. See 36461.3.patch.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36461.3.patch attached to Ticket #36461</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 22:46:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36461/36461.3.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36461/36461.3.patch/1460328361230797</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 22:42:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:10/1460328122397642</guid>
      <description>&lt;p&gt;
+1 for &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36461/36461.2.patch" title="Attachment '36461.2.patch' in Ticket #36461"&gt;36461.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36461/36461.2.patch" title="Download"&gt;​&lt;/a&gt;. There are some other styling issues that existed in 4.4 (probably earlier) once you hit the gear icon, but that's not a regression.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36468 (Error in docs of get_home_url() and home_url()) created</title>
      
        <dc:creator>thomaswm</dc:creator>

      <pubDate>Sun, 10 Apr 2016 22:19:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36468</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36468/1460326783563860</guid>
      <description>&lt;p&gt;
In the docs of &lt;code&gt;get_home_url()&lt;/code&gt; and &lt;code&gt;home_url()&lt;/code&gt;, it says:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Returns the ‘home’ option with the appropriate protocol, &lt;strong&gt;‘https’ if is_ssl() and ‘http’ otherwise&lt;/strong&gt;. If $scheme is ‘http’ or ‘https’, is_ssl() is overridden.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's not entirely correct. If &lt;code&gt;get_home_url()&lt;/code&gt; is called without the &lt;code&gt;$scheme&lt;/code&gt; parameter, then:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If &lt;code&gt;is_ssl()&lt;/code&gt; is true, then &lt;code&gt;get_home_url()&lt;/code&gt; will return a URL with the HTTPS scheme.
&lt;/li&gt;&lt;li&gt;If &lt;code&gt;is_ssl()&lt;/code&gt; is false, then &lt;code&gt;get_home_url()&lt;/code&gt; will return a URL with the same scheme as the &lt;code&gt;home&lt;/code&gt; option. That can be either HTTP or HTTPS.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 22:18:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:11/1460326696331927</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Bumping this to a future release. There's not much we can do when processing backticks on some keyboard layouts because of the way these are communicated from the OS to the browser. We'll probably look closer at how these patterns are processed. Related: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33300" title="#33300: task (blessed): More text patterns (closed: fixed)"&gt;#33300&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 22:11:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:10/1460326279074753</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by jeremyfelt. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1460326275001036"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36467 (disable zip extension in themes directroy) created</title>
      
        <dc:creator>ahmedash95</dc:creator>

      <pubDate>Sun, 10 Apr 2016 21:44:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36467</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36467/1460324678816797</guid>
      <description>&lt;p&gt;
a lot of developers upload theme zip file to wp-content/themes/theme_name.zip then they extact the file and forget to remove it later . and thats make it easy to anyone to download this seem later if he view source and get theme directory wp-content/themes/ahmed_theme/style.css if he tries to download the file wp-content/themes/ahmed_theme.zip the file will start to download . so i think wordpress default htaccess must come with this rewrite rule to protected users .
&lt;/p&gt;
&lt;pre class="wiki"&gt;
RewriteRule ^wp-content/themes/.*\.(zip|rar)$ - [F,L,NC]
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 21:26:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:9/1460323603237596</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by jeremyfelt. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460323600004584"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sun, 10 Apr 2016 20:51:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:9/1460321511610032</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36461#comment:6" title="Comment 6"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
36461.1.patch only copies the already used styles and makes them available on the front-end.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
See &lt;a href="https://core.trac.wordpress.org/browser/trunk/src/wp-admin/css/forms.css?rev=36619&amp;amp;marks=586-594,598-601,605-606#L584"&gt;https://core.trac.wordpress.org/browser/trunk/src/wp-admin/css/forms.css?rev=36619&amp;amp;marks=586-594,598-601,605-606#L584&lt;/a&gt;.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Noticed another issue with  the too common &lt;code&gt;.alignright&lt;/code&gt; class in Twenty Sixteen, see &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36461/before.png" title="Attachment 'before.png' in Ticket #36461"&gt;before.png&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36461/before.png" title="Download"&gt;​&lt;/a&gt;. Fixed in &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36461/36461.2.patch" title="Attachment '36461.2.patch' in Ticket #36461"&gt;36461.2.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36461/36461.2.patch" title="Download"&gt;​&lt;/a&gt; by using the same class names as in the old modal, see &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36461/after.png" title="Attachment 'after.png' in Ticket #36461"&gt;after.png&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36461/after.png" title="Download"&gt;​&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>after.png attached to Ticket #36461</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sun, 10 Apr 2016 20:49:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36461/after.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36461/after.png/1460321391298671</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>36461.2.patch attached to Ticket #36461</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sun, 10 Apr 2016 20:49:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36461/36461.2.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36461/36461.2.patch/1460321384042465</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>before.png attached to Ticket #36461</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sun, 10 Apr 2016 20:49:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36461/before.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36461/before.png/1460321377559509</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 20:20:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:8/1460319658729899</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by mike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460319655004578"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Sun, 10 Apr 2016 20:19:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:7/1460319582734241</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36461#comment:6" title="Comment 6"&gt;azaozz&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
would be good to consider it for fixing in 4.5 even this late. 36461.1.patch only copies the already used styles and makes them available on the front-end.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Agreed. This is dangerously close to (if not) a regression anyway.
&lt;/p&gt;
&lt;p&gt;
Let's get the other review needed to commit this.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #34584 (Editor/TinyMCE - Enhance Blockquote Functionality to Allow Citations) closed</title>
      
        <dc:creator>downstairsdev</dc:creator>

      <pubDate>Sun, 10 Apr 2016 19:56:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/34584#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/34584#comment:2/1460318215751226</guid>
      <description>maybelater: &lt;p&gt;
I released this feature as a plugin: &lt;a class="ext-link" href="https://wordpress.org/plugins/better-blockquotes/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/plugins/better-blockquotes/&lt;/a&gt;. We can see if it gets any traction and re-open as a core ticket later if we want to pursue.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 19:39:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:8/1460317158166308</guid>
      <description>&lt;p&gt;
I enabled the OSX Norwegian keyboard layout to try and reproduce. I'm still able to (via Shift - \) create code blocks at a normal pace.
&lt;/p&gt;
&lt;p&gt;
However, wherever ` could be used as a modifier to add a grave accent, it definitely interrupts the process. If used before a character that does not get the accent, it works as normal.
&lt;/p&gt;
&lt;pre class="wiki"&gt;English keyboard: `a code block` and `this code block`
Norwegian keyboard: à code block and `this code block`
&lt;/pre&gt;&lt;p&gt;
When typing the closing backtick, I get the indicator that it's waiting to be used as a modifier until I type something else. I wonder if the backtick's use as a modifier key is confusing the JS?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #33055 (Support Parallel HTTP Requests in WP_Http, et al) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sun, 10 Apr 2016 19:31:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33055#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33055#comment:19/1460316680134025</guid>
      <description>&lt;p&gt;
Some random thoughts about &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/33055/33055.2.diff" title="Attachment '33055.2.diff' in Ticket #33055"&gt;33055.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/33055/33055.2.diff" title="Download"&gt;​&lt;/a&gt;:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Requests uses &lt;code&gt;spl_autoload_register()&lt;/code&gt; so we have to provide a fallback in case SPL is disabled.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;WP_Requests_Hooks&lt;/code&gt; needs some whitespace love. Is it part of Request or WP? Asking because of the &lt;code&gt;@package&lt;/code&gt; tag and because it's in the root of &lt;code&gt;/wp-includes/&lt;/code&gt;.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;/wp-includes/requests/Requests/&lt;/code&gt; looks weird. Can we move it up one dir?
&lt;/li&gt;&lt;li&gt;What's the status of &lt;a class="ext-link" href="https://github.com/rmccue/Requests-WPHTTP/issues/1"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/rmccue/Requests-WPHTTP/issues/1&lt;/a&gt;?
&lt;/li&gt;&lt;li&gt;Are they any other tickets which could be marked as fixed as soon as Requests lands? (&lt;a href="https://core.trac.wordpress.org/query?status=!closed&amp;amp;component=HTTP+API"&gt;https://core.trac.wordpress.org/query?status=!closed&amp;amp;component=HTTP+API&lt;/a&gt;)
&lt;/li&gt;&lt;li&gt;Can we get a refresh of the patch so it could potentially land on day one of 4.6?
&lt;/li&gt;&lt;li&gt;"We can also remove the HTTP tests from the core tests if you'd like, since they're all covered by Requests' tests already. " I wouldn't remove them directly. Let's make sure that our tests are passing too and remove them only when the implementation is finished.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11863 (Trashed items interfere with page/post slug generation) updated</title>
      
        <dc:creator>pavelevap</dc:creator>

      <pubDate>Sun, 10 Apr 2016 19:30:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11863#comment:154</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11863#comment:154/1460316616723308</guid>
      <description>&lt;p&gt;
Yes, when you publish post "Trash" (slug &lt;code&gt;trash&lt;/code&gt;) and move it to Trash, &lt;code&gt;post_name&lt;/code&gt; will be changed to &lt;code&gt;trash__trashed&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
And when you restore it, &lt;code&gt;post_name&lt;/code&gt; is changed back to &lt;code&gt;trash&lt;/code&gt; and &lt;code&gt;_wp_old_slug&lt;/code&gt; with value &lt;code&gt;trash__trashed&lt;/code&gt; is created.
&lt;/p&gt;
&lt;p&gt;
The only feature of &lt;code&gt;_wp_old_slug&lt;/code&gt; in this case is possible redirection from &lt;code&gt;trash__trashed&lt;/code&gt; to &lt;code&gt;trash&lt;/code&gt;? But I do not understand why? No user knows (for default Posts and Pages) this temporary trashed slug and there is no need to save this redirect. And if it is possible problem on bbPress side, it should be solved there because it is not WP core issue? For most of WP users it has only downsizes, I guess, that means bloated database with not usable values :-(
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 19:11:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:7/1460315513428313</guid>
      <description>&lt;p&gt;
Can confirm the additional findings, also if the first one is broken you can't "fix" the first one without removing any additional ones first, they seems to block each other out so to speak.
&lt;/p&gt;
&lt;p&gt;
I still can't make it trigger by typing slowly, I do need to hit the space bar and the backtick almost at the same time for them to convert to code tags, odd.
&lt;/p&gt;
&lt;p&gt;
I'm no wizard with gifs unfortunately so mine get larger in size but the behavior for my part is apparent in &lt;a class="ext-link" href="http://imgur.com/Q3JNWJj"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://imgur.com/Q3JNWJj&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36450 (alt attribute missing from site icon preview) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 19:07:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36450#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36450#comment:4/1460315276666025</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Looks like the empty &lt;code&gt;alt&lt;/code&gt; tag was added during the 4.4 milestone. See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/34583" title="#34583: defect (bug): Missing image alt attributes in core (closed: fixed)"&gt;#34583&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 18:54:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:6/1460314444552333</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36459#comment:5" title="Comment 5"&gt;Clorith&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36459#comment:4" title="Comment 4"&gt;jeremyfelt&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I can consistently reproduce this in Chrome 49.0.2623.112 and Firefox 45.0.1 in OSX if I very quickly hit the spacebar immediately after the closing backtick.
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;body id="tinymce" class="mce-content-body content post-type-post post-status-draft post-format-standard locale-en-us mceContentBody webkit wp-editor wp-autoresize html5-captions has-focus" data-id="content" contenteditable="true" style="overflow-y: hidden;"&amp;gt;
    &amp;lt;p&amp;gt;`the spacebar was hit very quickly after this closing backtick`&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
You are quite right, if I hit the buttons fast enough, as in practically at the same time, I can trigger the code block consistently every time.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think this is the opposite for me. When I type at a slower pace, the code block is generated. If I type something very quickly after the closing backtick, it breaks.
&lt;/p&gt;
&lt;p&gt;
The gif above should show the behavior.
&lt;/p&gt;
&lt;p&gt;
Additional findings:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Once a paragraph experiences a non-working backtick, any remaining uses on that line won't work either.
&lt;/li&gt;&lt;li&gt;This does not impact new paragraphs. Things reset.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>breaking-backticks.gif attached to Ticket #36459</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 18:49:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36459/breaking-backticks.gif</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36459/breaking-backticks.gif/1460314143055240</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36460 (Unable to break out of code tags in visual mode when using keyboard ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 18:44:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36460#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36460#comment:2/1460313855036098</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-editor by clorith. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-editor/p1460313852000932"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 18:40:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:5/1460313652035625</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/36459#comment:4" title="Comment 4"&gt;jeremyfelt&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I can consistently reproduce this in Chrome 49.0.2623.112 and Firefox 45.0.1 in OSX if I very quickly hit the spacebar immediately after the closing backtick.
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;body id="tinymce" class="mce-content-body content post-type-post post-status-draft post-format-standard locale-en-us mceContentBody webkit wp-editor wp-autoresize html5-captions has-focus" data-id="content" contenteditable="true" style="overflow-y: hidden;"&amp;gt;
    &amp;lt;p&amp;gt;`the spacebar was hit very quickly after this closing backtick`&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;
You are quite right, if I hit the buttons fast enough, as in practically at the same time, I can trigger the code block consistently every time.
&lt;/p&gt;
&lt;p&gt;
This is a bit awkward though (at least on a Norwegian keyboard) as the backtick is a shift-key combination to access to begin with (and this should perhaps be a pattern recognition, not a timing dependent one?)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36462 (Updating or publishing a (custom) post that hasn't loaded completely ...) updated</title>
      
        <dc:creator>archon810</dc:creator>

      <pubDate>Sun, 10 Apr 2016 18:10:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36462#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36462#comment:1/1460311813238281</guid>
      <description>&lt;p&gt;
This has been driving me nuts for a long time now. To add, it's not always even the case with custom posts, even regular posts on our main blog close comments sometimes because of this bug (especially longer posts).
&lt;/p&gt;
&lt;p&gt;
Plugins that do some processing on the edit page, a slowdown in db, or really quick fingers seem to bring it about.
&lt;/p&gt;
&lt;p&gt;
I was only able to trace down the real cause after enabling the query log and seeing that comments get closed from the edit page, then reproducing quite easily.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 17:57:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:4/1460311024054355</guid>
      <description>&lt;p&gt;
I can consistently reproduce this in Chrome 49.0.2623.112 and Firefox 45.0.1 in OSX if I very quickly hit the spacebar immediately after the closing backtick.
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;body id="tinymce" class="mce-content-body content post-type-post post-status-draft post-format-standard locale-en-us mceContentBody webkit wp-editor wp-autoresize html5-captions has-focus" data-id="content" contenteditable="true" style="overflow-y: hidden;"&amp;gt;
    &amp;lt;p&amp;gt;`the spacebar was hit very quickly after this closing backtick`&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #11863 (Trashed items interfere with page/post slug generation) updated</title>
      
        <dc:creator>ericlewis</dc:creator>

      <pubDate>Sun, 10 Apr 2016 17:50:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11863#comment:153</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11863#comment:153/1460310655992976</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:152" title="Comment 152"&gt;netweb&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
you get an automatic redirect to &lt;code&gt;.../forums/topic/my-topic__/?view=all&lt;/code&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Did you mean a redirect to &lt;code&gt;.../forums/topic/my-topic/?view=all&lt;/code&gt;? The underscores should be removed when untrashed.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36358 (Return of _wp_json_prepare_data() in wp_json_encode() should be used.) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 17:39:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36358#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36358#comment:3/1460309947264468</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by jrf. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1460309944001909"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36466 (Remove "appearance" reference in customizer permissions error) created</title>
      
        <dc:creator>celloexpressions</dc:creator>

      <pubDate>Sun, 10 Apr 2016 17:30:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36466</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36466/1460309434735451</guid>
      <description>&lt;p&gt;
The customizer can be used for things much broader than the appearance of the site, such as menus and widgets. Accordingly, we try to avoid referencing specific things that could be customized when describing what the Customizer does.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33668" title="#33668: enhancement: Cheatin' uh?: Update in wp-admin/customize.php (closed: fixed)"&gt;#33668&lt;/a&gt; / &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/33857" title="Provide more helpful feedback than just &amp;#34;Cheatin' uh?&amp;#34; for permission ..."&gt;[33857]&lt;/a&gt; introduced a more helpful error message when a user without permissions accesses the customizer. However, it specifically references customizing the appearance of the site. Also note that permission to open the customizer but not make changes can be granted, so due to the varying potential for what exactly this message would mean, going more generic would be good.
&lt;/p&gt;
&lt;pre class="wiki"&gt;You are not allowed to customize the appearance of this site.
&lt;/pre&gt;&lt;p&gt;
Should be changed to:
&lt;/p&gt;
&lt;pre class="wiki"&gt;You are not allowed to customize this site.
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:52:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:6/1460307162303333</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@imath thanks.
&lt;/p&gt;
&lt;p&gt;
I realize this is relatively minor, and plugins can add these styles themselves, but would be good to consider it for fixing in 4.5 even this late. 36461.1.patch only copies the already used styles and makes them available on the front-end.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36460 (Unable to break out of code tags in visual mode when using keyboard ...) closed</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:33:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36460#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36460#comment:1/1460305995617335</guid>
      <description>worksforme: &lt;p&gt;
This is not a new bug or a regression. Unfortunately that is how contentEditable behaves in many cases. Happens with all inline elements that are at the end of a block element/paragraph. Pressing Enter/Return is the standard way to "break out".
&lt;/p&gt;
&lt;p&gt;
This is also the main reason TinyMCE has an "element path" at the bottom of the editor, so the user can click/tab to it and choose the "currently selected" element where the caret is.
&lt;/p&gt;
&lt;p&gt;
I realize this behaviour is not ideal, but there is very little we can do to change it. Pretty much all "word processors" behave in this or very similar way. Some would even "maintain" the current formatting, meaning they will insert a &amp;lt;code&amp;gt; tag in the new paragraph created on Enter, and place the caret there. The only way to remove that is by using the Clear formatting button (second row).
&lt;/p&gt;
&lt;p&gt;
Going to close this as worksforme, feel free to reopen if there are better examples of how the editors should behave in this case.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:31:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:5/1460305873689046</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Great!
&lt;/p&gt;
&lt;p&gt;
@azaozz i've just tested the patch and i confirm it's fixing the issue.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:19:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:4/1460305184950493</guid>
      <description>&lt;p&gt;
In 36461.1.patch: add the styles for UI Autocomplete to editor.css and make them a bit more specific to not interfere with the default autocomplete styling.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:19:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:3/1460305167769221</guid>
      <description>&lt;p&gt;
Here's the body of the extended screenshot
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;body id="tinymce" class="mce-content-body content post-type-post post-status-draft post-format-standard locale-en-us mceContentBody webkit wp-editor wp-autoresize html5-captions has-focus" data-id="content" contenteditable="true" style="overflow-y: hidden;"&amp;gt;
&amp;lt;h2&amp;gt;A whole new world&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;A new &amp;lt;code&amp;gt;fantastic&amp;lt;/code&amp;gt;&amp;amp;nbsp;point of view&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;No one to tell us `no` or `where` to go&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;`Or say we're only dreaming`&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Was it the `newlines` causing this?&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;I'll make a man out of you&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Let's get down to `business`.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To &amp;lt;code&amp;gt;defeat&amp;lt;/code&amp;gt;&amp;amp;nbsp;the huns.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Did they send me &amp;lt;code&amp;gt;daughters&amp;lt;/code&amp;gt;&amp;amp;nbsp;when I asked for &amp;lt;code&amp;gt;sons&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You're the &amp;lt;code&amp;gt;sadest&amp;lt;/code&amp;gt;&amp;amp;nbsp;bunch I ever saw, but you can &amp;lt;code&amp;gt;bet&amp;lt;/code&amp;gt;&amp;amp;nbsp;before we're through&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;`Mister`&amp;amp;nbsp;I'll make a man out of you&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;p&gt;
The line breaks after each &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; tag are mine for readability
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36461.1.patch attached to Ticket #36461</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:17:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36461/36461.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36461/36461.1.patch/1460305059773653</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 10 Apr 2016 16:12:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:3/1460304733296751</guid>
      <description>&lt;p&gt;
No need to make another stylesheet for this. These styles should be in editor.css which is for styling around both editors. They also will need to be a bit more specific to not interfere with the default UI Autocomplete styling that may be used at other places. Patch coming up.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:57:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:2/1460303879799980</guid>
      <description>&lt;p&gt;
@ocean90
&lt;/p&gt;
&lt;p&gt;
Sure. This is before the patch:
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/KQiToRYznL.png"&gt;&lt;img src="https://cldup.com/KQiToRYznL.png" alt="https://cldup.com/KQiToRYznL.png" crossorigin="anonymous" title="https://cldup.com/KQiToRYznL.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
And this is once the patch is applied
&lt;/p&gt;
&lt;p&gt;
&lt;a style="padding:0; border:none" href="https://cldup.com/n2uEu6PpPh.png"&gt;&lt;img src="https://cldup.com/n2uEu6PpPh.png" alt="https://cldup.com/n2uEu6PpPh.png" crossorigin="anonymous" title="https://cldup.com/n2uEu6PpPh.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #28722 (Boost performance with ETag in load-scripts.php and load-styles.php) updated</title>
      
        <dc:creator>RedSand</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:54:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28722#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28722#comment:30/1460303696726210</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/28722#comment:29" title="Comment 29"&gt;jeremyfelt&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi @RedSand, thanks for taking the time to share your thoughts.
&lt;/p&gt;
&lt;p&gt;
We've been using WordPress version numbers on scripts and styles for quite a while to break client side caching after an upgrade. If we didn't use WordPress version numbers, we'd have to use another number that could be automatically scanned. If we didn't use that, then the size or content of the script itself would be used for automatic scanning.
&lt;/p&gt;
&lt;p&gt;
A benefit of having cache breaking version numbers attached to scripts is that it helps guarantee immediate upgrades if there ever is a security issue. It's also an easy way for us to &lt;del&gt;scold&lt;/del&gt; nudge people we know that are running old versions of WordPress. :)
&lt;/p&gt;
&lt;p&gt;
I'm going to re-close this ticket as fixed as it is completed against the 4.5 milestone, which is now in RC2. I'd suggest a new ticket to continue discussing this concern, especially if there are other approaches that can be used to break scripts. Similar discussions are worth searching for as well, see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/4155" title="#4155: enhancement: Let's hide the version number from public display (closed: wontfix)"&gt;#4155&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Hi Jeremy,
&lt;/p&gt;
&lt;p&gt;
You're very welcome. :)
&lt;/p&gt;
&lt;p&gt;
Yes, I'm aware of the usage and the reasons for it, as I've been a WordPress developer and plugin developer for a decade. :)
&lt;/p&gt;
&lt;p&gt;
I'll be happy to open a separate ticket to explore this further for the next releases. Yes, there are a number of ways to break the caching without having to even add query strings. In fact, the use of query strings appended to the scripts actually creates a new performance issue, because caching scripts speeds up the site. But I won't get into that here and now.
&lt;/p&gt;
&lt;p&gt;
My main point here was that it would be better for the Etags to use some other unique string that could be updated when the version is changed, as opposed to the version number.
&lt;/p&gt;
&lt;p&gt;
I will put together some data and solutions for a new ticket.
&lt;/p&gt;
&lt;p&gt;
@Presskopp :
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I follow you. You opened the door to discuss security aspects in a greater range - let's do so :)
&lt;/p&gt;
&lt;p&gt;
I don't want to spam here, but what about the general use of Etags?
&lt;a class="ext-link" href="https://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-13-configure-etags-7211.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-13-configure-etags-7211.html&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Outstanding! Yes, WordPress security is something that definitely needs to start being discussed in much greater depth. :)
&lt;/p&gt;
&lt;p&gt;
If you're on slack, hit me up there (same username) and we can chat.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) updated</title>
      
        <dc:creator>ocean90</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:38:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461#comment:1/1460302703988464</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@imath Can you attach some before/after screenshots please?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #23394 (Remove version from readme.html / Upgrade core doesn't restore the file) reopened</title>
      
        <dc:creator>RedSand</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:37:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/23394#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/23394#comment:12/1460302679081493</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/23394#comment:9" title="Comment 9"&gt;nacin&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
Given the &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;sheer number of security vulnerabilities&lt;/a&gt; that WordPress has had in the last two years, and changes in cybersecurity and increasing occurrences of hacking that have happened in the last 3 years, I think &lt;em&gt;it's definitely time to reopen this topic&lt;/em&gt;, and to start taking a more aggressive approach to WordPress security.
&lt;/p&gt;
&lt;p&gt;
While not the most important security flaw, it is still a poor security practice to reveal software version numbers in web software. If you want to hack a site, the first thing you want is to get the type of software and version number. This is known as fingerprinting.
&lt;/p&gt;
&lt;p&gt;
The IETF (Internet Engineering Task Force) has this to say in &lt;a class="ext-link" href="http://www.ietf.org/rfc/rfc2068.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;RFC 2068&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
"Revealing the specific software version of the server may allow the server machine to become more vulnerable to attacks against software that is known to contain security holes."
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Additionally, from &lt;a class="ext-link" href="https://www.owasp.org/index.php/Fingerprint_Web_Application_Framework_(OTG-INFO-008)"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Fingerprint Web Application Framework (OTG-INFO-008)&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;Web framework[*] fingerprinting is an important subtask of the&lt;em&gt; information gathering process&lt;/em&gt;. &lt;em&gt;Knowing the type of framework can automatically give a great advantage if such a framework has already been tested by the penetration tester.&lt;/em&gt; It is not only the &lt;em&gt;known vulnerabilities in unpatched versions but specific misconfigurations&lt;/em&gt; in the framework and known file structure that makes the fingerprinting process so important....&lt;/strong&gt;
[*] Please note that this article makes no differentiation between Web Application Frameworks (WAF) and Content Management Systems (CMS). This has been done to make it convenient to fingerprint both of them in one chapter. Furthermore, both categories are referenced as web frameworks.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And...
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;Remove any unnecessary or unused files on the server. This implies text files disclosing information about versions and installation too.&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Which is exactly what we're asking for here...to remove the readme and license files.
&lt;/p&gt;
&lt;p&gt;
Rsponding to a couple of @nacin 's previous comments (granted, I realize they are 3 years old, but this for others considering this issue now):
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
With publicly accessible web application software, there is no way to prevent version detection. The readme and generator versions are just the fairly cheap ways to do it. My favorite is looking at publicly accessible CSS and JS files, but there are many others.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right...so let's fix that. If these are areas that can be used to find out the software version, then why not remove it from them? In CSS and JS files, the version numbers have no advantage over some type of hashed key.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Script kiddies blindly attack sites. They don't sniff version numbers first.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
While that used to be true (in 2013 when your response was posted), that's simply not the case anymore. In 2016, they absolutely do sniff version numbers. With the sheer number of exploits out in the wild now, it's not really practical to just attack blindly. That would be an easy way to be detected, and not to mention it takes a lot of bandwidth for the hacker. Sure, there are still bots employed by script kiddies that just try to hit a site with a variety of common exploits. More often though, hackers set bots to not try any attacks on their first pass...they are merely scanning sites collecting data for a targeted attack in the next step. They are building a list of sites that have specific vulnerable software versions. They can either be hit again automatically right after the data is collected. Or, the hacker employing the bot, can review the list manually and single out interesting targets. Either way, the bots are sent again, this time going for specific vulnerabilities and that's when they attack. This has a much higher success rate, and is harder to catch.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even if they did, this means they're looking for core vulnerabilities. (Of which there are few, and anything of note requires a user account these days, at a minimum.)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's absolutely not true anymore either...There have been exploits in every version of WordPress released, as revealed over the last two years. There is no such thing as 100% secure software. We have to assume that sooner or later, a vulnerability will be found in every single version of WordPress.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So, you're either running an out of date version — don't hide the version number, *update* — or you're running the latest (at which point, that's on us, and no suppressing that version is going to help you).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Very true...but &lt;a class="ext-link" href="https://wordpress.org/about/stats/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress.org's own usage stats&lt;/a&gt; show that &lt;strong&gt;approximately 48% of WordPress users aren't even updated to the 4.4 (current) branch&lt;/strong&gt; so that leaves about half of WordPress' users out of luck if a more proactive approach to security isn't taken. 31% are still using PHP 5.2 and 5.3, so this shows pretty clearly that a high percentage of users are not practicing good security. So, we as developers need to help them out and make it as secure as possible. Not everyone has expert security consultants helping them, or a good working knowledge of security. (This can change if we educate users but it will likely take years.)  While I'm with you that people need to upgrade (and believe me, I preach it), we can't lay all the responsibility on users.
&lt;/p&gt;
&lt;p&gt;
One idea for securing the readme and license files is to have it secured somewhere in the admin with the relevant info. It could even be a link to readme and license files hosted on WordPress.org for that particular version. Or, if they were available on a page of the admin, the files/data should only be accessible by .php, not .txt or .html, so no version numbers would be revealed externally.
&lt;/p&gt;
&lt;p&gt;
Regarding removing version numbers from CSS and JS files: As I mentioned above, replace the version number with a salted hash (or other unique random key) that changes each time the version is updated.
&lt;/p&gt;
&lt;p&gt;
Regarding the version numbers in the page head...Code located in general-template.php on line 3451 (v4.5-RC2) for example:
&lt;/p&gt;
&lt;pre class="wiki"&gt;$gen = '&amp;lt;meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '"&amp;gt;';
&lt;/pre&gt;&lt;p&gt;
One option would be to have WordPress but leave out the version number....just cut
&lt;/p&gt;
&lt;pre class="wiki"&gt;get_bloginfo( 'version' )
&lt;/pre&gt;&lt;p&gt;
It really isn't necessary. Almost every security plugin removes this generator code completely. (And that is not being over-aggressive.)
&lt;/p&gt;
&lt;p&gt;
It's also being proposed to add the WP version number in Etags, and this is already implemented in v4.5-RC2, which is also not a great idea. Please see &lt;a href="https://core.trac.wordpress.org/ticket/28722#comment:25"&gt;my comments&lt;/a&gt; on the &lt;a href="https://core.trac.wordpress.org/ticket/28722#comment:27"&gt;ticket here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Not revealing version numbers is merely one aspect of following establshed good security principles, so this shouldn't be seen as an odd request. I've seen requests similar to this keep getting shut down over the years and it makes me scratch my head.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;If we can make some relatively easy changes to remove all the version number leakage throughout WordPress, and reduce the number of successful hacks (even if only by a small percent), for &lt;em&gt;nearly half of WordPress users&lt;/em&gt; that don't upgrade as quickly, doesn't it seem like that's something we should do?&lt;/strong&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #36465 (Implement get_content_id_by_slug() function) created</title>
      
        <dc:creator>eclare</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:30:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36465</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36465/1460302231383777</guid>
      <description>&lt;p&gt;
Sometimes theme &amp;amp; plugin creators have a need to get the ID of any content type (usually a page) by its slug. Aside from use cases where developers prefer to hardcode slugs rather than IDs themselves (which seems better), this could also be used to detect and set some default values, for example: finding the contact page (slug: contact, contact-us, contact-2), home page etc...
&lt;/p&gt;
&lt;p&gt;
This currently requires a few lines of code, posted here: &lt;a class="ext-link" href="https://gist.github.com/eddt/ee1018f26f8fc195629a"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://gist.github.com/eddt/ee1018f26f8fc195629a&lt;/a&gt; (not sure if it would work with child theme slugs without parent slugs).
&lt;/p&gt;
&lt;p&gt;
This could be in the core as get_content_id_by_slug() or similarly named function.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #28722 (Boost performance with ETag in load-scripts.php and load-styles.php) closed</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:16:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28722#comment:29</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28722#comment:29/1460301397317159</guid>
      <description>fixed: &lt;p&gt;
Hi @RedSand, thanks for taking the time to share your thoughts.
&lt;/p&gt;
&lt;p&gt;
We've been using WordPress version numbers on scripts and styles for quite a while to break client side caching after an upgrade. If we didn't use WordPress version numbers, we'd have to use another number that could be automatically scanned. If we didn't use that, then the size or content of the script itself would be used for automatic scanning.
&lt;/p&gt;
&lt;p&gt;
A benefit of having cache breaking version numbers attached to scripts is that it helps guarantee immediate upgrades if there ever is a security issue. It's also an easy way for us to &lt;del&gt;scold&lt;/del&gt; nudge people we know that are running old versions of WordPress. :)
&lt;/p&gt;
&lt;p&gt;
I'm going to re-close this ticket as fixed as it is completed against the 4.5 milestone, which is now in RC2. I'd suggest a new ticket to continue discussing this concern, especially if there are other approaches that can be used to break scripts. Similar discussions are worth searching for as well, see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/4155" title="#4155: enhancement: Let's hide the version number from public display (closed: wontfix)"&gt;#4155&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #36464 (Create an emoji picker) created</title>
      
        <dc:creator>eclare</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:15:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36464</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36464/1460301340284903</guid>
      <description>&lt;p&gt;
WordPress now supports emoticons (aka smileys) &amp;amp; emojis which have different implementation.
&lt;/p&gt;
&lt;p&gt;
None of those options is available via any selection menu, which would be nice especially for emojis, as they are quite hard to include in a post.
&lt;/p&gt;
&lt;p&gt;
Currently one has to find an emoji on the web, copy the correct symbol (so not the image itself, but the proper unicode character, which sometimes is a square in the browser) and paste in into WordPress. Some emojis have a colon notation like :airplane: (airplane with colons surrounding it), but that's even harder to find and learn - a hover with that text might be helpful for learning.
&lt;/p&gt;
&lt;p&gt;
So, an emoji/emoticon chooser would be a great addition to the visual editor.
&lt;/p&gt;
&lt;p&gt;
Example emoji picker which might be considered for inclusion: &lt;a class="ext-link" href="https://github.com/needim/wdt-emoji-bundle"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/needim/wdt-emoji-bundle&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36463 (Horizontal Rule QUnit test fails from the command line) closed</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:14:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36463#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36463#comment:3/1460301284564445</guid>
      <description>invalid: &lt;p&gt;
May have been an out of date library; after some further testing and updating everything the original test passes as expected. Closing.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #28722 (Boost performance with ETag in load-scripts.php and load-styles.php) updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:09:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28722#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28722#comment:28/1460300993047113</guid>
      <description>&lt;p&gt;
I follow you. You opened the door to discuss security aspects in a greater range - let's do so :)
&lt;/p&gt;
&lt;p&gt;
I don't want to spam here, but what about the general use of Etags?
&lt;a class="ext-link" href="https://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-13-configure-etags-7211.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-13-configure-etags-7211.html&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36463 (Horizontal Rule QUnit test fails from the command line) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:06:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36463#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36463#comment:2/1460300779827849</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36463/36463.diff" title="Attachment '36463.diff' in Ticket #36463"&gt;36463.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36463/36463.diff" title="Download"&gt;​&lt;/a&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adjust the &lt;code&gt;hr&lt;/code&gt; test to pass when run from the command line.
&lt;/li&gt;&lt;li&gt;Match the pattern established in other tests: start with the shortcut text, type a return &lt;code&gt;\n&lt;/code&gt; and test what happens.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>36463.diff attached to Ticket #36463</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:04:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36463/36463.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36463/36463.diff/1460300673136848</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36463 (Horizontal Rule QUnit test fails from the command line) updated</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:02:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36463#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36463#comment:1/1460300559610784</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Screenshot showing the failing test:
&lt;a style="padding:0; border:none" href="http://cl.ly/0N302r2g2d1W/1._adamsilversteinAdams-MacBook-Pro-2_develop.svn.wordpress.orgtrunk_zsh_2016-04-10_08-08-12.jpg"&gt;&lt;img src="http://cl.ly/0N302r2g2d1W/1._adamsilversteinAdams-MacBook-Pro-2_develop.svn.wordpress.orgtrunk_zsh_2016-04-10_08-08-12.jpg" alt="http://cl.ly/0N302r2g2d1W/1._adamsilversteinAdams-MacBook-Pro-2_develop.svn.wordpress.orgtrunk_zsh_2016-04-10_08-08-12.jpg" crossorigin="anonymous" title="http://cl.ly/0N302r2g2d1W/1._adamsilversteinAdams-MacBook-Pro-2_develop.svn.wordpress.orgtrunk_zsh_2016-04-10_08-08-12.jpg" /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36463 (Horizontal Rule QUnit test fails from the command line) created</title>
      
        <dc:creator>adamsilverstein</dc:creator>

      <pubDate>Sun, 10 Apr 2016 15:01:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36463</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36463/1460300504584947</guid>
      <description>&lt;p&gt;
The added QUnit test &lt;code&gt;tinymce.plugins.wptextpattern - Horizontal Rule&lt;/code&gt; for the edit &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; shortcut (&lt;code&gt;---&lt;/code&gt;) fails when run from the command line. The exception shows that the patter was not expanded.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #32075 (Only set WP_MAX_MEMORY_LIMIT by default when its greater than memory_limit) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:49:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32075#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32075#comment:23/1460299752752541</guid>
      <description>&lt;p&gt;
P.S.: and just in case someone sees the &lt;code&gt;wp_is_ini_value_changable()&lt;/code&gt; function and now thinks:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
"&lt;em&gt;Hang on, that's wrong, &lt;code&gt;INI_ALL&lt;/code&gt; and &lt;code&gt;INI_USER&lt;/code&gt; aren't constants, aren't they called &lt;code&gt;PHP_INI_ALL&lt;/code&gt; and &lt;code&gt;PHP_INI_USER&lt;/code&gt; ?&lt;/em&gt;".
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sorry, but no, you're wrong ;-)
&lt;/p&gt;
&lt;p&gt;
(Confused me briefly as well)
@see &lt;a class="ext-link" href="http://php.net/manual/en/info.constants.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://php.net/manual/en/info.constants.php&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36462 (Updating or publishing a (custom) post that hasn't loaded completely ...) created</title>
      
        <dc:creator>SeBsZ</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:44:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36462</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36462/1460299468626857</guid>
      <description>&lt;p&gt;
I am using a custom post type, but I assume this happens to the default post type as well. On the edit post screen (post.php?post=1&amp;amp;action=edit) I have several custom meta boxes. Some of these have content that is quite slow to load. You can reproduce this behavior by adding a sleep(5) statement somewhere in the code that loads the content for a custom meta box. Now in the document's DOM, the sidebar is loaded before the custom meta boxes. This introduces a situation where it is possible to update or publish a post before all the meta boxes have completely loaded. In most cases this isn't a huge problem - I myself check to see if the $_POST fields are there and if they are not then I don't act upon them.
&lt;/p&gt;
&lt;p&gt;
Unfortunately this does not happen for the included "Discussion" meta box. This box has a checkbox named "Allow Comments" which gets switched off when you update the post before this meta box has loaded into the DOM.
&lt;/p&gt;
&lt;p&gt;
The culprit is the code in wp-admin/includes/post.php on line 133 in the _wp_translate_postdata() function:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;if (!isset( $post_data['comment_status'] ))
  $post_data['comment_status'] = 'closed';
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Since the comment_status field is not in the post data, it is automatically assumed it needs to be closed.
&lt;/p&gt;
&lt;p&gt;
Of course there are two "workarounds" I can think of that would improve my current situation. One is for me to optimize the meta boxes so the page loads quicker, the other is to move the Discussion metabox to the top of the page, so it loads first.
&lt;/p&gt;
&lt;p&gt;
Is this expected behavior? I would much rather see the current comment_status be preserved - don't touch it if I didn't intend to modify it. Of course there might be a reason for this implementation that I don't know about.
&lt;/p&gt;
&lt;p&gt;
This post data is then finally presented to wp_insert_post in wp-includes/post.php which actually updates the post's comment_status to become closed, which finally answers my boss' question why comments kept getting disabled automatically.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>iseulde</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:42:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:2/1460299376106875</guid>
      <description>&lt;p&gt;
What does the DOM look like in the inspector?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32075 (Only set WP_MAX_MEMORY_LIMIT by default when its greater than memory_limit) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:32:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32075#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32075#comment:22/1460298729539117</guid>
      <description>&lt;p&gt;
Added a check for whether the memory limit can actually be changed as per @mensmaximus suggestion.
This check is applied to the setting of both the &lt;code&gt;WP_MEMORY_LIMIT&lt;/code&gt; constant as well as the &lt;code&gt;WP_MAX_MEMORY_LIMIT&lt;/code&gt; constant.
&lt;/p&gt;
&lt;p&gt;
This makes the value of these constants more realistic and prevents trying to change the memory limit if it cannot be changed.
The actual end result of the attempt to raise the memory is not affected by this, so it's more a cosmetic change than anything else.
&lt;/p&gt;
&lt;p&gt;
The check does necessitate yet another new function to be added to the &lt;code&gt;load.php&lt;/code&gt; file.
&lt;/p&gt;
&lt;p&gt;
Other than that, the new patch (v7):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;has been rebased against the current master.
&lt;/li&gt;&lt;li&gt;adds unit tests for both of the new functions in &lt;code&gt;load.php&lt;/code&gt;. As there was no test file for &lt;code&gt;load.php&lt;/code&gt; yet (AFAICS), I've created one.
&lt;/li&gt;&lt;li&gt;contains a minor improvement in how the &lt;code&gt;wp_php_ini_bytes_to_int()&lt;/code&gt; function deals with large values on 32-bit systems. Please note: This change does prevent the memory limit being raised to &amp;gt; 2G on 32-bit systems, however it prevents the value being disregarded completely.
&lt;/li&gt;&lt;li&gt;presumes that this patch will not make it into 4.5 (upped the @since tags to 4.6.0).
&lt;/li&gt;&lt;li&gt;adds @since changelog tags to the filters.
&lt;/li&gt;&lt;li&gt;fixes a typo in the documentation.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32075 (Only set WP_MAX_MEMORY_LIMIT by default when its greater than memory_limit) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:15:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32075#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32075#comment:21/1460297723073495</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>32075-improved-patch-v7.patch attached to Ticket #32075</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:14:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/32075/32075-improved-patch-v7.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/32075/32075-improved-patch-v7.patch/1460297687410847</guid>
      <description>&lt;p&gt;
Rebased against master, added check for changability of the memory limit, added unit tests
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #28722 (Boost performance with ETag in load-scripts.php and load-styles.php) updated</title>
      
        <dc:creator>RedSand</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:02:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28722#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28722#comment:27/1460296948411295</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/28722#comment:26" title="Comment 26"&gt;Presskopp&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@RedSand:
Isn't it so that it's not so hard to find out a site is using WordPress, whatever you try to hide? Security doesn't come from hidden version number.. :)
And the bots must not even test for WP running or check version, they just fire in all directions, and if they find an open door - bingo, if not, they probably don't try to find out why, but just switch to the next possible target.
This doesn't mean to don't care about protection and security! :)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Hey @Presskopp
&lt;/p&gt;
&lt;p&gt;
Yes, finding out a site is using WordPress is easy. The directory structure (among many other things) would give that away, so revealing &lt;em&gt;it's WordPress&lt;/em&gt; is not the concern. Keep in mind, I said it's the &lt;strong&gt;version numbers&lt;/strong&gt; that shouldn't be advertised.
&lt;/p&gt;
&lt;p&gt;
That's actually not how most hacks happen these days. With the sheer number of exploits out in the wild now, it's not really practical to just "fire in all directions anymore". That would be an easy way to be detected, and not to mention it takes a lot of bandwidth for the hacker. Sure, there are still bots employed by script kiddies that just try to hit a site with a variety of common exploits. More often though, hackers set bots to not try any attacks on their first pass...they are merely scanning sites collecting data for a targeted attack in the next step. They are building a list of sites that have specific vulnerable software versions. They can either be hit again automatically right after the data is collected. Or, the hacker employing the bot, can review the list manually and single out interesting targets. Either way, the bots are sent again, this time going for specific vulnerabilities and that's when they attack. This has a much higher success rate, and is harder to catch.
&lt;/p&gt;
&lt;p&gt;
I hear you about hiding the version numbers not being a mighty security measure &lt;em&gt;in and of itself&lt;/em&gt;, but notice I didn't say that &lt;em&gt;security &lt;strong&gt;came from&lt;/strong&gt; hiding the version number&lt;/em&gt;. It's one small layer in the whole strategy, though, and stats show that hiding the version number throughout the site will reduce the number of sites that get hacked.
&lt;/p&gt;
&lt;p&gt;
For example, if I can do a quick scan of your site, and see that you're using a specific version of WordPress that's known the have &lt;em&gt;x&lt;/em&gt; vulnerabilities, it makes it that much easier for me to target your site. That doesn't mean you shouldn't practice good security though...you should by all means, and be using updated versions.
&lt;/p&gt;
&lt;p&gt;
But the fact that 48% of WordPress users aren't even updated to the 4.4 branch and 31% are still using PHP 5.2 and 5.3, shows pretty clearly that a high percentage of users are not practicing good security. So, we need to help them out and make it as secure as possible. Not everyone has expert security consultants helping them.
&lt;/p&gt;
&lt;p&gt;
We do security consulting day in and day out for clients, and most hacks come from outdated software, and revealing version numbers makes it easier for hackers to gather data and target. Most hacks also don't come from really talented hackers...they come from hackers with low to intermediate skill. Yet they cause a lot of damage.
&lt;/p&gt;
&lt;p&gt;
Security &lt;em&gt;isn't binary&lt;/em&gt;...it's not an &lt;em&gt;on or off&lt;/em&gt; type of thing. Security is about&lt;em&gt; reducing risk&lt;/em&gt;, and &lt;em&gt;lowering the statistical probability of a successful attack.&lt;/em&gt; You can never eliminate risk fully, and there is no such thing as 100% impenetrable security, even with the best measures in place.
&lt;/p&gt;
&lt;p&gt;
In most criminal acts, it’s about following the path of least resistance — if you increase the difficulty of success (sometimes by even a small margin) then often the hacker will go somewhere else.
&lt;/p&gt;
&lt;p&gt;
Good security requires a &lt;em&gt;layered strategy&lt;/em&gt;. It's really not necessary for anyone other than the site owner to know the version number, so why put that out there? (Similarly, WordPress needs to remove all references to the version number throughout the site, so I will put in tickets regarding those as well.)
&lt;/p&gt;
&lt;p&gt;
This is a pretty well-established security principle (granted - only one among many) to avoid web server fingerprinting, and to avoid revealing specific version numbers, so I'm not sure why we would want to ignore &lt;em&gt;any&lt;/em&gt; good security principles, however small they may seem.
&lt;/p&gt;
&lt;p&gt;
So while this may not seem like a big thing in and of itself...look at it like this: If we make some small changes like this throughout WordPress core - not revealing version numbers - and it can help prevent &lt;em&gt;some&lt;/em&gt; of WordPress' users from being hacked, why wouldn't we want to do it? :)
&lt;/p&gt;
&lt;p&gt;
It would be easy to use a kind of salted hash or other random stored key for the Etags instead, and not use the WordPress version number. It would be easy enough to have it change when the WordPress version gets updated, so the same goal would be accomplished. Etags aren't supposed to contain identifiable information anyway...they are supposed to be a static random value that can be used for comparison to tell when something changes.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32075 (Only set WP_MAX_MEMORY_LIMIT by default when its greater than memory_limit) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 14:01:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32075#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32075#comment:20/1460296877618096</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
As for now WP_MAX_MEMORY_LIMIT is simply set to 256M by default. There is no verification whether it is really possible to set this value.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As the constant can be set in &lt;code&gt;wp-config.php&lt;/code&gt; as well, this is - IMHO - not really in the scope of this issue. The WP_MAX_MEMORY_LIMIT is a &lt;em&gt;*target*&lt;/em&gt; value, not a definite.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Plugins like WooCommerce "report" this value in the backend on a status page and a user is told "the memory is ok".
&lt;/p&gt;
&lt;p&gt;
You are absolutely correct a developer should never ever rely on any constant. But as you can see it is done. Not in the means of a "dependency" but in the means of reported "unchecked and unfiltered". Reporting something to the user that isn't true and may complicate the troubleshooting is simply spoken wrong.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's useful information if presented properly. The fact that WooCommerce apparently presents it with the presumption that the actual setting will always succeed is wrong. However, that is more of a plugin developer education issue which is again - IMHO - outside of the scope of this issue.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Imho you have to get the allocated memory first, than try to increase it to 256M. If the return value is true you can define WP_MAX_MEMORY_LIMIT to 256M otherwise you set it to the currently allocated memory.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The constant only provides the target value and - again - as this can also be set in &lt;code&gt;wp-config.php&lt;/code&gt;, validation of whether the target value is realistic is not in the scope of this issue. This issue is about making sure it's never &lt;em&gt;*lower*&lt;/em&gt; than the &lt;em&gt;*current* &lt;/em&gt; memory limit.
&lt;/p&gt;
&lt;p&gt;
The actual raising of the memory is only needed/done in WP in two particular circumstances at this moment and normally not needed. Doing so and then reverting on every page load just to try to get a more realistic target constant seems superfluous to me.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
In today's hosting environments you will find PHP-FPM very often and there it is easy to restrict the memory allocation by defining it with php_admin_value[memory_limit] instead of php_value[memory_limit].
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Good point and that is actually something I can work with, though it won't be fool-proof (re: setting of constant in&lt;code&gt;wp-config.php&lt;/code&gt;). Let me see what I can come up with on that end.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36461.patch attached to Ticket #36461</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Sun, 10 Apr 2016 13:56:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36461/36461.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36461/36461.patch/1460296574535489</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36461 (wpLink autocomplete results styles are not available when wp_editor() ...) created</title>
      
        <dc:creator>imath</dc:creator>

      <pubDate>Sun, 10 Apr 2016 13:55:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36461</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36461/1460296539605223</guid>
      <description>&lt;p&gt;
Hi,
&lt;/p&gt;
&lt;p&gt;
I'm not sure if WordPress should deal with this, but just in case it should, i've noticed for one of my plugin that uses the &lt;code&gt;wp_editor()&lt;/code&gt; on front end that autocomplete results were looking a bit ugly. So i've fixed it at my level (see &lt;a class="ext-link" href="https://github.com/imath/wp-idea-stream/issues/56"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/imath/wp-idea-stream/issues/56&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
But if WordPress should deal with this more globally. Here's the explanation, now the wpLink feature is using the jQuery Autocomplete UI to populate results, as the wp-admin/css/forms.css is only loaded in back-end results are looking pretty ugly on front-end...
&lt;/p&gt;
&lt;p&gt;
I suggest the attached patch, just in case.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #28722 (Boost performance with ETag in load-scripts.php and load-styles.php) updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 10 Apr 2016 12:54:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28722#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28722#comment:26/1460292871004968</guid>
      <description>&lt;p&gt;
@RedSand:
Isn't it so that it's not so hard to find out a site is using WordPress, whatever you try to hide? Security doesn't come from hidden version number.. :)
And the bots must not even test for WP running or check version, they just fire in all directions, and if they find an open door - bingo, if not, they probably don't try to find out why, but just switch to the next possible target.
This doesn't mean to don't care about protection and security! :)
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35566 (Remove title attributes: Tag cloud widget uses title to display topic count) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 10 Apr 2016 12:18:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35566#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35566#comment:11/1460290693996579</guid>
      <description>&lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #35566 (Remove title attributes: Tag cloud widget uses title to display topic count) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 12:11:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35566#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35566#comment:10/1460290303449234</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #accessibility by emirpprime. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/accessibility/p1460290301000472"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>35566.patch attached to Ticket #35566</title>
      
        <dc:creator>emirpprime</dc:creator>

      <pubDate>Sun, 10 Apr 2016 12:10:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/35566/35566.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/35566/35566.patch/1460290212224959</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #35566 (Remove title attributes: Tag cloud widget uses title to display topic count) updated</title>
      
        <dc:creator>emirpprime</dc:creator>

      <pubDate>Sun, 10 Apr 2016 12:09:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35566#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35566#comment:9/1460290182897445</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
We worked it up into a plugin: &lt;a class="ext-link" href="https://github.com/mikelittle/accessible-tag-cloud-widget"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/mikelittle/accessible-tag-cloud-widget&lt;/a&gt; which creates a new accessible widget.
&lt;/p&gt;
&lt;p&gt;
I've attached a patch for testing that implements a slightly modified version. This always outputs the accessible version of the links, and an ugly inline style block to reduce the chance of it breaking themes (this definitely needs looking at). The defaults of the wp_tag_cloud function are not changed, however the WP_Widget_Tag_Cloud class now defaults to an accessible version.
Tested against Twenty Sixteen -&amp;gt; Ten and looks ok.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #28722 (Boost performance with ETag in load-scripts.php and load-styles.php) reopened</title>
      
        <dc:creator>RedSand</dc:creator>

      <pubDate>Sun, 10 Apr 2016 11:48:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28722#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28722#comment:25/1460288933077477</guid>
      <description>&lt;p&gt;
The WordPress version should not be used in headers like this, as it's a security risk. Revealing software version in headers or code is not a good security practice in general.
&lt;/p&gt;
&lt;p&gt;
The IETF (Internet Engineering Task Force) has this to say in &lt;a class="ext-link" href="http://www.ietf.org/rfc/rfc2068.txt"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;RFC 2068&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
"Revealing the specific software version of the server may allow the server machine to become more vulnerable to attacks against software that is known to contain security holes."
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If a security vulnerability is discovered, and a site owner hasn't upgraded their site yet, revealing this makes it easy for hackers to run automated scripts to scan their site and discover the version number. That's why most security hardening plugins remove the WordPress version number from the site's code.
&lt;/p&gt;
&lt;p&gt;
Obviously, a website owner should practice good security, but even so, this should be changed so that WordPress code leaks as little data as possible.
&lt;/p&gt;
&lt;p&gt;
Keep in mind that every version of WordPress released in the last couple years has had security vulnerabilities discovered after a while, so it's safe to assume that a vulnerability will be discovered in 4.5 sooner or later. If you look at the stats of what &lt;a class="ext-link" href="https://wordpress.org/about/stats/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress versions people are running&lt;/a&gt; compared against a list of &lt;a class="ext-link" href="https://wpvulndb.com/wordpresses"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;vulnerable WordPress versions&lt;/a&gt;, you can see that only about 52% of users are running 4.4 or higher, and a good portion of the rest are using vulnerable versions. (Not everyone has upgraded to the security patched minor version in their branch.) If you look ahead 6 months or a year, there may still be users who haven't upgraded from 4.5 who will be in that same situation.
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #35557 (grunt precommit should run phpunit tests) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 10 Apr 2016 11:45:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/35557#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/35557#comment:28/1460288748270272</guid>
      <description>&lt;p&gt;
In &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/35557/35557.6.diff" title="Attachment '35557.6.diff' in Ticket #35557"&gt;35557.6.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/35557/35557.6.diff" title="Download"&gt;​&lt;/a&gt; are two fixes/tweaks:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First fixes a mistake I made in my original patch which landed as part of &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/36906" title="Improve grunt precommit task
Instead of running all tasks, all the ..."&gt;r36906&lt;/a&gt;, for CSS files the &lt;code&gt;precommit&lt;/code&gt; task should be calling the &lt;code&gt;precommit:css&lt;/code&gt; task, and not &lt;code&gt;postcss:core&lt;/code&gt; directly. FWIW the &lt;code&gt;postcss:core&lt;/code&gt; task only calls &lt;code&gt;precommit:css&lt;/code&gt; anyway, so its not broken per se, but it's not inline with the purpose of the original patch and should be fixed to operate in the same fashion as the other &lt;code&gt;precommit&lt;/code&gt; sub tasks.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Secondly a tweak to the &lt;code&gt;prerelease&lt;/code&gt; task introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/36930" title="Add grunt prerelease task
An unintended consequence of improving the ..."&gt;r36930&lt;/a&gt;, the patch removes the task &lt;code&gt;build&lt;/code&gt; from the &lt;code&gt;prerelease&lt;/code&gt; task list as &lt;code&gt;build&lt;/code&gt; was being ran twice causing the &lt;code&gt;prerelease&lt;/code&gt; task to take much more time than it should. The &lt;code&gt;build&lt;/code&gt; task is triggered as part of the &lt;code&gt;precommit:js&lt;/code&gt; task which in turn calls the &lt;code&gt;qunit:compiled&lt;/code&gt; task which includes the &lt;code&gt;build&lt;/code&gt; task in its task list.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>35557.6.diff attached to Ticket #35557</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 10 Apr 2016 11:36:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/35557/35557.6.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/35557/35557.6.diff/1460288164603119</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36460 (Unable to break out of code tags in visual mode when using keyboard ...) created</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 10:28:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36460</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36460/1460284125512822</guid>
      <description>&lt;p&gt;
If you've entered the backtick shortcut to add a &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tag as the last bit of text in the editor, and then use the keyboard to navigate around in the text (say to fix a typo earlier on), going to the end of the document either by keyboard navigation or clicking the end with the mouse puts you inside the code tag and it can't be broken out of unless you hit return to create a new paragraph.
&lt;/p&gt;
&lt;p&gt;
If you create a new paragraph then try to backspace to remove it again you are once more put inside the code tag, the only way to break this is by going into text mode and adding any symbol that isn't a space after the code tag manually.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) updated</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 10:22:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459#comment:1/1460283749250467</guid>
      <description>&lt;p&gt;
In IE11 (11.0.9600.18098) it seems to be triggering every time, up until you try to use an uppercase letter inside a backtick, then it starts behaving inconsistently across the board again.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36424 (graphically visualize if comments are closed (in wp-admin/edit.php)) updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 10 Apr 2016 10:21:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36424#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36424#comment:10/1460283686725563</guid>
      <description>&lt;p&gt;
Yes, this X-thing was more a "feasibility study" :)
So you like the rest of it? Did you try?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>backtick-problem-2.png attached to Ticket #36459</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 10:12:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36459/backtick-problem-2.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36459/backtick-problem-2.png/1460283138248041</guid>
      <description>&lt;p&gt;
Extended visual, it isn't just a "only the first instance works" case
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>backtick problem.png attached to Ticket #36459</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 10:06:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36459/backtick%20problem.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36459/backtick%20problem.png/1460282768519934</guid>
      <description>&lt;p&gt;
The backticks triggering in one instance, but not the others
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36459 (Inconsistent triggering of backtick shortcut for code tags) created</title>
      
        <dc:creator>Clorith</dc:creator>

      <pubDate>Sun, 10 Apr 2016 10:05:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36459</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36459/1460282746360612</guid>
      <description>&lt;p&gt;
The backticks to trigger &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks is inconsistent in when it wants to trigger, some times it doesn't convert at all, other times it'll randomly convert it a while after you've stopped typing and I've been unable to lock down why this happens.
&lt;/p&gt;
&lt;p&gt;
Currently tested on Chrome 49.0.2623.112 and reported in &lt;a class="ext-link" href="https://wordpress.org/support/topic/text-pattern-for-code-not-working-in-latest-trunk-version"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/text-pattern-for-code-not-working-in-latest-trunk-version&lt;/a&gt; (which also includes a preview gif of the issues)..
&lt;/p&gt;
&lt;p&gt;
I've tried with the code block being the only text on a line, as well as it being inline with other content, both ways seem to kick in when they feel like it with no observable pattern.
&lt;/p&gt;
&lt;p&gt;
I've attached a screenshot showing the current random behavior as well.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #32075 (Only set WP_MAX_MEMORY_LIMIT by default when its greater than memory_limit) updated</title>
      
        <dc:creator>mensmaximus</dc:creator>

      <pubDate>Sun, 10 Apr 2016 08:25:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32075#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32075#comment:19/1460276702943477</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/32075#comment:18" title="Comment 18"&gt;jrf&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Imho the WP_MAX_MEMORY_LIMIT constant should never report a larger amount of memory than the maximum allocatable memory.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
AFAIK there is no reliable way to find out the maximum allocatable memory on the server, so there is no way I can think of to take that into account when setting the constant, quite apart from the fact that the constant can be defined in &lt;code&gt;wp-config.php&lt;/code&gt; outside of our control.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I should have written "allocated" instead of "allocatable". As for now WP_MAX_MEMORY_LIMIT is simply set to 256M by default. There is no verification whether it is really possible to set this value. Plugins like WooCommerce "report" this value in the backend on a status page and a user is told "the memory is ok".
&lt;/p&gt;
&lt;p&gt;
You are absolutely correct a developer should never ever rely on any constant. But as you can see it is done. Not in the means of a "dependency" but in the means of reported "unchecked and unfiltered". Reporting something to the user that isn't true and may complicate the troubleshooting is simply spoken wrong.
&lt;/p&gt;
&lt;p&gt;
Imho you have to get the allocated memory first, than try to increase it to 256M. If the return value is true you can define WP_MAX_MEMORY_LIMIT to 256M otherwise you set it to the currently allocated memory.
&lt;/p&gt;
&lt;p&gt;
In today's hosting environments you will find PHP-FPM very often and there it is easy to restrict the memory allocation by defining it with php_admin_value[memory_limit] instead of php_value[memory_limit].
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36424 (graphically visualize if comments are closed (in wp-admin/edit.php)) updated</title>
      
        <dc:creator>pixelverbieger</dc:creator>

      <pubDate>Sun, 10 Apr 2016 08:00:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36424#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36424#comment:9/1460275213980008</guid>
      <description>&lt;p&gt;
but an X is ambiguous. it can stand for a &lt;em&gt;yes&lt;/em&gt; and a &lt;em&gt;no&lt;/em&gt;. this depends on the context! in a feature list or table the X oftentimes stands for &lt;em&gt;is set&lt;/em&gt; or &lt;em&gt;exists&lt;/em&gt; or &lt;em&gt;included&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>patch_36453.patch attached to Ticket #36453</title>
      
        <dc:creator>shahpranaf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 06:30:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36453/patch_36453.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36453/patch_36453.patch/1460269858333896</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36453 (Disable 'replace' button in replace media frame while attachment is ...) updated</title>
      
        <dc:creator>shahpranaf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 06:30:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36453#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36453#comment:1/1460269828275004</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi @ungestaltbar's,
&lt;/p&gt;
&lt;p&gt;
Firstly thanks for posting this bug. I followed the steps and confirm that its a bug.
And yes you were right about missing require selection option. I have fixed that bug with the patch.
&lt;/p&gt;
&lt;p&gt;
Thanks
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>patch_36450.patch attached to Ticket #36450</title>
      
        <dc:creator>shahpranaf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 06:15:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36450/patch_36450.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36450/patch_36450.patch/1460268959802892</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36450 (alt attribute missing from site icon preview) updated</title>
      
        <dc:creator>shahpranaf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 06:15:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36450#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36450#comment:3/1460268917995678</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi @TacoVerdo,
&lt;/p&gt;
&lt;p&gt;
Firstly thanks for posting this bug. Along with your bug of "favicon preview image", @swissspidy also found another bug of empty alt for "Crop image". So have added patch for both.
Let me know if the alt name used by me is correct or not?
For crop image : "Crop your image"
for Favicon: "Preview as a browser icon"
&lt;/p&gt;
&lt;p&gt;
Thanks
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [37173]: Post 4.5-RC2 version bump.</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Sun, 10 Apr 2016 05:15:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37173</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37173/1460265350463657</guid>
      <description>&lt;p&gt;
Post 4.5-RC2 version bump.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Changeset [37172]: 4.5-RC2</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Sun, 10 Apr 2016 04:20:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37172</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37172/1460262026477643</guid>
      <description>&lt;p&gt;
4.5-RC2
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #11863 (Trashed items interfere with page/post slug generation) updated</title>
      
        <dc:creator>netweb</dc:creator>

      <pubDate>Sun, 10 Apr 2016 04:03:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/11863#comment:152</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/11863#comment:152/1460260998548408</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/11863#comment:151" title="Comment 151"&gt;ericlewis&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Thinking about this a little further...I wonder if this is useful in some cases, like BBPress, where trashed posts are visible on the front-end
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I stand by this logic and think this is desirable behavior. Closing this, please open new tickets for any bugs.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, all good here from a bbPress perspective :+1
&lt;/p&gt;
&lt;p&gt;
And, yes, it is actually useful from a forum moderation perspective, if a topic or reply was trashed and you're using the trashed slug, e.g. &lt;code&gt;.../forums/topic/my-topic__trashed/?view=all&lt;/code&gt; and another moderator or admin restores the topic, thanks to &lt;code&gt;_wp_old_slug&lt;/code&gt; you get an automatic redirect to &lt;code&gt;.../forums/topic/my-topic/?view=all&lt;/code&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36392 (wp_add_inline_script() breaks script dependency order when using ...) closed</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 03:32:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36392#comment:39</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36392#comment:39/1460259167637366</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/37171" title="Ensure consistent dependency order when using `wp_add_inline_script()` ..."&gt;37171&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Ensure consistent dependency order when using &lt;code&gt;wp_add_inline_script()&lt;/code&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This disables the concatenation of remaining enqueued scripts once &lt;code&gt;wp_add_inline_script()&lt;/code&gt; is invoked, which allows us to reliably print these scripts and their before/after inline scripts in the desired order.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props gitlost, azaozz, swisspidy, ocean90.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36392" title="#36392: defect (bug): wp_add_inline_script() breaks script dependency order when using ... (closed: fixed)"&gt;#36392&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [37171]: Ensure consistent dependency order when using `wp_add_inline_script()` ...</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 03:32:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37171</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37171/1460259167000417</guid>
      <description>&lt;p&gt;
Ensure consistent dependency order when using &lt;code&gt;wp_add_inline_script()&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
This disables the concatenation of remaining enqueued scripts once &lt;code&gt;wp_add_inline_script()&lt;/code&gt; is invoked, which allows us to reliably print these scripts and their before/after inline scripts in the desired order.
&lt;/p&gt;
&lt;p&gt;
Props gitlost, azaozz, swisspidy, ocean90.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36392" title="#36392: defect (bug): wp_add_inline_script() breaks script dependency order when using ... (closed: fixed)"&gt;#36392&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #36392 (wp_add_inline_script() breaks script dependency order when using ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sun, 10 Apr 2016 03:08:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36392#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36392#comment:38/1460257699956102</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core by jeremyfelt. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core/p1460257698004367"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36392 (wp_add_inline_script() breaks script dependency order when using ...) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 03:07:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36392#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36392#comment:37/1460257627048399</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36392/36392.2.diff" title="Attachment '36392.2.diff' in Ticket #36392"&gt;36392.2.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36392/36392.2.diff" title="Download"&gt;​&lt;/a&gt; looks good to me as well. &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/36392/36392.3.diff" title="Attachment '36392.3.diff' in Ticket #36392"&gt;36392.3.diff&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/36392/36392.3.diff" title="Download"&gt;​&lt;/a&gt; is the exact same except for an additional test that accounts for the case of mixed concat/non-concat for core scripts when scripts one and two are standard and the third script has an inline script before. This works as expected.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36392.3.diff attached to Ticket #36392</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 03:03:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36392/36392.3.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36392/36392.3.diff/1460257387186207</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) updated</title>
      
        <dc:creator>mikeschroder</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:25:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:56/1460255106010454</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
This needs to have the images responsified + CDN'd and the final video in, which happens just before release.
&lt;/p&gt;
&lt;p&gt;
Otherwise, should be complete.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36457 (Customizer Device Preview: Use px units for tablet preview size) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:22:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36457#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36457#comment:4/1460254953591860</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
As small as this change seems, I think we need a set of screenshots showing the difference it makes on various devices. We've had this implemented as is in RC for quite a bit now and should leave it.
&lt;/p&gt;
&lt;p&gt;
I don't think it's too much to change in a minor release after testing.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>33301.voiceover.diff attached to Ticket #36458</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:16:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36458/33301.voiceover.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36458/33301.voiceover.diff/1460254568274021</guid>
      <description>&lt;p&gt;
@afercia's patch from &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33301" title="#33301: task (blessed): Create and edit links inline (closed: fixed)"&gt;#33301&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36458 (Fix support for Safari + VoiceOver when editing inline links) created</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:15:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36458</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36458/1460254540017613</guid>
      <description>&lt;p&gt;
From @afercia's comment on &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/33301" title="#33301: task (blessed): Create and edit links inline (closed: fixed)"&gt;#33301&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
About the issue with Safari, I've recently had the opportunity to test using Safari+VoiceOver and noticed the Twitter search suggestion (which perfectly works) sets an aria-selected="true" on the highlighted option item. Quickly tried that and it seems it makes Safari understand what's going on, finally the autocomplete items get read out. Need to build a clean patch and test a lot but we're probably on the right track now :)
Can confirm that in Safari after Cmd+K the focus goes forth and back from the Editor to the combobox 2-3 times, sometimes it lands on the search field, sometimes not. Couldn't reproduce consistently.
Please consider I'm a newbie with VoiceOver, but I've noticed this focus "jump" doesn't happen when I diligently follow VoiceOver instructions telling me: "To enter the web area, press Control-Option-Shift-Down Arrow". After this, everything works nicely. Would greatly appreciate some feedback from VoiceOver experienced users, specifically if pressing "Control-Option-Shift-Down Arrow" enters a sort of "forms mode" and affects how JavaScript keyboard events behave. @MarcoZ any thoughts? When you have a chance! Thanks very much :)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm attaching @afercia's patch to fix this issue as well.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #33301 (Create and edit links inline) closed</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:12:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/33301#comment:93</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/33301#comment:93/1460254345294856</guid>
      <description>fixed: &lt;p&gt;
While I think it would be great to get the a11y change in, and while it's a very small change, I'm concerned that we haven't had enough testing with VoiceOver to be confident in this change so late in the cycle.
&lt;/p&gt;
&lt;p&gt;
I'm going to close this as fixed again and open a new ticket with @afercia's patch. Once we spend some more time testing, I think it can go into the next cycle and a minor release.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #32075 (Only set WP_MAX_MEMORY_LIMIT by default when its greater than memory_limit) updated</title>
      
        <dc:creator>jrf</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:06:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32075#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32075#comment:18/1460253976710412</guid>
      <description>&lt;p&gt;
@mensmaximus
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
How usefull can it be to set WP_MAX_MEMORY_LIMIT to 256M by default if the allocated memory ( ini_get( 'memory_limit' ) ) is less than 256M?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The PHP &lt;code&gt;memory_limit&lt;/code&gt; ini value can be changed at runtime which is what this function tries to do.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What would happen if a plugin developer would rely on the constants value and this value exceeds the memory allocated by the server (and restricted by the hosting company)?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You can never rely on the changing at runtime to succeed. This function &lt;em&gt;*attempts*&lt;/em&gt; to raise the memory limit, there is no guarantee that it will. &lt;code&gt;ini_set()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if it fails to change the value.
&lt;/p&gt;
&lt;p&gt;
As a plugin developer, you should only rely on the success of this if you have control of the server your plugin runs on. This will generally only be the case for one-off, custom plugins.
&lt;/p&gt;
&lt;p&gt;
In all other circumstances: if you get a lot of complaints from users about fatal errors related to memory usage, trying to lower the memory usage of your plugin is the safer (and better) practice.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Imho the WP_MAX_MEMORY_LIMIT constant should never report a larger amount of memory than the maximum allocatable memory.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
AFAIK there is no reliable way to find out the maximum allocatable memory on the server, so there is no way I can think of to take that into account when setting the constant, quite apart from the fact that the constant can be defined in &lt;code&gt;wp-config.php&lt;/code&gt; outside of our control.
&lt;/p&gt;
&lt;p&gt;
N.B.: There is a &lt;code&gt;memory_get_peak_usage( true )&lt;/code&gt; PHP function, but the output of this is AFAIK not reliable across all servers.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36173 (4.5 About Page) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:02:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36173#comment:55</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36173#comment:55/1460253725820825</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/37170" title="4.5 About Page, second round.
* Adjust text.
* Improve headings ..."&gt;37170&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
4.5 About Page, second round.&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adjust text.
&lt;/li&gt;&lt;li&gt;Improve headings hierarchy.
&lt;/li&gt;&lt;li&gt;Add translation functions and translator comments throughout.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Props ocean90, afercia, ramiy, mikeschroder, mattfelten, helen. &lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36173" title="#36173: task (blessed): 4.5 About Page (closed: fixed)"&gt;#36173&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [37170]: 4.5 About Page, second round.  * Adjust text. * Improve headings ...</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 10 Apr 2016 02:02:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/37170</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/37170/1460253724703642</guid>
      <description>&lt;p&gt;
4.5 About Page, second round.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adjust text.
&lt;/li&gt;&lt;li&gt;Improve headings hierarchy.
&lt;/li&gt;&lt;li&gt;Add translation functions and translator comments throughout.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Props ocean90, afercia, ramiy, mikeschroder, mattfelten, helen.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/36173" title="#36173: task (blessed): 4.5 About Page (closed: fixed)"&gt;#36173&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #28521 (FORCE_SSL constant for really forcing SSL) updated</title>
      
        <dc:creator>pcgeek86</dc:creator>

      <pubDate>Sun, 10 Apr 2016 01:22:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/28521#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/28521#comment:9/1460251377332553</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Any progress on this? It's really frustrating to do a fresh install of WordPress 4.4.2 and still see mixed content problems on the setup-config.php and install.php pages, not to mention all the other problems post-install.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36424 (graphically visualize if comments are closed (in wp-admin/edit.php)) updated</title>
      
        <dc:creator>Presskopp</dc:creator>

      <pubDate>Sun, 10 Apr 2016 00:54:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36424#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36424#comment:8/1460249663648982</guid>
      <description>&lt;p&gt;
Latest brainstorming, at least it's working..
&lt;/p&gt;
&lt;p&gt;
I thought if we show a locked lock we can also switch to an open lock if comments are allowed. And why not change the boring mdash for a sexy X ? ;-)
Another interesting dashicon candidate would be 'dashicons-welcome-comments' (it is already used in the dashboard welcome panel):
&lt;a class="ext-link" href="https://developer.wordpress.org/resource/dashicons/#welcome-comments"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.wordpress.org/resource/dashicons/#welcome-comments&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Still not sure about how to deal with translations here.
&lt;/p&gt;
&lt;p&gt;
And I ask myself where core ends and plugins territory begins.
&lt;/p&gt;
&lt;p&gt;
However, here something to play around:
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;                // If comments are closed, show a lock then
                if ( ! comments_open( $post_id ) ) {
                        printf( '&amp;lt;span aria-hidden="true"&amp;gt;&amp;lt;span class="dashicons dashicons-lock"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class="screen-reader-text"&amp;gt;%s&amp;lt;/span&amp;gt;',
                                __( 'Comments are closed' )
                        );
                }
                // Comments are allowed, show open lock
                else {
                        printf( '&amp;lt;span aria-hidden="true"&amp;gt;&amp;lt;span class="dashicons dashicons-unlock"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class="screen-reader-text"&amp;gt;%s&amp;lt;/span&amp;gt;',
                                __( 'Comments are allowed' )
                        );
                }
                // No comments at all, show X icon instead of mdash
                if ( ! $approved_comments &amp;amp;&amp;amp; ! $pending_comments ) {
                        printf( '&amp;lt;span aria-hidden="true"&amp;gt;&amp;lt;span class="dashicons dashicons-no-alt"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class="screen-reader-text"&amp;gt;%s&amp;lt;/span&amp;gt;',
                                __( 'No comments' )
                        );
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #36457 (Customizer Device Preview: Use px units for tablet preview size) updated</title>
      
        <dc:creator>chriscct7</dc:creator>

      <pubDate>Sun, 10 Apr 2016 00:49:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36457#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36457#comment:3/1460249359663964</guid>
      <description>&lt;p&gt;
I think this would be better to fix in the first 4.5 minor release.
&lt;/p&gt;
&lt;p&gt;
It's a borderline between an enhancement "make sizes more consistent" and a bug "sizes can be wildly different". While it's a contained fix, I think it makes more sense to not worry about it.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>