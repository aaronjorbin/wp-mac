<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>http.r6350.patch attached to Ticket #4779</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sun, 02 Dec 2007 23:09:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/4779/http.r6350.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/4779/http.r6350.patch/1196636984000000</guid>
      <description>&lt;p&gt;
Changes WordPress core functions and Admin over to new HTTP API, based off of &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/6350" title="Hash passwords with phpass.  Add wp_check_pasword() and ..."&gt;r6350&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sun, 02 Dec 2007 22:18:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:28/1196633906000000</guid>
      <description>&lt;p&gt;
Well, there is such a thing as Session Hijacking. Any thing that features Sessions will need to reset the Session Key after a jump in permissions. Such as accessing the administration panel and writing posts.
&lt;/p&gt;
&lt;p&gt;
So even if an attacker gains access to the session key by XSS, cookie hijacking, or whatever, it won't matter since the token will be brief enough.
&lt;/p&gt;
&lt;p&gt;
You can take it further and implement something that SMF has, which asks for authentication every 15 minutes to 2 hours. While this could be annoying (and it is really annoying in my humble opinion) it would negate most attacks such as this one and session hijacking.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Sun, 02 Dec 2007 20:51:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:27/1196628664000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:26" title="Comment 26"&gt;ryan&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The recipes using HMAC look good, however hash_hmac() is available only in recent PHP versions. We'll have to fall back to something else when it isn't available.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It is quite straightforward to build HMAC out of a hash function, and even using MD5 is OK for this because HMAC is not vulnerable to collision attacks. The Wikipedia article &lt;a class="ext-link" href="http://en.wikipedia.org/wiki/HMAC"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;on HMAC&lt;/a&gt; shows how it is constructed. So I wouldn't let this be an impediment.
&lt;/p&gt;
&lt;p&gt;
This is still more complicated than building sessions, and importantly if the attacker gets access to the database and key, he can still log in as any user. So while it fixes the expiry issues it will not completely stop the problem that this ticket is about.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 02 Dec 2007 20:35:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:26</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:26/1196627739000000</guid>
      <description>&lt;p&gt;
The recipes using HMAC look good, however hash_hmac() is available only in recent PHP versions. We'll have to fall back to something else when it isn't available.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #3614 (Scaling issue with hundreds of pages) updated</title>
      
        <dc:creator>kicksonfire</dc:creator>

      <pubDate>Sun, 02 Dec 2007 19:07:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/3614#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/3614#comment:13/1196622479000000</guid>
      <description>&lt;p&gt;
I have been dealing with this issue for months and have found no solution either.. I indeed emailed the developers. What I want to know it ... What are the guarentees that this issue will be addressed in the next Wordpress version (2.4) ? Because it has been 11 months since the initial start of this ticket... and many releases have been released since.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5412 (Trailing comma creates blank tag) updated</title>
      
        <dc:creator>ionfish</dc:creator>

      <pubDate>Sun, 02 Dec 2007 17:55:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5412#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5412#comment:1/1196618129000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Status&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>dont_add_blank_tags.patch attached to Ticket #5412</title>
      
        <dc:creator>ionfish</dc:creator>

      <pubDate>Sun, 02 Dec 2007 17:54:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5412/dont_add_blank_tags.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5412/dont_add_blank_tags.patch/1196618073000000</guid>
      <description>&lt;p&gt;
Trims whitespace and trailing commas.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5412 (Trailing comma creates blank tag) created</title>
      
        <dc:creator>matt</dc:creator>

      <pubDate>Sun, 02 Dec 2007 16:57:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5412</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5412/1196614666000000</guid>
      <description>&lt;p&gt;
In the tag box, put a trailing comma, like this:
&lt;/p&gt;
&lt;p&gt;
myfirsttag,
&lt;/p&gt;
&lt;p&gt;
It will create a blank tag and attach it to the post.
&lt;/p&gt;
&lt;p&gt;
Expected: tags with nothing but whitespace aren't created.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>5411.diff attached to Ticket #5411</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Sun, 02 Dec 2007 13:38:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5411/5411.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5411/5411.diff/1196602736000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5411 (Refactor next_post_link, previous_post_link) created</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Sun, 02 Dec 2007 13:37:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5411</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5411/1196602668000000</guid>
      <description>&lt;p&gt;
&lt;code&gt;next_post_link&lt;/code&gt; and &lt;code&gt;previous_post_link&lt;/code&gt; use similar code and make unnecessary database queries to retrieve the previous/next post permalink.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5410 (code correction shouldn't apply to anything within a &lt;pre/&gt; block) updated</title>
      
        <dc:creator>Viper007Bond</dc:creator>

      <pubDate>Sun, 02 Dec 2007 05:17:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5410#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5410#comment:1/1196572634000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Not to toot my own horn, but try &lt;a class="ext-link" href="http://wordpress.org/extend/plugins/syntaxhighlighter/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;SyntaxHighlighter&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [6350]: Hash passwords with phpass.  Add wp_check_pasword() and ...</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 02 Dec 2007 05:14:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/6350</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/6350/1196572451353219</guid>
      <description>&lt;p&gt;
Hash passwords with phpass.  Add wp_check_pasword() and wp_hash_password() functions. Props pishmishy.  see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2394" title="#2394: defect (bug): Passwords are stored in an insecure un-salted form (closed: fixed)"&gt;#2394&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #2394 (Passwords are stored in an insecure un-salted form) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 02 Dec 2007 05:14:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2394#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2394#comment:24/1196572451000000</guid>
      <description>&lt;p&gt;
(In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/6350" title="Hash passwords with phpass.  Add wp_check_pasword() and ..."&gt;[6350]&lt;/a&gt;) Hash passwords with phpass.  Add wp_check_pasword() and wp_hash_password() functions. Props pishmishy.  see &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2394" title="#2394: defect (bug): Passwords are stored in an insecure un-salted form (closed: fixed)"&gt;#2394&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5400 (Add action to wp-login) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 02 Dec 2007 05:09:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5400#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5400#comment:1/1196572197000000</guid>
      <description>&lt;p&gt;
We're redoing user auth and cookies quite a bit for 2.4. It should make secure admin a bit simpler. We'll keep this in mind while we're overhauling things.  See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/2394" title="#2394: defect (bug): Passwords are stored in an insecure un-salted form (closed: fixed)"&gt;#2394&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/5367" title="#5367: defect (bug): Wordpress cookie authentication vulnerability (closed: fixed)"&gt;#5367&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5267 (Filter bloginfo_rss only passes one argument) updated</title>
      
        <dc:creator>ryan</dc:creator>

      <pubDate>Sun, 02 Dec 2007 05:05:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5267#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5267#comment:10/1196571921000000</guid>
      <description>&lt;p&gt;
Oops, sorry, misread the thread.  Patch looks fine.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5410 (code correction shouldn't apply to anything within a &lt;pre/&gt; block) created</title>
      
        <dc:creator>robertaccettura</dc:creator>

      <pubDate>Sun, 02 Dec 2007 04:17:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5410</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5410/1196569057000000</guid>
      <description>&lt;p&gt;
In 2.3.1, the correction is a little too aggressive.  Take the following example:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;pre lang="javascript"&amp;gt;
function bug(){
  do{
    monkeysRule();
  } while(3&amp;lt;a);
}
&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;p&gt;
Will be corrected to:
&lt;/p&gt;
&lt;pre class="wiki"&gt;&amp;lt;pre lang="javascript"&amp;gt;
function bug(){
  a=5;
  do{
    monkeysRule();
    a--
  } while(3&amp;lt;a);
}
&amp;lt;/pre&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;p&gt;
Clearly incorrect.  Any logic that involves &amp;lt;TAG would exhibit this bug.  For example &amp;lt;b, &amp;lt;i, would be easy mistakes to make.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #2994 (Theme files cannot be edited when theme's directory has certain ...) closed</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sun, 02 Dec 2007 03:47:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2994#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2994#comment:17/1196567221000000</guid>
      <description>fixed</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #2994 (Theme files cannot be edited when theme's directory has certain ...) reopened</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sun, 02 Dec 2007 03:46:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2994#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2994#comment:16/1196567217000000</guid>
      <description></description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #4026 (Use Facebook Notes styled image managment instead of iframe) updated</title>
      
        <dc:creator>J2000_ca</dc:creator>

      <pubDate>Sun, 02 Dec 2007 01:24:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4026#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4026#comment:3/1196558676000000</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
It is ajax he is looking at the Facebook note uploader &lt;a class="ext-link" href="http://www.facebook.com/notes.php"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://www.facebook.com/notes.php&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #2994 (Theme files cannot be edited when theme's directory has certain ...) closed</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Sun, 02 Dec 2007 01:00:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2994#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2994#comment:15/1196557237000000</guid>
      <description>invalid</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #5409 (Sorry, that file cannot be edited. PLEASE HELP!) closed</title>
      
        <dc:creator>xknown</dc:creator>

      <pubDate>Sun, 02 Dec 2007 00:57:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5409#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5409#comment:1/1196557056000000</guid>
      <description>invalid: &lt;p&gt;
Please post your request at &lt;a class="ext-link" href="http://wordpress.org/support/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress Support Forums&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #5409 (Sorry, that file cannot be edited. PLEASE HELP!) created</title>
      
        <dc:creator>leonessa</dc:creator>

      <pubDate>Sun, 02 Dec 2007 00:24:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5409</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5409/1196555088000000</guid>
      <description>&lt;p&gt;
Please, please help! I am VERY new to Word Press or php. I keep getting the "THAT FILE CAN NOT BE EDITED" every time I try to access the theme editor. I am trying to build this site for a non-profit that NEED to have this going as soon as possible, we're trying to pay off a building and are under pressure to make this happen. PLEASE help! I read some help files, and this seems to be a common problem, but I can not for the life of me understand what to do about fixing it. PLEASE HELP!
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #2994 (Theme files cannot be edited when theme's directory has certain ...) reopened</title>
      
        <dc:creator>leonessa</dc:creator>

      <pubDate>Sun, 02 Dec 2007 00:21:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2994#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2994#comment:14/1196554895000000</guid>
      <description>&lt;p&gt;
Please, please help! I am VERY new to Word Press or php. I keep getting the "THAT FILE CAN NOT BE EDITED" every time I try to access the theme editor. I am trying to build this site for a non-profit that NEED to have this going as soon as possible, we're trying to pay off a building and are under pressure to make this happen. PLEASE help! I read some help files, and this seems to be a common problem, but I can not for the life of me understand what to do about fixing it. PLEASE HELP!
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #5408 (No need for unix execute permissions in wp-includes/js/tinymce/plugins/) created</title>
      
        <dc:creator>lapcat</dc:creator>

      <pubDate>Sat, 01 Dec 2007 19:41:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5408</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5408/1196538072000000</guid>
      <description>&lt;p&gt;
The file "wp-includes/js/tinymce/plugins/wordpress/images/toolbars.gif" and all of the non-directory files under "wp-includes/tinymce/plugins/spellchecker" have unix execute permissions.  This is unnecessary, because none of these files are executable, and it's not a good idea from a security standpoint.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #4642 (Enhanced wp-mail.php) updated</title>
      
        <dc:creator>Bobcat</dc:creator>

      <pubDate>Sat, 01 Dec 2007 18:55:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4642#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4642#comment:22/1196535338000000</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Tested with trunk revision 6349, FreeBSD 6.2-RELEASE-p1, MySQL 4.1.20, by sending three email messages, one with publish capability, one without, and one unknown user.  Resulting posts were posted, pending, and pending from admin, respectively.  This is the expected result.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 01 Dec 2007 16:25:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:25</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:25/1196526334000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:22" title="Comment 22"&gt;sjmurdoch&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
If uniqid() isn't unpredictable, it would be possible to brute force the database password (the rest of the fields are pretty easy to guess in most situations). How secure is uniqid() in this usage?
&lt;/p&gt;
&lt;p&gt;
Is there a better way to get unpredictable pseudorandom numbers?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
From my reading of the security, it should be &lt;code&gt;uniqid(microtime(), true)&lt;/code&gt; for better random-ness and security.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 01 Dec 2007 15:05:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:24</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:24/1196521520000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:22" title="Comment 22"&gt;sjmurdoch&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:18" title="Comment 18"&gt;westi&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I've uploaded a first pass patch for auth cookies
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It looks like the cookie is of the form:
&lt;code&gt;md5(DB_PASSWORD.DB_USER.DB_NAME.DB_HOST.ABSPATH.$username.uniqid(microtime())&lt;/code&gt;
and the hash of this is stored in the database.
&lt;/p&gt;
&lt;p&gt;
If uniqid() isn't unpredictable, it would be possible to brute force the database password (the rest of the fields are pretty easy to guess in most situations). How secure is uniqid() in this usage?
&lt;/p&gt;
&lt;p&gt;
Is there a better way to get unpredictable pseudorandom numbers?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That is the current cookie format in this patch.
&lt;/p&gt;
&lt;p&gt;
It is in no way intended to be the final format - I just wanted something which would generate a hopefully unique cookie per-user for testing the infrastructure changes with WordPress - splitting out the login handling from the cookie verification
&lt;/p&gt;
&lt;p&gt;
We do need to analyse the predictability of the cookies and ideally find a good available source of entropy for our random numbers
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 01 Dec 2007 15:02:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:23</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:23/1196521377000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:21" title="Comment 21"&gt;sjmurdoch&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
There are roughly two approaches to dealing with this problem.
&lt;/p&gt;
&lt;p&gt;
Sessions involves a record being kept of each login session, which PHP already has existing infrastructure for this. The down side is that there is a database write for each login, and the size of the session table scales with the number of active sessions. Alternatively there can be a restriction of one session per user, as in westi's patch.
&lt;/p&gt;
&lt;p&gt;
An alternative is to use something along the lines of the &lt;a class="ext-link" href="http://lists.grok.org.uk/pipermail/full-disclosure/2007-November/058611.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;papers&lt;/a&gt; I mentioned earlier. This supports multiple sessions per user, with no need to store extra state. Database writes are only needed on changing the password.
&lt;/p&gt;
&lt;p&gt;
A variant of this is to store the hash post-image of a cookie in the database, which means someone with read access to the database can't generate a valid cookie. The down side of this approach is that some fairly subtle cryptography is needed. I think it's possible to do with MD5, but will need some thought.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I will have a read through those and try to understand how we can implement them.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Sat, 01 Dec 2007 14:42:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:22/1196520172000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:18" title="Comment 18"&gt;westi&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I've uploaded a first pass patch for auth cookies
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It looks like the cookie is of the form:
&lt;code&gt;md5(DB_PASSWORD.DB_USER.DB_NAME.DB_HOST.ABSPATH.$username.uniqid(microtime())&lt;/code&gt;
and the hash of this is stored in the database.
&lt;/p&gt;
&lt;p&gt;
If uniqid() isn't unpredictable, it would be possible to brute force the database password (the rest of the fields are pretty easy to guess in most situations). How secure is uniqid() in this usage?
&lt;/p&gt;
&lt;p&gt;
Is there a better way to get unpredictable pseudorandom numbers?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>sjmurdoch</dc:creator>

      <pubDate>Sat, 01 Dec 2007 14:28:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:21/1196519299000000</guid>
      <description>&lt;p&gt;
There are roughly two approaches to dealing with this problem.
&lt;/p&gt;
&lt;p&gt;
Sessions involves a record being kept of each login session, which PHP already has existing infrastructure for this. The down side is that there is a database write for each login, and the size of the session table scales with the number of active sessions. Alternatively there can be a restriction of one session per user, as in westi's patch.
&lt;/p&gt;
&lt;p&gt;
An alternative is to use something along the lines of the &lt;a class="ext-link" href="http://lists.grok.org.uk/pipermail/full-disclosure/2007-November/058611.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;papers&lt;/a&gt; I mentioned earlier. This supports multiple sessions per user, with no need to store extra state. Database writes are only needed on changing the password.
&lt;/p&gt;
&lt;p&gt;
A variant of this is to store the hash post-image of a cookie in the database, which means someone with read access to the database can't generate a valid cookie. The down side of this approach is that some fairly subtle cryptography is needed. I think it's possible to do with MD5, but will need some thought.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>5407.diff attached to Ticket #5407</title>
      
        <dc:creator>Bobcat</dc:creator>

      <pubDate>Sat, 01 Dec 2007 13:07:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5407/5407.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5407/5407.diff/1196514472000000</guid>
      <description>&lt;p&gt;
Improve wp_list_authors() efficiency
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #5407 (Improve wp_list_authors efficiency) created</title>
      
        <dc:creator>Bobcat</dc:creator>

      <pubDate>Sat, 01 Dec 2007 12:49:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5407</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5407/1196513354000000</guid>
      <description>&lt;p&gt;
wp_list_authors() makes multiple queries per registered user.  For example, if a blog has 50 registered users, wp_list_authors() will make over 100 queries, even if there are only a few users who can write posts.
&lt;/p&gt;
&lt;p&gt;
Alexander Concha developed the attached patch which does it all with only one query total (two if "show_fullname" is enabled).  However, he questions if this change belongs in the WP core.  I think it does because it's such a vast improvement over the current extremely inefficient code.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #5218 (SAVEQUERIES: log calling function name) updated</title>
      
        <dc:creator>ozh</dc:creator>

      <pubDate>Sat, 01 Dec 2007 12:43:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5218#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5218#comment:9/1196513030000000</guid>
      <description>&lt;p&gt;
Very great stuff! Can we have this for 2.3.2 even ?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset in tests [95]: remove wp_flag tests</title>
      
        <dc:creator>tellyworth</dc:creator>

      <pubDate>Sat, 01 Dec 2007 10:43:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/95/tests</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/95/tests/1196505820976628</guid>
      <description>&lt;p&gt;
remove wp_flag tests
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 01 Dec 2007 01:19:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:20/1196471981000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:19" title="Comment 19"&gt;darkdragon&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:18" title="Comment 18"&gt;westi&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Known issues:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Only supports a single authentication token for a user so you cannot be logged in from two places at once.
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
I would term this a feature, but since I'm always signed in at home and usually sign in from various other places, it could become a hassle. What if I'm in a location temporary and leave without the ability to go back? Will there be a time limit of when that token will expire so that I can eventually sign in at another location even if I hadn't signed out at that other place?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If you sign in somewhere new then the old token is invalidated.
&lt;/p&gt;
&lt;p&gt;
There is currently no timeout on tokens but for multiple logins to be supported we will need a way of timing tokens out.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>darkdragon</dc:creator>

      <pubDate>Sat, 01 Dec 2007 01:14:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:19/1196471668000000</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/5367#comment:18" title="Comment 18"&gt;westi&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Known issues:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Only supports a single authentication token for a user so you cannot be logged in from two places at once.
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;
I would term this a feature, but since I'm always signed in at home and usually sign in from various other places, it could become a hassle. What if I'm in a location temporary and leave without the ability to go back? Will there be a time limit of when that token will expire so that I can eventually sign in at another location even if I hadn't signed out at that other place?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5367 (Wordpress cookie authentication vulnerability) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 01 Dec 2007 01:00:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5367#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5367#comment:18/1196470814000000</guid>
      <description>&lt;p&gt;
I've uploaded a first pass patch for auth cookies
&lt;/p&gt;
&lt;p&gt;
Major changes to the current mechanism:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Cookie is not based on the password hash
&lt;/li&gt;&lt;li&gt;Cookie is not derived from information stored in the database
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Known issues:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Only supports a single authentication token for a user so you cannot be logged in from two places at once.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>auth.diff attached to Ticket #5367</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 01 Dec 2007 00:58:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/5367/auth.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/5367/auth.diff/1196470684000000</guid>
      <description>&lt;p&gt;
First pass patch for switching to auth cookie
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item>
   </channel>
</rss>