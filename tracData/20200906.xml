<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 23:53:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:19/1599436391653130</guid>
      <description>&lt;p&gt;
The commits here so far have reduced the number of &lt;code&gt;assertEquals()&lt;/code&gt; instances from 8378 matches in 431 files (WordPress 5.5) to 572 matches in 121 files.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The remaining instances fall into three groups:&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ones that use delta comparison for floats, dates, etc. These should be switched to &lt;a class="ext-link" href="https://github.com/sebastianbergmann/phpunit/blob/7.5.0/ChangeLog-7.5.md#added"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;assertEqualsWithDelta()&lt;/a&gt; once PHPUnit 7.5 is the minimum supported version. Or, perhaps &lt;code&gt;assertEqualsWithDelta()&lt;/code&gt; should be polyfilled for older PHPUnit versions.
&lt;/li&gt;&lt;li&gt;Ones that legitimately use &lt;code&gt;assertEquals()&lt;/code&gt; for comparing objects. Trying to switch these to &lt;code&gt;assertSame()&lt;/code&gt; would result in "Failed asserting that two variables reference the same object" error.
&lt;/li&gt;&lt;li&gt;Ones that should be switched to &lt;code&gt;assertSame()&lt;/code&gt;, but would currently result in a failure when doing so, due to data type mismatches, mostly strings vs. integers, or integers vs. floats. These need further investigation:
&lt;ul&gt;&lt;li&gt;In some cases, the tests should be adjusted to use the correct data type.
&lt;/li&gt;&lt;li&gt;In other cases, this points to minor bugs in core, e.g. using &lt;code&gt;ceil()&lt;/code&gt; for values that are documented as integers, but without explicitly casting to &lt;code&gt;int&lt;/code&gt;, results in them being of type &lt;code&gt;float&lt;/code&gt; instead. This affects some properties like &lt;code&gt;max_num_pages&lt;/code&gt;, &lt;code&gt;max_pages&lt;/code&gt;, &lt;code&gt;total_pages&lt;/code&gt; in various classes, or functions like &lt;code&gt;get_comment_pages_count()&lt;/code&gt;, &lt;code&gt;wp_embed_defaults()&lt;/code&gt;, &lt;code&gt;get_oembed_response_data()&lt;/code&gt;.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51058 (attachment_url_to_postid does not retrieve post ID of really large images) updated</title>
      
        <dc:creator>littler.chicken</dc:creator>

      <pubDate>Sun, 06 Sep 2020 21:34:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51058#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51058#comment:2/1599428086104005</guid>
      <description>&lt;p&gt;
To reproduce, upload a very large image to your site (wider than 2560px). Get the URL of the original uploaded image.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Add code to dump out some information similar to this:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_filter(
	'the_content',
	function( $content ) {
		// Enter the URL of the original image
		var_dump( attachment_url_to_postid( 'https://nightly.local/wp-content/uploads/2020/03/roman-kraft-197672.jpg' ) );
		// Now add -scaled to the original image name
		var_dump( attachment_url_to_postid( 'https://nightly.local/wp-content/uploads/2020/03/roman-kraft-197672-scaled.jpg' ) );
		return $content;
	}
);
&lt;/pre&gt;&lt;p&gt;
For the first, WordPress will output &lt;code&gt;0&lt;/code&gt; as no image exists with that filename. The second will return the image ID, because that's the filename assigned to the &lt;code&gt;_wp_attached_file&lt;/code&gt; meta key (ref: &lt;a href="https://core.trac.wordpress.org/browser/tags/5.5/src/wp-includes/media.php#L4634"&gt;https://core.trac.wordpress.org/browser/tags/5.5/src/wp-includes/media.php#L4634&lt;/a&gt;).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
When I use this function, it's in the context of parsing the RSS feed, at which point the original ID is not available, but I'm retrieving it from the database so that the image can be replaced with a smaller copy. Currently, without a secondary check for the &lt;code&gt;-scaled&lt;/code&gt; image, the replacement fails for very large images.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51058 (attachment_url_to_postid does not retrieve post ID of really large images) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 19:56:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51058#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51058#comment:1/1599422177428978</guid>
      <description>&lt;p&gt;
Can you give steps to reproduce please? And any screenshots if it can help.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #45347 (Add extra template lookup by author role) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 19:54:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/45347#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/45347#comment:1/1599422049933914</guid>
      <description>wontfix: &lt;p&gt;
Hum, it should be handled inside author.php IMO. You can do a role switch and then load the template you want. It would be a bit overkill to add all this hierarchy IMO.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #10955 (Replace ThickBox) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:32:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10955#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10955#comment:56/1599417164569975</guid>
      <description>&lt;p&gt;
Added the accessibility focus as the duplicate &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/46985" title="#46985: enhancement: Evaluate removing Thickbox (closed: duplicate)"&gt;#46985&lt;/a&gt; had it.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10955 (Replace ThickBox) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:31:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10955#comment:55</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10955#comment:55/1599417095978227</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #46985 (Evaluate removing Thickbox) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:31:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/46985#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/46985#comment:11/1599417073274963</guid>
      <description>&lt;p&gt;
Thanks, I will add the accessibility focu to &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/10955" title="#10955: enhancement: Replace ThickBox (reopened)"&gt;#10955&lt;/a&gt; :)&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47320 (Site Health: Call to API with $_COOKIE and PHPSESSID) updated</title>
      
        <dc:creator>cfm168</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:07:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47320#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47320#comment:21/1599415658595264</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:19" title="Comment 19"&gt;netweblogic&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@cfm168 This is a regular wp snippet, you could add it to your theme's functions.php file for example.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:18" title="Comment 18"&gt;cfm168&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi @netweblogic,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Where to add these codes? I want to try it. Thanks in advance!&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:4" title="Comment 4"&gt;netweblogic&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@Clorith thanks for the feedback... upon some further research, making use of session_write_close() and keeping sessions open/locked only when we know it'll be needed for writing seems to have done the trick and probably a better approach anyway.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For anyone with a similar problem, maybe this explains it better, my previous snippet failed the site health tests, this one doesn't:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'init'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//this loads variables to $_SESSION for reading
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$your_plugin_needs_session_saving&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;session_write_close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//other plugins can restart a session again via session_start()
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// if session writing is needed, close session after writing is done
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
I'm not sure if this would work for all use cases, but in my case I only need to write to sessions when particular actions are taken, avoiding (hopefully) all situations where there'd be a conflict due to session locking.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The only argument I'd make towards it possibly being a bug in Site Health is that in my case, until now, my plugin session handling worked fine with all other WP functionality (at least, I've not been made aware of any issues).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47320 (Site Health: Call to API with $_COOKIE and PHPSESSID) updated</title>
      
        <dc:creator>cfm168</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:06:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47320#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47320#comment:20/1599415602389821</guid>
      <description>&lt;p&gt;
Thank you for advising.&lt;br /&gt;
I found two plugins causing the site health issues. Deactivate these two plugins all three critical issues are disappeared and site health status 0 issue. I will have the developers to fix the problem. &lt;br /&gt;
Will try your code if the issues persist after developers helpless.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thank you again!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51260 (select all checkbox not working after upgrade WP 5.5.1) reopened</title>
      
        <dc:creator>ambitusa</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:52:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51260#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51260#comment:2/1599414761187241</guid>
      <description>&lt;p&gt;
Thanks for response promoptly. I did enable jquery migrate helper but no luck. It only worked selected all checkbox if I disable WooCommerce. Is there any work around tip before WP has new patch to fix the issue?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:49:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256#comment:2/1599414586582190</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) updated</title>
      
        <dc:creator>kishanjasani</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:48:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256#comment:1/1599414535874582</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #48745 (Disable Admin Email Verification Screen by Variable in wp-config.php ...) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:46:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48745#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48745#comment:12/1599414407722380</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49127 (Clicking on "View" under any user under Users &gt;&gt;&gt; goes to homepage of ...) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:42:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49127#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49127#comment:1/1599414130967931</guid>
      <description>invalid: &lt;p&gt;
Hey @bobteree thanks you for your report, unfortunately, the core track is meant for WordPress, for WooCommerce enhancements, you need to open an issue on their official Github repository.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Moreover, the View link goes to the frontend author page on a default WordPress installation, I think you just use a SEO plugin that does not let the author pages to be indexed and available.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #51260 (select all checkbox not working after upgrade WP 5.5.1) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:38:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51260#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51260#comment:1/1599413903198321</guid>
      <description>invalid: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website since the latest update, but this topic is best discussed on the &lt;a class="ext-link" href="https://wordpress.org/support/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;support forums&lt;/a&gt; or directly with the developer of your website.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Before heading there to create a post though, I recommend reading through the following list of potential issues with 5.5: &lt;a class="ext-link" href="https://wordpress.org/support/topic/read-this-first-wordpress-5-5-master-list/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/topic/read-this-first-wordpress-5-5-master-list/&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The most likely issue is that a plugin on your site is running old JavaScript code. I would suggest installing and activating this plugin: &lt;a class="ext-link" href="https://wordpress.org/plugins/enable-jquery-migrate-helper/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/plugins/enable-jquery-migrate-helper/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This will confirm that there is JavaScript on your site that needs to be updated to follow more modern jQuery practices. You can leave the plugin active for the time being, but the breaking code will need to be updated before the next step of the Upgrading jQuery in Core roadmap.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If this does not fix the issue, feel free to create a new support topic.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for third-party plugins like WooCommerce, or individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Feel free to reopen with the steps to reproduce on a clean install if it turns out to be an issue in WordPress core.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #47320 (Site Health: Call to API with $_COOKIE and PHPSESSID) updated</title>
      
        <dc:creator>netweblogic</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:23:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47320#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47320#comment:19/1599413005652450</guid>
      <description>&lt;p&gt;
@cfm168 This is a regular wp snippet, you could add it to your theme's functions.php file for example.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:18" title="Comment 18"&gt;cfm168&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi @netweblogic,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Where to add these codes? I want to try it. Thanks in advance!&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:4" title="Comment 4"&gt;netweblogic&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@Clorith thanks for the feedback... upon some further research, making use of session_write_close() and keeping sessions open/locked only when we know it'll be needed for writing seems to have done the trick and probably a better approach anyway.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For anyone with a similar problem, maybe this explains it better, my previous snippet failed the site health tests, this one doesn't:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'init'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//this loads variables to $_SESSION for reading
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$your_plugin_needs_session_saving&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;session_write_close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//other plugins can restart a session again via session_start()
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// if session writing is needed, close session after writing is done
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
I'm not sure if this would work for all use cases, but in my case I only need to write to sessions when particular actions are taken, avoiding (hopefully) all situations where there'd be a conflict due to session locking.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The only argument I'd make towards it possibly being a bug in Site Health is that in my case, until now, my plugin session handling worked fine with all other WP functionality (at least, I've not been made aware of any issues).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49416 (Deleting a user when having thousands of users) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 16:53:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49416#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49416#comment:9/1599411202926628</guid>
      <description>&lt;p&gt;
That's an interesting ticket, I'm not sure why the user-suggest.js is only used on multisite. In the AJAX action, you have this code:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;is_multisite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;current_user_can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'promote_users'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;wp_is_large_network&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;current_user_can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'manage_network_users'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'autocomplete_users_for_site_admins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
If I just comment these two if states, create a new input text in &lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$users_have_content&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'admin_head'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'delete_users_add_js'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'jquery-ui-autocomplete'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'user-suggest'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-------&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"reassign_user_new"&lt;/span&gt; &lt;span class="nx"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"wp-suggest-user"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"reassign_user_new"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"search"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
It works well. Of course, you would need to update a bit because a user ID is expected by the original field, and I would prefer to use the REST API, but it can do the trick.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I don't understand why in multisite it doesn't accept the suggestion if it's a large network, does that mean you have to enter the exact email/username of the user without any possible search?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I have also tried another implementation, by looking at tags-suggest.js (but it's still a draft, the suggestions are not displayed), so given an input text field:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;	var user_endpoint = '&amp;lt;?php echo rest_url('wp/v2/users/'); ?&amp;gt;';
	var cache = {};
	$( "#reassign_user_new" ).autocomplete({
		minLength: 2,
		source: function( request, response ) {
			var term = request.term;
			console.log( term );
			console.log( cache );
			if ( term in cache ) {
				response( cache[ term ] );
				return;
			}
			console.log( user_endpoint + '?search=' + term );
			$.getJSON( user_endpoint + '?search=' + term, request, function( data, status, xhr ) {
				cache[ term ] = data;
				response( data );
			});
		}
	});
&lt;/pre&gt;&lt;p&gt;
What's your thoughts on this? I can definitely see some possible implementations around the admin, like the privacy page dropdown, what if you have thousands of pages?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Any thoughts @spacedmonkey ?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51260 (select all checkbox not working after upgrade WP 5.5.1) created</title>
      
        <dc:creator>ambitusa</dc:creator>

      <pubDate>Sun, 06 Sep 2020 16:08:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51260</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51260/1599408498501757</guid>
      <description>&lt;p&gt;
Select all checkbox function failed after WP5.5.1 upgraded. However, if I disable Woocommerce  plugin, it was back to normal. Please refer to other forum for the same issue in the community. &lt;br /&gt;
&lt;a class="ext-link" href="https://wordpress.org/support/topic/orders-page-select-all-checkbox-not-working/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/topic/orders-page-select-all-checkbox-not-working/&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Sun, 06 Sep 2020 15:56:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:18/1599407818342878</guid>
      <description>&lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Changed from a milestone for the Consent API to a milestone for Website User Level Consent Management as per the request from @paapst in &lt;a href="https://core.trac.wordpress.org/ticket/51188#comment:16"&gt;https://core.trac.wordpress.org/ticket/51188#comment:16&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50062 (Updating user extra fields.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 15:54:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50062#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50062#comment:4/1599407673504484</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>ttodua</dc:creator>

      <pubDate>Sun, 06 Sep 2020 15:39:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:17/1599406751029482</guid>
      <description>&lt;p&gt;
@aimutch &lt;br /&gt;
Everything is obvious, and even there is no need even to ask website holders for their opinions, as everything was clear already decade ago.&lt;br /&gt;
However, this is - someone who has higher access to WP decisions, decides whatever they think personally and force you to obey onto that, without giving any option to you. That is just mindless, however that is how WP is. Lack of some bright decisions. Any fact? sure, this is fact that has no argument against - &lt;br /&gt;
give us option in Dashboard to control that field on/off .&lt;br /&gt;
No. WP doesn't (hasn't) give that option to us. They think they know better what you want. that is the example dictacy.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Ouch, how I forgot, they are so kind and tell you - "there are plenty plugins that do the job". So, yes Average Joe, you should go and install some hecky plugin (by whoever developer, by possible security issues in those plugins, so if you site gets hacked because of "those plugins", don't blame WP). yeah, that is the story. So, someone out there 1 in 10 thinks that s/he likes the URL field in WP. So, dear universe, bear fighting the spam and deleting comments every day, wasting your precious time of the life for that person, who thinks he likes that illusional useful feature.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #44332,â€‹48255 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 13:51:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=44332%2C48255</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=44332%2C48255/1599400293303406</guid>
      <description>&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/44332" title="#44332: enhancement: Hook retreive_password (depricated) should be removed (closed: duplicate)"&gt;#44332&lt;/a&gt; was marked as a duplicate.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #50062 (Updating user extra fields.) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:55:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50062#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50062#comment:3/1599396924861591</guid>
      <description>invalid</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #40493 (On the Edit User Profile, open the "You can change your profile ...) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:46:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40493#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40493#comment:8/1599396409272472</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:45:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:34/1599396326366656</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Wrong. Privacy policies cannot be compiled by "(other) tools". They have to be written by people or businesses/companies who will be legally responsible for the content.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There are services like this that already exist, for instance iubenda. A tool like that could consume the data over the REST API and provide much more accurate data as to what the site does with the data.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
However the example "schema" above has a lot of things that don't seem "privacy related", needs more work.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So we will need to maintain/sync two different "schemas", one in core and another on wp.org. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I imagine .org would use the schema in its WordPress install and we wouldn't be breaking BC, just adding new features or changing their format in BC ways so it being on trunk wouldn't be an issue.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Then plugins will be "forced" to include a (json formatted) file that will have to contain all the "required fields" or will be marked as "failed", even when they do not contain any user privacy related stuff? That seems... not ideal.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Something for @carike. I imagine they'd say "Privacy information not available". Which doesn't seem to bad. The minimal set of fields that you'd probably want to provide for a plugin that has zero privacy impact is probably something like:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
  "ppiExport": true,
  "ppiErausre": true,
  "consentAPI": true,
  "disclosuresTab": true,
  "permissionsTab": true
}
&lt;/pre&gt;&lt;p&gt;
I don't think that is too much of a burden for plugin authors to explicitly declare that they don't need to implement those features and I don't really see how else we could do it short of code analysis which would be get us a lot less accurate data.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The majority of plugins have nothing to do with user privacy.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Definitely, but I think there are still quite a number. Particularly of the most popular plugins.&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WP Http 10k: &lt;a class="ext-link" href="https://wpdirectory.net/search/01EHHMBF85N0WSNBAVWNBG32P0"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wpdirectory.net/search/01EHHMBF85N0WSNBAVWNBG32P0&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;Cookies 3k: &lt;a class="ext-link" href="https://wpdirectory.net/search/01EHHMCYPW7MXY0HS07S4XNXCG"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wpdirectory.net/search/01EHHMCYPW7MXY0HS07S4XNXCG&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;User Meta 4.5k: &lt;a class="ext-link" href="https://wpdirectory.net/search/01EHHMN2EV0QYPW0RXQV26AKNA"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wpdirectory.net/search/01EHHMN2EV0QYPW0RXQV26AKNA&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
And I think the ones that couldn't possibly have any privacy impact will be evident from the description. For the ones where it isn't so clear, the ability to say no this plugin doesn't contact any external APIs, etc... would be a good thing for those plugins I think.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even if not cached, the validation will (likely) fail every time the schema is updated. Then all existing plugins will "fail"...&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Why?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If it is from a technical implementation I imagine a function signature like this &lt;code&gt;wp_get_plugin_privacy_data( $plugin, $force_revalidate = false ): array|WP_Error&lt;/code&gt;. If the plugin's privacy data has changed or the version of the schema is newer, we'd revalidate before returning that data.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If it is from a perspective of making changes to WordPress' schema we'd make any changes backward compatible, the same way we currently do. I don't think it would be acceptable for their to be BC breaks there, nor do I imagine why we'd need them. Fields aren't currently marked as &lt;code&gt;required&lt;/code&gt; and if a new format is necessary, this can be accommodated in the schema definition.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Making the data supplied by plugins "public" on a specific site will at least disclose which plugins that site is using. This in itself can be seen as a "privacy breach", can be used for "fingerprinting", the plugin's versions will probably be "guessable" from the data, etc. :)&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Where would that be disclosed? There would be a machine readable .json file in the plugin directory's folder, but you'd need to know the site is running that plugin before hand. It is also already trivial to detect because of readme files, version history, etc... And is already possible using sites like Built With.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right, so the data contained in the plugin's json files would be "private" (on a per site basis) and only site owners will be able to see it? (Only the site owners will need to see it anyways as it is intended for creating a Privacy Policy). Or am I reading this wrong?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yep! That matches my understanding.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It's not that it is not a part of it but... Would you add an end point to output /readme.txt or /license.txt? Does it make sense from "restful" point of view? &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'd like to yeah. You can use &lt;code&gt;api.wordpress.org&lt;/code&gt; for .org hosted plugins, but for non .org plugins it makes retrieving that data impossible. We now have a plugins endpoint that returns the plugin header information, but that is limited. &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What's the point of having that in the REST API (considering that this data would be very rarely accessed and used only by site owners/users with the highest permissions).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We have a settings endpoint and a plugins endpoint that are only accessible to administrators. I'd also wager for most WordPress sites the admin is the only user on the whole install :)&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As far as I understand it the (compiled) data from all the plugins json files can be outputted by the REST API, in case a plugin might want to replace the (proposed) page in wp-admin (instead of extending it), but... At the end this is the same like outputting all the data for the Comments page for example, just because a plugin might eventually decide to replace it? Seems WP may get there one day but...?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't really get the resistance to making versioned, structured data that is at least in part dynamic available over a tool that is designed for doing that.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
As a whole, IMO we should be thinking about how new features can integrate with the REST API from the outset of how that feature is being designed. It makes implementation a lot simpler that way and as everything in WP-Admin is moving to a React powered interface, necessary at the moment.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
In terms of use cases for Core, if we made this available in Gutenberg when editing the Privacy Policy page similar to some of the initial mockups for how that page could work in the Classic Editor, making that available over REST would vastly simplify the implementation.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The same is true for plugin authors who are building tools. And as I mentioned earlier, I think this would be great functionality for external systems like Iubenda.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I also do think there is privacy data that would make sense to make public, for instance this could serve as the source of truth for cookies. That would be useful to access on the front-end to build a cookie consent screen.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44332 (Hook retreive_password (depricated) should be removed) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:43:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44332#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44332#comment:4/1599396205409043</guid>
      <description>worksforme: &lt;p&gt;
It seems it was already handled by Sergey 10 months ago in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/48255" title="#48255: defect (bug): Consistent deprecation of action and filter hooks (closed: fixed)"&gt;#48255&lt;/a&gt; so it's good we can close this ticket.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #49102 (Multisite: removed_user_from_blog hook) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:39:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49102#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49102#comment:11/1599395950573446</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:28:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:17/1599395338096039</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51188#comment:16" title="Comment 16"&gt;paapst&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
to facilitate the communication between the existing consent management systems such as Cookiebot, Complianz or GDPR Cookie Consent, and plugins or themes that place cookies or that make use of local storage or other resources. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I cannot support the idea of creating a functionality in Core to benefit a handful of plugins.&lt;br /&gt;
In such a case, it is more suitable for the plugins who wish to use a common framework, to either recommend / require the Consent API plugin in its current form, or to bundle it into their .zip &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49399 (wp_get_users_with_no_role() does not handle user roles which contain ...) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:18:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49399#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49399#comment:4/1599394737967293</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello guys, I have uploaded a patch to fix the issue. It also contains a dedicated unit test. Thanks for your help @chillbram&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>49399.1.patch attached to Ticket #49399</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:18:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/49399/49399.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/49399/49399.1.patch/1599394682852552</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #48710 (PDF uploads are treated like images: empty alt attribute and PHP notices) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 11:50:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48710#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48710#comment:18/1599393021456974</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49459 (Allow Ctrl+Y redo in post editor) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 11:39:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49459#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49459#comment:12/1599392386626399</guid>
      <description>&lt;p&gt;
Noting that there's an equivalent issue on the Gutenberg Github repo, see &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/issues/8921"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://github.com/WordPress/gutenberg/issues/8921&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49459 (Allow Ctrl+Y redo in post editor) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 11:36:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49459#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49459#comment:11/1599392211871378</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>51256.patch attached to Ticket #51256</title>
      
        <dc:creator>kishanjasani</dc:creator>

      <pubDate>Sun, 06 Sep 2020 09:53:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51256/51256.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51256/51256.patch/1599386019952367</guid>
      <description>&lt;p&gt;
Add a validation to restrict same ID generation
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51259 (wordpress 5.5 saves page but doesn't show update and cleared cache not ...) closed</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Sun, 06 Sep 2020 08:42:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51259#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51259#comment:1/1599381743128048</guid>
      <description>invalid: &lt;p&gt;
Hello @Serendipity823 &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
May any plugin or theme conflict issue over here. First can you please take backup of website and after that please try with deactivate plugin and check? Else please post your question here: &lt;a class="ext-link" href="https://wordpress.org/support/forum/how-to-and-troubleshooting/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/forum/how-to-and-troubleshooting/&lt;/a&gt;&lt;br /&gt;
Trac is specifically for reporting reproducible bugs in Core.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The awesome forum volunteers may be able to help you to troubleshoot your issue.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Going to close this ticket for the Core team's workflow.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thanks,&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 06 Sep 2020 08:36:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:33/1599381388707629</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51092#comment:32" title="Comment 32"&gt;TimothyBlynJacobs&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As I understand it, the point is to create a superset of facts about how a plugin handles user data, makes external API requests and other privacy related info.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, this should include &lt;strong&gt;only&lt;/strong&gt; privacy related data that is considered public.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Core part is more about standardizing a data format so that plugins, and perhaps Core, can implement functionality based on the laws of the region the site adheres to. As well as making sure that data is disclosed to the site owner in an easy to understand way.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right again, the data should be disclosed &lt;strong&gt;only&lt;/strong&gt; to the site owner(s) on a per-site basis.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This can really only work if the standard is in Core to give the best potential at plugin adoption.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The current system we have in place is freeform, and I don't think has proven to be very successful. Plugin authors aren't lawyers, but are practically being asked to write up "legal" privacy policy information that the site user then needs to figure out a way to cobble into a legal document of their own.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. This ensures each site owner can decide (or hire a lawyer if needed) what their Privacy Policy should contain, and bear the legal responsibility for it.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
By making the privacy data as fact based as possible, it reduces the burden on plugin authors who want to provide this information.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, perhaps. Looking at the examples above, a lot of points are not particularly clear, but thinking this can be improved?&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It'd also allow for plugins or other tools to compile comprehensive privacy policies and other documents based on the structured information.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Wrong. Privacy policies &lt;strong&gt;cannot&lt;/strong&gt; be compiled by "(other) tools". They have to be written by people or businesses/companies who will be legally responsible for the content.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As you mentioned, Core is pretty simple. As I understand it, the main audience here is plugin developers. So eventually data can be displayed in the admin and on the WordPress.org plugin page.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, this is a good idea. However the example "schema" above has a lot of things that don't seem "privacy related", needs more work.&lt;br /&gt;
 &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For Core, it could be validated when the data needs to be accessed on the privacy page. For .org, I imagine it'd validate when zips are built.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So we will need to maintain/sync two different "schemas", one in core and another on wp.org. Then plugins will be "forced" to include a (json formatted) file that will have to contain all the "required fields" or will be marked as "failed", even when they do not contain any user privacy related stuff? That seems... not ideal.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What happens when the validation fails? The plugin supplying the data is... rejected (deleted, disabled, or... rejected how)?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think this is mainly for @carike. But I think the idea is just that the plugin would show as having an incomplete or invalid privacy disclosures. I don't think the idea currently is, and probably never would be, for Core to completely forbid plugins from operating unless they have complete disclosure data. I imagine there would probably be plugins that do implement something like that.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, this needs more thinking imho. The majority of plugins have nothing to do with user privacy.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think it is still necessary to have in Core to handle the plugins that don't live in the WordPress.org directory. Having a JSON Schema in Core also gives us versioning tied to WordPress releases. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, the question of syncing the schema between wp.org and core...&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What happens then the schema needs to be changed? Re-validation?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If we do need to cache validation status, yeah we could re-validate that in a fairly straightforward way I think.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Even if not cached, the validation will (likely) fail every time the schema is updated. Then all existing plugins will "fail"...&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally (continuously) validating static, non-editable files in core seems... unwise?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Which files would that be?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The static json files supplied by plugins. But yeah, probably not a huge deal if these are not going to be accessed often. As far as I see it, on most sites these might be accessed 1-2 times per year, or less :) &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
quite a bit of the data seems "sensitive", i.e. only admins should be able to see it. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In what way? As I understand it, the idea is that this data would be displayed publicly on WordPress.org.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Making the data supplied by plugins "public" on a specific site will at least disclose which plugins that site is using. This in itself can be seen as a "privacy breach", can be used for "fingerprinting", the plugin's versions will probably be "guessable" from the data, etc. :)&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So at best this should be a page under the Plugins and Themes menu items in wp-admin accessible only to site admins, or perhaps a "More Info" link for each plugin and theme.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think it would be guarded the same way we guard the Privacy Settings page already.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, so the data contained in the plugin's json files would be "private" (on a per site basis) and only site owners will be able to see it? (Only the site owners will need to see it anyways as it is intended for creating a Privacy Policy). Or am I reading this wrong?&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The point is: whether this should be available through REST API should be decided after the implementation details and UI are ready, not before.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
How is the REST API not a part of the implementation discussion? Ignoring the REST API until the last second and seeing it as merely a simple data transport mechanism is how we continuously get into trouble.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's not that it is not a part of it but... Would you add an end point to output /readme.txt or /license.txt? Does it make sense from "restful" point of view? What's the point of having that in the REST API (considering that this data would be very rarely accessed and used only by site owners/users with the highest permissions).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
As far as I understand it the (compiled) data from all the plugins json files can be outputted by the REST API, in case a plugin might want to replace the (proposed) page in wp-admin (instead of extending it), but... At the end this is the same like outputting all the data for the Comments page for example, just because a plugin might eventually decide to replace it? Seems WP may get there one day but...?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51062 (Twenty Fifteen: PHP Warning: Illegal string offset 'height') reopened</title>
      
        <dc:creator>Hareesh Pillai</dc:creator>

      <pubDate>Sun, 06 Sep 2020 07:41:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51062#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51062#comment:6/1599378085312854</guid>
      <description>&lt;p&gt;
Attached patch 51062.diff checks if the offset is set, else falls back to 0.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>51062.diff attached to Ticket #51062</title>
      
        <dc:creator>Hareesh Pillai</dc:creator>

      <pubDate>Sun, 06 Sep 2020 07:31:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51062/51062.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51062/51062.diff/1599377505484513</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>peterwilsoncc</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:30:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:21/1599366625359547</guid>
      <description>&lt;p&gt;
I've created a new PR with a different slightly different approach to account for how term counting currently works in Core.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Both approaches are currently a little broken, off-by-one errors, but I think the revised approach is an improvement in terms of maintaining backward compatibility. The new PR is at &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/519"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://github.com/WordPress/wordpress-develop/pull/519&lt;/a&gt;, comments on it would be dandy.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:23:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:18/1599366227520698</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48950" title="Tests: Add a test case for storing `false` in the cache.
Follow-up to ..."&gt;48950&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Add a test case for storing &lt;code&gt;false&lt;/code&gt; in the cache.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48949" title="Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.
It is ..."&gt;[48949]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48950]: Tests: Add a test case for storing `false` in the cache.  Follow-up to ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:23:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48950</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48950/1599366226414568</guid>
      <description>&lt;p&gt;
Tests: Add a test case for storing &lt;code&gt;false&lt;/code&gt; in the cache.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48949" title="Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.
It is ..."&gt;[48949]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>aimutch</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:18:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:16/1599365880171351</guid>
      <description>&lt;p&gt;
I would also note that if you set up a free site at WordPress.com, when comments are enabled, there's no field website field available. Looks like the people managing that side of the operation have come to the conclusion that the upside of allowing that is far outweighed by the downside of disabling it by default. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>aimutch</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:06:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:15/1599365218504563</guid>
      <description>&lt;p&gt;
It's not just that receiving spam comments is "disappointing and annoying". It's that the links in these comments lead back to sites serving up malware or spammy content to unsuspecting site visitors/owners. It's easy to find unprotected WordPress sites where the comments on every article are nothing but these spam comments. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Also, this spam creates a tremendous amount of unnecessary overhead on the sites. I help manage a handful of WordPress sites and even these sites with a fairly low level of traffic are bombarded by spam comments. One site I just checked averaged 1000 spam comments a month. Without fail, every comment flagged by Akismet has the website field completed. Once I blocked this field, the spam comments dropped almost immediately to zero. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Whatever benefit came from this in the past is now outweighed by the massive amount of malware and spam being propagated thanks to WordPress sites. As I said before, someone on the WP side should do an analysis of this. It should be quickly obvious that keeping this field in place is doing far more harm than good. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:36:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:17/1599363360611348</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48949" title="Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.
It is ..."&gt;48949&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_add_get_null()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It is possible to store &lt;code&gt;null&lt;/code&gt; in the cache without it being converted to an empty string.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props johnbillion, SergeyBiryukov.&lt;br /&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48949]: Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.  It is ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:35:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48949</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48949/1599363359483577</guid>
      <description>&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_add_get_null()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
It is possible to store &lt;code&gt;null&lt;/code&gt; in the cache without it being converted to an empty string.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props johnbillion, SergeyBiryukov.
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:25:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:16/1599362732704887</guid>
      <description>&lt;ul&gt;&lt;li&gt;&lt;code&gt;Tests_Cache::test_miss()&lt;/code&gt; was added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/1/tests" title="move repo"&gt;[1/tests]&lt;/a&gt;. Object caching was introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/3011" title="Object caching, round one."&gt;[3011]&lt;/a&gt;. As far as I can tell, &lt;code&gt;WP_Object_Cache::get()&lt;/code&gt; always returned &lt;code&gt;false&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt; for cache misses, so the test was never correct.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Tests_Cache::test_add_get_null()&lt;/code&gt; was added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/280/tests" title="Add extra object cache tests. Props Denis-de-Bernardy."&gt;[280/tests]&lt;/a&gt; and adjusted in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/327/tests" title="Fixes and cleanup in TestObjectCache and TestSSLLinks
 ..."&gt;[327/tests]&lt;/a&gt;. At the time, &lt;code&gt;null&lt;/code&gt; was indeed converted to an empty string due to this piece in &lt;code&gt;WP_Object_Cache::set()&lt;/code&gt;, added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/3021" title="Add cache expiration.  Cache requests for non-existant options."&gt;[3021]&lt;/a&gt; and adjusted in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/6247" title="Allow single post ID and comma delimited list of post IDs to be passed ..."&gt;[6247]&lt;/a&gt;:
&lt;pre class="wiki"&gt;if (NULL === $data)
	$data = '';
&lt;/pre&gt;This was later removed in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;, but the test was never updated.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51259 (wordpress 5.5 saves page but doesn't show update and cleared cache not ...) created</title>
      
        <dc:creator>Serendipity823</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:15:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51259</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51259/1599362100926464</guid>
      <description>&lt;p&gt;
I am trying to update the homepage of my site in the newest version of WordPress. The update is saved in the page since I pressed the publish button. However, the update is not reflected on the live site. I tested to see if a browser issue by checking on my smartphone, new browser, and incognito window--all are not showing the page update. Also, then I tried a number of different cache plugins none of them worked. After trying the caching plugins I went to clear the cache again and noting changed. I wonder if this has to do with the WP upgrade I did to version 5. I was on 4 previously which I preferred much better honestly at least from a UI standpoint. Anyone encounter any such issue? Of course I did google this, in case that doesn't go without saying.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sun, 06 Sep 2020 02:56:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:20/1599360973801940</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/519"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;PR #519&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/peterwilsoncc"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;peterwilsoncc&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Completely revised approach to scaling term counting.&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;respects deferring of term counting
&lt;/li&gt;&lt;li&gt;replaces calls to the current functions with calls to new functions
&lt;/li&gt;&lt;li&gt;does not introduce new full count points
&lt;/li&gt;&lt;li&gt;terms added in &lt;code&gt;wp_insert_post()&lt;/code&gt; can be double counted (this was happening with the earlier approach too)
&lt;/li&gt;&lt;li&gt;has a single unit test to demonstrate the bug &amp;amp; prevent passing.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/40351"&gt;https://core.trac.wordpress.org/ticket/40351&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 02:51:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:15/1599360707094175</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48948" title="Tests: Correct assertion in `Tests_Cache::test_miss()`.
On failure to ..."&gt;48948&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_miss()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
On failure to retrieve contents, &lt;code&gt;WP_Object_Cache::get()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The test only passed accidentally due to &lt;code&gt;assertEquals()&lt;/code&gt; not performing a strict type check.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props johnbillion.&lt;br /&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48948]: Tests: Correct assertion in `Tests_Cache::test_miss()`.  On failure to ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 02:51:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48948</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48948/1599360705976644</guid>
      <description>&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_miss()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
On failure to retrieve contents, &lt;code&gt;WP_Object_Cache::get()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The test only passed accidentally due to &lt;code&gt;assertEquals()&lt;/code&gt; not performing a strict type check.
&lt;/p&gt;
&lt;p&gt;
Props johnbillion.
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 06 Sep 2020 01:57:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:14/1599357469811357</guid>
      <description>&lt;p&gt;
I appreciate that receiving spam comments can be disappointing and annoying to deal with. However, as WordPress remains a strong tool for the open web, I (maybe naively) still think that encouraging conversation on blogs and encouraging people to leave a link to their blog as part of those conversations are important pieces of the open web.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Options exist to either disable comments entirely, to remove the URL field through plugins like the ones @SergeyBiryukov &lt;a href="https://core.trac.wordpress.org/ticket/47926#comment:2"&gt;mentions above&lt;/a&gt;, and it is possible to create themes that do not display comments in different ways or not at all.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>51249.1.patch attached to Ticket #51249</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Sun, 06 Sep 2020 01:26:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51249/51249.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51249/51249.1.patch/1599355583447279</guid>
      <description>&lt;p&gt;
As per CSS coding standards, We have updated the patch. o, Can you please ignore "51249.patch" this one and please consider the correct solution is "51249.1.patch" this one.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>d_folders.patch attached to Ticket #39265</title>
      
        <dc:creator>patopaiar</dc:creator>

      <pubDate>Sun, 06 Sep 2020 00:55:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39265/d_folders.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39265/d_folders.patch/1599353734285237</guid>
      <description>&lt;p&gt;
Adds @covers to folders starting with d: date, db and dependencies
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>aimutch</dc:creator>

      <pubDate>Sun, 06 Sep 2020 00:54:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:13/1599353695155410</guid>
      <description>&lt;p&gt;
The responses to this appears to fall into the old "we've always done it this way" trap without thinking about why it was done that way originally or whether it makes sense to continue to include it. I did a quick search on Google and found articles going back to at least 2011 of people asking how to disable this field because of the volume of spam it generates through WordPress sites. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I suspect that an analysis would find that this is the number one generator of spam on WordPress sites. And to what end? Is this a feature of the standard comment field that people clamor to have? No. If it went away or was disabled by default, would anyone miss it? Very few people I suspect. But because someone thought it was a good idea to have this field 1000 WordPress years ago, we're stuck having to install a plugin to disable a form field that serves very little purpose and exposes WordPress sites and their visitor to all kinds of bad content. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Isn't it time to have a discussion of whether this is worth all the problems that this form field causes? &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>51258.diff attached to Ticket #51258</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sat, 05 Sep 2020 23:30:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51258/51258.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51258/51258.diff/1599348649987843</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51258 (Fire an action when `replace_editor` is filtered to true) created</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sat, 05 Sep 2020 23:30:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51258</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51258/1599348622043075</guid>
      <description>&lt;p&gt;
The &lt;code&gt;replace_editor&lt;/code&gt; filter was added during the development of Gutenberg to make it possible to implement multiple editor options. See &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/41829" title="Editor: Add the `replace_editor` filter.
This filter allows the Core ..."&gt;[41829]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Gutenberg &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/blame/08da64b407e95683946b34cf6ebca5d52ac28227/gutenberg.php"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;previously used this filter&lt;/a&gt; to inject necessary hooks and markup before returning &lt;code&gt;true&lt;/code&gt; to indicate that the editor had been replaced.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;replace_editor&lt;/code&gt; filter is no longer used by the block editor or the Gutenberg pluginâ€”as it has become the editor. Instead, we rely on &lt;code&gt;use_block_editor_for_post()&lt;/code&gt; to determine whether the block or classic interface should load.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
In the current state, if &lt;code&gt;true&lt;/code&gt; is returned via &lt;code&gt;replace_editor&lt;/code&gt;, the current screen is set and the admin footer markup is loaded. There is no clean opportunity to add markup or other logic. This can be done during the filter, but that does not provide a clean pattern, especially if one or more pieces of code may be making a decision on editor replacement. See &lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/50216" title="#50216: defect (bug): On the bug of replace_editor (new)"&gt;#50216&lt;/a&gt; for a description of how it may fire multiple times.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The patch attached to this ticket adds a &lt;code&gt;replaced_editor&lt;/code&gt; action in the &lt;code&gt;post-new.php&lt;/code&gt; and &lt;code&gt;post.php&lt;/code&gt; files so that plugins can cleanly inject replacement editor code. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #50244 (Add bulk operation support to the Rest API) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 22:59:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50244#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50244#comment:35/1599346742251502</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Removing the &lt;code&gt;early&lt;/code&gt; keyword. The early portion of the ticket has been committed. The actual batch implementation will come with the Gutenberg code merge near Beta 1.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
That PR is in progress here: &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/pull/25096"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://github.com/WordPress/gutenberg/pull/25096&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>dlh</dc:creator>

      <pubDate>Sat, 05 Sep 2020 22:58:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:5/1599346695602361</guid>
      <description>&lt;i&gt;Version&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi! Thanks for the ticket and the patch. Feedback from the design team would be great before moving this ticket into a milestone. The accessibility team might also want to weigh on based on their recent work in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/48420" title="#48420: defect (bug): Admin CSS: standardize form controls heights, alignments, etc. (closed: fixed)"&gt;#48420&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Separately, please ensure that the patch follows the &lt;a class="ext-link" href="https://developer.wordpress.org/coding-standards/wordpress-coding-standards/css/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;CSS coding standards&lt;/a&gt; for spacing and selector structure.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>paapst</dc:creator>

      <pubDate>Sat, 05 Sep 2020 22:39:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:16/1599345584370554</guid>
      <description>&lt;p&gt;
I don't agree with the fact that this ticket is being presented as a milestone for the Consent API. The proposal for the WP Consent API is not, and I repeat &lt;strong&gt; is not&lt;/strong&gt; ,  a proposal for implementing a consent management system in core. It is only a small and simple plugin (&lt;a class="ext-link" href="https://wordpress.org/plugins/wp-consent-api/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/plugins/wp-consent-api/&lt;/a&gt;) to facilitate the communication between the existing consent management systems such as Cookiebot, Complianz or GDPR Cookie Consent, and plugins or themes that place cookies or that make use of local storage or other resources. As can be seen in the proposal the API does not store the consent choice. This is why the consent API does not need a UI, and does not need to be able to do all the things the consent management systems already are offering. &lt;br /&gt;
In the proposal we have already mentioned that some of the functionalities that are offered by consent management systems would be too intrusive to do in core, because certain functionalities are not applicable to all users due to different cookielaws around the world. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Now, if it is really necessary to do something special for logged-in users, I think that the proposal for that new functionality and the current ticket should be treated separate from the original proposal for the Consent API.  &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50244 (Add bulk operation support to the Rest API) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 21:50:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50244#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50244#comment:34/1599342632779859</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48947" title="REST API: Refactor `WP_REST_Server::dispatch()` to make internal logic ..."&gt;48947&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
REST API: Refactor &lt;code&gt;WP_REST_Server::dispatch()&lt;/code&gt; to make internal logic reusable.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt; aims to introduce batch processing in the REST API. An important feature is the ability to enforce that all requests have valid data before executing the route callbacks in "pre-validate" mode.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This necessitates splitting &lt;code&gt;WP_REST_Server::dispatch()&lt;/code&gt; into two methods so the batch controller can determine the request handler to perform pre-validation and then respond to the requests.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The two new methods, &lt;code&gt;match_request_to_handler&lt;/code&gt; and &lt;code&gt;respond_to_request&lt;/code&gt;, have a public visibility, but are marked as &lt;code&gt;@access private&lt;/code&gt;. This is to allow for iteration on the batch controller to happen in the Gutenberg repository. Developers should not rely upon these methods, their visibility may change in the future.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt;.&lt;br /&gt;
Props andraganescu, zieladam, TimothyBlynJacobs.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48947]: REST API: Refactor `WP_REST_Server::dispatch()` to make internal logic ...</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 21:50:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48947</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48947/1599342631604230</guid>
      <description>&lt;p&gt;
REST API: Refactor &lt;code&gt;WP_REST_Server::dispatch()&lt;/code&gt; to make internal logic reusable.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt; aims to introduce batch processing in the REST API. An important feature is the ability to enforce that all requests have valid data before executing the route callbacks in "pre-validate" mode.
&lt;/p&gt;
&lt;p&gt;
This necessitates splitting &lt;code&gt;WP_REST_Server::dispatch()&lt;/code&gt; into two methods so the batch controller can determine the request handler to perform pre-validation and then respond to the requests.
&lt;/p&gt;
&lt;p&gt;
The two new methods, &lt;code&gt;match_request_to_handler&lt;/code&gt; and &lt;code&gt;respond_to_request&lt;/code&gt;, have a public visibility, but are marked as &lt;code&gt;@access private&lt;/code&gt;. This is to allow for iteration on the batch controller to happen in the Gutenberg repository. Developers should not rely upon these methods, their visibility may change in the future.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt;.
Props andraganescu, zieladam, TimothyBlynJacobs.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #51257 (Duplicator Pro Unsuspecting Operation Occur in Step 2) updated</title>
      
        <dc:creator>ezwebagency</dc:creator>

      <pubDate>Sat, 05 Sep 2020 21:28:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51257#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51257#comment:2/1599341300488177</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51257#comment:1" title="Comment 1"&gt;SergeyBiryukov&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for third-party plugins like Duplicator Pro, or individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please try the support forums to get help with your site: &lt;a class="ext-link" href="https://wordpress.org/support/forums/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/forums/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Thanks!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51257 (Duplicator Pro Unsuspecting Operation Occur in Step 2) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:52:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51257#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51257#comment:1/1599339130291731</guid>
      <description>invalid: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for third-party plugins like Duplicator Pro, or individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please try the support forums to get help with your site: &lt;a class="ext-link" href="https://wordpress.org/support/forums/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/forums/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #43437 (Add way for registered users to request deletion or anonymization of ...) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:30:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43437#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43437#comment:35/1599337831222521</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Related to &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/51110" title="#51110: enhancement: Create a UI for user-level privacy / consent management options on the ... (assigned)"&gt;#51110&lt;/a&gt;.&lt;br /&gt;
Thanks, Paal! :hero:&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51110 (Create a UI for user-level privacy / consent management options on the ...) updated</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:29:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51110#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51110#comment:6/1599337769152803</guid>
      <description>&lt;p&gt;
The above is a suggestion in regards to Privacy Controls in the profile page.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Text used (as it is a bit hard to read it from the image).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Permissions&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Your privacy choices while logged in are saved in the database and will persist until you change them.&lt;br /&gt;
You may be prompted to update your consent from time to time.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Your privacy choices while logged out are saved in a cookie and will only persist until the cookie expires, or is deleted.&lt;br /&gt;
Your choices will be automatically synchronized once you log in again, but the website defaults will apply until that time.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
-Checkboxes-&lt;br /&gt;
You have not made any privacy choices yet. For now the site defaults apply. Please update your choices now.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
My Data&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Enable Privacy Actions -checkbox-&lt;br /&gt;
Export my Data -button-&lt;br /&gt;
Erase my Data -button-&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Your data is handled according to this website's Privacy Policy [link]. It is possible that not all data will be deleted,&lt;br /&gt;
but that some data may be pseudo-anonymized instead, or retained if there is another legitimate basis for processing.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Profile-page-Privacy4.jpg attached to Ticket #51110</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:28:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51110/Profile-page-Privacy4.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51110/Profile-page-Privacy4.jpg/1599337705047786</guid>
      <description>&lt;p&gt;
Profile screen Privacy controls.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #43437 (Add way for registered users to request deletion or anonymization of ...) updated</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:27:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43437#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43437#comment:34/1599337658186823</guid>
      <description>&lt;p&gt;
The above is a suggestion in regards to Privacy Controls in the profile page.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Text used (as it is a bit hard to read it from the image).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Permissions&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Your privacy choices while logged in are saved in the database and will persist until you change them. &lt;br /&gt;
You may be prompted to update your consent from time to time.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Your privacy choices while logged out are saved in a cookie and will only persist until the cookie expires, or is deleted.&lt;br /&gt;
Your choices will be automatically synchronized once you log in again, but the website defaults will apply until that time.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
-Checkboxes-&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
You have not made any privacy choices yet. For now the site defaults apply. Please update your choices now. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
My Data&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Enable Privacy Actions -checkbox- &lt;br /&gt;
Export my Data -button-&lt;br /&gt;
Erase my Data  -button-&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Your data is handled according to this website's Privacy Policy [link]. It is possible that not all data will be deleted, &lt;br /&gt;
but that some data may be pseudo-anonymized instead, or retained if there is another legitimate basis for processing.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Profile-page-Privacy4.jpg attached to Ticket #43437</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:23:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/43437/Profile-page-Privacy4.jpg</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/43437/Profile-page-Privacy4.jpg/1599337397155925</guid>
      <description>&lt;p&gt;
Profile screen Privacy controls.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51257 (Duplicator Pro Unsuspecting Operation Occur in Step 2) created</title>
      
        <dc:creator>ezwebagency</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:23:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51257</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51257/1599337380461260</guid>
      <description>&lt;p&gt;
Server Status: 200 -success&lt;br /&gt;
Error Message: "Unsuspecting operation occurred during processing the page you requested.&lt;br /&gt;
Please see the details below for more information."&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
My web sized 700mb and I got error message in step 2 when I want to migrate to another domain. Can somebody help me?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51110 (Create a UI for user-level privacy / consent management options on the ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:18:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51110#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51110#comment:5/1599337125387742</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by carike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599337123052700"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51254 (includes/plugin.php remove_menu_page should check if $menu is array) closed</title>
      
        <dc:creator>kernelzechs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 20:02:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51254#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51254#comment:3/1599336123687056</guid>
      <description>wontfix: &lt;p&gt;
Reading through more, it seems like the usage of this function outside of admin_menu is ill-advised though recommended by some for certain reasons. However, I looked into gating this in an elegant way while still retaining functionality you all desire, but it would take some rearchitecting. We can leave this alone for now, but I recommend looking into something to resolve these weird behaviors with hooks in the future.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #47713 (image_get_intermediate_size does not return size if it equals original size) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 19:39:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47713#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47713#comment:15/1599334756894267</guid>
      <description>&lt;p&gt;
I tried with your image, renamed it test-2000x1200.jpg&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
                &lt;span class="nx"&gt;add_image_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'test-size'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DIR_TESTDATA&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/images/test-2000x1200.jpg'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nv"&gt;$id&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_make_attachment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;// Look for a size by name.
&lt;/span&gt;                &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image_get_intermediate_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test-size'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image_get_intermediate_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Here's my var_dump output&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;array(6) {
  ["file"]=&amp;gt;
  string(30) "test-2000x1200-1-2000x1200.jpg"
  ["width"]=&amp;gt;
  int(2000)
  ["height"]=&amp;gt;
  int(1200)
  ["mime-type"]=&amp;gt;
  string(10) "image/jpeg"
  ["path"]=&amp;gt;
  string(38) "2020/09/test-2000x1200-1-2000x1200.jpg"
  ["url"]=&amp;gt;
  string(76) "http://example.org/wp-content/uploads/2020/09/test-2000x1200-1-2000x1200.jpg"
}
array(6) {
  ["file"]=&amp;gt;
  string(30) "test-2000x1200-1-2000x1200.jpg"
  ["width"]=&amp;gt;
  int(2000)
  ["height"]=&amp;gt;
  int(1200)
  ["mime-type"]=&amp;gt;
  string(10) "image/jpeg"
  ["path"]=&amp;gt;
  string(38) "2020/09/test-2000x1200-1-2000x1200.jpg"
  ["url"]=&amp;gt;
  string(76) "http://example.org/wp-content/uploads/2020/09/test-2000x1200-1-2000x1200.jpg"
}
&lt;/pre&gt;&lt;p&gt;
What's wrong with my test please, I don't get it.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50244 (Add bulk operation support to the Rest API) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 19:27:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50244#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50244#comment:33/1599334077384027</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/518"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;PR #518&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/TimothyBJacobs"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;TimothyBJacobs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/50244"&gt;https://core.trac.wordpress.org/ticket/50244&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43933 (Make the Privacy Policy page intro text shorter and more friendly) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 19:13:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43933#comment:30</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43933#comment:30/1599333230015920</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by garrett-eclipse. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599333228029300"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50866 (Media Uploader Blows Up File Sizes) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:54:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50866#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50866#comment:2/1599332061900905</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi there, I have uploaded a patch. It changes the behaviour of &lt;code&gt;image_get_intermediate_size&lt;/code&gt; function to return the originale file info instead of the sub size if they share the exact same width and height.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I am not sure this need changes in other image functions. Please run some tests.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>50866.1.patch attached to Ticket #50866</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:52:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/50866/50866.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/50866/50866.1.patch/1599331939015125</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #48885 (REST API: Support reading public settings, implement context handling) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:38:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48885#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48885#comment:22/1599331132853297</guid>
      <description>&lt;p&gt;
Something to keep in mind with permission callbacks is that reading permission would be different than writing permission. And do we want to support a custom write permission callback? And if we do, do we need to update &lt;code&gt;options.php&lt;/code&gt; to use that capability instead of &lt;code&gt;manage_options&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #48885 (REST API: Support reading public settings, implement context handling) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:33:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48885#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48885#comment:21/1599330781188308</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@spacedmonkey expressed an interest in working on this for 5.6. I think our tentative plan is to add support for a &lt;code&gt;permission_callback&lt;/code&gt; and &lt;code&gt;prepare_callback&lt;/code&gt; to &lt;code&gt;register_setting&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43437 (Add way for registered users to request deletion or anonymization of ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:27:16 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43437#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43437#comment:33/1599330436260124</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by garrett-eclipse. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599330435009400"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47713 (image_get_intermediate_size does not return size if it equals original size) updated</title>
      
        <dc:creator>mahnunchik</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:18:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47713#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47713#comment:14/1599329934752913</guid>
      <description>&lt;p&gt;
@Mista-Flo I've tested on trunk, the same incorrect behaviour.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
According to your test it seems you are used image bigger than 500x500 for testing &lt;code&gt;images/test_500x500.png&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
WP doesn't generate additional file if size is equal to original image, so name of produced file should be &lt;code&gt;test_500x500.png&lt;/code&gt; &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;test_500x500-500x500.png&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please test on &lt;code&gt;jpg&lt;/code&gt; file with exactly the same dimensions as requested. For example this image &lt;a class="ext-link" href="https://user-images.githubusercontent.com/11629607/44900132-13e43f00-ad04-11e8-86f6-fe830e462abc.jpg"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://user-images.githubusercontent.com/11629607/44900132-13e43f00-ad04-11e8-86f6-fe830e462abc.jpg&lt;/a&gt; and 2000 x 1200 px dimensions.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50244 (Add bulk operation support to the Rest API) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:18:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50244#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50244#comment:32/1599329914632124</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/TimothyBJacobs"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;TimothyBJacobs&lt;/a&gt; commented on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/311#issuecomment-687644519"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;PR #311&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I royally screwed up this rebase. Closing this out.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) reopened</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:12:19 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:6/1599329539142267</guid>
      <description>&lt;p&gt;
Reopening for backporting to the 5.5 branch.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:10:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:5/1599329448823493</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48946" title="Media: In `wp_ajax_image_editor()`, check if the `error` property ..."&gt;48946&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Media: In &lt;code&gt;wp_ajax_image_editor()&lt;/code&gt;, check if the &lt;code&gt;error&lt;/code&gt; property exists before accessing it.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This avoids a PHP notice when editing an image.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48375" title="Accessibility: Media: Improve accessibility of the status and error ..."&gt;[48375]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props Mista-Flo.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51251" title="#51251: defect (bug): Fix PHP notice when opening the edit image popup (closed: fixed)"&gt;#51251&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [48946]: Media: In `wp_ajax_image_editor()`, check if the `error` property ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:10:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48946</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48946/1599329447655395</guid>
      <description>&lt;p&gt;
Media: In &lt;code&gt;wp_ajax_image_editor()&lt;/code&gt;, check if the &lt;code&gt;error&lt;/code&gt; property exists before accessing it.
&lt;/p&gt;
&lt;p&gt;
This avoids a PHP notice when editing an image.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48375" title="Accessibility: Media: Improve accessibility of the status and error ..."&gt;[48375]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props Mista-Flo.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51251" title="#51251: defect (bug): Fix PHP notice when opening the edit image popup (closed: fixed)"&gt;#51251&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Tickets #50244,â€‹51255 batch updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:07:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=50244%2C51255</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=50244%2C51255/1599329267446635</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48945" title="REST API: Support a route-level validation callback.
Most request ..."&gt;48945&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
REST API: Support a route-level validation callback.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Most request data is validated on a per-parameter basis. Often, however, additional validation is needed that operates on the entire request object. Currently, this is done in the route callback and often in the &lt;code&gt;prepare_item_for_database&lt;/code&gt; method specifically.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt; aims to introduce batch processing in the REST API. An important feature is the ability to enforce that all requests have valid data before executing the route callbacks in "pre-validate" mode.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This patch introduces support for calling a &lt;code&gt;validate_callback&lt;/code&gt; after all parameter validation has succeeded. That allows moving more validation outside of the route callback and into &lt;code&gt;WP_REST_Request&lt;/code&gt; which will improve "pre-validate" support.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props TimothyBlynJacobs, zieladam.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51255" title="#51255: enhancement: REST API: Support request level validation (closed: fixed)"&gt;#51255&lt;/a&gt;.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>batchmodify</category>
    </item><item>
      <title>Changeset [48945]: REST API: Support a route-level validation callback.  Most request ...</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:07:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48945</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48945/1599329266275323</guid>
      <description>&lt;p&gt;
REST API: Support a route-level validation callback.
&lt;/p&gt;
&lt;p&gt;
Most request data is validated on a per-parameter basis. Often, however, additional validation is needed that operates on the entire request object. Currently, this is done in the route callback and often in the &lt;code&gt;prepare_item_for_database&lt;/code&gt; method specifically.
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt; aims to introduce batch processing in the REST API. An important feature is the ability to enforce that all requests have valid data before executing the route callbacks in "pre-validate" mode.
&lt;/p&gt;
&lt;p&gt;
This patch introduces support for calling a &lt;code&gt;validate_callback&lt;/code&gt; after all parameter validation has succeeded. That allows moving more validation outside of the route callback and into &lt;code&gt;WP_REST_Request&lt;/code&gt; which will improve "pre-validate" support.
&lt;/p&gt;
&lt;p&gt;
Props TimothyBlynJacobs, zieladam.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51255" title="#51255: enhancement: REST API: Support request level validation (closed: fixed)"&gt;#51255&lt;/a&gt;.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 18:02:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:4/1599328938173729</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thank you Sergey, nice catch :)&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:51:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:3/1599328266171778</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Appears to be a regression in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48375" title="Accessibility: Media: Improve accessibility of the status and error ..."&gt;[48375]&lt;/a&gt; / &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/47147" title="#47147: defect (bug): Status message not exposed to assistive technologies (in the Image Editor) (closed: fixed)"&gt;#47147&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:48:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:2/1599328103276362</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Thanks for the report! I was able to reproduce the issue.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>36439.diff attached to Ticket #36439</title>
      
        <dc:creator>adriantirusli</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:35:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/36439/36439.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/36439/36439.diff/1599327337981361</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #36439 (Wrong language when resetting password) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:33:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/36439#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/36439#comment:5/1599327211649393</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/517"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;PR #517&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/adriantirusli"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;adriantirusli&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
In this update I changed the login URL to fix reset password email comes in wrong language.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/36439"&gt;#36439&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) created</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:30:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256/1599327032183707</guid>
      <description>&lt;p&gt;
Background: &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/49916" title="#49916: enhancement: Add id attributes to the plugin activate/deactivate buttons (closed: fixed)"&gt;#49916&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If you have two plugins with the same name, but in different directories, the corresponding checkboxes on Plugins screen have duplicate ID attributes:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;[DOM] Found 2 elements with non-unique id #checkbox_a55f1e83ab4fee1b42772d08e9971a9c: (More info: https://goo.gl/9p2vKq)
&amp;lt;input type="checkbox" name="checked[]" value="debug-bar/debug-bar.php" id="checkbox_a55f1e83ab4fee1b42772d08e9971a9c"&amp;gt;
&amp;lt;input type="checkbox" name="checked[]" value="debug-bar-old/debug-bar.php" id="checkbox_a55f1e83ab4fee1b42772d08e9971a9c"&amp;gt;
&lt;/pre&gt;&lt;p&gt;
Something like &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48374" title="Plugins: Make sure the HTML ID attributes in plugin action links are ..."&gt;[48374]&lt;/a&gt; should be implemented for these checkboxes too.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #47713 (image_get_intermediate_size does not return size if it equals original size) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:27:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47713#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47713#comment:13/1599326873591893</guid>
      <description>&lt;p&gt;
Hum that's weird, I have updated my last comment to show you what I tried. Can you test on last trunk version of the Core please to see if you still replicate the issue (with a default WordPress, no plugin please)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="reviewing ticket" href="http://core.trac.wordpress.org/ticket/47713" title="#47713: defect (bug): image_get_intermediate_size does not return size if it equals original size (reviewing)"&gt;mahnunchik&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Function &lt;code&gt;image_get_intermediate_size&lt;/code&gt; does not return size if it equal original size.&lt;br /&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;WordPress itself doesn't generate &lt;code&gt;sizes&lt;/code&gt; metadata item for size equal original image size.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;image_get_intermediate_size&lt;/code&gt; looks throught &lt;code&gt;sizes&lt;/code&gt; metadata and doesn't see necessary size.
&lt;/li&gt;&lt;li&gt;It doesn't check original image size.
&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;For me it does generate metadata size even if it's equal to original image size.
&lt;/li&gt;&lt;li&gt;It does not return false for me, but it returns the image size generated by WordPress instead of the original size.
&lt;/li&gt;&lt;/ol&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47713 (image_get_intermediate_size does not return size if it equals original size) updated</title>
      
        <dc:creator>mahnunchik</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:23:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47713#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47713#comment:12/1599326593421359</guid>
      <description>&lt;p&gt;
Hi @Mista-Flo &lt;br /&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Image with dimensions &lt;code&gt;100px&lt;/code&gt; x &lt;code&gt;200px&lt;/code&gt; has been uploaded to WP
&lt;/li&gt;&lt;li&gt;You call function &lt;code&gt;image_get_intermediate_size($id, array(100, 200))&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
&lt;strong&gt;Actual behaviour:&lt;/strong&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Returned &lt;code&gt;false&lt;/code&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Expected behaviour:&lt;/strong&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Returned image object with original &lt;code&gt;100px&lt;/code&gt; x &lt;code&gt;200px&lt;/code&gt; dimensions.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47713 (image_get_intermediate_size does not return size if it equals original size) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:10:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47713#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47713#comment:11/1599325838545907</guid>
      <description></description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51255 (REST API: Support request level validation) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:10:29 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51255#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51255#comment:1/1599325829860395</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/516"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;PR #516&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/TimothyBJacobs"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;TimothyBJacobs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/51255#ticket"&gt;https://core.trac.wordpress.org/ticket/51255#ticket&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47713 (image_get_intermediate_size does not return size if it equals original size) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:10:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47713#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47713#comment:10/1599325817927022</guid>
      <description>&lt;p&gt;
I am not sure to understand the issue here. Can you please add exact steps to reproduce, and screenshots with and without the patch applied? I am not sure I'm looking into the good scneario here.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
@mahnunchik &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Here's what I tried:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
                &lt;span class="nx"&gt;add_image_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'test-size'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DIR_TESTDATA&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/images/test_500x500.png'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nv"&gt;$id&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_make_attachment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;// Look for a size by name.
&lt;/span&gt;                &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image_get_intermediate_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test-size'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image_get_intermediate_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
It always output the same thing, with trunk version, with your first patch applied or with your second one.&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;array(6) {
  ["file"]=&amp;gt;
  string(24) "test_500x500-500x500.png"
  ["width"]=&amp;gt;
  int(500)
  ["height"]=&amp;gt;
  int(500)
  ["mime-type"]=&amp;gt;
  string(9) "image/png"
  ["path"]=&amp;gt;
  string(32) "2020/09/test_500x500-500x500.png"
  ["url"]=&amp;gt;
  string(70) "http://example.org/wp-content/uploads/2020/09/test_500x500-500x500.png"
}
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50414 (Privacy policy setting page bottom, it needs to remove colon instead of Or.) updated</title>
      
        <dc:creator>vinita29</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:09:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50414#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50414#comment:3/1599325783628701</guid>
      <description>&lt;p&gt;
Thanks @garrett-eclipse!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51253 (Fatal error when Updating.) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:08:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51253#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51253#comment:1/1599325719973981</guid>
      <description>invalid: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It looks like the error is caused by an incomplete upgrade. The function is defined in &lt;a class="source" href="http://core.trac.wordpress.org/browser/tags/5.5/src/wp-admin/includes/update.php#L1008"&gt;wp-admin/includes/update.php&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/export/HEAD/tags/5.5/src/wp-admin/includes/update.php#L1008" title="Download"&gt;â€‹&lt;/a&gt;. Reinstalling WordPress by copying all the files should fix the issue.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please try the support forums to get help with your site: &lt;a class="ext-link" href="https://wordpress.org/support/forums/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/forums/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #51252 (Problemas TÃ©cnicos) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:05:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51252#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51252#comment:1/1599325517798636</guid>
      <description>invalid: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please try the support forums to get help with your site: &lt;a class="ext-link" href="https://wordpress.org/support/forums/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/forums/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Feel free to reopen with the steps to reproduce on a clean install if it turns out to be an issue in WordPress core.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #51254 (includes/plugin.php remove_menu_page should check if $menu is array) reopened</title>
      
        <dc:creator>kernelzechs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 17:05:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51254#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51254#comment:2/1599325513053049</guid>
      <description>&lt;p&gt;
Thanks for getting back to me so quickly! &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
However we saw a case related to admin_init hook where on a normal admin page (front-end) works as defined here: &lt;a class="ext-link" href="https://developer.wordpress.org/reference/functions/remove_menu_page/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://developer.wordpress.org/reference/functions/remove_menu_page/&lt;/a&gt; (also recommended in the comments depending on how quickly you needed something removed, in our case early)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
However when admin-ajax.php would be called it would try and run the admin_init hook and thus would fail since the menu isn't loaded. At the very least some sort of context detection would be optimal here if not a fix for detecting the object type prior to running. We have worked around the issue code wise on our end, but I would rather see it handled gracefully. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51254#comment:1" title="Comment 1"&gt;SergeyBiryukov&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the report.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Just noting this was discussed a few times before, specifically in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767" title="#23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;#23767&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19937" title="#19937: defect (bug): 'remove_menu_page' causes a Warning when 'Edit Image' (closed: invalid)"&gt;#19937&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Adding an &lt;code&gt;is_array()&lt;/code&gt; or &lt;code&gt;! empty()&lt;/code&gt; check would remove the warning, but would also just hide the fact that calling the function the function too early or on an incorrect hook still doesn't work as expected.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767#comment:1" title="Comment 1 for #23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;comment:1:ticket:23767&lt;/a&gt; outlines a few scenarios where this warning can occur. All of them are developer errors, so the developer should see that something is wrong. Hiding the warning would just make debugging harder.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #51255 (REST API: Support request level validation) created</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:51:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51255</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51255/1599324660637189</guid>
      <description>&lt;p&gt;
Splitting this off from &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50244" title="#50244: feature request: Add bulk operation support to the Rest API (closed: fixed)"&gt;#50244&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
We could also support a validate_callback in the register_rest_route on the same level as callback and permission_callback that would take a WP_REST_Request object and do validation for it. This would be helpful for cases where validation has to be done with all the fields together as context, not just individual field validation. We'd do the parameter validation first, and then call validate_callback on the whole request.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51250 (Need add "open in new tab" feature in social share in Gutenberg) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:49:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51250#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51250#comment:1/1599324581007642</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:49:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:4/1599324561497046</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:47:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:14/1599324471216333</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48944" title="Tests: Replace a few more instances of `assertEquals()` with ..."&gt;48944&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Replace a few more instances of &lt;code&gt;assertEquals()&lt;/code&gt; with &lt;code&gt;assertSame()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
These were previously missed due to incorrect capitalization.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48937" title="Tests: First pass at using `assertSame()` instead of `assertEquals()` ..."&gt;[48937]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48939" title="Tests: Introduce `assertSameSets()` and `assertSameSetsWithIndex()`, ..."&gt;[48939]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48940" title="Tests: Replace a few more instances of `assertEquals()` with ..."&gt;[48940]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48944]: Tests: Replace a few more instances of `assertEquals()` with ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:47:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48944</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48944/1599324470066056</guid>
      <description>&lt;p&gt;
Tests: Replace a few more instances of &lt;code&gt;assertEquals()&lt;/code&gt; with &lt;code&gt;assertSame()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
These were previously missed due to incorrect capitalization.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48937" title="Tests: First pass at using `assertSame()` instead of `assertEquals()` ..."&gt;[48937]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48939" title="Tests: Introduce `assertSameSets()` and `assertSameSetsWithIndex()`, ..."&gt;[48939]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48940" title="Tests: Replace a few more instances of `assertEquals()` with ..."&gt;[48940]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Tickets #23767,â€‹51254 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:22:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=23767%2C51254</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=23767%2C51254/1599322948832562</guid>
      <description>duplicate: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the report.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Just noting this was discussed a few times before, specifically in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767" title="#23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;#23767&lt;/a&gt; and &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/19937" title="#19937: defect (bug): 'remove_menu_page' causes a Warning when 'Edit Image' (closed: invalid)"&gt;#19937&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Adding an &lt;code&gt;is_array()&lt;/code&gt; or &lt;code&gt;! empty()&lt;/code&gt; check would remove the warning, but would also just hide the fact that calling the function the function too early or on an incorrect hook still doesn't work as expected.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767#comment:1" title="Comment 1 for #23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;comment:1:ticket:23767&lt;/a&gt; outlines a few scenarios where this warning can occur. All of them are developer errors, so the developer should see that something is wrong. Hiding the warning would just make debugging harder.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Tickets #23767,â€‹42538 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:12:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=23767%2C42538</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=23767%2C42538/1599322352505216</guid>
      <description>&lt;i&gt;Component&lt;/i&gt;, &lt;i&gt;Resolution&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767" title="#23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;#23767&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Tickets #23767,â€‹43714 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:11:48 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=23767%2C43714</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=23767%2C43714/1599322308927373</guid>
      <description>&lt;i&gt;Resolution&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Duplicate of &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767" title="#23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;#23767&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:06:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:3/1599322010587470</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>51249.patch attached to Ticket #51249</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:06:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51249/51249.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51249/51249.patch/1599321982601205</guid>
      <description>&lt;p&gt;
Created patch.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #19937 ('remove_menu_page' causes a Warning when 'Edit Image') updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:05:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19937#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19937#comment:5/1599321934717741</guid>
      <description>&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/43714" title="#43714: defect (bug): remove_menu_page(): E_WARNING: Invalid argument supplied for foreach() (closed: duplicate)"&gt;#43714&lt;/a&gt; was marked as a duplicate.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #19937 ('remove_menu_page' causes a Warning when 'Edit Image') updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 16:05:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/19937#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/19937#comment:4/1599321917127642</guid>
      <description>&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/23767" title="#23767: enhancement: remove_menu_page: Check for existing menu items (closed: wontfix)"&gt;#23767&lt;/a&gt; was marked as a duplicate.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 15:43:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:32</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:32/1599320624622335</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right. This question was raised when the initial discussion happened, around two years ago if I'm not mistaken, and don't think there's been a clear answer yet.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As I understand it, the point is to create a superset of facts about how a plugin handles user data, makes external API requests and other privacy related info. That way, individual plugins can be created for different privacy laws. The Core part is more about standardizing a data format so that plugins, and perhaps Core, can implement functionality based on the laws of the region the site adheres to. As well as making sure that data is disclosed to the site owner in an easy to understand way.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This can really only work if the standard is in Core to give the best potential at plugin adoption.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The current system we have in place is freeform, and I don't think has proven to be very successful. Plugin authors aren't lawyers, but are practically being asked to write up "legal" privacy policy information that the site user then needs to figure out a way to cobble into a legal document of their own.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
By making the privacy data as fact based as possible, it reduces the burden on plugin authors who want to provide this information. It'd also allow for plugins or other tools to compile comprehensive privacy policies and other documents based on the structured information.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'm still thinking we're talking apples and oranges here :) &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Probably :) My comments are really only focussed on the technical side assuming this is the feature set we want to implement.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Where the data that needs validation comes from? Static file(s), one supplied by core and (eventually) a few supplied by plugins.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As you mentioned, Core is pretty simple. As I understand it, the main audience here is plugin developers. So eventually data can be displayed in the admin and on the WordPress.org plugin page.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
When should the validation happen? On every request of... what? Or once after a plugin is installed and then the result is saved in the DB? Or.... how is that going to work efficiently?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
For Core, it could be validated when the data needs to be accessed on the privacy page. For .org, I imagine it'd validate when zips are built.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What happens when the validation fails? The plugin supplying the data is... rejected (deleted, disabled, or... rejected how)?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think this is mainly for @carike. But I think the idea is just that the plugin would show as having an incomplete or invalid privacy disclosures. I don't think the idea currently is, and probably never would be, for Core to completely forbid plugins from operating unless they have complete disclosure data. I imagine there would probably be plugins that do implement something like that.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Does it make sense for such validation to be in core at all, or maybe better to be on accepting plugins to the plugins directory, or..?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think it is still necessary to have in Core to handle the plugins that don't live in the WordPress.org directory. Having a JSON Schema in Core also gives us versioning tied to WordPress releases. &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What happens then the schema needs to be changed? Re-validation?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If we do need to cache validation status, yeah we could re-validate that in a fairly straightforward way I think.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally (continuously) validating static, non-editable files in core seems... unwise?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Which files would that be? I don't think we'd need to do that for Core's privacy disclosures. Just plugins, and I don't think it'd need to be continuous. And if we need to implement caching, I don't think it'd be that complex.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
quite a bit of the data seems "sensitive", i.e. only admins should be able to see it. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In what way? As I understand it, the idea is that this data would be displayed publicly on WordPress.org.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So at best this should be a page under the Plugins and Themes menu items in wp-admin accessible only to site admins, or perhaps a "More Info" link for each plugin and theme.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think it would be guarded the same way we guard the Privacy Settings page already.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The point is: whether this should be available through REST API should be decided after the implementation details and UI are ready, not before.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
How is the REST API not a part of the implementation discussion? Ignoring the REST API until the last second and seeing it as merely a simple data transport mechanism is how we continuously get into trouble.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51254 (includes/plugin.php remove_menu_page should check if $menu is array) created</title>
      
        <dc:creator>kernelzechs</dc:creator>

      <pubDate>Sat, 05 Sep 2020 14:49:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51254</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51254/1599317384022444</guid>
      <description>&lt;p&gt;
Depending on when remove_menu_page is executed global $menu many not be populated (mind you this shouldn't happen when using the correct hooks, but should be handled regardless), as a result can lead to warnings in PHP. A check should be added here to prevent an issue. The original code and proposed solution are below:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Old Code:&lt;/strong&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;remove_menu_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu_slug&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu_slug&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nb"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
&lt;strong&gt;New Code:&lt;/strong&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;remove_menu_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu_slug&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Empty check not required, type check only should suffice.
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$menu&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu_slug&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 05 Sep 2020 14:29:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:15/1599316144355594</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51188#comment:14" title="Comment 14"&gt;carike&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I believe that the implemented Consent API proposal (&lt;a class="ext-link" href="https://wordpress.org/plugins/wp-consent-api/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/plugins/wp-consent-api/&lt;/a&gt;) makes use of consent cookies and not of session storage. I don't think that there has been a specific discussion about this. I'll add it to points for Office Hours.&lt;br /&gt;
My instinct would be that a single session may be too short for the reasoning below.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, a single session is too short, but on the other hand it doesn't add yet another cookie for which the user has to give consent. It is guaranteed to be removed from the user's browser after the visit to the particular web site ends. I.e. the consent cookie by itself can be treated as a "breach of user privacy".&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The results can be seen currently (on non-WP websites) where if the user doesn't consent, each time they navigate to a new page on the same website they are asked to consent, again and again. This is super annoying :)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If session storage was used instead, a "consent refusal" could be saved there and the site visitors won't be "bugged" with repeated consent requests. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Of course, this is just another implementation detail, nothing more.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
While there has pretty much been a strong consensus for quite some time now that a Consent API is necessary, we are still building consensus on what the implementation should look like.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. For an API to be actually useful, it should be able to handle most of the needed work, and expose few functions/methods/filters to plugins that may want to use it. This generally means the API should be able to store, retrieve, and change consent settings for all groups of users. In addition it should (probably) provide UI for setting and changing these settings. This is particularly difficult as it means the "consent options dialog" for site visitors has to be on the front-end of the website, and "work well" with all themes. Not sure if the current plugin does that (yet).&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The original implementation does not distinguish between registered users and website visitors.&lt;br /&gt;
A Slack discussion had this outcome on P2: &lt;a class="ext-link" href="https://make.wordpress.org/core/2020/08/22/request-for-input-consent-preferences-for-logged-in-users-consent-api/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://make.wordpress.org/core/2020/08/22/request-for-input-consent-preferences-for-logged-in-users-consent-api/&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This is why I believe that tickets like this one are necessary.&lt;br /&gt;
We have some very specific design questions that we need to answer.&lt;br /&gt;
...&lt;br /&gt;
So far, the conclusion of the various discussions have been that logged in users should be treated differently logged out users, because if you are a person who regularly deletes your cookies, seeing a pop-up banner every time you visit a site even though you are logged in isn't the best user-experience and contributes to notice-fatigue.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That's another good point. Thinking that there is a pretty big difference between logged-in users and site visitors. For starters the "consent options dialog" for visitors has to be on the front-end, and save the data in the visitor's browser. Implementation-wise it can either be fully js based or an iframe.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For logged-in users the consent options would probably be more granular or extended as a lot more "happens" in wp-admin, and the options should be saved in user_meta in the DB. That will make them accessible every time and from every device, different browsers, phones, etc. Best place for them would be the User Profile screen. That screen can easily be extended to include everything necessary and "feel" an integral part of WP.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
However, registered users should be re-prompted for consent if there are changes to the consent that is being asked for (and a hook makes sense so that plugins can prompt again if they would like this to happen at any particular point).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. The current UI way of doing that is by showing a "bubble" on the top menu item. Can eventually also show a notice, but lets leave that for the designers.&lt;br /&gt;
 &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
While there have been answers to some of these questions, based on past experience, I expect that the last 3 will only receive significant input once there is a proposed implementation.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This ticket also asks design questions. In particular the following:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;1. Should plugins be able to add extra consent types?
2. If plugins should be able to add additional consent types,
should these be "top-level" consent types, or should they be nested,
or should they be both?
&lt;/pre&gt;&lt;p&gt;
Paapst's comment above shows that there are different opinions about this in the Privacy Team.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
There are many of these types of implementation questions and the only way that they have gotten resolved thus far is by creating simple examples of what the implementation might look like.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Perhaps it may be good to gather a number of examples of how (site visitor) consent options are handled on other sites. Currently this is generally something that is being shown only to visitors from the EU, so the people collecting that data will have to be based there.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Would be really good to "investigate" how other popular website building software handles this.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
While I hear your argument and respect your view that all of these issues should be handled under &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/51110" title="#51110: enhancement: Create a UI for user-level privacy / consent management options on the ... (assigned)"&gt;#51110&lt;/a&gt;, history has shown that doesn't work. Because as soon as we try to discuss too many implementation questions in a single go, the discussion devolves into something no one can follow and we scare off the multi-disciplinary contributors we need in order to get this done.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The idea was to "gather" all the requirements there, and then see what's technologically possible and what implementation makes sense. Then "hand off" to the designers for the actual UI.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I agree, it is quite a bit of work to try to translate the legal requirements into "actionable items", but this is (perhaps) the most important step in implementing this feature. Perhaps we can reach out for some help :)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For example, if the consent options have to comply only with GDPR, the requirements can be taken from &lt;a class="ext-link" href="https://gdpr.eu/gdpr-consent-requirements/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://gdpr.eu/gdpr-consent-requirements/&lt;/a&gt;. (Note that this site is build with WP. If we implement the consent options dialog on the front-end, it will (probably) be shown there too.) :) &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
No. The Consent API would apply to someone who runs a blog and who wants to place any personalized ad as well, even if they do not allow account-creation on their site.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. What I meant was that handling of consent options for site visitors would (likely) be quite different from logged-in users. One would likely be js, the other php, etc.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
We already have one iteration for the Consent API.&lt;br /&gt;
...&lt;br /&gt;
Rogier and others have wanted to move the code over to the WordPress repository, but that has not happened yet, so the fact that it lives in a private repo is also a challenge.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I can help there, but thinking the current implementation is not quite ready yet. The API should be able to do most of the work, have UI, etc. Of course, this will be added after the above questions are cleared/decided.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Removing the "close" keyword as there is quite a bit of discussion here, but still thinking this ticket is a "follow-up" and can be decided only after the implementation requirements are set.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51253 (Fatal error when Updating.) created</title>
      
        <dc:creator>m6097</dc:creator>

      <pubDate>Sat, 05 Sep 2020 14:15:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51253</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51253/1599315330203784</guid>
      <description>&lt;p&gt;
Hi&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
when I tried to update to 5.5.1, I got the following &lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;Fatal error: Uncaught Error: Call to undefined function wp_is_auto_update_enabled_for_type() in /var/www/html/wp/wp-admin/plugins.php:570 Stack trace: #0 {main} thrown in /var/www/html/wp/wp-admin/plugins.php on line 570
&lt;/pre&gt;&lt;p&gt;
I got a way out by commenting out the following lines from wp-admin/update-core.php&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="x"&gt;/*
if ( ( current_user_can( 'update_themes' ) &amp;amp;&amp;amp; wp_is_auto_update_enabled_for_type( 'theme' ) ) || ( current_user_can( 'update_plugins' ) &amp;amp;&amp;amp; wp_is_auto_update_enabled_for_type( 'plugin' ) ) ) {
        $help_tab_autoupdates  = '&amp;lt;p&amp;gt;' . __( 'Auto-updates can be enabled or disabled for each individual theme or plugin. Themes or plugins with auto-updates enabled will display the estimated date of the next auto-update. Auto-updates depends on the WP-Cron task scheduling system.' ) . '&amp;lt;/p&amp;gt;';
        $help_tab_autoupdates .= '&amp;lt;p&amp;gt;' . __( 'Please note: Third-party themes and plugins, or custom code, may override WordPress scheduling.' ) . '&amp;lt;/p&amp;gt;';
        get_current_screen()-&amp;gt;add_help_tab(
                array(
                        'id'      =&amp;gt; 'plugins-themes-auto-updates',
                        'title'   =&amp;gt; __( 'Auto-updates' ),
                        'content' =&amp;gt; $help_tab_autoupdates,
                )
        );
        $help_sidebar_autoupdates = '&amp;lt;p&amp;gt;' . __( '&amp;lt;a href="https://wordpress.org/support/article/plugins-themes-auto-updates/"&amp;gt;Learn more: Auto-updates documentation&amp;lt;/a&amp;gt;' ) . '&amp;lt;/p&amp;gt;';
}
*/
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>118825082_327227461809842_8218443146667009450_n.png attached to Ticket #51252</title>
      
        <dc:creator>mulheresintensas</dc:creator>

      <pubDate>Sat, 05 Sep 2020 13:47:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51252/118825082_327227461809842_8218443146667009450_n.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51252/118825082_327227461809842_8218443146667009450_n.png/1599313632884872</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51252 (Problemas TÃ©cnicos) created</title>
      
        <dc:creator>mulheresintensas</dc:creator>

      <pubDate>Sat, 05 Sep 2020 13:46:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51252</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51252/1599313569320250</guid>
      <description>&lt;p&gt;
Estou tendo problemas no wordpress, quando tento fazer uma aÃ§Ã£o( reinstalar nova versÃ£o, desativar,Plugin, entre outros..) abre outra janela com a seguinte mensagem (a ligaÃ§Ã£o que segue jÃ¡ expirou). Como faÃ§o para resolver isso? imagem do Erro abaixo&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://scontent.fssa7-1.fna.fbcdn.net/v/t1.15752-9/118825082_327227461809842_8218443146667009450_n.png?_nc_cat=105&amp;amp;_nc_sid=b96e70&amp;amp;_nc_eui2=AeFguVo7Rz05YvRzzVxrA5Li4aPXMQqXW0Pho9cxCpdbQ6c6Ts383J7hqQ_V1iOQVFC5LTbN2v4XzVbqFVcN0g3-&amp;amp;_nc_ohc=fjpNxEszqscAX-pPbEL&amp;amp;_nc_ht=scontent.fssa7-1.fna&amp;amp;oh=1936276d65de93f9ecf09803a343537a&amp;amp;oe=5F781524"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://scontent.fssa7-1.fna.fbcdn.net/v/t1.15752-9/118825082_327227461809842_8218443146667009450_n.png?_nc_cat=105&amp;amp;_nc_sid=b96e70&amp;amp;_nc_eui2=AeFguVo7Rz05YvRzzVxrA5Li4aPXMQqXW0Pho9cxCpdbQ6c6Ts383J7hqQ_V1iOQVFC5LTbN2v4XzVbqFVcN0g3-&amp;amp;_nc_ohc=fjpNxEszqscAX-pPbEL&amp;amp;_nc_ht=scontent.fssa7-1.fna&amp;amp;oh=1936276d65de93f9ecf09803a343537a&amp;amp;oe=5F781524&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51235 (Insert Media from URL: blank screen) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 12:39:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51235#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51235#comment:3/1599309571655947</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I am not able to reproduce the issue in any of my websites, nor on current trunk in local.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Can you please provide some screenshots or steps to reproduce? Have you tried to deactivate all your plugins? Or with a default theme.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 12:34:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:1/1599309264281425</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Can you please try to reproduce the issue? Just to be sure it's not something related to me, but when looking at the code, it seems better to check that errors property exist in error object, otherwise it can throw an error anyway.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Screenshot 2020-09-05 at 14.26.04.png attached to Ticket #51251</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 12:29:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51251/Screenshot%202020-09-05%20at%2014.26.04.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51251/Screenshot%202020-09-05%20at%2014.26.04.png/1599308992846224</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>51251.1.patch attached to Ticket #51251</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 12:25:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51251/51251.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51251/51251.1.patch/1599308707418551</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) created</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 12:24:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251/1599308655861285</guid>
      <description>&lt;p&gt;
Hi there, I noticed a PHP notice on the last trunk version while playing with the media library.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Steps to reproduce:&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Activate Query Monitor plugin
&lt;/li&gt;&lt;li&gt;Open your web console
&lt;/li&gt;&lt;li&gt;Go to upload.php page on the backend
&lt;/li&gt;&lt;li&gt;Select grid mode
&lt;/li&gt;&lt;li&gt;Click on an attachment image
&lt;/li&gt;&lt;li&gt;Click on 'Edit image' button
&lt;/li&gt;&lt;li&gt;An edit image popup loads, and you should see a PHP notice saying that $msg-&amp;gt;error is undefined
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #45886 (Media modal .edit-attachment link opens in new tab rather than in modal) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sat, 05 Sep 2020 12:12:37 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/45886#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/45886#comment:7/1599307957010888</guid>
      <description>&lt;p&gt;
Hum, I'm not sure to understand the issue here.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm currently running the last version on trunk. I am on Media Library grid, I click on a image to open the popup modal, I click on Edit image button and it loads the edit image modal properly. If I click on Edit more details link, I am redirected to the attachment edit page which seems normal.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Then, in edit post page, if I add a media through the popup or the featured image, I can click on Edit image link and it loads the popup properly, I am not redirected anywhere. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Did I miss some steps to reproduce?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Sat, 05 Sep 2020 11:57:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:2/1599307075344616</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Type&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi there!&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Yes there is alignment issue in fields and it is bug.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sat, 05 Sep 2020 11:43:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:31</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:31/1599306192465663</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51092#comment:30" title="Comment 30"&gt;TimothyBlynJacobs&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I'll leave that for the privacy team. My point about using JSON schema is it provides us a good way to validate that if we do want structured data, which I think is the privacy team's goal.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. This question was raised when the initial discussion happened, around two years ago if I'm not mistaken, and don't think there's been a clear answer yet.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Why should it not be? If it is made available over the REST API, it is easier for other consumers to access that data. It'd also make it easier for a React powered front-end. It being available over the REST API also doesn't preclude it from being accessed in different ways as well.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm still thinking we're talking apples and oranges here :) &lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Where the data that needs validation comes from? Static file(s), one supplied by core and (eventually) a few supplied by plugins.
&lt;/li&gt;&lt;li&gt;When should the validation happen? On every request of... what? Or once after a plugin is installed and then the result is saved in the DB? Or.... how is that going to work efficiently?
&lt;/li&gt;&lt;li&gt;What happens when the validation fails? The plugin supplying the data is... rejected (deleted, disabled, or... rejected how)?
&lt;/li&gt;&lt;li&gt;Does it make sense for such validation to be in core at all, or maybe better to be on accepting plugins to the plugins directory, or..?
&lt;/li&gt;&lt;li&gt;What happens then the schema needs to be changed? Re-validation?
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Generally (continuously) validating static, non-editable files in core seems... unwise?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Also, looking through the code examples in the ticket description, quite a bit of the data seems "sensitive", i.e. only admins should be able to see it. So at best this should be a page under the Plugins and Themes menu items in wp-admin accessible only to site admins, or perhaps a "More Info" link for each plugin and theme. For security reasons this data (as proposed above) should never be freely accessible. The point is: whether this should be available through REST API should be decided after the implementation details and UI are ready, not before.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>50781.patch attached to Ticket #50781</title>
      
        <dc:creator>sumanm</dc:creator>

      <pubDate>Sat, 05 Sep 2020 11:38:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/50781/50781.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/50781/50781.patch/1599305910681875</guid>
      <description>&lt;p&gt;
In addition to 404 page instead of 500 error, it also adds nocache headers and noindex for robots
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>50781_1.patch attached to Ticket #50781</title>
      
        <dc:creator>sumanm</dc:creator>

      <pubDate>Sat, 05 Sep 2020 11:30:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/50781/50781_1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/50781/50781_1.patch/1599305414987698</guid>
      <description>&lt;p&gt;
This patch sets 404 page instead of 500 error for non existing changeset UUID if unauthenticated user
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51250 (Need add "open in new tab" feature in social share in Gutenberg) created</title>
      
        <dc:creator>rkradadiya</dc:creator>

      <pubDate>Sat, 05 Sep 2020 10:18:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51250</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51250/1599301125852255</guid>
      <description>&lt;p&gt;
I have noticed in the social share widget there is no option for the "open in new tab" feature.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>rkradadiya</dc:creator>

      <pubDate>Sat, 05 Sep 2020 09:44:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:1/1599299099347718</guid>
      <description>&lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>2020-09-05_15h11_20.png attached to Ticket #51249</title>
      
        <dc:creator>rkradadiya</dc:creator>

      <pubDate>Sat, 05 Sep 2020 09:44:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51249/2020-09-05_15h11_20.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51249/2020-09-05_15h11_20.png/1599299047981098</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) created</title>
      
        <dc:creator>rkradadiya</dc:creator>

      <pubDate>Sat, 05 Sep 2020 09:43:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249/1599299034555507</guid>
      <description>&lt;p&gt;
I have found a design issue in Schedule your customization changes to publish. &lt;br /&gt;
Need improvement for design under the customize input box of Schedule.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Sat, 05 Sep 2020 09:20:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:14/1599297623992658</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51188#comment:13" title="Comment 13"&gt;azaozz&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51188#comment:12" title="Comment 12"&gt;carike&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51188#comment:11" title="Comment 11"&gt;azaozz&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right, exactly (just wanted to make this 100% clear). For non-logged-in users the preferences should probably be saved in "session storage" which is transient by default. It's deleted as soon as the "session" (current browser tab) is closed.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The Consent API feature plugin proposal is here: &lt;a class="ext-link" href="https://make.wordpress.org/core/2020/04/01/feature-plugin-proposal-wp-consent-api/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://make.wordpress.org/core/2020/04/01/feature-plugin-proposal-wp-consent-api/&lt;/a&gt;&lt;br /&gt;
It is included on the wishlist to merge in 5.6. here: &lt;a class="ext-link" href="https://make.wordpress.org/core/2020/07/31/wordpress-5-6-whats-on-your-wishlist/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://make.wordpress.org/core/2020/07/31/wordpress-5-6-whats-on-your-wishlist/&lt;/a&gt;&lt;br /&gt;
There have also been a number of Slack discussions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I believe that the implemented Consent API proposal (&lt;a class="ext-link" href="https://wordpress.org/plugins/wp-consent-api/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/plugins/wp-consent-api/&lt;/a&gt;) makes use of consent cookies and not of session storage. I don't think that there has been a specific discussion about this. I'll add it to points for Office Hours.&lt;br /&gt;
My instinct would be that a single session may be too short for the reasoning below.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
While there has pretty much been a strong consensus for quite some time now that a Consent API is necessary, we are still building consensus on what the implementation should look like.&lt;br /&gt;
The original implementation does not distinguish between registered users and website visitors.&lt;br /&gt;
A Slack discussion had this outcome on P2: &lt;a class="ext-link" href="https://make.wordpress.org/core/2020/08/22/request-for-input-consent-preferences-for-logged-in-users-consent-api/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://make.wordpress.org/core/2020/08/22/request-for-input-consent-preferences-for-logged-in-users-consent-api/&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This is why I believe that tickets like this one are necessary.&lt;br /&gt;
We have some very specific design questions that we need to answer.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The following questions were listed on the P2:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="nx"&gt;Should&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;preferences&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;registered&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applicable&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;logged&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;saved&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;they&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;saved&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;preferences&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;saved&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;displayed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;choice&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;transient&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;effectively&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;revert&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt;
&lt;span class="nx"&gt;every&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;cleared&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;they&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;saved&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;REST&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;expose&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;logged&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="err"&gt;â€™&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;preference&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt; &lt;span class="nb"&gt;end&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;REST&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;REST&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;register_meta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="nx"&gt;Should&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;preference&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;exposed&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt; &lt;span class="nb"&gt;end&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt; &lt;span class="nx"&gt;being&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;provides&lt;/span&gt; &lt;span class="nx"&gt;nicer&lt;/span&gt; &lt;span class="nx"&gt;abstraction&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;makes&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;easier&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;move&lt;/span&gt; &lt;span class="nx"&gt;towards&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;oriented&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;rather&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;orientated&lt;/span&gt; &lt;span class="nx"&gt;programming&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;adds&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;few&lt;/span&gt; &lt;span class="nx"&gt;KB&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;end&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;preference&lt;/span&gt; &lt;span class="nx"&gt;still&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;exposed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt; &lt;span class="nb"&gt;end&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
So far, the conclusion of the various discussions have been that logged in users should be treated differently logged out users, because if you are a person who regularly deletes your cookies, seeing a pop-up banner every time you visit a site even though you are logged in isn't the best user-experience and contributes to notice-fatigue.&lt;br /&gt;
However, registered users should be re-prompted for consent if there are changes to the consent that is being asked for (and a hook makes sense so that plugins can prompt again if they would like this to happen at any particular point).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
While there have been answers to some of these questions, based on past experience, I expect that the last 3 will only receive significant input once there is a proposed implementation.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This ticket also asks design questions. In particular the following:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="nx"&gt;Should&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;able&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;extra&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;able&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;additional&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="s2"&gt;"top-level"&lt;/span&gt; &lt;span class="nx"&gt;consent&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;they&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;they&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;both&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
Paapst's comment above shows that there are different opinions about this in the Privacy Team.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
There are many of these types of implementation questions and the only way that they have gotten resolved thus far is by creating simple examples of what the implementation might look like.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
While I hear your argument and respect your view that all of these issues should be handled under &lt;a class="assigned ticket" href="http://core.trac.wordpress.org/ticket/51110" title="#51110: enhancement: Create a UI for user-level privacy / consent management options on the ... (assigned)"&gt;#51110&lt;/a&gt;, history has shown that doesn't work. Because as soon as we try to discuss too many implementation questions in a single go, the discussion devolves into something no one can follow and we scare off the multi-disciplinary contributors we need in order to get this done.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
(it will most likely be a "map" or associative array of some sort)&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
An associative array in user_meta would be awesome :)&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Cookies aren't really "transient", can last up to 10 years...&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yes, this is something I could have described better.&lt;br /&gt;
What we mean is that cookies are not a reliable way to store information that you would like to be available for a long(er) period of time, because people can and do clear them.&lt;br /&gt;
This is an inherent limitation for logged out users, but cookie banner fatigue does not &lt;strong&gt;have&lt;/strong&gt; to be the fate of logged in users.&lt;br /&gt;
 &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
&lt;strong&gt;However&lt;/strong&gt;, registered users should be able to set their consent preferences for when they are logged out in the same /wp-admin/ UI that they are able to set their consent preferences for while they are logged in.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This is why they constitute a third group - because something "extra" is needed for their UI.&lt;br /&gt;
The distinction is simply a matter of convenience.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Not sure if that's technically possible. There is no way to "recognize" the users when they are logged out (the WP logged-in cookies are deleted).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
In addition, if any consent settings are stored in the DB, there must be a way to change them on every visit to the site. In WP that would probably be on the User Profile screen. When a user is logged-out their profile is not reachable, so they will not be able to withdraw their consent, etc.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I did not mean to suggest that registered users should be able to manage their consent preferences without logging in - only that they should be able to see on their profile screen what their consent preferences will be after they log out (based on the current value of their consent cookie - and that they should be able to update these cookie values while still logged in).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I should add here that the Consent API stores consent values separately to the WP logged-in cookie specifically because they should not be destroyed to regularly.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Users who are logged in to your membership site (for example, this applies to any site, including e-commerce) still need to be asked for their consent to track them, for statistical or marketing purposes.&lt;br /&gt;
e-Commerce stores should, as a matter of best practice, ask their users to accept their product terms, but that does not affect the fact that the above still applies.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. So the Consent API would only apply to sites that offer some form of "memberships" and web stores.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No. The Consent API would apply to someone who runs a blog and who wants to place any personalized ad as well, even if they do not allow account-creation on their site.&lt;br /&gt;
It would even apply to someone who does content marketing and want to do tracking to tailor their content, even if they don't allow any third party advertising on their site.&lt;br /&gt;
The only difference is that all their traffic would be treated as visitors and people won't be able to manage their consent choices in their profile, but would instead have to rely solely on a cookie banner.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right, one way would be for plugins to "trigger" consent settings for a particular case. Another would be for core to ask for "general consent" for most common cases (whether or not it is currently needed) and plugins can check if consent was given. But that's a question of the implementation design, it will be figured out.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We already have one iteration for the Consent API.&lt;br /&gt;
Rogier has added the wp_setcookie() function (and a doing_it_wrong if the cookie info has not been added by the plugin looking to conditionally set the cookie) to it based on our feedback in the channel, but at this point we need to evaluate the iteration and iterate again.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I should also note that the code lives on GitHub, but because the team has a lot of contributors who are not coders, that is a barrier to multi-disciplinary participation.&lt;br /&gt;
Rogier and others have wanted to move the code over to the WordPress repository, but that has not happened yet, so the fact that it lives in a private repo is also a challenge.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49779 (Add a filter that controls the size of the images on the Attachment pages) updated</title>
      
        <dc:creator>pikamander2</dc:creator>

      <pubDate>Sat, 05 Sep 2020 07:47:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49779#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49779#comment:3/1599292046759261</guid>
      <description>&lt;p&gt;
@SergeyBiryukov - Would it be possible to get this filter added in the next major release?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>peterwilsoncc</dc:creator>

      <pubDate>Sat, 05 Sep 2020 04:22:36 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:19/1599279756847021</guid>
      <description>&lt;p&gt;
Further notes on what needs to be added for this to be ready&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Shortly after &lt;code&gt;deleted_term_relationships&lt;/code&gt; and &lt;code&gt;added_term_relationship&lt;/code&gt; fire, calls to &lt;code&gt;wp_update_term_count()&lt;/code&gt; need to be removed/modified as the proposed patch doesn't defer term counting like the original plugin.
&lt;/li&gt;&lt;li&gt;Including a term count on &lt;code&gt;edit_term&lt;/code&gt; adds a new location in which terms are counted and doesn't seem like it's needed
&lt;/li&gt;&lt;li&gt;&lt;code&gt;countable_status&lt;/code&gt; is new, very useful but unrelated to this feature. It's probably best left for another ticket.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I'm leaving my PR as is at moment (in some need of change) so I can get some others' feedback on it before updating. As many eyes as possible would be dandy, thanks.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #32101 (Ability to mark plugin as unmanaged) updated</title>
      
        <dc:creator>dougwollison</dc:creator>

      <pubDate>Sat, 05 Sep 2020 03:28:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/32101#comment:77</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/32101#comment:77/1599276537394750</guid>
      <description>&lt;p&gt;
+1 for a "Private" header on plugins and themes, at least as a basic solution until a more versatile one like others have suggested can be properly implemented.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I recently had a scare where a custom theme on a client's site was flagged for an update because at some point in the past 8 years a theme with the same name was published to the public repo. Thankfully the client almost never bothers performing plugin/theme/core updates.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
As a precaution, I ended up going through every site I ever built in the past 8 years (and still had access to) and change the version number on each custom theme/plugin to the project's date, in order to minimize the chance of that happening in the future. The operative word here is &lt;em&gt;minimize&lt;/em&gt;, as at least one plugin (GA Google Analytics) uses the full date &lt;em&gt;without periods&lt;/em&gt; as the version number (e.g. 20200815). At this point, I wouldn't be surpised if someone gets the idea to use unix timestamps as their version numbers.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>peterwilsoncc</dc:creator>

      <pubDate>Sat, 05 Sep 2020 02:05:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:18/1599271522615071</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I've started a pull request based on &lt;a class="attachment" href="http://core.trac.wordpress.org/attachment/ticket/40351/40351.4.patch" title="Attachment '40351.4.patch' in Ticket #40351"&gt;40351.4.patch&lt;/a&gt;&lt;a class="trac-rawlink" href="http://core.trac.wordpress.org/raw-attachment/ticket/40351/40351.4.patch" title="Download"&gt;â€‹&lt;/a&gt; so the existing tests begin running on the screen.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It's still a WIP but so far I have made a few minor changes:&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Documented &lt;code&gt;countable_status&lt;/code&gt; filter, I suspect it will need a rename to the plural
&lt;/li&gt;&lt;li&gt;Some tidy up for coding standards
&lt;/li&gt;&lt;li&gt;Modified &lt;code&gt;maybe_recount_posts_for_term()&lt;/code&gt; to allow for developers deferring post counts by switching to &lt;code&gt;wp_update_term_count()&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;There were a few errors in the patch that I am slowly tidying up and the unit tests alert me to them, as best I can tell mostly type casting that needs fixing up
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sat, 05 Sep 2020 01:41:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:17/1599270060305932</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/515"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;PR #515&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/peterwilsoncc"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;peterwilsoncc&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/40351"&gt;https://core.trac.wordpress.org/ticket/40351&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51248 (Rename WP_Comments_List_Table::comment_status_dropdown() to ...) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 00:31:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51248#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51248#comment:5/1599265864961920</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48943" title="Comments: Rename `WP_Comments_List_Table::comment_status_dropdown()` ..."&gt;48943&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Comments: Rename &lt;code&gt;WP_Comments_List_Table::comment_status_dropdown()&lt;/code&gt; to &lt;code&gt;::comment_type_dropdown()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This better reflects the purpose of the method, which doesn't have anything to do with a comment status.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48521" title="Comments: Don't show the filter/pagination actions if there are no ..."&gt;[48521]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props davidbaumwald, johnbillion, SergeyBiryukov.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51248" title="#51248: defect (bug): Rename WP_Comments_List_Table::comment_status_dropdown() to ... (closed: fixed)"&gt;#51248&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [48943]: Comments: Rename `WP_Comments_List_Table::comment_status_dropdown()` ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 00:31:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48943</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48943/1599265863211397</guid>
      <description>&lt;p&gt;
Comments: Rename &lt;code&gt;WP_Comments_List_Table::comment_status_dropdown()&lt;/code&gt; to &lt;code&gt;::comment_type_dropdown()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This better reflects the purpose of the method, which doesn't have anything to do with a comment status.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48521" title="Comments: Don't show the filter/pagination actions if there are no ..."&gt;[48521]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props davidbaumwald, johnbillion, SergeyBiryukov.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51248" title="#51248: defect (bug): Rename WP_Comments_List_Table::comment_status_dropdown() to ... (closed: fixed)"&gt;#51248&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #51248 (Rename WP_Comments_List_Table::comment_status_dropdown() to ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 00:29:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51248#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51248#comment:4/1599265796396873</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51246 (single_post_title() doesn't respect private and protected posts) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 00:03:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51246#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51246#comment:1/1599264206041924</guid>
      <description>&lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51243 ([JS] Exception when setting or trying to upload a featured image in a post) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 00:01:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51243#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51243#comment:2/1599264112688550</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51242 (I can face irrelevant links on google search console.) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sat, 05 Sep 2020 00:00:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51242#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51242#comment:1/1599264046294818</guid>
      <description>invalid: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please try the support forums to get help with your site: &lt;a class="ext-link" href="https://wordpress.org/support/forums/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;https://wordpress.org/support/forums/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item>
   </channel>
</rss>