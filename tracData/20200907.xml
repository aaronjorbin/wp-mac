<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #51263 (PHP warning when editing comments in the administration comment edit screen) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 21:52:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51263#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51263#comment:1/1599515553723872</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Component&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the report.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Just noting that I could not reproduce the issue on a clean install.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
What does the URL look like when you're editing a comment? It should look like this:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;/wp-admin/comment.php?action=editcomment&amp;amp;c=123
&lt;/pre&gt;&lt;p&gt;
where &lt;code&gt;123&lt;/code&gt; is the ID of the comment being edited.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51262 (Provide option to disable emails about auto-updates or remove sending ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 21:44:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51262#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51262#comment:3/1599515060233905</guid>
      <description>&lt;i&gt;Description&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50902 (Build/CI: fix running of the unit tests on PHP 8/nightly) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 19:21:27 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50902#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50902#comment:11/1599506487689581</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48957" title="Build/Test Tools: Allow unit tests to run on PHP 8 in full.
PHP 8 ..."&gt;48957&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Build/Test Tools: Allow unit tests to run on PHP 8 in full.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
PHP 8 introduces a new control structure called &lt;code&gt;match&lt;/code&gt;, which makes &lt;code&gt;match&lt;/code&gt; a reserved keyword in PHP 8.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
One of the PHPUnit dependencies declares a class named &lt;code&gt;Match&lt;/code&gt;, which triggered a fatal error before PHPUnit could even start.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
To be able to use PHPUnit 7.x on PHP 8 and run the tests, core needs a new version of that dependency, which is now installed using Composer.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This is the simplest way to get things working again and start addressing the individual test failures.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Additionally, various test runs on PHP 8 on Travis are now performed individually instead of being chained, so that failures outside of WP scope don't block further execution.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props jrf, jorbin, pento.&lt;br /&gt;
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50902" title="#50902: task (blessed): Build/CI: fix running of the unit tests on PHP 8/nightly (closed: fixed)"&gt;#50902&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48957]: Build/Test Tools: Allow unit tests to run on PHP 8 in full.  PHP 8 ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 19:21:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48957</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48957/1599506486562175</guid>
      <description>&lt;p&gt;
Build/Test Tools: Allow unit tests to run on PHP 8 in full.
&lt;/p&gt;
&lt;p&gt;
PHP 8 introduces a new control structure called &lt;code&gt;match&lt;/code&gt;, which makes &lt;code&gt;match&lt;/code&gt; a reserved keyword in PHP 8.
&lt;/p&gt;
&lt;p&gt;
One of the PHPUnit dependencies declares a class named &lt;code&gt;Match&lt;/code&gt;, which triggered a fatal error before PHPUnit could even start.
&lt;/p&gt;
&lt;p&gt;
To be able to use PHPUnit 7.x on PHP 8 and run the tests, core needs a new version of that dependency, which is now installed using Composer.
&lt;/p&gt;
&lt;p&gt;
This is the simplest way to get things working again and start addressing the individual test failures.
&lt;/p&gt;
&lt;p&gt;
Additionally, various test runs on PHP 8 on Travis are now performed individually instead of being chained, so that failures outside of WP scope don't block further execution.
&lt;/p&gt;
&lt;p&gt;
Props jrf, jorbin, pento.
See &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50902" title="#50902: task (blessed): Build/CI: fix running of the unit tests on PHP 8/nightly (closed: fixed)"&gt;#50902&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #51262 (Provide option to disable emails about auto-updates or remove sending ...) updated</title>
      
        <dc:creator>audrasjb</dc:creator>

      <pubDate>Mon, 07 Sep 2020 19:14:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51262#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51262#comment:2/1599506063150761</guid>
      <description>&lt;i&gt;Version&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51262 (Provide option to disable emails about auto-updates or remove sending ...) updated</title>
      
        <dc:creator>audrasjb</dc:creator>

      <pubDate>Mon, 07 Sep 2020 19:13:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51262#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51262#comment:1/1599506026900277</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hi, welcome to WordPress Trac and thank you for opening this ticket,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
While there is no plan to add any admin option for this for now, let's discuss this ticket during our next core-auto-updates meeting. For your information, the current plan for WP 5.6 would probably rather be to work on less notifications (only failures, for example).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thanks again for opening this ticket,&lt;br /&gt;
Jb&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51263 (PHP warning when editing comments in the administration comment edit screen) created</title>
      
        <dc:creator>regan.khadgi</dc:creator>

      <pubDate>Mon, 07 Sep 2020 18:55:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51263</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51263/1599504900767950</guid>
      <description>&lt;p&gt;
When I tried to edit any comment in the administration comment edit screen, I get two php warnings like below in my debug.log file&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
[07-Sep-2020 18:03:22 UTC] PHP Notice:  Undefined index: c in D:\xampp\htdocs\free-plugins\wp-admin\comment.php on line 39&lt;br /&gt;
[07-Sep-2020 18:03:22 UTC] PHP Notice:  Trying to get property 'comment_post_ID' of non-object in D:\xampp\htdocs\free-plugins\wp-admin\comment.php on line 43&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I haven't enabled any plugins and my site is running default Twenty Twenty theme. I had tried with multiple WP installation including a fresh installation and error showed up on all installations. I have also included the links to the screenshot which shall make the issue more clear.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://prntscr.com/ud79k9"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://prntscr.com/ud79k9&lt;/a&gt;&lt;br /&gt;
&lt;a class="ext-link" href="http://prntscr.com/ud79c7"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://prntscr.com/ud79c7&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51262 (Provide option to disable emails about auto-updates or remove sending ...) created</title>
      
        <dc:creator>fanvid</dc:creator>

      <pubDate>Mon, 07 Sep 2020 18:52:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51262</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51262/1599504761495804</guid>
      <description>&lt;p&gt;
Since the original ticket &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50988" title="#50988: enhancement: Provide option to disable emails about auto-updates (closed: fixed)"&gt;#50988&lt;/a&gt; was closed and the issue wasnt resolved and there is no expectation of a solution so im creating a new ticket, since this is a big issue that has no proper solution, install plugins or edit functions.php is not a proper way to fix a problem.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
WordPress 5.5 has introduced long-awaited and welcome auto-updates for themes and plugins.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
However, as I run several sites with different themes and plugins, I am getting frequent (and unnecessary) emails about auto-updates.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
These emails need to be optional, not mandatory. By all means, turn on email notifications by default, but please provide the admin with an option to disable the auto-update notifications.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thank you&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #49587 (Add error handling for the media manager Ajax response) updated</title>
      
        <dc:creator>ibdz</dc:creator>

      <pubDate>Mon, 07 Sep 2020 18:30:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49587#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49587#comment:10/1599503459633429</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
I did some design for error message showing in Media Modal. When there's an error, the spinner should be stopped (replaced) and show the error message instead. The message might need more elaborate.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>media-modal error.png attached to Ticket #49587</title>
      
        <dc:creator>ibdz</dc:creator>

      <pubDate>Mon, 07 Sep 2020 18:25:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/49587/media-modal%20error.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/49587/media-modal%20error.png/1599503115236826</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>media-modal loading.png attached to Ticket #49587</title>
      
        <dc:creator>ibdz</dc:creator>

      <pubDate>Mon, 07 Sep 2020 18:24:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/49587/media-modal%20loading.png</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/49587/media-modal%20loading.png/1599503099977142</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #39265 (Missing @covers in the comment blocks in PHPUnit tests) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Mon, 07 Sep 2020 17:30:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39265#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39265#comment:16/1599499805733510</guid>
      <description>&lt;p&gt;
@jrf Do you have suggestions on how &lt;code&gt;@covers&lt;/code&gt; should be used with the REST API endpoint tests? We are generally doing more “end-to-end” like tests. In other words actually creating a request object and dispatching it to the server instead of calling the controller methods directly.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50988 (Provide option to disable emails about auto-updates) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 17:24:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50988#comment:38</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50988#comment:38/1599499492095764</guid>
      <description>fixed: &lt;p&gt;
Just noting this ticket was closed on a completed milestone. If you'd like to start a discussion to reconsider any changes here, or suggest any further changes, please create a new ticket. Thanks!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #39265 (Missing @covers in the comment blocks in PHPUnit tests) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 17:23:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/39265#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/39265#comment:15/1599499412905411</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-site-health by jrf. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-site-health/p1599499411102400"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #46373 (Add code coverage tracking) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 17:20:30 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/46373#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/46373#comment:11/1599499230830378</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-site-health by jrf. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-site-health/p1599499229100000"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49490 (Proposal: New wrapper function and hook for creating attachments) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Mon, 07 Sep 2020 17:02:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49490#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49490#comment:12/1599498162707289</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hey @luisrivera,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Do you want to take a crack at turning this into a Pull Request? That'd make it easier to review and see the impacts.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm removing the &lt;code&gt;needs-design&lt;/code&gt; keyword. For reference, we use that for when a ticket needs visual design, not code design :)&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49587 (Add error handling for the media manager Ajax response) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:56:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49587#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49587#comment:9/1599497813475884</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by karmatosed. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1599497811180900"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51139 (Allow "tested up to" PHP version statement for plugins &amp; themes) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:56:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51139#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51139#comment:7/1599497805194627</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-site-health by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-site-health/p1599497803076300"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49576 (Menu Editor UI issues on med-large screens) updated</title>
      
        <dc:creator>tray</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:54:07 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49576#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49576#comment:22/1599497647563036</guid>
      <description>&lt;p&gt;
design not needed. discussed triage 9/7/20 (sorry duplicate comment)&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49490 (Proposal: New wrapper function and hook for creating attachments) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:53:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49490#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49490#comment:11/1599497621985264</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by karmatosed. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1599497620176500"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49576 (Menu Editor UI issues on med-large screens) updated</title>
      
        <dc:creator>tray</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:53:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49576#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49576#comment:21/1599497595501804</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
design not needed. discussed triage 9/7/20&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #48059 (Check PHP and MySQL requirements as early as possible) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:50:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48059#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48059#comment:2/1599497404733276</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-site-health by sergey. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-site-health/p1599497403066000"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42766 (Issue in update password From admin side and login ith same password) updated</title>
      
        <dc:creator>paaljoachim</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:39:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42766#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42766#comment:28/1599496754532011</guid>
      <description>&lt;p&gt;
We looked at this during Monday's Design triage and agreed on that this ticket does not need design. I am thinking that the password field needs to limit what can be entered.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49576 (Menu Editor UI issues on med-large screens) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:39:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49576#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49576#comment:20/1599496745839999</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by karmatosed. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1599496742154300"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #42766 (Issue in update password From admin side and login ith same password) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:31:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/42766#comment:27</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/42766#comment:27/1599496273701514</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #design by karmatosed. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/design/p1599496271144400"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #37486 (Make emojis accessible) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Mon, 07 Sep 2020 16:16:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/37486#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/37486#comment:20/1599495374996979</guid>
      <description>&lt;p&gt;
@desrosj the fundamental problem is in the way the various operating system expose emojis to assistive technologies. Some sets of emojis are exposed correctly so that their name is available to assistive tech. When new sets of emojis get added, this is often a problem though, as they're not exposed correctly. They would need a translatable alt text, which is technical challenging.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It was agreed to keep this ticket open as &lt;em&gt;blessed task&lt;/em&gt; for ongoing tracking of OS/browser/screen reader behaviour so I'd like to keep it open. &lt;em&gt;Ça va sans dire&lt;/em&gt; that ongoing tracking would require time, which is... very limited :)&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50988 (Provide option to disable emails about auto-updates) updated</title>
      
        <dc:creator>fanvid</dc:creator>

      <pubDate>Mon, 07 Sep 2020 15:34:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50988#comment:37</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50988#comment:37/1599492884376955</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/50988#comment:35" title="Comment 35"&gt;knutsp&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This change will enable plugins to see the difference and offer whatever on that basis.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Checkboxes in core means more user options, which is bad and not WordPress core philosophy.&lt;br /&gt;
What would be natural in 5.6 or even earlier is, by default, only to send emails on update failures.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Im not entirely sure what is wordpress core functionality nowadays, if they want the core simple with as few options as possible, that's great, make it efficient and streamlined and bundle these additional "features" as official plugins, that is fine, but adding features like this? They basically created a self spamming system and the "current" solution is for me to edit my functions.php or install another plugin? Where is this an improvement of core functionality?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I kid you not i had to put a gmail filter so my mail from wp wouldnt be flagged (because 2 were dropped) and yes, absolutely, if by default, it only sends e-mails on failure is a way better solution another would be to disabled by default all e-mails and people that want them can edit their functions.php or install a plugin... &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51261 (Integrate the -scaled.jpg images setting into _wp_make_subsizes) created</title>
      
        <dc:creator>ddegner</dc:creator>

      <pubDate>Mon, 07 Sep 2020 15:31:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51261</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51261/1599492684354824</guid>
      <description>&lt;p&gt;
Creating a -scaled.jpg BIG threshold image on upload is a good idea, but it has been implemented in a way that makes it hard to adjust, try out different settings, or unify the look of the site.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
After a photo has been scaled once I can't find a way to regenerate the scaled version, even using plugins and digging through the image.php file.  It appears that after it has been scaled once there is a marker that prevents the images from being scaled again with different settings.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The -scaled.jpg image needs to be integrated into _wp_make_subsizes so that they can be regenerated if necessary. Also if the -scaled.jpg image settings were placed in the settings&amp;gt;media pane like all the other default image sizes it would make for easier adjustments.&lt;br /&gt;
 &lt;br /&gt;
The current implementation leaves websites where pre-5.3 posts serve full-sized images and post-5.3 posts serve scaled images.  And if the default scale isn't ideal there is no way to re-create the previously scaled images.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
--- Here are my attempts to work around this lack of functionality&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
While developing my wordpress site I had the "Disable "BIG image" Threshold" plugin installed half the time.  So half of my images had a -scaled.jpg version and half didn't.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I found the default -scaled.jpg size to be too small so I want to use the "Regenerate Thumbnails" plugin to regen all the images to have a -scaled version.  I removed the "Disable "Big Image"" plugin and added this to my &lt;em&gt;function.php&lt;/em&gt; file.&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;function td_big_image_size_threshold( $threshold, $imagesize, $file, $attachment_id ) {
return 4000;
}
add_filter( 'big_image_size_threshold', 'td_big_image_size_threshold', 10, 4 );
&lt;/pre&gt;&lt;p&gt;
I ran the Regenerate plugin and it half worked, creating -scaled.jpg images, for the half of the attachments that didn't previously have them, but didn't overwrite the previously created -scaled.jpg images.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I thought the updated pixel metadata of the -scaled.jpg images might be below the threshold so I went into the &lt;em&gt;images.php&lt;/em&gt; file and temporarily removed the &lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;if($image_meta['width'] &amp;gt; X etc){}
&lt;/pre&gt;&lt;p&gt;
part of the check.  It didn't work.  Now I can't find a way to force a regenerated -scaled version of of the images.  It is as if once they have been scaled once, even if those files are removed or the scale has changed they can't be scaled again.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm at a loss.  I feel like running the _wp_image_meta_replace_original function over my whole library to reset them would be the best option but don't really know how to do that.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #50623 (Discoverability of plugin and themes autoupdates) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 14:56:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50623#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50623#comment:8/1599490617546421</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50623 (Discoverability of plugin and themes autoupdates) updated</title>
      
        <dc:creator>francina</dc:creator>

      <pubDate>Mon, 07 Sep 2020 14:55:06 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50623#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50623#comment:7/1599490506879204</guid>
      <description>&lt;p&gt;
Thank you @uxkai for working on this! &lt;br /&gt;
All the options proposed seem to "pop" and are a step forward in terms of discoverability. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I would say the next steps:&lt;br /&gt;
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Buy-in from the folx working on the autoupdates (I'll bring this up tomorrow, September 8th on the dedicated chat)
&lt;/li&gt;&lt;li&gt;Accessibility review to make sure we are picking the best option
&lt;/li&gt;&lt;li&gt;Design feedback
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
I would still very much like to see this land in 5.6&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50617 (REST API: Add modified_before and modified_after to WP_REST_Request ...) updated</title>
      
        <dc:creator>claytoncollie</dc:creator>

      <pubDate>Mon, 07 Sep 2020 14:42:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50617#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50617#comment:6/1599489732084976</guid>
      <description>&lt;p&gt;
@SergeyBiryukov Do I need to do anything to move this along? Thanks.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51251 (Fix PHP notice when opening the edit image popup) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 13:05:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51251#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51251#comment:7/1599483917987392</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48956" title="Media: In `wp_ajax_image_editor()`, check if the `error` property ..."&gt;48956&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Media: In &lt;code&gt;wp_ajax_image_editor()&lt;/code&gt;, check if the &lt;code&gt;error&lt;/code&gt; property exists before accessing it.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This avoids a PHP notice when editing an image.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48375" title="Accessibility: Media: Improve accessibility of the status and error ..."&gt;[48375]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props Mista-Flo.&lt;br /&gt;
Merges &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48946" title="Media: In `wp_ajax_image_editor()`, check if the `error` property ..."&gt;[48946]&lt;/a&gt; to the 5.5 branch.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51251" title="#51251: defect (bug): Fix PHP notice when opening the edit image popup (closed: fixed)"&gt;#51251&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [48956]: Media: In `wp_ajax_image_editor()`, check if the `error` property ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 13:05:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48956</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48956/1599483915483060</guid>
      <description>&lt;p&gt;
Media: In &lt;code&gt;wp_ajax_image_editor()&lt;/code&gt;, check if the &lt;code&gt;error&lt;/code&gt; property exists before accessing it.
&lt;/p&gt;
&lt;p&gt;
This avoids a PHP notice when editing an image.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48375" title="Accessibility: Media: Improve accessibility of the status and error ..."&gt;[48375]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props Mista-Flo.
Merges &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48946" title="Media: In `wp_ajax_image_editor()`, check if the `error` property ..."&gt;[48946]&lt;/a&gt; to the 5.5 branch.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51251" title="#51251: defect (bug): Fix PHP notice when opening the edit image popup (closed: fixed)"&gt;#51251&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #51219 (Theme editor page showing undefined variable notice) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 13:03:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51219#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51219#comment:4/1599483823463317</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48955" title="Administration: Give the `$error` variable in ..."&gt;48955&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Administration: Give the &lt;code&gt;$error&lt;/code&gt; variable in &lt;code&gt;wp-admin/admin-header.php&lt;/code&gt; a more descriptive name.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This avoids a conflict with the same global variable used elsewhere, e.g. in Theme Editor.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48850" title="Administration: Don't print the `.php-error` class in the admin header ..."&gt;[48850]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props vinayak.anivase.&lt;br /&gt;
Merges &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48938" title="Administration: Give the `$error` variable in ..."&gt;[48938]&lt;/a&gt; to the 5.5 branch.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51219" title="#51219: defect (bug): Theme editor page showing undefined variable notice (closed: fixed)"&gt;#51219&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [48955]: Administration: Give the `$error` variable in ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 13:03:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48955</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48955/1599483822344063</guid>
      <description>&lt;p&gt;
Administration: Give the &lt;code&gt;$error&lt;/code&gt; variable in &lt;code&gt;wp-admin/admin-header.php&lt;/code&gt; a more descriptive name.
&lt;/p&gt;
&lt;p&gt;
This avoids a conflict with the same global variable used elsewhere, e.g. in Theme Editor.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48850" title="Administration: Don't print the `.php-error` class in the admin header ..."&gt;[48850]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props vinayak.anivase.
Merges &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48938" title="Administration: Give the `$error` variable in ..."&gt;[48938]&lt;/a&gt; to the 5.5 branch.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/51219" title="#51219: defect (bug): Theme editor page showing undefined variable notice (closed: fixed)"&gt;#51219&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #50988 (Provide option to disable emails about auto-updates) updated</title>
      
        <dc:creator>spiros</dc:creator>

      <pubDate>Mon, 07 Sep 2020 12:22:56 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50988#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50988#comment:36/1599481376072703</guid>
      <description>&lt;p&gt;
Totally agree with that.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/50988#comment:35" title="Comment 35"&gt;knutsp&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What would be natural in 5.6 or even earlier is, by default, only to send emails on update failures.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) updated</title>
      
        <dc:creator>kishanjasani</dc:creator>

      <pubDate>Mon, 07 Sep 2020 12:22:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256#comment:4/1599481371743182</guid>
      <description>&lt;p&gt;
@mukesh27 It's working for me. I have tested it on ubuntu 18.04. can you please attach screenshot which output array you are getting in ID attribute? So, I can go further to improve my code. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50988 (Provide option to disable emails about auto-updates) updated</title>
      
        <dc:creator>knutsp</dc:creator>

      <pubDate>Mon, 07 Sep 2020 12:13:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50988#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50988#comment:35/1599480822964812</guid>
      <description>&lt;p&gt;
This change will enable plugins to see the difference and offer whatever on that basis.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Checkboxes in core means more user options, which is bad and not WordPress core philosophy.&lt;br /&gt;
What would be natural in 5.6 or even earlier is, by default, only to send emails on update failures.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Mon, 07 Sep 2020 11:12:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256#comment:3/1599477131697449</guid>
      <description>&lt;p&gt;
I have tested patch but it is not working for me it show me &lt;strong&gt;Array&lt;/strong&gt; in id attribute.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50988 (Provide option to disable emails about auto-updates) reopened</title>
      
        <dc:creator>fanvid</dc:creator>

      <pubDate>Mon, 07 Sep 2020 11:04:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50988#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50988#comment:34/1599476681732791</guid>
      <description>&lt;p&gt;
I agree, it should have some checkboxes to control these automated e-mails, I have 10 sites and its already spamming hard my inbox, and just having hooks or a plugin to fix this means adding even more complexity and more reasons for things to break, already half of the plugins i use are just to make wordpress work like it should (like plugin for the classic editor or plugin for showing media correctly on a truncated RSS).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I dont even know where are they going with this feature, even a user with 1 wp site, if he gets a e-mail every 3 days saying x or x was updated, how long will it go before it starts going to spam or the user starts ignoring the e-mails altogether... and i bet wodpress.com has in its panel some control for all automated e-mails.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>paapst</dc:creator>

      <pubDate>Mon, 07 Sep 2020 11:01:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:20/1599476495300692</guid>
      <description>&lt;p&gt;
I must admit that my initial assumption regarding the extra (sub) consent types was wrong. The new examples that have been given by @carike in the description indeed show the need for plugins to add additional consent categories. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>rkradadiya</dc:creator>

      <pubDate>Mon, 07 Sep 2020 09:17:20 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:8/1599470240945748</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 09:08:40 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:35</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:35/1599469720174235</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by carike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599469718090200"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44266 (Add per-request-row delete row action for privacy actions) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 08:38:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44266#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44266#comment:18/1599467908152848</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by garrett-eclipse. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599467906081000"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43879 (Add tools for anonymizing of post authors) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 08:30:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43879#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43879#comment:18/1599467409967354</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by garrett-eclipse. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599467407077000"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #43437 (Add way for registered users to request deletion or anonymization of ...) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 08:09:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/43437#comment:36</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/43437#comment:36/1599466178443645</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by carike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599466176069300"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51025 (Add support for the anyOf and oneOf JSON Schema keywords.) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 08:05:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51025#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51025#comment:2/1599465950451796</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-restapi by mdmag. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-restapi/p1599465949016800"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 07:56:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:19/1599465370334615</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by carike. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599465369065800"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51156 (Create developer documentation for disclosures.json) updated</title>
      
        <dc:creator>slackbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 07:37:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51156#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51156#comment:11/1599464237431759</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://make.wordpress.org/chat/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Slack&lt;/a&gt; in #core-privacy by azaozz. &lt;a class="ext-link" href="https://wordpress.slack.com/archives/core-privacy/p1599464236062900"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;View the logs&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51041 (Incorrect message about the status of WP_AUTO_UPDATE_CORE) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Mon, 07 Sep 2020 07:25:12 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51041#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51041#comment:4/1599463512353090</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
@chrisbudd1 Thanks for the patch and suggestions.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51156 (Create developer documentation for disclosures.json) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Mon, 07 Sep 2020 07:21:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51156#comment:10</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51156#comment:10/1599463269983758</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51156#comment:9" title="Comment 9"&gt;carike&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This ticket deals with the template / format plugin developers need to use in their individual plugin / theme (disclosures.json).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Basically, this ticket is meant for the people who want the digest version of what they need to do in their plugin / theme and do not want to actively participate in determining what Core does with that information and how.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, exactly :)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Trac is for making changes and additions to WP core, usually code but also inline docs (for functions), unit tests, etc.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Developer documentation "lives" on the wp.org website. In this case the proper place is &lt;a class="ext-link" href="https://developer.wordpress.org/plugins/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://developer.wordpress.org/plugins/&lt;/a&gt;. Adding content and making changes there is the "job" of the WP Docs team.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I agree in this case the docs are quite harder to write and get right, and input from multiple people/sources is needed. To facilitate collaboration it seems best to use Github (as it allows inline comments, multiple changes, etc.), then (perhaps) link the PR to this ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Then, after the docs are deemed ready, the Docs team can review them and include them in the WP &lt;a class="ext-link" href="https://developer.wordpress.org/plugins/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Plugin Developer Handbook&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Mon, 07 Sep 2020 07:12:04 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:7/1599462724462672</guid>
      <description>&lt;p&gt;
@mukesh27 &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Yes sure, If not need, we can remove it. I have added only for top spacing purpose.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thanks,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51249#comment:6" title="Comment 6"&gt;mukesh27&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Thanks for the patch @laxman-prajapati &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Patch looks fine for me but i think margin top is not need to make top space. let's wait for design team feedback on this.&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;.date-time-fields .day-fields.clear,
.date-time-fields .time-fields.clear {
   margin-top: 5px;
}
&lt;/pre&gt;&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50630 (imagick image editor does not support streams) updated</title>
      
        <dc:creator>p00ya</dc:creator>

      <pubDate>Mon, 07 Sep 2020 06:47:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50630#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50630#comment:8/1599461246861841</guid>
      <description>&lt;p&gt;
Hi, just a note to any reviewers that they should look at the github PR rather than reviewing the patch I attached here on trac (which now has merge conflicts).&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51156 (Create developer documentation for disclosures.json) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Mon, 07 Sep 2020 06:47:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51156#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51156#comment:9/1599461229593529</guid>
      <description>&lt;p&gt;
:wave: @azaozz &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="new ticket" href="http://core.trac.wordpress.org/ticket/51092" title="#51092: feature request: Create a JSON schema for Privacy and Other Related Disclosures (new)"&gt;#51092&lt;/a&gt; deals with the JSON schema needed by Core (disclosures-schema.json).&lt;br /&gt;
This ticket deals with the template / format plugin developers need to use in their individual plugin / theme (disclosures.json).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Basically, this ticket is meant for the people who want the digest version of what they need to do in their plugin / theme and do not want to actively participate in determining what Core does with that information and how.&lt;br /&gt;
Making it less abstract by designing the documentation at the same time as the template (well, at this point a little before, I still need to amend the ticket description to add the actual template), helps stakeholder management by helping to improve communication and encourage participation.&lt;br /&gt;
It also saves some time and helps ensure that documentation is not an after-thought. It is particularly important for this initiative, since we will need to undertake education drives for developers.&lt;br /&gt;
Since the aim of the initiative is to standardize the way that privacy and related disclosures are made, it is only useful if it is widely adopted by developers. Buy in from developers (and those managing the repositories) are thus crucial to success.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
While the disclosures.json template does apply to Core (since it is the "input" for disclosures-schema.json), the documentation part will be re-homed as soon as we've built consensus on what they should look like.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50630 (imagick image editor does not support streams) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 06:44:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50630#comment:7</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50630#comment:7/1599461048773952</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/521"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #521&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/p00ya"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;p00ya&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Support streams from the imagick image editor.  Fixes problems with using &lt;code&gt;realpath&lt;/code&gt; and &lt;code&gt;imagick::readImage&lt;/code&gt; with streams.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/50630"&gt;https://core.trac.wordpress.org/ticket/50630&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #5412 (Trailing comma creates blank tag) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 05:51:31 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/5412#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/5412#comment:4/1599457891435496</guid>
      <description>&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/520"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #520&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/dd32"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;dd32&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Allow WP_AUTO_UPDATE_CORE to be set to 'rc' or 'beta' to signify to the API that we want to opt-in to Beta and/or RC releases but run the latest stable otherwise (ie. not trunk).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="ext-link" href="https://meta.trac.wordpress.org/ticket/5412"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://meta.trac.wordpress.org/ticket/5412&lt;/a&gt; for background.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Trac ticket:&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51249 (design issue under customize input box for Schedule in 5.5.1) updated</title>
      
        <dc:creator>mukesh27</dc:creator>

      <pubDate>Mon, 07 Sep 2020 04:35:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51249#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51249#comment:6/1599453303064367</guid>
      <description>&lt;p&gt;
Thanks for the patch @laxman-prajapati &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Patch looks fine for me but i think margin top is not need to make top space. let's wait for design team feedback on this.&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;.date-time-fields .day-fields.clear,
.date-time-fields .time-fields.clear {
   margin-top: 5px;
}
&lt;/pre&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 04:11:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:22</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:22/1599451915993623</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48954" title="Tests: Replace a few instances of `assertNotEquals()` with ..."&gt;48954&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Replace a few instances of &lt;code&gt;assertNotEquals()&lt;/code&gt; with &lt;code&gt;assertNotFalse()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48954]: Tests: Replace a few instances of `assertNotEquals()` with ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 04:11:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48954</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48954/1599451914915008</guid>
      <description>&lt;p&gt;
Tests: Replace a few instances of &lt;code&gt;assertNotEquals()&lt;/code&gt; with &lt;code&gt;assertNotFalse()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #51064 (Consider adding "local" as environment on WP_ENVIRONMENT_TYPE) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:58:14 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51064#comment:28</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51064#comment:28/1599451094061143</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/TimothyBJacobs"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;TimothyBJacobs&lt;/a&gt; commented on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/493#issuecomment-688015942"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #493&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Closing this out as the ticket has been committed.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51018 (PHP Notice thrown when searching for certain terms via the Gutenberg ...) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:57:43 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51018#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51018#comment:19/1599451063047248</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/TimothyBJacobs"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;TimothyBJacobs&lt;/a&gt; commented on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/488#issuecomment-688015746"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #488&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Closing this PR out as the ticket has been committed.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51020 (The public route args schema drops valid JSON Schema properties) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:26:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51020#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51020#comment:8/1599449195982676</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
That's looking good @raubvogel! I'd recommend opening a Pull Request in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt;. That will run unit tests as well as linting automatically.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
In terms of writing the test. You'll want to add a test case to the existing collection of tests covering &lt;code&gt;WP_REST_Server&lt;/code&gt;. These are in the &lt;code&gt;tests/phpunit/tests/rest-api/rest-server.php&lt;/code&gt; file. An example of one of these tests is &lt;code&gt;test_get_index&lt;/code&gt;. I would add another method after that one following a pattern something like this.&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test_get_index_for_route&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_REST_Server&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$server&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'test-ns/v1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'/test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'methods'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;WP_REST_Server&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;READABLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'callback'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'__return_true'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'args'&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="c1"&gt;// The list of args you want to verify.
&lt;/span&gt;                    &lt;span class="s1"&gt;'test'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'array'&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WP_REST_Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/test-ns/v1'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$index&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$server&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$data&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$args&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'routes'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'/test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;assertArrayHasKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'schemaKeyword'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
In the route registration you'd add the arguments that use the different schema keywords. Then verify that they are present in the output.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I hope that helps, let me know if you run into issues. You can ping me on Slack &lt;code&gt;timothybjacobs&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
Something we'll might want to consider is whether we should traverse the schema's &lt;code&gt;properties&lt;/code&gt; and &lt;code&gt;items&lt;/code&gt; and apply the same sanitization as we do on the top-level. It was decided not to do that for &lt;code&gt;items&lt;/code&gt; in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/38420" title="#38420: defect (bug): API Post status parameter does not accept multiple values (closed: fixed)"&gt;#38420&lt;/a&gt;. I think we'd probably stick with that decision unless that are compelling reasons we shouldn't.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:26:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:21/1599449193392553</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48953" title="Tests: Remove the polyfill for `assertNotFalse()`.
`assertNotFalse()` ..."&gt;48953&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Remove the polyfill for &lt;code&gt;assertNotFalse()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;assertNotFalse()&lt;/code&gt; is available in PHPUnit since version 4.0.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The polyfill was introduced back when WordPress still supported PHP 5.2 and PHPUnit 3.6.x, and is now redundant.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/39919" title="Build/Test Tools: Add `assertNotFalse()` method to `WP_UnitTestCase` ..."&gt;[39919]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/45058" title="PHP: Finish updating PHP Minimum version
Previous [44982] and ..."&gt;[45058]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/47880" title="Build/Test Tools: Let `WP_UnitTestCase_Base` extend the namespaced ..."&gt;[47880]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48953]: Tests: Remove the polyfill for `assertNotFalse()`.  `assertNotFalse()` ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:26:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48953</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48953/1599449184125960</guid>
      <description>&lt;p&gt;
Tests: Remove the polyfill for &lt;code&gt;assertNotFalse()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;assertNotFalse()&lt;/code&gt; is available in PHPUnit since version 4.0.
&lt;/p&gt;
&lt;p&gt;
The polyfill was introduced back when WordPress still supported PHP 5.2 and PHPUnit 3.6.x, and is now redundant.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/39919" title="Build/Test Tools: Add `assertNotFalse()` method to `WP_UnitTestCase` ..."&gt;[39919]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/45058" title="PHP: Finish updating PHP Minimum version
Previous [44982] and ..."&gt;[45058]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/47880" title="Build/Test Tools: Let `WP_UnitTestCase_Base` extend the namespaced ..."&gt;[47880]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:12:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:20/1599448338867972</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48952" title="Tests: Add a polyfill for `assertEqualsWithDelta()` to ..."&gt;48952&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Add a polyfill for &lt;code&gt;assertEqualsWithDelta()&lt;/code&gt; to &lt;code&gt;WP_UnitTestCase&lt;/code&gt; and use it where appropriate.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;assertEqualsWithDelta()&lt;/code&gt; was added in PHPUnit 7.5, while WordPress still supports PHPUnit 5.4.x as the minimum version.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48952]: Tests: Add a polyfill for `assertEqualsWithDelta()` to ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Mon, 07 Sep 2020 03:12:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48952</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48952/1599448337660422</guid>
      <description>&lt;p&gt;
Tests: Add a polyfill for &lt;code&gt;assertEqualsWithDelta()&lt;/code&gt; to &lt;code&gt;WP_UnitTestCase&lt;/code&gt; and use it where appropriate.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;assertEqualsWithDelta()&lt;/code&gt; was added in PHPUnit 7.5, while WordPress still supports PHPUnit 5.4.x as the minimum version.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #50876 (REST API: Extract get_endpoint_args_for_item_schema to standalone function) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Mon, 07 Sep 2020 02:36:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50876#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50876#comment:5/1599446202099328</guid>
      <description>&lt;p&gt;
&lt;a class="ext-link" href="https://github.com/TimothyBJacobs"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;TimothyBJacobs&lt;/a&gt; commented on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/492#issuecomment-687988995"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #492&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Merged in 84d524e. Thanks again for the patch!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50876 (REST API: Extract get_endpoint_args_for_item_schema to standalone function) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Mon, 07 Sep 2020 02:36:08 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50876#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50876#comment:4/1599446168678837</guid>
      <description>&lt;p&gt;
This is great, thanks for working on the patch @pentatonicfunk!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50876 (REST API: Extract get_endpoint_args_for_item_schema to standalone function) closed</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Mon, 07 Sep 2020 02:35:54 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50876#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50876#comment:3/1599446154201254</guid>
      <description>fixed: &lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48951" title="REST API: Extract ..."&gt;48951&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
REST API: Extract &lt;code&gt;WP_REST_Controller::get_endpoint_args_for_item_schema()&lt;/code&gt; to a standalone function.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This method is useful whenever a JSON Schema needs to be converted to a format suitable for argument validation with &lt;code&gt;WP_REST_Request&lt;/code&gt;. Moving the logic into a standalone function allows developers to use it outside of the &lt;code&gt;WP_REST_Controller&lt;/code&gt; context.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props pentatonicfunk.&lt;br /&gt;
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50876" title="#50876: enhancement: REST API: Extract get_endpoint_args_for_item_schema to standalone function (closed: fixed)"&gt;#50876&lt;/a&gt;. &lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [48951]: REST API: Extract ...</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Mon, 07 Sep 2020 02:35:52 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48951</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48951/1599446152983185</guid>
      <description>&lt;p&gt;
REST API: Extract &lt;code&gt;WP_REST_Controller::get_endpoint_args_for_item_schema()&lt;/code&gt; to a standalone function.
&lt;/p&gt;
&lt;p&gt;
This method is useful whenever a JSON Schema needs to be converted to a format suitable for argument validation with &lt;code&gt;WP_REST_Request&lt;/code&gt;. Moving the logic into a standalone function allows developers to use it outside of the &lt;code&gt;WP_REST_Controller&lt;/code&gt; context.
&lt;/p&gt;
&lt;p&gt;
Props pentatonicfunk.
Fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/50876" title="#50876: enhancement: REST API: Extract get_endpoint_args_for_item_schema to standalone function (closed: fixed)"&gt;#50876&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 23:53:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:19/1599436391653130</guid>
      <description>&lt;p&gt;
The commits here so far have reduced the number of &lt;code&gt;assertEquals()&lt;/code&gt; instances from 8378 matches in 431 files (WordPress 5.5) to 572 matches in 121 files.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The remaining instances fall into three groups:&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ones that use delta comparison for floats, dates, etc. These should be switched to &lt;a class="ext-link" href="https://github.com/sebastianbergmann/phpunit/blob/7.5.0/ChangeLog-7.5.md#added"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;assertEqualsWithDelta()&lt;/a&gt; once PHPUnit 7.5 is the minimum supported version. Or, perhaps &lt;code&gt;assertEqualsWithDelta()&lt;/code&gt; should be polyfilled for older PHPUnit versions.
&lt;/li&gt;&lt;li&gt;Ones that legitimately use &lt;code&gt;assertEquals()&lt;/code&gt; for comparing objects. Trying to switch these to &lt;code&gt;assertSame()&lt;/code&gt; would result in "Failed asserting that two variables reference the same object" error.
&lt;/li&gt;&lt;li&gt;Ones that should be switched to &lt;code&gt;assertSame()&lt;/code&gt;, but would currently result in a failure when doing so, due to data type mismatches, mostly strings vs. integers, or integers vs. floats. These need further investigation:
&lt;ul&gt;&lt;li&gt;In some cases, the tests should be adjusted to use the correct data type.
&lt;/li&gt;&lt;li&gt;In other cases, this points to minor bugs in core, e.g. using &lt;code&gt;ceil()&lt;/code&gt; for values that are documented as integers, but without explicitly casting to &lt;code&gt;int&lt;/code&gt;, results in them being of type &lt;code&gt;float&lt;/code&gt; instead. This affects some properties like &lt;code&gt;max_num_pages&lt;/code&gt;, &lt;code&gt;max_pages&lt;/code&gt;, &lt;code&gt;total_pages&lt;/code&gt; in various classes, or functions like &lt;code&gt;get_comment_pages_count()&lt;/code&gt;, &lt;code&gt;wp_embed_defaults()&lt;/code&gt;, &lt;code&gt;get_oembed_response_data()&lt;/code&gt;.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51058 (attachment_url_to_postid does not retrieve post ID of really large images) updated</title>
      
        <dc:creator>littler.chicken</dc:creator>

      <pubDate>Sun, 06 Sep 2020 21:34:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51058#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51058#comment:2/1599428086104005</guid>
      <description>&lt;p&gt;
To reproduce, upload a very large image to your site (wider than 2560px). Get the URL of the original uploaded image.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Add code to dump out some information similar to this:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;add_filter(
	'the_content',
	function( $content ) {
		// Enter the URL of the original image
		var_dump( attachment_url_to_postid( 'https://nightly.local/wp-content/uploads/2020/03/roman-kraft-197672.jpg' ) );
		// Now add -scaled to the original image name
		var_dump( attachment_url_to_postid( 'https://nightly.local/wp-content/uploads/2020/03/roman-kraft-197672-scaled.jpg' ) );
		return $content;
	}
);
&lt;/pre&gt;&lt;p&gt;
For the first, WordPress will output &lt;code&gt;0&lt;/code&gt; as no image exists with that filename. The second will return the image ID, because that's the filename assigned to the &lt;code&gt;_wp_attached_file&lt;/code&gt; meta key (ref: &lt;a href="https://core.trac.wordpress.org/browser/tags/5.5/src/wp-includes/media.php#L4634"&gt;https://core.trac.wordpress.org/browser/tags/5.5/src/wp-includes/media.php#L4634&lt;/a&gt;).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
When I use this function, it's in the context of parsing the RSS feed, at which point the original ID is not available, but I'm retrieving it from the database so that the image can be replaced with a smaller copy. Currently, without a secondary check for the &lt;code&gt;-scaled&lt;/code&gt; image, the replacement fails for very large images.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51058 (attachment_url_to_postid does not retrieve post ID of really large images) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 19:56:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51058#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51058#comment:1/1599422177428978</guid>
      <description>&lt;p&gt;
Can you give steps to reproduce please? And any screenshots if it can help.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #45347 (Add extra template lookup by author role) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 19:54:09 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/45347#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/45347#comment:1/1599422049933914</guid>
      <description>wontfix: &lt;p&gt;
Hum, it should be handled inside author.php IMO. You can do a role switch and then load the template you want. It would be a bit overkill to add all this hierarchy IMO.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #10955 (Replace ThickBox) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:32:44 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10955#comment:56</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10955#comment:56/1599417164569975</guid>
      <description>&lt;p&gt;
Added the accessibility focus as the duplicate &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/46985" title="#46985: enhancement: Evaluate removing Thickbox (closed: duplicate)"&gt;#46985&lt;/a&gt; had it.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #10955 (Replace ThickBox) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:31:35 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/10955#comment:55</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/10955#comment:55/1599417095978227</guid>
      <description>&lt;i&gt;Focuses&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #46985 (Evaluate removing Thickbox) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:31:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/46985#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/46985#comment:11/1599417073274963</guid>
      <description>&lt;p&gt;
Thanks, I will add the accessibility focu to &lt;a class="reopened ticket" href="http://core.trac.wordpress.org/ticket/10955" title="#10955: enhancement: Replace ThickBox (reopened)"&gt;#10955&lt;/a&gt; :)&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47320 (Site Health: Call to API with $_COOKIE and PHPSESSID) updated</title>
      
        <dc:creator>cfm168</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:07:38 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47320#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47320#comment:21/1599415658595264</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:19" title="Comment 19"&gt;netweblogic&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@cfm168 This is a regular wp snippet, you could add it to your theme's functions.php file for example.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:18" title="Comment 18"&gt;cfm168&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi @netweblogic,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Where to add these codes? I want to try it. Thanks in advance!&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:4" title="Comment 4"&gt;netweblogic&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@Clorith thanks for the feedback... upon some further research, making use of session_write_close() and keeping sessions open/locked only when we know it'll be needed for writing seems to have done the trick and probably a better approach anyway.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For anyone with a similar problem, maybe this explains it better, my previous snippet failed the site health tests, this one doesn't:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'init'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//this loads variables to $_SESSION for reading
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$your_plugin_needs_session_saving&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;session_write_close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//other plugins can restart a session again via session_start()
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// if session writing is needed, close session after writing is done
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
I'm not sure if this would work for all use cases, but in my case I only need to write to sessions when particular actions are taken, avoiding (hopefully) all situations where there'd be a conflict due to session locking.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The only argument I'd make towards it possibly being a bug in Site Health is that in my case, until now, my plugin session handling worked fine with all other WP functionality (at least, I've not been made aware of any issues).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47320 (Site Health: Call to API with $_COOKIE and PHPSESSID) updated</title>
      
        <dc:creator>cfm168</dc:creator>

      <pubDate>Sun, 06 Sep 2020 18:06:42 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47320#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47320#comment:20/1599415602389821</guid>
      <description>&lt;p&gt;
Thank you for advising.&lt;br /&gt;
I found two plugins causing the site health issues. Deactivate these two plugins all three critical issues are disappeared and site health status 0 issue. I will have the developers to fix the problem. &lt;br /&gt;
Will try your code if the issues persist after developers helpless.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thank you again!&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51260 (select all checkbox not working after upgrade WP 5.5.1) reopened</title>
      
        <dc:creator>ambitusa</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:52:41 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51260#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51260#comment:2/1599414761187241</guid>
      <description>&lt;p&gt;
Thanks for response promoptly. I did enable jquery migrate helper but no luck. It only worked selected all checkbox if I disable WooCommerce. Is there any work around tip before WP has new patch to fix the issue?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:49:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256#comment:2/1599414586582190</guid>
      <description>&lt;i&gt;Status&lt;/i&gt;, &lt;i&gt;Owner&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51256 (Duplicate HTML IDs for checkboxes in Plugins list table) updated</title>
      
        <dc:creator>kishanjasani</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:48:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51256#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51256#comment:1/1599414535874582</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #48745 (Disable Admin Email Verification Screen by Variable in wp-config.php ...) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:46:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48745#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48745#comment:12/1599414407722380</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49127 (Clicking on "View" under any user under Users &gt;&gt;&gt; goes to homepage of ...) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:42:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49127#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49127#comment:1/1599414130967931</guid>
      <description>invalid: &lt;p&gt;
Hey @bobteree thanks you for your report, unfortunately, the core track is meant for WordPress, for WooCommerce enhancements, you need to open an issue on their official Github repository.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Moreover, the View link goes to the frontend author page on a default WordPress installation, I think you just use a SEO plugin that does not let the author pages to be indexed and available.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #51260 (select all checkbox not working after upgrade WP 5.5.1) closed</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:38:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51260#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51260#comment:1/1599413903198321</guid>
      <description>invalid: &lt;p&gt;
Hi there, welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website since the latest update, but this topic is best discussed on the &lt;a class="ext-link" href="https://wordpress.org/support/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;support forums&lt;/a&gt; or directly with the developer of your website.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Before heading there to create a post though, I recommend reading through the following list of potential issues with 5.5: &lt;a class="ext-link" href="https://wordpress.org/support/topic/read-this-first-wordpress-5-5-master-list/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/read-this-first-wordpress-5-5-master-list/&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The most likely issue is that a plugin on your site is running old JavaScript code. I would suggest installing and activating this plugin: &lt;a class="ext-link" href="https://wordpress.org/plugins/enable-jquery-migrate-helper/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/plugins/enable-jquery-migrate-helper/&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
This will confirm that there is JavaScript on your site that needs to be updated to follow more modern jQuery practices. You can leave the plugin active for the time being, but the breaking code will need to be updated before the next step of the Upgrading jQuery in Core roadmap.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If this does not fix the issue, feel free to create a new support topic.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Please note that this Trac is used for enhancements and bug reporting for the WordPress core software, not for third-party plugins like WooCommerce, or individual support questions.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Feel free to reopen with the steps to reproduce on a clean install if it turns out to be an issue in WordPress core.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #47320 (Site Health: Call to API with $_COOKIE and PHPSESSID) updated</title>
      
        <dc:creator>netweblogic</dc:creator>

      <pubDate>Sun, 06 Sep 2020 17:23:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47320#comment:19</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47320#comment:19/1599413005652450</guid>
      <description>&lt;p&gt;
@cfm168 This is a regular wp snippet, you could add it to your theme's functions.php file for example.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:18" title="Comment 18"&gt;cfm168&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Hi @netweblogic,&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Where to add these codes? I want to try it. Thanks in advance!&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/47320#comment:4" title="Comment 4"&gt;netweblogic&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
@Clorith thanks for the feedback... upon some further research, making use of session_write_close() and keeping sessions open/locked only when we know it'll be needed for writing seems to have done the trick and probably a better approach anyway.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
For anyone with a similar problem, maybe this explains it better, my previous snippet failed the site health tests, this one doesn't:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'init'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//this loads variables to $_SESSION for reading
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$your_plugin_needs_session_saving&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;session_write_close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//other plugins can restart a session again via session_start()
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// if session writing is needed, close session after writing is done
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
I'm not sure if this would work for all use cases, but in my case I only need to write to sessions when particular actions are taken, avoiding (hopefully) all situations where there'd be a conflict due to session locking.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The only argument I'd make towards it possibly being a bug in Site Health is that in my case, until now, my plugin session handling worked fine with all other WP functionality (at least, I've not been made aware of any issues).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49416 (Deleting a user when having thousands of users) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 16:53:22 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49416#comment:9</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49416#comment:9/1599411202926628</guid>
      <description>&lt;p&gt;
That's an interesting ticket, I'm not sure why the user-suggest.js is only used on multisite. In the AJAX action, you have this code:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;is_multisite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;current_user_can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'promote_users'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;wp_is_large_network&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;current_user_can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'manage_network_users'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'autocomplete_users_for_site_admins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
If I just comment these two if states, create a new input text in &lt;br /&gt;
&lt;/p&gt;
&lt;div class="wiki-code"&gt;&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$users_have_content&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'admin_head'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'delete_users_add_js'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'jquery-ui-autocomplete'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'user-suggest'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-------&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"reassign_user_new"&lt;/span&gt; &lt;span class="nx"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"wp-suggest-user"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"reassign_user_new"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"search"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;
It works well. Of course, you would need to update a bit because a user ID is expected by the original field, and I would prefer to use the REST API, but it can do the trick.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I don't understand why in multisite it doesn't accept the suggestion if it's a large network, does that mean you have to enter the exact email/username of the user without any possible search?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I have also tried another implementation, by looking at tags-suggest.js (but it's still a draft, the suggestions are not displayed), so given an input text field:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;	var user_endpoint = '&amp;lt;?php echo rest_url('wp/v2/users/'); ?&amp;gt;';
	var cache = {};
	$( "#reassign_user_new" ).autocomplete({
		minLength: 2,
		source: function( request, response ) {
			var term = request.term;
			console.log( term );
			console.log( cache );
			if ( term in cache ) {
				response( cache[ term ] );
				return;
			}
			console.log( user_endpoint + '?search=' + term );
			$.getJSON( user_endpoint + '?search=' + term, request, function( data, status, xhr ) {
				cache[ term ] = data;
				response( data );
			});
		}
	});
&lt;/pre&gt;&lt;p&gt;
What's your thoughts on this? I can definitely see some possible implementations around the admin, like the privacy page dropdown, what if you have thousands of pages?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Any thoughts @spacedmonkey ?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51260 (select all checkbox not working after upgrade WP 5.5.1) created</title>
      
        <dc:creator>ambitusa</dc:creator>

      <pubDate>Sun, 06 Sep 2020 16:08:18 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51260</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51260/1599408498501757</guid>
      <description>&lt;p&gt;
Select all checkbox function failed after WP5.5.1 upgraded. However, if I disable Woocommerce  plugin, it was back to normal. Please refer to other forum for the same issue in the community. &lt;br /&gt;
&lt;a class="ext-link" href="https://wordpress.org/support/topic/orders-page-select-all-checkbox-not-working/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/topic/orders-page-select-all-checkbox-not-working/&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Sun, 06 Sep 2020 15:56:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:18/1599407818342878</guid>
      <description>&lt;i&gt;Description&lt;/i&gt;, &lt;i&gt;Summary&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Changed from a milestone for the Consent API to a milestone for Website User Level Consent Management as per the request from @paapst in &lt;a href="https://core.trac.wordpress.org/ticket/51188#comment:16"&gt;https://core.trac.wordpress.org/ticket/51188#comment:16&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #50062 (Updating user extra fields.) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 15:54:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50062#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50062#comment:4/1599407673504484</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>ttodua</dc:creator>

      <pubDate>Sun, 06 Sep 2020 15:39:11 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:17/1599406751029482</guid>
      <description>&lt;p&gt;
@aimutch &lt;br /&gt;
Everything is obvious, and even there is no need even to ask website holders for their opinions, as everything was clear already decade ago.&lt;br /&gt;
However, this is - someone who has higher access to WP decisions, decides whatever they think personally and force you to obey onto that, without giving any option to you. That is just mindless, however that is how WP is. Lack of some bright decisions. Any fact? sure, this is fact that has no argument against - &lt;br /&gt;
give us option in Dashboard to control that field on/off .&lt;br /&gt;
No. WP doesn't (hasn't) give that option to us. They think they know better what you want. that is the example dictacy.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Ouch, how I forgot, they are so kind and tell you - "there are plenty plugins that do the job". So, yes Average Joe, you should go and install some hecky plugin (by whoever developer, by possible security issues in those plugins, so if you site gets hacked because of "those plugins", don't blame WP). yeah, that is the story. So, someone out there 1 in 10 thinks that s/he likes the URL field in WP. So, dear universe, bear fighting the spam and deleting comments every day, wasting your precious time of the life for that person, who thinks he likes that illusional useful feature.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Tickets #44332,​48255 batch updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 13:51:33 GMT</pubDate>
      <link>http://core.trac.wordpress.org/query?id=44332%2C48255</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/query?id=44332%2C48255/1599400293303406</guid>
      <description>&lt;p&gt;
&lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/44332" title="#44332: enhancement: Hook retreive_password (depricated) should be removed (closed: duplicate)"&gt;#44332&lt;/a&gt; was marked as a duplicate.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>batchmodify</category>
    </item><item>
      <title>Ticket #50062 (Updating user extra fields.) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:55:24 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/50062#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/50062#comment:3/1599396924861591</guid>
      <description>invalid</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #40493 (On the Edit User Profile, open the "You can change your profile ...) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:46:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40493#comment:8</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40493#comment:8/1599396409272472</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>TimothyBlynJacobs</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:45:26 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:34</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:34/1599396326366656</guid>
      <description>&lt;blockquote class="citation"&gt;
&lt;p&gt;
Wrong. Privacy policies cannot be compiled by "(other) tools". They have to be written by people or businesses/companies who will be legally responsible for the content.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There are services like this that already exist, for instance iubenda. A tool like that could consume the data over the REST API and provide much more accurate data as to what the site does with the data.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
However the example "schema" above has a lot of things that don't seem "privacy related", needs more work.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I agree.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So we will need to maintain/sync two different "schemas", one in core and another on wp.org. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I imagine .org would use the schema in its WordPress install and we wouldn't be breaking BC, just adding new features or changing their format in BC ways so it being on trunk wouldn't be an issue.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Then plugins will be "forced" to include a (json formatted) file that will have to contain all the "required fields" or will be marked as "failed", even when they do not contain any user privacy related stuff? That seems... not ideal.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Something for @carike. I imagine they'd say "Privacy information not available". Which doesn't seem to bad. The minimal set of fields that you'd probably want to provide for a plugin that has zero privacy impact is probably something like:&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="wiki"&gt;{
  "ppiExport": true,
  "ppiErausre": true,
  "consentAPI": true,
  "disclosuresTab": true,
  "permissionsTab": true
}
&lt;/pre&gt;&lt;p&gt;
I don't think that is too much of a burden for plugin authors to explicitly declare that they don't need to implement those features and I don't really see how else we could do it short of code analysis which would be get us a lot less accurate data.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The majority of plugins have nothing to do with user privacy.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Definitely, but I think there are still quite a number. Particularly of the most popular plugins.&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WP Http 10k: &lt;a class="ext-link" href="https://wpdirectory.net/search/01EHHMBF85N0WSNBAVWNBG32P0"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wpdirectory.net/search/01EHHMBF85N0WSNBAVWNBG32P0&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;Cookies 3k: &lt;a class="ext-link" href="https://wpdirectory.net/search/01EHHMCYPW7MXY0HS07S4XNXCG"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wpdirectory.net/search/01EHHMCYPW7MXY0HS07S4XNXCG&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;User Meta 4.5k: &lt;a class="ext-link" href="https://wpdirectory.net/search/01EHHMN2EV0QYPW0RXQV26AKNA"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wpdirectory.net/search/01EHHMN2EV0QYPW0RXQV26AKNA&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
And I think the ones that couldn't possibly have any privacy impact will be evident from the description. For the ones where it isn't so clear, the ability to say no this plugin doesn't contact any external APIs, etc... would be a good thing for those plugins I think.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Even if not cached, the validation will (likely) fail every time the schema is updated. Then all existing plugins will "fail"...&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Why?&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If it is from a technical implementation I imagine a function signature like this &lt;code&gt;wp_get_plugin_privacy_data( $plugin, $force_revalidate = false ): array|WP_Error&lt;/code&gt;. If the plugin's privacy data has changed or the version of the schema is newer, we'd revalidate before returning that data.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
If it is from a perspective of making changes to WordPress' schema we'd make any changes backward compatible, the same way we currently do. I don't think it would be acceptable for their to be BC breaks there, nor do I imagine why we'd need them. Fields aren't currently marked as &lt;code&gt;required&lt;/code&gt; and if a new format is necessary, this can be accommodated in the schema definition.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Making the data supplied by plugins "public" on a specific site will at least disclose which plugins that site is using. This in itself can be seen as a "privacy breach", can be used for "fingerprinting", the plugin's versions will probably be "guessable" from the data, etc. :)&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Where would that be disclosed? There would be a machine readable .json file in the plugin directory's folder, but you'd need to know the site is running that plugin before hand. It is also already trivial to detect because of readme files, version history, etc... And is already possible using sites like Built With.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Right, so the data contained in the plugin's json files would be "private" (on a per site basis) and only site owners will be able to see it? (Only the site owners will need to see it anyways as it is intended for creating a Privacy Policy). Or am I reading this wrong?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yep! That matches my understanding.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It's not that it is not a part of it but... Would you add an end point to output /readme.txt or /license.txt? Does it make sense from "restful" point of view? &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'd like to yeah. You can use &lt;code&gt;api.wordpress.org&lt;/code&gt; for .org hosted plugins, but for non .org plugins it makes retrieving that data impossible. We now have a plugins endpoint that returns the plugin header information, but that is limited. &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What's the point of having that in the REST API (considering that this data would be very rarely accessed and used only by site owners/users with the highest permissions).&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We have a settings endpoint and a plugins endpoint that are only accessible to administrators. I'd also wager for most WordPress sites the admin is the only user on the whole install :)&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As far as I understand it the (compiled) data from all the plugins json files can be outputted by the REST API, in case a plugin might want to replace the (proposed) page in wp-admin (instead of extending it), but... At the end this is the same like outputting all the data for the Comments page for example, just because a plugin might eventually decide to replace it? Seems WP may get there one day but...?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I don't really get the resistance to making versioned, structured data that is at least in part dynamic available over a tool that is designed for doing that.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
As a whole, IMO we should be thinking about how new features can integrate with the REST API from the outset of how that feature is being designed. It makes implementation a lot simpler that way and as everything in WP-Admin is moving to a React powered interface, necessary at the moment.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
In terms of use cases for Core, if we made this available in Gutenberg when editing the Privacy Policy page similar to some of the initial mockups for how that page could work in the Classic Editor, making that available over REST would vastly simplify the implementation.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The same is true for plugin authors who are building tools. And as I mentioned earlier, I think this would be great functionality for external systems like Iubenda.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I also do think there is privacy data that would make sense to make public, for instance this could serve as the source of truth for cookies. That would be useful to access on the front-end to build a cookie consent screen.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #44332 (Hook retreive_password (depricated) should be removed) closed</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:43:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/44332#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/44332#comment:4/1599396205409043</guid>
      <description>worksforme: &lt;p&gt;
It seems it was already handled by Sergey 10 months ago in &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/48255" title="#48255: defect (bug): Consistent deprecation of action and filter hooks (closed: fixed)"&gt;#48255&lt;/a&gt; so it's good we can close this ticket.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #49102 (Multisite: removed_user_from_blog hook) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:39:10 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49102#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49102#comment:11/1599395950573446</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51188 (Website user level consent management framework (logged in users)) updated</title>
      
        <dc:creator>carike</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:28:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51188#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51188#comment:17/1599395338096039</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51188#comment:16" title="Comment 16"&gt;paapst&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
to facilitate the communication between the existing consent management systems such as Cookiebot, Complianz or GDPR Cookie Consent, and plugins or themes that place cookies or that make use of local storage or other resources. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I cannot support the idea of creating a functionality in Core to benefit a handful of plugins.&lt;br /&gt;
In such a case, it is more suitable for the plugins who wish to use a common framework, to either recommend / require the Consent API plugin in its current form, or to bundle it into their .zip &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49399 (wp_get_users_with_no_role() does not handle user roles which contain ...) updated</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:18:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49399#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49399#comment:4/1599394737967293</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
Hello guys, I have uploaded a patch to fix the issue. It also contains a dedicated unit test. Thanks for your help @chillbram&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>49399.1.patch attached to Ticket #49399</title>
      
        <dc:creator>Mista-Flo</dc:creator>

      <pubDate>Sun, 06 Sep 2020 12:18:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/49399/49399.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/49399/49399.1.patch/1599394682852552</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #48710 (PDF uploads are treated like images: empty alt attribute and PHP notices) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 11:50:21 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/48710#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/48710#comment:18/1599393021456974</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt;, &lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49459 (Allow Ctrl+Y redo in post editor) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 11:39:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49459#comment:12</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49459#comment:12/1599392386626399</guid>
      <description>&lt;p&gt;
Noting that there's an equivalent issue on the Gutenberg Github repo, see &lt;a class="ext-link" href="https://github.com/WordPress/gutenberg/issues/8921"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/gutenberg/issues/8921&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #49459 (Allow Ctrl+Y redo in post editor) updated</title>
      
        <dc:creator>afercia</dc:creator>

      <pubDate>Sun, 06 Sep 2020 11:36:51 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/49459#comment:11</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/49459#comment:11/1599392211871378</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>51256.patch attached to Ticket #51256</title>
      
        <dc:creator>kishanjasani</dc:creator>

      <pubDate>Sun, 06 Sep 2020 09:53:39 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51256/51256.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51256/51256.patch/1599386019952367</guid>
      <description>&lt;p&gt;
Add a validation to restrict same ID generation
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #51259 (wordpress 5.5 saves page but doesn't show update and cleared cache not ...) closed</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Sun, 06 Sep 2020 08:42:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51259#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51259#comment:1/1599381743128048</guid>
      <description>invalid: &lt;p&gt;
Hello @Serendipity823 &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Welcome to WordPress Trac! Thanks for the ticket.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I'm sorry to hear you are having issues with your website. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
May any plugin or theme conflict issue over here. First can you please take backup of website and after that please try with deactivate plugin and check? Else please post your question here: &lt;a class="ext-link" href="https://wordpress.org/support/forum/how-to-and-troubleshooting/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://wordpress.org/support/forum/how-to-and-troubleshooting/&lt;/a&gt;&lt;br /&gt;
Trac is specifically for reporting reproducible bugs in Core.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The awesome forum volunteers may be able to help you to troubleshoot your issue.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Going to close this ticket for the Core team's workflow.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Thanks,&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #51092 (Create a JSON schema for Privacy and Other Related Disclosures) updated</title>
      
        <dc:creator>azaozz</dc:creator>

      <pubDate>Sun, 06 Sep 2020 08:36:28 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51092#comment:33</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51092#comment:33/1599381388707629</guid>
      <description>&lt;p&gt;
Replying to &lt;a class="ticket" href="http://core.trac.wordpress.org/ticket/51092#comment:32" title="Comment 32"&gt;TimothyBlynJacobs&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As I understand it, the point is to create a superset of facts about how a plugin handles user data, makes external API requests and other privacy related info.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, this should include &lt;strong&gt;only&lt;/strong&gt; privacy related data that is considered public.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The Core part is more about standardizing a data format so that plugins, and perhaps Core, can implement functionality based on the laws of the region the site adheres to. As well as making sure that data is disclosed to the site owner in an easy to understand way.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right again, the data should be disclosed &lt;strong&gt;only&lt;/strong&gt; to the site owner(s) on a per-site basis.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
This can really only work if the standard is in Core to give the best potential at plugin adoption.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The current system we have in place is freeform, and I don't think has proven to be very successful. Plugin authors aren't lawyers, but are practically being asked to write up "legal" privacy policy information that the site user then needs to figure out a way to cobble into a legal document of their own.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right. This ensures each site owner can decide (or hire a lawyer if needed) what their Privacy Policy should contain, and bear the legal responsibility for it.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
By making the privacy data as fact based as possible, it reduces the burden on plugin authors who want to provide this information.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, perhaps. Looking at the examples above, a lot of points are not particularly clear, but thinking this can be improved?&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
It'd also allow for plugins or other tools to compile comprehensive privacy policies and other documents based on the structured information.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Wrong. Privacy policies &lt;strong&gt;cannot&lt;/strong&gt; be compiled by "(other) tools". They have to be written by people or businesses/companies who will be legally responsible for the content.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
As you mentioned, Core is pretty simple. As I understand it, the main audience here is plugin developers. So eventually data can be displayed in the admin and on the WordPress.org plugin page.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, this is a good idea. However the example "schema" above has a lot of things that don't seem "privacy related", needs more work.&lt;br /&gt;
 &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
For Core, it could be validated when the data needs to be accessed on the privacy page. For .org, I imagine it'd validate when zips are built.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So we will need to maintain/sync two different "schemas", one in core and another on wp.org. Then plugins will be "forced" to include a (json formatted) file that will have to contain all the "required fields" or will be marked as "failed", even when they do not contain any user privacy related stuff? That seems... not ideal.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What happens when the validation fails? The plugin supplying the data is... rejected (deleted, disabled, or... rejected how)?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think this is mainly for @carike. But I think the idea is just that the plugin would show as having an incomplete or invalid privacy disclosures. I don't think the idea currently is, and probably never would be, for Core to completely forbid plugins from operating unless they have complete disclosure data. I imagine there would probably be plugins that do implement something like that.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yeah, this needs more thinking imho. The majority of plugins have nothing to do with user privacy.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
I think it is still necessary to have in Core to handle the plugins that don't live in the WordPress.org directory. Having a JSON Schema in Core also gives us versioning tied to WordPress releases. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, the question of syncing the schema between wp.org and core...&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
What happens then the schema needs to be changed? Re-validation?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If we do need to cache validation status, yeah we could re-validate that in a fairly straightforward way I think.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Even if not cached, the validation will (likely) fail every time the schema is updated. Then all existing plugins will "fail"...&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Generally (continuously) validating static, non-editable files in core seems... unwise?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Which files would that be?&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The static json files supplied by plugins. But yeah, probably not a huge deal if these are not going to be accessed often. As far as I see it, on most sites these might be accessed 1-2 times per year, or less :) &lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
quite a bit of the data seems "sensitive", i.e. only admins should be able to see it. &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In what way? As I understand it, the idea is that this data would be displayed publicly on WordPress.org.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Making the data supplied by plugins "public" on a specific site will at least disclose which plugins that site is using. This in itself can be seen as a "privacy breach", can be used for "fingerprinting", the plugin's versions will probably be "guessable" from the data, etc. :)&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
So at best this should be a page under the Plugins and Themes menu items in wp-admin accessible only to site admins, or perhaps a "More Info" link for each plugin and theme.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think it would be guarded the same way we guard the Privacy Settings page already.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Right, so the data contained in the plugin's json files would be "private" (on a per site basis) and only site owners will be able to see it? (Only the site owners will need to see it anyways as it is intended for creating a Privacy Policy). Or am I reading this wrong?&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
The point is: whether this should be available through REST API should be decided after the implementation details and UI are ready, not before.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
How is the REST API not a part of the implementation discussion? Ignoring the REST API until the last second and seeing it as merely a simple data transport mechanism is how we continuously get into trouble.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It's not that it is not a part of it but... Would you add an end point to output /readme.txt or /license.txt? Does it make sense from "restful" point of view? What's the point of having that in the REST API (considering that this data would be very rarely accessed and used only by site owners/users with the highest permissions).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
As far as I understand it the (compiled) data from all the plugins json files can be outputted by the REST API, in case a plugin might want to replace the (proposed) page in wp-admin (instead of extending it), but... At the end this is the same like outputting all the data for the Comments page for example, just because a plugin might eventually decide to replace it? Seems WP may get there one day but...?&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51062 (Twenty Fifteen: PHP Warning: Illegal string offset 'height') reopened</title>
      
        <dc:creator>Hareesh Pillai</dc:creator>

      <pubDate>Sun, 06 Sep 2020 07:41:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51062#comment:6</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51062#comment:6/1599378085312854</guid>
      <description>&lt;p&gt;
Attached patch 51062.diff checks if the offset is set, else falls back to 0.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>reopenedticket</category>
    </item><item>
      <title>51062.diff attached to Ticket #51062</title>
      
        <dc:creator>Hareesh Pillai</dc:creator>

      <pubDate>Sun, 06 Sep 2020 07:31:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51062/51062.diff</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51062/51062.diff/1599377505484513</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>peterwilsoncc</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:30:25 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:21</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:21/1599366625359547</guid>
      <description>&lt;p&gt;
I've created a new PR with a different slightly different approach to account for how term counting currently works in Core.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Both approaches are currently a little broken, off-by-one errors, but I think the revised approach is an improvement in terms of maintaining backward compatibility. The new PR is at &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/519"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://github.com/WordPress/wordpress-develop/pull/519&lt;/a&gt;, comments on it would be dandy.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:23:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:18</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:18/1599366227520698</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48950" title="Tests: Add a test case for storing `false` in the cache.
Follow-up to ..."&gt;48950&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Add a test case for storing &lt;code&gt;false&lt;/code&gt; in the cache.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48949" title="Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.
It is ..."&gt;[48949]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48950]: Tests: Add a test case for storing `false` in the cache.  Follow-up to ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:23:46 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48950</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48950/1599366226414568</guid>
      <description>&lt;p&gt;
Tests: Add a test case for storing &lt;code&gt;false&lt;/code&gt; in the cache.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;, &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48949" title="Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.
It is ..."&gt;[48949]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>aimutch</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:18:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:16/1599365880171351</guid>
      <description>&lt;p&gt;
I would also note that if you set up a free site at WordPress.com, when comments are enabled, there's no field website field available. Looks like the people managing that side of the operation have come to the conclusion that the upside of allowing that is far outweighed by the downside of disabling it by default. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>aimutch</dc:creator>

      <pubDate>Sun, 06 Sep 2020 04:06:58 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:15/1599365218504563</guid>
      <description>&lt;p&gt;
It's not just that receiving spam comments is "disappointing and annoying". It's that the links in these comments lead back to sites serving up malware or spammy content to unsuspecting site visitors/owners. It's easy to find unprotected WordPress sites where the comments on every article are nothing but these spam comments. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Also, this spam creates a tremendous amount of unnecessary overhead on the sites. I help manage a handful of WordPress sites and even these sites with a fairly low level of traffic are bombarded by spam comments. One site I just checked averaged 1000 spam comments a month. Without fail, every comment flagged by Akismet has the website field completed. Once I blocked this field, the spam comments dropped almost immediately to zero. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Whatever benefit came from this in the past is now outweighed by the massive amount of malware and spam being propagated thanks to WordPress sites. As I said before, someone on the WP side should do an analysis of this. It should be quickly obvious that keeping this field in place is doing far more harm than good. &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:36:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:17</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:17/1599363360611348</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48949" title="Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.
It is ..."&gt;48949&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_add_get_null()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
It is possible to store &lt;code&gt;null&lt;/code&gt; in the cache without it being converted to an empty string.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props johnbillion, SergeyBiryukov.&lt;br /&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48949]: Tests: Correct assertion in `Tests_Cache::test_add_get_null()`.  It is ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:35:59 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48949</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48949/1599363359483577</guid>
      <description>&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_add_get_null()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
It is possible to store &lt;code&gt;null&lt;/code&gt; in the cache without it being converted to an empty string.
&lt;/p&gt;
&lt;p&gt;
Follow-up to &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Props johnbillion, SergeyBiryukov.
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:25:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:16</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:16/1599362732704887</guid>
      <description>&lt;ul&gt;&lt;li&gt;&lt;code&gt;Tests_Cache::test_miss()&lt;/code&gt; was added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/1/tests" title="move repo"&gt;[1/tests]&lt;/a&gt;. Object caching was introduced in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/3011" title="Object caching, round one."&gt;[3011]&lt;/a&gt;. As far as I can tell, &lt;code&gt;WP_Object_Cache::get()&lt;/code&gt; always returned &lt;code&gt;false&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt; for cache misses, so the test was never correct.
&lt;/li&gt;&lt;li&gt;&lt;code&gt;Tests_Cache::test_add_get_null()&lt;/code&gt; was added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/280/tests" title="Add extra object cache tests. Props Denis-de-Bernardy."&gt;[280/tests]&lt;/a&gt; and adjusted in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/327/tests" title="Fixes and cleanup in TestObjectCache and TestSSLLinks
 ..."&gt;[327/tests]&lt;/a&gt;. At the time, &lt;code&gt;null&lt;/code&gt; was indeed converted to an empty string due to this piece in &lt;code&gt;WP_Object_Cache::set()&lt;/code&gt;, added in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/3021" title="Add cache expiration.  Cache requests for non-existant options."&gt;[3021]&lt;/a&gt; and adjusted in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/6247" title="Allow single post ID and comma delimited list of post IDs to be passed ..."&gt;[6247]&lt;/a&gt;:
&lt;pre class="wiki"&gt;if (NULL === $data)
	$data = '';
&lt;/pre&gt;This was later removed in &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/20089" title="Fix NULL and FALSE in WP_Object_Cache and make found/not-found ..."&gt;[20089]&lt;/a&gt;, but the test was never updated.
&lt;/li&gt;&lt;/ul&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #51259 (wordpress 5.5 saves page but doesn't show update and cleared cache not ...) created</title>
      
        <dc:creator>Serendipity823</dc:creator>

      <pubDate>Sun, 06 Sep 2020 03:15:00 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/51259</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/51259/1599362100926464</guid>
      <description>&lt;p&gt;
I am trying to update the homepage of my site in the newest version of WordPress. The update is saved in the page since I pressed the publish button. However, the update is not reflected on the live site. I tested to see if a browser issue by checking on my smartphone, new browser, and incognito window--all are not showing the page update. Also, then I tried a number of different cache plugins none of them worked. After trying the caching plugins I went to clear the cache again and noting changed. I wonder if this has to do with the WP upgrade I did to version 5. I was on 4 previously which I preferred much better honestly at least from a UI standpoint. Anyone encounter any such issue? Of course I did google this, in case that doesn't go without saying.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #40351 (Term post re-counts scale poorly, are common and difficult to avoid) updated</title>
      
        <dc:creator>prbot</dc:creator>

      <pubDate>Sun, 06 Sep 2020 02:56:13 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/40351#comment:20</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/40351#comment:20/1599360973801940</guid>
      <description>&lt;i&gt;Keywords&lt;/i&gt; changed&lt;br/&gt;&lt;p&gt;
&lt;em&gt;This ticket was mentioned in &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/pull/519"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;PR #519&lt;/a&gt; on &lt;a class="ext-link" href="https://github.com/WordPress/wordpress-develop/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;WordPress/wordpress-develop&lt;/a&gt; by &lt;a class="ext-link" href="https://github.com/peterwilsoncc"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;peterwilsoncc&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
Completely revised approach to scaling term counting.&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;respects deferring of term counting
&lt;/li&gt;&lt;li&gt;replaces calls to the current functions with calls to new functions
&lt;/li&gt;&lt;li&gt;does not introduce new full count points
&lt;/li&gt;&lt;li&gt;terms added in &lt;code&gt;wp_insert_post()&lt;/code&gt; can be double counted (this was happening with the earlier approach too)
&lt;/li&gt;&lt;li&gt;has a single unit test to demonstrate the bug &amp;amp; prevent passing.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Trac ticket: &lt;a href="https://core.trac.wordpress.org/ticket/40351"&gt;https://core.trac.wordpress.org/ticket/40351&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #38266 (Tests: Use assertSame() when the type of the value in the assertion is ...) updated</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 02:51:47 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/38266#comment:15</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/38266#comment:15/1599360707094175</guid>
      <description>&lt;p&gt;
In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/48948" title="Tests: Correct assertion in `Tests_Cache::test_miss()`.
On failure to ..."&gt;48948&lt;/a&gt;:&lt;br /&gt;
&lt;/p&gt;
&lt;div class="message"&gt;&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_miss()&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
On failure to retrieve contents, &lt;code&gt;WP_Object_Cache::get()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
The test only passed accidentally due to &lt;code&gt;assertEquals()&lt;/code&gt; not performing a strict type check.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Props johnbillion.&lt;br /&gt;
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>Changeset [48948]: Tests: Correct assertion in `Tests_Cache::test_miss()`.  On failure to ...</title>
      
        <dc:creator>SergeyBiryukov</dc:creator>

      <pubDate>Sun, 06 Sep 2020 02:51:45 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/48948</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/48948/1599360705976644</guid>
      <description>&lt;p&gt;
Tests: Correct assertion in &lt;code&gt;Tests_Cache::test_miss()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
On failure to retrieve contents, &lt;code&gt;WP_Object_Cache::get()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The test only passed accidentally due to &lt;code&gt;assertEquals()&lt;/code&gt; not performing a strict type check.
&lt;/p&gt;
&lt;p&gt;
Props johnbillion.
See &lt;a class="accepted ticket" href="http://core.trac.wordpress.org/ticket/38266" title="#38266: task (blessed): Tests: Use assertSame() when the type of the value in the assertion is ... (accepted)"&gt;#38266&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>jeremyfelt</dc:creator>

      <pubDate>Sun, 06 Sep 2020 01:57:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:14</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:14/1599357469811357</guid>
      <description>&lt;p&gt;
I appreciate that receiving spam comments can be disappointing and annoying to deal with. However, as WordPress remains a strong tool for the open web, I (maybe naively) still think that encouraging conversation on blogs and encouraging people to leave a link to their blog as part of those conversations are important pieces of the open web.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Options exist to either disable comments entirely, to remove the URL field through plugins like the ones @SergeyBiryukov &lt;a href="https://core.trac.wordpress.org/ticket/47926#comment:2"&gt;mentions above&lt;/a&gt;, and it is possible to create themes that do not display comments in different ways or not at all.&lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>51249.1.patch attached to Ticket #51249</title>
      
        <dc:creator>Laxman Prajapati</dc:creator>

      <pubDate>Sun, 06 Sep 2020 01:26:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/51249/51249.1.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/51249/51249.1.patch/1599355583447279</guid>
      <description>&lt;p&gt;
As per CSS coding standards, We have updated the patch. o, Can you please ignore "51249.patch" this one and please consider the correct solution is "51249.1.patch" this one.
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>d_folders.patch attached to Ticket #39265</title>
      
        <dc:creator>patopaiar</dc:creator>

      <pubDate>Sun, 06 Sep 2020 00:55:34 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/39265/d_folders.patch</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/39265/d_folders.patch/1599353734285237</guid>
      <description>&lt;p&gt;
Adds @covers to folders starting with d: date, db and dependencies
&lt;/p&gt;
</description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #47926 (Disable website field in comment section) updated</title>
      
        <dc:creator>aimutch</dc:creator>

      <pubDate>Sun, 06 Sep 2020 00:54:55 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/47926#comment:13</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/47926#comment:13/1599353695155410</guid>
      <description>&lt;p&gt;
The responses to this appears to fall into the old "we've always done it this way" trap without thinking about why it was done that way originally or whether it makes sense to continue to include it. I did a quick search on Google and found articles going back to at least 2011 of people asking how to disable this field because of the volume of spam it generates through WordPress sites. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
I suspect that an analysis would find that this is the number one generator of spam on WordPress sites. And to what end? Is this a feature of the standard comment field that people clamor to have? No. If it went away or was disabled by default, would anyone miss it? Very few people I suspect. But because someone thought it was a good idea to have this field 1000 WordPress years ago, we're stuck having to install a plugin to disable a form field that serves very little purpose and exposes WordPress sites and their visitor to all kinds of bad content. &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Isn't it time to have a discussion of whether this is worth all the problems that this form field causes? &lt;br /&gt;
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>