<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>WordPress Trac</title>
    <link>http://core.trac.wordpress.org/timeline</link>
    <description>Trac Timeline</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>WordPress Trac</title>
      <url>http://core.trac.wordpress.org/chrome/site/your_project_logo.png</url>
      <link>http://core.trac.wordpress.org/timeline</link>
    </image>
    <item>
      <title>Ticket #2654 (Why not store dbx states in usermeta?) updated</title>
      
        <dc:creator>ajd777</dc:creator>

      <pubDate>Sat, 28 Jul 2007 23:23:50 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/2654#comment:5</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/2654#comment:5/1185665030000000</guid>
      <description>&lt;p&gt;
I like the idea, but I think it is kinda a waste to send a new request for every open/close. It might be a better to save the content of the cookie into the user meta when the page changes and the user meta is accessed.
&lt;/p&gt;
&lt;p&gt;
It really doesn't need to be saved with every open/close because the user won't see the effects of it until the page is loaded again anyway, and if the information is somehow lost, it isn't critical data.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4680 (If post contains text "delete from" it won't be saved) closed</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jul 2007 17:57:15 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4680#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4680#comment:1/1185645435000000</guid>
      <description>invalid: &lt;p&gt;
This is likely caused by you host running &lt;a class="ext-link" href="http://www.modsecurity.org/"&gt;&lt;span class="icon"&gt;â€‹&lt;/span&gt;mod_security&lt;/a&gt; which is trying to block sql injection attacks.
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Ticket #4680 (If post contains text "delete from" it won't be saved) created</title>
      
        <dc:creator>gennadiy_l</dc:creator>

      <pubDate>Sat, 28 Jul 2007 17:49:57 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4680</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4680/1185644997000000</guid>
      <description>&lt;p&gt;
If a post contains text "delete from" and you will try to save it you will get 404 error.
&lt;/p&gt;
&lt;p&gt;
It could be just "...press 'Delete from disk' button..." for example.
&lt;/p&gt;
&lt;p&gt;
I am not sure but I think it is related to "delete from" SQL statement.
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #4678 (PostgreSQL support ( patch included )) updated</title>
      
        <dc:creator>westi</dc:creator>

      <pubDate>Sat, 28 Jul 2007 14:38:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4678#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4678#comment:3/1185633503000000</guid>
      <description>&lt;p&gt;
I have to agree with Otto42 here.
&lt;/p&gt;
&lt;p&gt;
This can't go into the core as-is due to its dependancy on the php mysql not being loaded. It at least needs some function-exists checks.
&lt;/p&gt;
&lt;p&gt;
It would be much better implemented as a wp-db.php plugin as that is the way in which WordPress supports alternative db access.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4678 (PostgreSQL support ( patch included )) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Sat, 28 Jul 2007 12:41:05 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4678#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4678#comment:2/1185626465000000</guid>
      <description>&lt;p&gt;
Wouldn't it be better to simply create a wpdb class of your own and put it in wp-content/db.php ? This will then prevent the wp-db.php from loading at all, and it will load your class instead. All you have to do then is to make all the wpdb functions work for whatever database you prefer.
&lt;/p&gt;
&lt;p&gt;
Doing it this way also bypasses the mysql check in settings.php. It's a simpler way to go, seems to me. No core hacks or patches required.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4679 (the_content() vs. the_excerpt() - apply different filters to posts ...) created</title>
      
        <dc:creator>fuggi</dc:creator>

      <pubDate>Sat, 28 Jul 2007 08:00:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4679</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4679/1185609649000000</guid>
      <description>&lt;p&gt;
There is a problem with the way that WP handles the excerpt for posts, that do not have a excerpt text specified.
&lt;/p&gt;
&lt;p&gt;
In this case WP applies the wp_trim_excerpt function via default filter which takes the posts content (get_the_content), applies the_content filters and then removes HTML etc.
&lt;/p&gt;
&lt;p&gt;
So this means, that those excerpts will always have the filters for the_content applied and there is now way to prevent it from doing that to have different filters for the_content and the_excerpt (except from writing an excerpt of course).
&lt;/p&gt;
&lt;p&gt;
It would make more sense if WP would not apply the filters for the_content in this case, so that plugin developers have the possibility to apply an other filter to the posts when displayed in the excerpt than when displayed as post. Plugin designers who want to add their action to both content and excerpt (if no own excerpt is written) should have the possibility to add a filter to get_the_content instead.
&lt;/p&gt;
&lt;p&gt;
My plugin WP-Simpleviewer adds a Flash based gallery posts - and when these posts are viewed with the_excerpt() they show up with some javascript/html looking content, however I would like to show something like "Read the whole post to see the gallery".
&lt;/p&gt;
&lt;p&gt;
So IMHO what has to be done is to add the possibility to add filters to get_the_content (according to the codex this does not work yet) and to remove the commented line from function wp_trim_excerpt(formatting.php):
&lt;/p&gt;
&lt;pre class="wiki"&gt;$text = get_the_content('');
//$text = apply_filters('the_content', $text);
$text = str_replace(']]&amp;gt;', ']]&amp;amp;gt;', $text);
&lt;/pre&gt;</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #4678 (PostgreSQL support ( patch included )) updated</title>
      
        <dc:creator>foolswisdom</dc:creator>

      <pubDate>Fri, 27 Jul 2007 22:31:17 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4678#comment:1</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4678#comment:1/1185575477000000</guid>
      <description>&lt;i&gt;Milestone&lt;/i&gt; changed&lt;br/&gt;</description>
      <category>editedticket</category>
    </item><item>
      <title>mysql2pgsql.php attached to Ticket #4678</title>
      
        <dc:creator>usleepless</dc:creator>

      <pubDate>Fri, 27 Jul 2007 21:31:53 GMT</pubDate>
      <link>http://core.trac.wordpress.org/attachment/ticket/4678/mysql2pgsql.php</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/attachment/ticket/4678/mysql2pgsql.php/1185571913000000</guid>
      <description></description>
      <category>attachment</category>
    </item><item>
      <title>Ticket #4678 (PostgreSQL support ( patch included )) created</title>
      
        <dc:creator>usleepless</dc:creator>

      <pubDate>Fri, 27 Jul 2007 21:31:03 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4678</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4678/1185571863000000</guid>
      <description>&lt;p&gt;
this is a patch to make WP 2.2.1 PostgreSQL compatible.
&lt;/p&gt;
&lt;p&gt;
to make it work:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;edit wp-includes/wp-db.php
add "require_once('mysql2pgsql.php') at the top
&lt;/li&gt;&lt;li&gt;save the attached mysql2pgsql.php to wp-includes
&lt;/li&gt;&lt;li&gt;edit wp-settings.php and remove the MySQL not included warning/die check
&lt;/li&gt;&lt;li&gt;make sure your php doesn't load the mysql client/module
&lt;/li&gt;&lt;li&gt;create a new database ( createdb wordpress ), edit your wp-config.php and complete the wp-installion process
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
afaik, there are no problems.
&lt;/p&gt;
&lt;p&gt;
this is "a" solution to the multiple database support "problem".
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;this patch redefines the mysql_* calls: it would be better to use the PEAR db-wrapper class for example
&lt;/li&gt;&lt;li&gt;this patch manipulates the SQL. stuff can be learned from this though:
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;using "SHOW TABLES" to check if WP is already installed is MySQL specific: trying to "SELECT * FROM wp_posts LIMIT 1" is not.
&lt;/li&gt;&lt;li&gt;a couple of queries use the "`" character for no reason whatsoever
&lt;/li&gt;&lt;li&gt;datatypes: some translation will always be necessary ( text/memo fields for example ). but is using "longtext &amp;amp; mediumtext &amp;amp; tinytext" really sensible? or int(11), int(4), bigint(20) and tinyint(1) ?
&lt;/li&gt;&lt;li&gt;almost all of the schema is lowercase: there are some table using capitals for fields containing "ID". let's get rid of them ( this is probably really pg-speficic )
&lt;/li&gt;&lt;li&gt;there are MySQL specific "IGNORE" qualifiers in INSERT statements. what are they good for? let's get rid of them
&lt;/li&gt;&lt;li&gt;in the db-installation procedure, inserts are performed on tables with auto_increment fields, specifying this very field ( wp_categories, wp_post2cat ). trust the auto_increment, remove the values for the auto_increment fields. this confuses pgsql
&lt;/li&gt;&lt;li&gt;SQL_FOUND_ROWS &amp;amp; FOUND_ROWS() is MySQL specific. i have replaced them with dummy's and didn't notice any difference. let's work around this
&lt;/li&gt;&lt;li&gt;MySQL specific LIMIT syntax is used. let's use ISO "LIMIT x OFFSET y".
&lt;/li&gt;&lt;li&gt;there is seemingly useless use of "GROUP BY" in some statements. let's get rid of them (pgsql complains)
&lt;/li&gt;&lt;li&gt;using "!=" is not ISO afaik. let's write "&amp;lt;&amp;gt;" instead
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
if these suggestions are implemented, WP can be made multiple DB compatible quite easily ( mysql, pgsql, mssql, db2 etc. whatever PHP supports )
&lt;/p&gt;
&lt;p&gt;
i am willing to contribute time &amp;amp; patches to make this work.
&lt;/p&gt;
&lt;p&gt;
regards,
&lt;/p&gt;
&lt;p&gt;
usleep
&lt;/p&gt;
</description>
      <category>newticket</category>
    </item><item>
      <title>Ticket #4607 (ABSPATH already has a trailing slash) closed</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jul 2007 21:28:02 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4607#comment:2</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4607#comment:2/1185571682000000</guid>
      <description>fixed: &lt;p&gt;
(In &lt;a class="changeset" href="http://core.trac.wordpress.org/changeset/5820" title="ABSPATH already has a trailing slash.  Props Nazgul.  fixes #4607"&gt;[5820]&lt;/a&gt;) ABSPATH already has a trailing slash.  Props Nazgul.  fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/4607" title="#4607: enhancement: ABSPATH already has a trailing slash (closed: fixed)"&gt;#4607&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>closedticket</category>
    </item><item>
      <title>Changeset [5820]: ABSPATH already has a trailing slash.  Props Nazgul.  fixes #4607</title>
      
        <dc:creator>markjaquith</dc:creator>

      <pubDate>Fri, 27 Jul 2007 21:28:01 GMT</pubDate>
      <link>http://core.trac.wordpress.org/changeset/5820</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/changeset/5820/1185571681866347</guid>
      <description>&lt;p&gt;
ABSPATH already has a trailing slash.  Props Nazgul.  fixes &lt;a class="closed ticket" href="http://core.trac.wordpress.org/ticket/4607" title="#4607: enhancement: ABSPATH already has a trailing slash (closed: fixed)"&gt;#4607&lt;/a&gt;
&lt;/p&gt;
</description>
      <category>changeset</category>
    </item><item>
      <title>Ticket #4620 (Post status transition actions) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Fri, 27 Jul 2007 18:10:49 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4620#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4620#comment:3/1185559849000000</guid>
      <description>&lt;p&gt;
publish_post is being added in default_filters, but not being called by anything. There's no do_action('publish_post') in all of trunk.
&lt;/p&gt;
&lt;p&gt;
Was this supposed to do something?
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4677 (Automatic REPAIR TABLE tablename after MySQL error 127) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Fri, 27 Jul 2007 16:23:23 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4677#comment:4</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4677#comment:4/1185553403000000</guid>
      <description>&lt;p&gt;
Well, okay, so that &lt;code&gt;extract($vars, EXTR_OVERWRITE);&lt;/code&gt; is wrong. Still, you could do it with a loop or something. Just need to make it get all of the variables set in the new object.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item><item>
      <title>Ticket #4677 (Automatic REPAIR TABLE tablename after MySQL error 127) updated</title>
      
        <dc:creator>Otto42</dc:creator>

      <pubDate>Fri, 27 Jul 2007 16:21:32 GMT</pubDate>
      <link>http://core.trac.wordpress.org/ticket/4677#comment:3</link>
      <guid isPermaLink="false">http://core.trac.wordpress.org/ticket/4677#comment:3/1185553292000000</guid>
      <description>&lt;p&gt;
You could do this with a plugin. You'll need to extend the $wpdb class to do it. I have not tested any of this, of course...
&lt;/p&gt;
&lt;pre class="wiki"&gt;class my_wpdb extends wpdb {
	// override the print_error function
	function print_error($str = '') {
		if (mysql_errno($this-&amp;gt;dbh) == 127 ) {
			// do REPAIR TABLE or whatever
		}
		else {
			parent::print_error($str);
		}
	}
	// copy constructor to handle the annoying missing table variables problem
	function my_wpdb($old_wpdb) {
		// casting an object to an array returns the vars in the object
		// in the array.. so $vars['posts']='wp_posts'. Handy, no?
		$vars = (array)$old_wpdb;
		extract($vars, EXTR_OVERWRITE);
	}
}
// create a new object for the database
$my_wpdb = new my_wpdb($wpdb);
// assign it back to the main database
$wpdb = $my_wpdb;
&lt;/pre&gt;&lt;p&gt;
That should work, I think. Should work in a plugin too. But of course, it won't work if you get the 127 error before the plugins get loaded.
&lt;/p&gt;
</description>
      <category>editedticket</category>
    </item>
   </channel>
</rss>